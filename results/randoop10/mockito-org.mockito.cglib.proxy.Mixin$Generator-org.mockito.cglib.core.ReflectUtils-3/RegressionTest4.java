import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("org/mockito/asm/Type");
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setDisplayName("(JFIF)J");
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strEnumeration16);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator13.getStrategy();
        boolean boolean16 = generator13.getAttemptLoad();
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generatorStrategy18);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("I", method21, method22);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor23.getPropertyEditorClass();
        java.lang.Object obj26 = propertyDescriptor23.getValue("LZ;");
        java.lang.String str27 = propertyDescriptor23.getShortDescription();
        boolean boolean28 = propertyDescriptor23.isPreferred();
        java.lang.String str29 = propertyDescriptor23.getDisplayName();
        propertyDescriptor23.setShortDescription("[Ljava/lang/String;");
        boolean boolean32 = generatorStrategy18.equals((java.lang.Object) "[Ljava/lang/String;");
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "I" + "'", str27, "I");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "I" + "'", str29, "I");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray10 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray10);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray14);
        java.lang.String[] strArray22 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray26);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) strArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setUseCache(false);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type38, type39 };
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("hi!", type35, typeArray40);
        generator31.setDelegates((java.lang.Object[]) typeArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = mixin30.newInstance((java.lang.Object[]) typeArray40);
        java.lang.ClassLoader classLoader44 = null;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type51, type52 };
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("hi!", type48, typeArray53);
        org.mockito.cglib.core.Signature signature55 = new org.mockito.cglib.core.Signature("B", type46, typeArray53);
        org.mockito.asm.Type[] typeArray56 = signature55.getArgumentTypes();
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) typeArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin43.newInstance((java.lang.Object[]) typeArray56);
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("B", type7, typeArray56);
        int int60 = type7.getSort();
        org.mockito.asm.Type type61 = type7.getElementType();
        int int62 = type7.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type16, type17 };
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("hi!", type13, typeArray18);
        org.mockito.asm.Type type20 = signature19.getReturnType();
        boolean boolean21 = namingPolicy3.equals((java.lang.Object) type20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        int int23 = type22.getSort();
        boolean boolean24 = namingPolicy3.equals((java.lang.Object) type22);
        boolean boolean26 = namingPolicy3.equals((java.lang.Object) 16);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        byte[] byteArray2 = new byte[] { (byte) -1 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(JFIF)Z; shortDescription=[Ljava/lang/String;; bound]", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        generator5.setClasses(classArray16);
        java.lang.ClassLoader classLoader20 = generator5.getClassLoader();
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) typeArray22);
        java.lang.ClassLoader classLoader24 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        boolean boolean27 = generator25.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        boolean boolean32 = namingPolicy30.equals((java.lang.Object) "I");
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean34 = namingPolicy30.equals((java.lang.Object) type33);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray37 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray37);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray41 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray41);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray41);
        java.lang.String[] strArray49 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray52 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray52);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray53);
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray53);
        boolean boolean57 = namingPolicy30.equals((java.lang.Object) strArray36);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) strArray36);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) strArray36);
        generator0.setClassLoader(classLoader20);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin61 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 37);
        java.lang.String str40 = methodInfo39.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<init>()V" + "'", str40, "<init>()V");
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean3 = namingPolicy1.equals((java.lang.Object) type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        boolean boolean12 = namingPolicy1.equals((java.lang.Object) signature11);
        java.lang.String str13 = signature11.getName();
        java.lang.String str14 = signature11.getDescriptor();
        java.lang.String str15 = signature11.getName();
        org.mockito.asm.Type[] typeArray16 = signature11.getArgumentTypes();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(JFIF)V" + "'", str14, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(typeArray16);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("ava.beans.PropertyDescriptor[name=boolean");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("B", "void");
        java.lang.Class<?> wildcardClass3 = signature2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.util.List list5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list6 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass3, list5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getUseCache();
        boolean boolean18 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader6 = null;
        generator1.setClassLoader(classLoader6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator1.getNamingPolicy();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]");
        boolean boolean11 = namingPolicy8.equals((java.lang.Object) type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.lang.String str16 = classInfo15.toString();
        java.lang.String str17 = classInfo15.toString();
        org.mockito.asm.Type type18 = classInfo15.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo15.getInterfaces();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type10, typeArray19);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("boolean", method22, method23);
        propertyDescriptor24.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor24.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor24.setHidden(false);
        java.lang.Class<?> wildcardClass31 = propertyDescriptor24.getPropertyEditorClass();
        propertyDescriptor24.setConstrained(false);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor24.getPropertyType();
        propertyDescriptor24.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        boolean boolean39 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator37.getStrategy();
        generator37.setStyle(2);
        java.beans.PropertyEditor propertyEditor44 = propertyDescriptor24.createPropertyEditor((java.lang.Object) generator37);
        boolean boolean45 = signature20.equals((java.lang.Object) propertyDescriptor24);
        java.lang.String str46 = signature20.getName();
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type" + "'", str16, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNull(propertyEditor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]" + "'", str46, "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]");
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=I; displayName=java.beans.PropertyDescriptor[name=boolean; bound]; hidden; propertyEditorClass=class org.mockito.asm.Type]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("B", type4, typeArray11);
        org.mockito.asm.Type type14 = signature13.getReturnType();
        boolean boolean15 = namingPolicy2.equals((java.lang.Object) signature13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator18.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator18.getNamingPolicy();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        generator18.setClassLoader(classLoader23);
        boolean boolean25 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator18.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = namingPolicy2.getClassName("Lorg/mockito/asm/Type;", "long", (java.lang.Object) namingPolicy26, predicate27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray3);
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        int int9 = type8.getSize();
        java.lang.String str10 = type8.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type16, type17 };
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("hi!", type13, typeArray18);
        org.mockito.asm.Type type20 = signature19.getReturnType();
        java.lang.String str21 = type20.getClassName();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean27 = namingPolicy25.equals((java.lang.Object) type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) type29);
        java.lang.String str31 = type29.getDescriptor();
        boolean boolean32 = namingPolicy25.equals((java.lang.Object) str31);
        generator22.setNamingPolicy(namingPolicy25);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray36 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray36);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray40 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray39, methodArray40);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray40);
        java.lang.String[] strArray48 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray51 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray50, methodArray51);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray52);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray52);
        generator22.setDelegates((java.lang.Object[]) methodArray55);
        generator22.setAttemptLoad(false);
        boolean boolean59 = type20.equals((java.lang.Object) false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type62, type63, type64, type65 };
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("hi!", type61, typeArray66);
        org.mockito.asm.Type type68 = signature67.getReturnType();
        java.lang.String str69 = type68.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type74, type75, type76, type77 };
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("hi!", type73, typeArray78);
        org.mockito.cglib.core.Signature signature80 = new org.mockito.cglib.core.Signature("B", type71, typeArray78);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray78);
        org.mockito.cglib.core.Signature signature82 = new org.mockito.cglib.core.Signature("LZ;", type20, typeArray78);
        java.lang.Class[] classArray83 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray78);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray4, (java.lang.Object[]) typeArray78);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "S" + "'", str10, "S");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "void" + "'", str21, "void");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Z" + "'", str31, "Z");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "void" + "'", str69, "void");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(JFIF)V" + "'", str81, "(JFIF)V");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(JFIF)S" + "'", str84, "(JFIF)S");
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        boolean boolean8 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.String[] strArray7 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray10 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray10);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray13);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        generator0.setDelegates((java.lang.Object[]) classArray13);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) propertyDescriptorArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/String;" + "'", str6, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        java.lang.String str41 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 19);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("boolean", method45, method46);
        java.lang.Class<?> wildcardClass48 = propertyDescriptor47.getPropertyEditorClass();
        java.lang.String str49 = propertyDescriptor47.getName();
        java.lang.reflect.Method method50 = null;
        propertyDescriptor47.setWriteMethod(method50);
        propertyDescriptor47.setPreferred(false);
        java.lang.reflect.Method method54 = null;
        propertyDescriptor47.setWriteMethod(method54);
        boolean boolean56 = propertyDescriptor47.isHidden();
        java.lang.Object obj58 = propertyDescriptor47.getValue("[Ljava/lang/String;");
        java.lang.String str59 = propertyDescriptor47.getShortDescription();
        propertyDescriptor47.setBound(true);
        boolean boolean62 = methodInfo43.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "()V" + "'", str41, "()V");
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean3 = namingPolicy1.equals((java.lang.Object) type2);
        java.lang.String str4 = type2.getDescriptor();
        java.lang.String str5 = type2.toString();
        int int7 = type2.getOpcode(102);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "D" + "'", str4, "D");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "D" + "'", str5, "D");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 105 + "'", int7 == 105);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray25);
        java.lang.String[] strArray33 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray36 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray37);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray37);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray48);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray49);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray53 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray53);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray53);
        org.mockito.cglib.core.Predicate predicate56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = namingPolicy15.getClassName("java/lang/Object", "void", (java.lang.Object) methodArray55, predicate56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(methodArray55);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("LI;", "LI;");
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        boolean boolean11 = signature8.equals((java.lang.Object) generator9);
        java.lang.String[] strArray17 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray21);
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray27 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray27);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray27);
        java.lang.String[] strArray35 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray38 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray38);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray45 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray46);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray24);
        generator9.setClasses(classArray50);
        boolean boolean52 = classInfo4.equals((java.lang.Object) classArray50);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType("(JFIF)Lorg/mockito/asm/Type;");
        int int56 = type54.getOpcode((int) (short) -1);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator57.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator62.getNamingPolicy();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean65 = namingPolicy63.equals((java.lang.Object) type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) type67);
        java.lang.String str69 = type67.getDescriptor();
        boolean boolean70 = namingPolicy63.equals((java.lang.Object) str69);
        generator60.setNamingPolicy(namingPolicy63);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type74, type75, type76, type77 };
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("hi!", type73, typeArray78);
        org.mockito.asm.Type type80 = signature79.getReturnType();
        boolean boolean81 = namingPolicy63.equals((java.lang.Object) type80);
        generator57.setNamingPolicy(namingPolicy63);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str84 = type83.getDescriptor();
        int int86 = type83.getOpcode(9);
        java.lang.Class<?> wildcardClass87 = type83.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray88 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass87);
        java.beans.PropertyDescriptor[] propertyDescriptorArray89 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass87);
        generator57.setDelegates((java.lang.Object[]) propertyDescriptorArray89);
        boolean boolean91 = type54.equals((java.lang.Object) generator57);
        boolean boolean92 = classInfo4.equals((java.lang.Object) boolean91);
        org.mockito.asm.Type[] typeArray93 = classInfo4.getInterfaces();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Z" + "'", str69, "Z");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Z" + "'", str84, "Z");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(propertyDescriptorArray88);
        org.junit.Assert.assertNotNull(propertyDescriptorArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeArray93);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (-1));
        org.mockito.cglib.core.ClassInfo classInfo41 = methodInfo40.getClassInfo();
        java.lang.String str42 = methodInfo40.toString();
        org.mockito.asm.Type[] typeArray43 = methodInfo40.getExceptionTypes();
        org.mockito.asm.Type[] typeArray44 = methodInfo40.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo45 = methodInfo40.getClassInfo();
        int int46 = methodInfo40.getModifiers();
        int int47 = methodInfo40.getModifiers();
        int int48 = methodInfo40.getModifiers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<init>()V" + "'", str42, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        propertyDescriptor3.setBound(true);
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.beans.PropertyEditor propertyEditor12 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 37);
        propertyDescriptor3.setDisplayName("java.lang.Object");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=boolean; displayName=Z; shortDescription=(JFIF)V; preferred]");
        boolean boolean17 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(propertyEditor12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        int int2 = type1.getSize();
        java.lang.String str3 = type1.toString();
        int int5 = type1.getOpcode(6);
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("LI;", "LI;");
        org.mockito.asm.Type type10 = signature9.getReturnType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        int int13 = type11.getOpcode((int) ' ');
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type18, type19 };
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", type15, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray20);
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("booleanLZ;", type10, typeArray20);
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("Lorg/mockito/asm/Type;", type1, typeArray20);
        org.mockito.asm.Type type25 = signature24.getReturnType();
        java.lang.String str26 = signature24.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "S" + "'", str3, "S");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 37 + "'", int13 == 37);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JFIF)V" + "'", str22, "(JFIF)V");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/Type;(JFIF)S" + "'", str26, "Lorg/mockito/asm/Type;(JFIF)S");
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("B(JFIF)V");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "B" + "'", str2, "B");
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type0.getOpcode((int) ' ');
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray9);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("I", method13, method14);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor15.getPropertyEditorClass();
        java.lang.Object obj18 = propertyDescriptor15.getValue("LZ;");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray22 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray22);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray26 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray26);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray26);
        java.lang.String[] strArray34 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray37 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray37);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray38);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray38);
        propertyDescriptor15.setValue("org/mockito/asm/Type", (java.lang.Object) strArray21);
        java.lang.String str43 = propertyDescriptor15.getShortDescription();
        propertyDescriptor15.setExpert(true);
        boolean boolean46 = type0.equals((java.lang.Object) propertyDescriptor15);
        boolean boolean47 = propertyDescriptor15.isPreferred();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 37 + "'", int2 == 37);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JFIF)V" + "'", str11, "(JFIF)V");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "I" + "'", str43, "I");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean6 = namingPolicy4.equals((java.lang.Object) type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) type8);
        java.lang.String str10 = type8.getDescriptor();
        boolean boolean11 = namingPolicy4.equals((java.lang.Object) str10);
        generator1.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator1.getStrategy();
        boolean boolean14 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        boolean boolean17 = generator15.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator15.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = null;
        generator15.setClassLoader(classLoader21);
        boolean boolean23 = generator15.getUseCache();
        boolean boolean24 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator25.getNamingPolicy();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray36);
        generator25.setClasses(classArray36);
        java.lang.ClassLoader classLoader40 = generator25.getClassLoader();
        org.mockito.asm.Type[] typeArray42 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) typeArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean47 = namingPolicy45.equals((java.lang.Object) type46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str50 = type49.getClassName();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("boolean", method52, method53);
        propertyDescriptor54.setDisplayName("Z");
        org.mockito.asm.Type type58 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor54.setValue("boolean", (java.lang.Object) type58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type62, type63, type64, type65 };
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("hi!", type61, typeArray66);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray66);
        org.mockito.cglib.core.Signature signature69 = new org.mockito.cglib.core.Signature("double", type49, typeArray66);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray66);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) typeArray66);
        generator15.setClassLoader(classLoader40);
        generator1.setClassLoader(classLoader40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor74 = org.mockito.cglib.core.ReflectUtils.findConstructor("double", classLoader40);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/Type" + "'", str34, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(JFIF)J" + "'", str68, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(JFIF)D" + "'", str70, "(JFIF)D");
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setUseCache(false);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type15, type16, type17, type18 };
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("hi!", type14, typeArray19);
        generator10.setDelegates((java.lang.Object[]) typeArray19);
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("Z", type9, typeArray19);
        java.lang.String str23 = signature22.getDescriptor();
        org.mockito.asm.Type type24 = signature22.getReturnType();
        java.lang.String str25 = signature22.getName();
        java.lang.String str26 = signature22.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setUseCache(false);
        generator27.setAttemptLoad(true);
        boolean boolean32 = generator27.getAttemptLoad();
        generator27.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator27.getStrategy();
        boolean boolean36 = signature22.equals((java.lang.Object) generator27);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator27.getNamingPolicy();
        generator27.setUseCache(true);
        boolean boolean40 = generator27.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator41.getNamingPolicy();
        generator41.setAttemptLoad(true);
        generator41.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator41.getNamingPolicy();
        generator41.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator51.getNamingPolicy();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass59 = type58.getClass();
        java.lang.String str60 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass59);
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass59);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray61);
        int int63 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray62);
        generator51.setClasses(classArray62);
        java.lang.ClassLoader classLoader66 = generator51.getClassLoader();
        org.mockito.asm.Type[] typeArray68 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) typeArray68);
        generator41.setClassLoader(classLoader66);
        generator27.setClassLoader(classLoader66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class72 = org.mockito.cglib.core.ReflectUtils.defineClass("ava.beans.PropertyDescriptor[name=boolean", byteArray7, classLoader66);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 100, -1, 10, 1]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JFIF)V" + "'", str23, "(JFIF)V");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Z(JFIF)V" + "'", str26, "Z(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/Type" + "'", str60, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("g.mockito.asm.Type");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "hi!");
        boolean boolean4 = signature2.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        boolean boolean8 = signature2.equals((java.lang.Object) false);
        java.lang.String str9 = signature2.getName();
        java.lang.String str10 = signature2.getDescriptor();
        java.lang.String str11 = signature2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type12 = signature2.getReturnType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        java.lang.String str17 = signature14.getName();
        java.lang.String str18 = signature14.toString();
        java.lang.String str19 = signature14.getName();
        java.lang.String str20 = signature14.getName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Z(JFIF)V" + "'", str18, "Z(JFIF)V");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Z" + "'", str20, "Z");
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo26.getInterfaces();
        generator0.setDelegates((java.lang.Object[]) typeArray29);
        boolean boolean31 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean37 = namingPolicy35.equals((java.lang.Object) type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) type39);
        java.lang.String str41 = type39.getDescriptor();
        boolean boolean42 = namingPolicy35.equals((java.lang.Object) str41);
        generator32.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator32.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin46 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.mockito.asm.Type" + "'", str27, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Z" + "'", str41, "Z");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        java.lang.String[] strArray5 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray9);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray13 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray13);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray17 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray21);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray21);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray21);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) strArray5);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("LI;", "LI;");
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        boolean boolean32 = signature29.equals((java.lang.Object) generator30);
        java.lang.String[] strArray38 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray41 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray41);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray42);
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray48 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray47, methodArray48);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray45, methodArray48);
        java.lang.String[] strArray56 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray59 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray59);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray60);
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray66 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray65, methodArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray67);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray67);
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray45, methodArray67);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray45);
        generator30.setClasses(classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin26.newInstance((java.lang.Object[]) classArray71);
        java.lang.Object[] objArray75 = null;
        org.mockito.cglib.proxy.Mixin mixin76 = mixin26.newInstance(objArray75);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        int int3 = type0.getOpcode(9);
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean13 = namingPolicy11.equals((java.lang.Object) type12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) type15);
        java.lang.String str17 = type15.getDescriptor();
        boolean boolean18 = namingPolicy11.equals((java.lang.Object) str17);
        generator8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy22);
        boolean boolean24 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        java.lang.String[] strArray33 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray36 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray37);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        generator25.setClasses(classArray39);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        generator8.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator46.getNamingPolicy();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean49 = namingPolicy47.equals((java.lang.Object) type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) type51);
        java.lang.String str53 = type51.getDescriptor();
        boolean boolean54 = namingPolicy47.equals((java.lang.Object) str53);
        generator44.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator44.getStrategy();
        boolean boolean57 = generator44.getAttemptLoad();
        java.lang.String[] strArray63 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray66 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray65, methodArray66);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray67);
        int int70 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray69);
        generator44.setClasses(classArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        java.lang.String[] strArray73 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4, classArray39, (java.lang.Object[]) strArray73);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Z" + "'", str1, "Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Z" + "'", str53, "Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}](JFIF)V");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        java.lang.Class class16 = null;
        java.lang.Class[] classArray17 = new java.lang.Class[] { class16 };
        generator13.setClasses(classArray17);
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator13);
        generator13.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setUseCache(false);
        java.lang.String[] strArray30 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray34);
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        generator22.setClasses(classArray36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        boolean boolean42 = generator40.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator40.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        boolean boolean47 = namingPolicy45.equals((java.lang.Object) "I");
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type50, type51, type52, type53 };
        org.mockito.cglib.core.Signature signature55 = new org.mockito.cglib.core.Signature("hi!", type49, typeArray54);
        org.mockito.asm.Type type56 = signature55.getReturnType();
        boolean boolean57 = namingPolicy45.equals((java.lang.Object) type56);
        generator22.setNamingPolicy(namingPolicy45);
        generator13.setNamingPolicy(namingPolicy45);
        boolean boolean60 = generator13.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator13.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("(JFIF)Lorg/mockito/cglib/core/Signature;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type4, type5, type6, type7 };
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", type3, typeArray8);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("B", type1, typeArray8);
        org.mockito.asm.Type type11 = signature10.getReturnType();
        org.mockito.asm.Type[] typeArray12 = signature10.getArgumentTypes();
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) typeArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray22 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray22);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray23);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin13.newInstance((java.lang.Object[]) strArray26);
        java.lang.reflect.Method[] methodArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(mixin33);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.reflect.Method[] methodArray6 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, true);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("LI;", "LI;");
        org.mockito.asm.Type type13 = signature12.getReturnType();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type14.getOpcode((int) ' ');
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type19, type20, type21, type22 };
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("hi!", type18, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray23);
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("booleanLZ;", type13, typeArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray8, (java.lang.Object[]) typeArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 37 + "'", int16 == 37);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JFIF)V" + "'", str25, "(JFIF)V");
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("I");
        java.lang.String str2 = type1.getDescriptor();
        int int4 = type1.getOpcode(15);
        java.lang.Class<?> wildcardClass5 = type1.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LI;" + "'", str2, "LI;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type4, type5, type6, type7 };
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", type3, typeArray8);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("B", type1, typeArray8);
        org.mockito.asm.Type type11 = signature10.getReturnType();
        org.mockito.asm.Type[] typeArray12 = signature10.getArgumentTypes();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.lang.String str17 = classInfo16.toString();
        org.mockito.asm.Type type18 = classInfo16.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo16.getInterfaces();
        org.mockito.asm.Type type20 = classInfo16.getType();
        int int21 = classInfo16.getModifiers();
        org.mockito.asm.Type type22 = classInfo16.getType();
        boolean boolean23 = signature10.equals((java.lang.Object) classInfo16);
        org.mockito.asm.Type type24 = classInfo16.getType();
        java.lang.String str25 = classInfo16.toString();
        int int26 = classInfo16.getModifiers();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.Type" + "'", str25, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("I", method11, method12);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor13.getPropertyEditorClass();
        java.lang.Object obj16 = propertyDescriptor13.getValue("LZ;");
        propertyDescriptor13.setPreferred(true);
        propertyDescriptor13.setExpert(false);
        propertyDescriptor13.setConstrained(true);
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(propertyEditor23);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        boolean boolean3 = generator0.getAttemptLoad();
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        generator0.setUseCache(true);
        boolean boolean8 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin9 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.ClassLoader classLoader16 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        boolean boolean19 = generator17.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        boolean boolean24 = namingPolicy22.equals((java.lang.Object) "I");
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean26 = namingPolicy22.equals((java.lang.Object) type25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray45);
        boolean boolean49 = namingPolicy22.equals((java.lang.Object) strArray28);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) strArray28);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("boolean", method52, method53);
        propertyDescriptor54.setDisplayName("Z");
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray59 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray59);
        java.beans.PropertyEditor propertyEditor61 = propertyDescriptor54.createPropertyEditor((java.lang.Object) methodArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray59);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray59);
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) methodArray63);
        propertyDescriptor3.setHidden(true);
        boolean boolean67 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNull(propertyEditor61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray6 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray6);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray10 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray10);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray10);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray10);
        java.lang.String[] strArray19 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray22 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray22);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray23);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray29);
        java.lang.String[] strArray37 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray40 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray39, methodArray40);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray41);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray48);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray48);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setUseCache(false);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type58, type59, type60, type61 };
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("hi!", type57, typeArray62);
        generator53.setDelegates((java.lang.Object[]) typeArray62);
        boolean boolean65 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator53.getStrategy();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getDescriptor();
        int int70 = type67.getOpcode(9);
        java.lang.Class<?> wildcardClass71 = type67.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass71);
        boolean boolean73 = generatorStrategy66.equals((java.lang.Object) propertyDescriptorArray72);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray72, false, true);
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray76);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Z" + "'", str68, "Z");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(methodArray77);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        int int3 = type0.getOpcode(9);
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int7 = type6.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Z" + "'", str1, "Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.beans.PropertyEditor propertyEditor10 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray8);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("boolean", method18, method19);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor20.getPropertyEditorClass();
        java.lang.String str22 = propertyDescriptor20.getName();
        propertyDescriptor20.setConstrained(false);
        java.util.Enumeration<java.lang.String> strEnumeration25 = propertyDescriptor20.attributeNames();
        propertyDescriptor20.setHidden(false);
        propertyDescriptor20.setBound(true);
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor20.attributeNames();
        boolean boolean31 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor20);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNull(propertyEditor10);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration25);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("I", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getPropertyEditorClass();
        java.lang.Object obj17 = propertyDescriptor14.getValue("LZ;");
        propertyDescriptor14.setPreferred(true);
        propertyDescriptor14.setConstrained(true);
        java.lang.reflect.Method method22 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor3.setValue("Z(JFIF)V", (java.lang.Object) propertyDescriptor14);
        java.lang.reflect.Method method24 = null;
        propertyDescriptor14.setReadMethod(method24);
        java.lang.String str26 = propertyDescriptor14.getName();
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor14.attributeNames();
        java.lang.String str28 = propertyDescriptor14.getShortDescription();
        java.lang.String str29 = propertyDescriptor14.getName();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "I" + "'", str26, "I");
        org.junit.Assert.assertNotNull(strEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "I" + "'", str28, "I");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "I" + "'", str29, "I");
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("boolean", "LZ;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        int int4 = type3.getSort();
        int int5 = type3.getSize();
        java.lang.String str6 = type3.getClassName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Z" + "'", str6, "Z");
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=boolean; shortDescription=]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.reflect.Method[] methodArray6 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, true);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, false);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) methodArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(methodArray14);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass39 = type38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) propertyDescriptorArray43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 14);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean53 = namingPolicy51.equals((java.lang.Object) type52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type56, type57, type58, type59 };
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("hi!", type55, typeArray60);
        boolean boolean62 = namingPolicy51.equals((java.lang.Object) signature61);
        java.lang.String str63 = signature61.toString();
        org.mockito.asm.Type[] typeArray64 = signature61.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj65 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) typeArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/Type" + "'", str42, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!(JFIF)V" + "'", str63, "hi!(JFIF)V");
        org.junit.Assert.assertNotNull(typeArray64);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("boolean", "LZ;");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("boolean", method6, method7);
        propertyDescriptor8.setDisplayName("Z");
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor8.setValue("boolean", (java.lang.Object) type12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type18, type19 };
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", type15, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray20);
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("void", type4, typeArray20);
        java.lang.String str24 = signature23.toString();
        java.lang.String str25 = signature23.getName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JFIF)J" + "'", str22, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "void(JFIF)LZ;" + "'", str24, "void(JFIF)LZ;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "void" + "'", str25, "void");
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=boolean; bound]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        boolean boolean11 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        int int10 = type6.getOpcode((-1));
        boolean boolean11 = namingPolicy5.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass12 = namingPolicy5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        java.util.List list15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list16 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass12, list15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/cglib/core/DefaultNamingPolicy;" + "'", str14, "Lorg/mockito/cglib/core/DefaultNamingPolicy;");
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("B", type3, typeArray10);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type1, typeArray10);
        java.lang.String str14 = type1.getClassName();
        java.lang.String str15 = type1.getClassName();
        int int17 = type1.getOpcode(37);
        int int18 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "short" + "'", str14, "short");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "short" + "'", str15, "short");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37 + "'", int17 == 37);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean11 = namingPolicy9.equals((java.lang.Object) type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) type13);
        java.lang.String str15 = type13.getDescriptor();
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) str15);
        generator6.setNamingPolicy(namingPolicy9);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray24 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray24);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray36);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray36);
        generator6.setDelegates((java.lang.Object[]) methodArray39);
        java.lang.Class<?> wildcardClass41 = generator6.getClass();
        java.lang.Class[] classArray42 = null;
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass41, classArray42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor43);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor43, 0);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor43);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor43);
        org.mockito.cglib.core.Signature signature49 = methodInfo48.getSignature();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass51 = type50.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass51);
        org.mockito.cglib.core.ClassInfo classInfo53 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = classInfo53.getType();
        int int55 = classInfo53.getModifiers();
        org.mockito.asm.Type[] typeArray56 = classInfo53.getInterfaces();
        org.mockito.asm.Type type57 = classInfo53.getSuperType();
        boolean boolean58 = methodInfo48.equals((java.lang.Object) type57);
        org.mockito.cglib.core.ClassInfo classInfo59 = methodInfo48.getClassInfo();
        org.mockito.cglib.core.ClassInfo classInfo60 = methodInfo48.getClassInfo();
        org.mockito.asm.Type[] typeArray61 = classInfo60.getInterfaces();
        boolean boolean62 = type5.equals((java.lang.Object) typeArray61);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Z" + "'", str15, "Z");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        boolean boolean18 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        java.lang.String[] strArray27 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray31);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        generator19.setClasses(classArray33);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray36);
        generator0.setClasses(classArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(classArray37);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        int int10 = type6.getOpcode((-1));
        boolean boolean11 = namingPolicy5.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass12 = namingPolicy5.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method14 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.DefaultNamingPolicy is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.beans.PropertyEditor propertyEditor10 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray8);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNull(propertyEditor10);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (byte) -1);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("boolean", method47, method48);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor49.getPropertyEditorClass();
        java.lang.String str51 = propertyDescriptor49.getName();
        propertyDescriptor49.setConstrained(false);
        java.lang.String str54 = propertyDescriptor49.getShortDescription();
        boolean boolean55 = namingPolicy45.equals((java.lang.Object) str54);
        java.lang.String[] strArray61 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray64 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray64);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray67);
        boolean boolean69 = namingPolicy45.equals((java.lang.Object) classArray67);
        java.lang.String[] strArray70 = org.mockito.cglib.core.ReflectUtils.getNames(classArray67);
        java.lang.Object obj71 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) classArray67);
        org.mockito.cglib.core.MethodInfo methodInfo73 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (short) 10);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 106);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(methodInfo73);
        org.junit.Assert.assertNotNull(methodInfo75);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean12 = namingPolicy10.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) type14);
        java.lang.String str16 = type14.getDescriptor();
        boolean boolean17 = namingPolicy10.equals((java.lang.Object) str16);
        generator7.setNamingPolicy(namingPolicy10);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type23, type24 };
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!", type20, typeArray25);
        org.mockito.asm.Type type27 = signature26.getReturnType();
        boolean boolean28 = namingPolicy10.equals((java.lang.Object) type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        int int30 = type29.getSort();
        boolean boolean31 = namingPolicy10.equals((java.lang.Object) type29);
        generator0.setNamingPolicy(namingPolicy10);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("boolean", method34, method35);
        propertyDescriptor36.setDisplayName("Z");
        org.mockito.asm.Type type40 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor36.setValue("boolean", (java.lang.Object) type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type44, type45, type46, type47 };
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("hi!", type43, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray48);
        boolean boolean52 = namingPolicy10.equals((java.lang.Object) classArray51);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("boolean", method54, method55);
        propertyDescriptor56.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor60 = propertyDescriptor56.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method61 = null;
        propertyDescriptor56.setReadMethod(method61);
        boolean boolean63 = propertyDescriptor56.isHidden();
        java.lang.String str64 = propertyDescriptor56.getDisplayName();
        java.lang.Class<?> wildcardClass65 = propertyDescriptor56.getPropertyType();
        boolean boolean66 = namingPolicy10.equals((java.lang.Object) wildcardClass65);
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("I", method70, method71);
        java.lang.Class<?> wildcardClass73 = propertyDescriptor72.getPropertyEditorClass();
        java.lang.Object obj75 = propertyDescriptor72.getValue("LZ;");
        java.lang.String str76 = propertyDescriptor72.getShortDescription();
        boolean boolean77 = propertyDescriptor72.isPreferred();
        java.lang.String str78 = propertyDescriptor72.getDisplayName();
        org.mockito.cglib.core.Predicate predicate79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = namingPolicy10.getClassName("java.beans.PropertyDescriptor[name=I; shortDescription=[Ljava/beans/PropertyDescriptor;]", "()B", (java.lang.Object) str78, predicate79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(JFIF)J" + "'", str50, "(JFIF)J");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(propertyEditor60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "I" + "'", str76, "I");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "I" + "'", str78, "I");
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.toString();
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = type6.getElementType();
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.Type type9 = type7.getElementType();
        java.lang.String str10 = type7.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I" + "'", str1, "I");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I" + "'", str2, "I");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "g.mockito.asm.Type" + "'", str8, "g.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "g/mockito/asm/Type" + "'", str10, "g/mockito/asm/Type");
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 1 };
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setUseCache(false);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type9, type10, type11, type12 };
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("hi!", type8, typeArray13);
        generator4.setDelegates((java.lang.Object[]) typeArray13);
        boolean boolean16 = generator4.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator4.getStrategy();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean30 = namingPolicy28.equals((java.lang.Object) type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) type32);
        java.lang.String str34 = type32.getDescriptor();
        boolean boolean35 = namingPolicy28.equals((java.lang.Object) str34);
        generator25.setNamingPolicy(namingPolicy28);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type39, type40, type41, type42 };
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("hi!", type38, typeArray43);
        org.mockito.asm.Type type45 = signature44.getReturnType();
        boolean boolean46 = namingPolicy28.equals((java.lang.Object) type45);
        generator22.setNamingPolicy(namingPolicy28);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type54, type55 };
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("hi!", type51, typeArray56);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("B", type49, typeArray56);
        org.mockito.asm.Type[] typeArray59 = signature58.getArgumentTypes();
        boolean boolean61 = signature58.equals((java.lang.Object) (short) 1);
        java.lang.String str62 = signature58.getName();
        org.mockito.asm.Type[] typeArray63 = signature58.getArgumentTypes();
        generator22.setDelegates((java.lang.Object[]) typeArray63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator22.getStrategy();
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator68.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator68.getNamingPolicy();
        generator68.setAttemptLoad(true);
        generator68.setAttemptLoad(false);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass76 = type75.getClass();
        java.lang.String str77 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass76);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray78);
        int int80 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray79);
        generator68.setClasses(classArray79);
        java.lang.ClassLoader classLoader83 = generator68.getClassLoader();
        generator22.setClassLoader(classLoader83);
        generator4.setClassLoader(classLoader83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class86 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=boolean; constrained]", byteArray3, classLoader83);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 1]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Z" + "'", str34, "Z");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "B" + "'", str62, "B");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org/mockito/asm/Type" + "'", str77, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle(2);
        generator0.setStyle(2);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("(JFIF)Z");
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("boolean", method9, method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor11.getPropertyType();
        propertyDescriptor11.setName("org/mockito/asm/Type");
        boolean boolean15 = propertyDescriptor11.isPreferred();
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor11);
        boolean boolean17 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        propertyDescriptor3.setShortDescription("Lorg/mockito/asm/Type;");
        propertyDescriptor3.setBound(true);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type20, type21 };
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("hi!", type17, typeArray22);
        generator13.setDelegates((java.lang.Object[]) typeArray22);
        boolean boolean25 = generator13.getUseCache();
        generator13.setStyle(2);
        boolean boolean28 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        boolean boolean31 = generator29.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy34);
        java.lang.String[] strArray41 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        generator13.setClasses(classArray47);
        generator13.setAttemptLoad(true);
        generator13.setUseCache(true);
        boolean boolean53 = propertyDescriptor3.equals((java.lang.Object) generator13);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "I" + "'", str11, "I");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0, (byte) 1 };
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator7.getNamingPolicy();
        generator7.setAttemptLoad(true);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray16);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        generator7.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator21.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator21.getNamingPolicy();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass29 = type28.getClass();
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass29);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray31);
        int int33 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        generator21.setClasses(classArray32);
        java.lang.ClassLoader classLoader36 = generator21.getClassLoader();
        generator7.setClassLoader(classLoader36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class38 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=java/lang/Object]", byteArray6, classLoader36);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 100, 1, 0, 1]");
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/Type" + "'", str30, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type0.getOpcode((int) ' ');
        int int3 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(JFIF)V");
        int int6 = type5.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) type8);
        java.lang.String str10 = type8.getDescriptor();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type18, type19 };
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", type15, typeArray20);
        generator11.setDelegates((java.lang.Object[]) typeArray20);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray20);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray20);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        java.lang.String str26 = type0.getClassName();
        java.lang.String str27 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 37 + "'", int2 == 37);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JFIF)Z" + "'", str23, "(JFIF)Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JFIF)L(JFIF)V;" + "'", str24, "(JFIF)L(JFIF)V;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JFIF)V" + "'", str25, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "void" + "'", str26, "void");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "V" + "'", str27, "V");
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        generator0.setStyle(2);
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        boolean boolean18 = generator16.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("void", method24, method25);
        java.lang.reflect.Method method27 = null;
        propertyDescriptor26.setReadMethod(method27);
        java.lang.String str29 = propertyDescriptor26.getShortDescription();
        java.lang.String str30 = propertyDescriptor26.getDisplayName();
        boolean boolean31 = namingPolicy21.equals((java.lang.Object) propertyDescriptor26);
        java.lang.Class<?> wildcardClass32 = propertyDescriptor26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        java.util.List list34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list35 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass32, list34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "void" + "'", str29, "void");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("booleanLZ;", "(JFIF)LZ;");
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Lorg/mockito/asm/Type;(JFIF)S");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("[Ljava/beans/PropertyDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getType();
        java.lang.String str6 = classInfo3.toString();
        java.lang.Object obj7 = null;
        boolean boolean8 = classInfo3.equals(obj7);
        java.lang.String str9 = classInfo3.toString();
        int int10 = classInfo3.getModifiers();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, false, true);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray11);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, false, false);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray11);
        boolean boolean23 = classInfo3.equals((java.lang.Object) propertyDescriptorArray11);
        int int24 = classInfo3.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.Type" + "'", str6, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration10);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setShortDescription("");
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        boolean boolean11 = propertyDescriptor3.isExpert();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("(JFIF)V");
        int int15 = type14.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) type17);
        java.lang.String str19 = type17.getDescriptor();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setUseCache(false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type25, type26, type27, type28 };
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", type24, typeArray29);
        generator20.setDelegates((java.lang.Object[]) typeArray29);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray29);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray29);
        boolean boolean34 = propertyDescriptor3.equals((java.lang.Object) typeArray29);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(JFIF)Z" + "'", str32, "(JFIF)Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(JFIF)L(JFIF)V;" + "'", str33, "(JFIF)L(JFIF)V;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method6 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.String; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass12 = generator5.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/cglib/proxy/Mixin$Generator" + "'", str15, "org/mockito/cglib/proxy/Mixin$Generator");
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type4, type5, type6, type7 };
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", type3, typeArray8);
        org.mockito.asm.Type type10 = signature9.getReturnType();
        java.lang.String str11 = type10.getClassName();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean17 = namingPolicy15.equals((java.lang.Object) type16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) type19);
        java.lang.String str21 = type19.getDescriptor();
        boolean boolean22 = namingPolicy15.equals((java.lang.Object) str21);
        generator12.setNamingPolicy(namingPolicy15);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray26 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray30);
        java.lang.String[] strArray38 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray41 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray41);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray42);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray42);
        generator12.setDelegates((java.lang.Object[]) methodArray45);
        generator12.setAttemptLoad(false);
        boolean boolean49 = type10.equals((java.lang.Object) false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type54, type55 };
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("hi!", type51, typeArray56);
        org.mockito.asm.Type type58 = signature57.getReturnType();
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type66, type67 };
        org.mockito.cglib.core.Signature signature69 = new org.mockito.cglib.core.Signature("hi!", type63, typeArray68);
        org.mockito.cglib.core.Signature signature70 = new org.mockito.cglib.core.Signature("B", type61, typeArray68);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray68);
        org.mockito.cglib.core.Signature signature72 = new org.mockito.cglib.core.Signature("LZ;", type10, typeArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator74.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator74.getNamingPolicy();
        generator74.setAttemptLoad(true);
        java.lang.ClassLoader classLoader79 = null;
        generator74.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator74.getNamingPolicy();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]");
        boolean boolean84 = namingPolicy81.equals((java.lang.Object) type83);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass86 = type85.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass86);
        org.mockito.cglib.core.ClassInfo classInfo88 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass86);
        java.lang.String str89 = classInfo88.toString();
        java.lang.String str90 = classInfo88.toString();
        org.mockito.asm.Type type91 = classInfo88.getSuperType();
        org.mockito.asm.Type[] typeArray92 = classInfo88.getInterfaces();
        org.mockito.cglib.core.Signature signature93 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type83, typeArray92);
        org.mockito.cglib.core.Signature signature94 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]]", type10, typeArray92);
        int int96 = type10.getOpcode((int) '4');
        int int97 = type10.getSort();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Z" + "'", str21, "Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "void" + "'", str59, "void");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JFIF)V" + "'", str71, "(JFIF)V");
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(classInfo88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.mockito.asm.Type" + "'", str89, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.mockito.asm.Type" + "'", str90, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 57 + "'", int96 == 57);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("boolean", method2, method3);
        java.lang.Class<?> wildcardClass5 = propertyDescriptor4.getPropertyEditorClass();
        java.lang.String str6 = propertyDescriptor4.getName();
        propertyDescriptor4.setHidden(false);
        boolean boolean9 = propertyDescriptor4.isExpert();
        boolean boolean10 = propertyDescriptor4.isPreferred();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator11.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(false);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor4.createPropertyEditor((java.lang.Object) generator11);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator21.getNamingPolicy();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean24 = namingPolicy22.equals((java.lang.Object) type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) type26);
        java.lang.String str28 = type26.getDescriptor();
        boolean boolean29 = namingPolicy22.equals((java.lang.Object) str28);
        generator19.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator19.getStrategy();
        boolean boolean32 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        boolean boolean35 = generator33.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator33.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = null;
        generator33.setClassLoader(classLoader39);
        boolean boolean41 = generator33.getUseCache();
        boolean boolean42 = generator33.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass51 = type50.getClass();
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass51);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray54);
        generator43.setClasses(classArray54);
        java.lang.ClassLoader classLoader58 = generator43.getClassLoader();
        org.mockito.asm.Type[] typeArray60 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) typeArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator62.getNamingPolicy();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean65 = namingPolicy63.equals((java.lang.Object) type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str68 = type67.getClassName();
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("boolean", method70, method71);
        propertyDescriptor72.setDisplayName("Z");
        org.mockito.asm.Type type76 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor72.setValue("boolean", (java.lang.Object) type76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type81 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray84 = new org.mockito.asm.Type[] { type80, type81, type82, type83 };
        org.mockito.cglib.core.Signature signature85 = new org.mockito.cglib.core.Signature("hi!", type79, typeArray84);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray84);
        org.mockito.cglib.core.Signature signature87 = new org.mockito.cglib.core.Signature("double", type67, typeArray84);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) typeArray84);
        generator33.setClassLoader(classLoader58);
        generator19.setClassLoader(classLoader58);
        generator11.setClassLoader(classLoader58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method93 = org.mockito.cglib.core.ReflectUtils.findMethod("B(JFIF)V", classLoader58);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Z" + "'", str28, "Z");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/Type" + "'", str52, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(JFIF)J" + "'", str86, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(JFIF)D" + "'", str88, "(JFIF)D");
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setShortDescription("Z");
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(propertyEditor7);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean7 = namingPolicy5.equals((java.lang.Object) "I");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type12, type13 };
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("hi!", type9, typeArray14);
        org.mockito.asm.Type type16 = signature15.getReturnType();
        boolean boolean17 = namingPolicy5.equals((java.lang.Object) type16);
        java.lang.String str18 = type16.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "V" + "'", str18, "V");
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        int int9 = type8.getSize();
        int int10 = type8.getSize();
        int int11 = type8.getSort();
        boolean boolean12 = namingPolicy7.equals((java.lang.Object) int11);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        boolean boolean39 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.String[] strArray47 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray50 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray50);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray47, methodArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray47);
        generator0.setClasses(classArray53);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(105);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 105");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(classArray53);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        boolean boolean18 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator16.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        generator16.setStyle(2);
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator16);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor3.getPropertyType();
        boolean boolean27 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        java.lang.Class class0 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray9 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray9);
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray10);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", "Z(JFIF)V");
        java.lang.String[] strArray24 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray27 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray27);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray24);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) strArray24);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("boolean", method33, method34);
        java.lang.Class<?> wildcardClass36 = propertyDescriptor35.getPropertyEditorClass();
        java.lang.String str37 = propertyDescriptor35.getName();
        java.lang.String str38 = propertyDescriptor35.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration39 = propertyDescriptor35.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration40 = propertyDescriptor35.attributeNames();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("boolean", method42, method43);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor44.getPropertyEditorClass();
        java.lang.String str46 = propertyDescriptor44.getName();
        java.lang.String str47 = propertyDescriptor44.getShortDescription();
        propertyDescriptor44.setShortDescription("B");
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = new java.beans.PropertyDescriptor[] { propertyDescriptor35, propertyDescriptor44 };
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, true);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin31.newInstance((java.lang.Object[]) methodArray53);
        boolean boolean55 = signature18.equals((java.lang.Object) mixin31);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass57 = type56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass57);
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray60, true, false);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray63);
        boolean boolean65 = signature18.equals((java.lang.Object) methodArray63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = org.mockito.cglib.core.ReflectUtils.newInstance(class0, classArray12, (java.lang.Object[]) methodArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration39);
        org.junit.Assert.assertNotNull(strEnumeration40);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/Type" + "'", str59, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean8 = namingPolicy6.equals((java.lang.Object) type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) type10);
        java.lang.String str12 = type10.getDescriptor();
        boolean boolean13 = namingPolicy6.equals((java.lang.Object) str12);
        generator3.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type19, type20 };
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("hi!", type16, typeArray21);
        org.mockito.asm.Type type23 = signature22.getReturnType();
        boolean boolean24 = namingPolicy6.equals((java.lang.Object) type23);
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setUseCache(false);
        java.lang.String[] strArray34 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray37 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray37);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray38);
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        generator26.setClasses(classArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator26.getStrategy();
        boolean boolean44 = namingPolicy6.equals((java.lang.Object) generator26);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        boolean boolean47 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator45.getStrategy();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("I");
        java.lang.String str52 = type51.toString();
        boolean boolean53 = generatorStrategy49.equals((java.lang.Object) str52);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str57 = signature56.getName();
        boolean boolean58 = generatorStrategy49.equals((java.lang.Object) str57);
        generator26.setStrategy(generatorStrategy49);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        int int62 = type60.getOpcode((int) ' ');
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type65, type66, type67, type68 };
        org.mockito.cglib.core.Signature signature70 = new org.mockito.cglib.core.Signature("hi!", type64, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray69);
        boolean boolean72 = generatorStrategy49.equals((java.lang.Object) str71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass74 = type73.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass74);
        org.mockito.cglib.core.ClassInfo classInfo76 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass74);
        java.lang.String str77 = classInfo76.toString();
        org.mockito.asm.Type type78 = classInfo76.getType();
        int int79 = classInfo76.getModifiers();
        boolean boolean80 = generatorStrategy49.equals((java.lang.Object) classInfo76);
        int int81 = classInfo76.getModifiers();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "LI;" + "'", str52, "LI;");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 37 + "'", int62 == 37);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JFIF)V" + "'", str71, "(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
        org.junit.Assert.assertNotNull(classInfo76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org.mockito.asm.Type" + "'", str77, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.Object obj5 = null;
        boolean boolean6 = generatorStrategy4.equals(obj5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("boolean", method8, method9);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor10.getPropertyEditorClass();
        java.lang.String str12 = propertyDescriptor10.getName();
        java.lang.String str13 = propertyDescriptor10.getShortDescription();
        java.lang.String str14 = propertyDescriptor10.getName();
        java.lang.String str15 = propertyDescriptor10.getName();
        boolean boolean16 = generatorStrategy4.equals((java.lang.Object) propertyDescriptor10);
        propertyDescriptor10.setConstrained(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        java.lang.String[] strArray27 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray31);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        generator19.setClasses(classArray33);
        boolean boolean36 = generator19.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setUseCache(false);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray42 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray42);
        generator37.setDelegates((java.lang.Object[]) methodArray43);
        generator19.setDelegates((java.lang.Object[]) methodArray43);
        boolean boolean46 = propertyDescriptor10.equals((java.lang.Object) methodArray43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.beans.PropertyEditor propertyEditor10 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray8);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        java.lang.String str15 = propertyDescriptor3.getName();
        boolean boolean16 = propertyDescriptor3.isExpert();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean22 = namingPolicy20.equals((java.lang.Object) type21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) type24);
        java.lang.String str26 = type24.getDescriptor();
        boolean boolean27 = namingPolicy20.equals((java.lang.Object) str26);
        generator17.setNamingPolicy(namingPolicy20);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray31 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray31);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray46 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray45, methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray47);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray47);
        generator17.setDelegates((java.lang.Object[]) methodArray50);
        java.lang.Class<?> wildcardClass52 = generator17.getClass();
        java.lang.Class[] classArray53 = null;
        java.lang.reflect.Constructor constructor54 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass52, classArray53);
        org.mockito.cglib.core.Signature signature55 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor54);
        org.mockito.cglib.core.MethodInfo methodInfo57 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor54, 0);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray60 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray59, methodArray60);
        java.lang.Class<?> wildcardClass62 = strArray59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass62);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray63, false, false);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray63);
        java.lang.Object obj68 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor54, (java.lang.Object[]) classArray67);
        org.mockito.cglib.core.MethodInfo methodInfo70 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor54, 14);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray73 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray72, methodArray73);
        java.lang.Class<?> wildcardClass75 = strArray72.getClass();
        java.lang.String str76 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass75);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass75);
        boolean boolean78 = methodInfo70.equals((java.lang.Object) wildcardClass75);
        boolean boolean79 = propertyDescriptor3.equals((java.lang.Object) wildcardClass75);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNull(propertyEditor10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Z" + "'", str26, "Z");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(constructor54);
        org.junit.Assert.assertNotNull(signature55);
        org.junit.Assert.assertNotNull(methodInfo57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(methodInfo70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[Ljava/lang/String;" + "'", str76, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        boolean boolean39 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin40 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.Class<?> wildcardClass45 = strArray42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, false, false);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        java.lang.Object obj51 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) classArray50);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 14);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray56 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray56);
        java.lang.Class<?> wildcardClass58 = strArray55.getClass();
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        boolean boolean61 = methodInfo53.equals((java.lang.Object) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass65 = type64.getClass();
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass65);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray67);
        int int69 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray68);
        int int71 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method72 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass58, "byte", classArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: byte");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[Ljava/lang/String;" + "'", str59, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/Type" + "'", str66, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("hi!(JFIF)V");
        java.lang.String str8 = propertyDescriptor3.getDisplayName();
        boolean boolean9 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!(JFIF)V" + "'", str8, "hi!(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.String str8 = propertyDescriptor3.getName();
        boolean boolean9 = propertyDescriptor3.isHidden();
        boolean boolean10 = propertyDescriptor3.isExpert();
        boolean boolean11 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type[] typeArray6 = classInfo3.getInterfaces();
        org.mockito.asm.Type type7 = classInfo3.getType();
        java.lang.String str8 = classInfo3.toString();
        org.mockito.asm.Type type9 = classInfo3.getSuperType();
        java.lang.String str10 = type9.toString();
        java.lang.String str11 = type9.getInternalName();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, false, true);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray21);
        boolean boolean23 = type9.equals((java.lang.Object) methodArray21);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.Type" + "'", str8, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ljava/lang/Object;" + "'", str10, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/lang/Object" + "'", str11, "java/lang/Object");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean3 = namingPolicy1.equals((java.lang.Object) type2);
        java.lang.String str4 = type2.getClassName();
        java.lang.String[] strArray10 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray13 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray13);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray14);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray31 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray31);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray32);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray38 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray39);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray39);
        boolean boolean43 = type2.equals((java.lang.Object) strArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) strArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "double" + "'", str4, "double");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(false);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.toString();
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str12 = classInfo11.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I" + "'", str1, "I");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I" + "'", str2, "I");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.Type" + "'", str12, "org.mockito.asm.Type");
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        generator9.setDelegates((java.lang.Object[]) methodArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator17.getNamingPolicy();
        generator17.setAttemptLoad(true);
        generator17.setAttemptLoad(false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass25 = type24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass25);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray27);
        int int29 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray28);
        generator17.setClasses(classArray28);
        java.lang.ClassLoader classLoader32 = generator17.getClassLoader();
        org.mockito.asm.Type[] typeArray34 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) typeArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean39 = namingPolicy37.equals((java.lang.Object) type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str42 = type41.getClassName();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("boolean", method44, method45);
        propertyDescriptor46.setDisplayName("Z");
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor46.setValue("boolean", (java.lang.Object) type50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type54, type55, type56, type57 };
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("hi!", type53, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray58);
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("double", type41, typeArray58);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) typeArray58);
        generator9.setClassLoader(classLoader32);
        generator0.setClassLoader(classLoader32);
        boolean boolean66 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JFIF)J" + "'", str60, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(JFIF)D" + "'", str62, "(JFIF)D");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        generator0.setStyle(2);
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        boolean boolean18 = generator16.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy21);
        java.lang.String[] strArray28 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray31 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray31);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray32);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = null;
        generator0.setClassLoader(classLoader36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass39 = type38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass39);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, false);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        generator0.setClasses(classArray46);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("boolean", method49, method50);
        java.lang.Class<?> wildcardClass52 = propertyDescriptor51.getPropertyEditorClass();
        java.lang.String str53 = propertyDescriptor51.getName();
        java.lang.reflect.Method method54 = null;
        propertyDescriptor51.setWriteMethod(method54);
        java.lang.reflect.Method method56 = propertyDescriptor51.getReadMethod();
        propertyDescriptor51.setPreferred(false);
        propertyDescriptor51.setConstrained(false);
        boolean boolean61 = propertyDescriptor51.isPreferred();
        java.lang.Class<?> wildcardClass62 = propertyDescriptor51.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass62);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) propertyDescriptorArray64);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNull(method56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        java.lang.String str5 = classInfo3.toString();
        org.mockito.asm.Type type6 = classInfo3.getSuperType();
        int int7 = type6.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.mockito.asm.Type" + "'", str5, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        java.lang.String[] strArray20 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray23 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray23);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        generator0.setClasses(classArray26);
        boolean boolean30 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setValue("[Ljava/lang/String;", (java.lang.Object) (short) 100);
        boolean boolean14 = propertyDescriptor3.isHidden();
        java.lang.String str15 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={[Ljava/lang/String;=100}]" + "'", str15, "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={[Ljava/lang/String;=100}]");
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        java.lang.String[] strArray20 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray23 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray23);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        generator0.setClasses(classArray26);
        boolean boolean30 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor33 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.String str8 = propertyDescriptor3.getName();
        boolean boolean9 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(false);
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        boolean boolean15 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "I" + "'", str12, "I");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strEnumeration16);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        boolean boolean12 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator10.getStrategy();
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray17 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray21);
        java.lang.String[] strArray29 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray32 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray32);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray33);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray33);
        generator10.setDelegates((java.lang.Object[]) methodArray36);
        java.beans.PropertyEditor propertyEditor38 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray36);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setPreferred(true);
        java.lang.Object obj46 = propertyDescriptor3.getValue("Z(JFIF)V");
        propertyDescriptor3.setDisplayName("<init>");
        boolean boolean49 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNull(propertyEditor38);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray7 = classInfo6.getInterfaces();
        int int8 = classInfo6.getModifiers();
        java.lang.Class<?> wildcardClass9 = classInfo6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setUseCache(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type16, type17, type18, type19 };
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("hi!", type15, typeArray20);
        generator11.setDelegates((java.lang.Object[]) typeArray20);
        boolean boolean23 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator11.getStrategy();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        boolean boolean31 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator29.getStrategy();
        generator11.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str37 = signature36.getName();
        java.lang.Class<?> wildcardClass38 = signature36.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass38);
        generator11.setDelegates((java.lang.Object[]) propertyDescriptorArray39);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray39, false, false);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor45 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass9, classArray44);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.ReflectUtils$4.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.Class[] classArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor5 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass1, classArray4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        generator0.setStyle(2);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean26 = namingPolicy24.equals((java.lang.Object) type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) type28);
        java.lang.String str30 = type28.getDescriptor();
        boolean boolean31 = namingPolicy24.equals((java.lang.Object) str30);
        generator21.setNamingPolicy(namingPolicy24);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray39 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray39);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray39);
        java.lang.String[] strArray47 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray50 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray50);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray47, methodArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray51);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray51);
        generator21.setDelegates((java.lang.Object[]) methodArray54);
        java.lang.Class<?> wildcardClass56 = generator21.getClass();
        java.lang.Class[] classArray57 = null;
        java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass56, classArray57);
        org.mockito.cglib.core.Signature signature59 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58, 0);
        java.lang.String str62 = org.mockito.asm.Type.getConstructorDescriptor(constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58);
        org.mockito.cglib.core.Signature signature64 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor58);
        org.mockito.cglib.core.Signature signature65 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor58);
        org.mockito.asm.Type[] typeArray66 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor58);
        generator0.setDelegates((java.lang.Object[]) typeArray66);
        boolean boolean68 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Z" + "'", str30, "Z");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(constructor58);
        org.junit.Assert.assertNotNull(signature59);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "()V" + "'", str62, "()V");
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNotNull(signature65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean3 = namingPolicy1.equals((java.lang.Object) type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        boolean boolean12 = namingPolicy1.equals((java.lang.Object) signature11);
        java.lang.String str13 = signature11.toString();
        java.lang.String str14 = signature11.getName();
        java.lang.String str15 = signature11.getDescriptor();
        org.mockito.asm.Type[] typeArray16 = signature11.getArgumentTypes();
        java.lang.String str17 = signature11.getDescriptor();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!(JFIF)V" + "'", str13, "hi!(JFIF)V");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JFIF)V" + "'", str17, "(JFIF)V");
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("(JFIF)B");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        boolean boolean18 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator16.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        generator16.setStyle(2);
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator16);
        boolean boolean24 = generator16.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin25 = generator16.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.util.List list6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list7 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass1, list6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getSuperType();
        int int7 = classInfo3.getModifiers();
        int int8 = classInfo3.getModifiers();
        java.lang.String str9 = classInfo3.toString();
        org.mockito.asm.Type[] typeArray10 = classInfo3.getInterfaces();
        org.mockito.asm.Type[] typeArray11 = classInfo3.getInterfaces();
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Lorg.mockito.asm.Type;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (-1));
        org.mockito.asm.Type[] typeArray41 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature42 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature43 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(signature42);
        org.junit.Assert.assertNotNull(signature43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type16, type17 };
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("hi!", type13, typeArray18);
        generator9.setDelegates((java.lang.Object[]) typeArray18);
        boolean boolean21 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator9.getStrategy();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        boolean boolean29 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        generator9.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str35 = signature34.getName();
        java.lang.Class<?> wildcardClass36 = signature34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        generator9.setDelegates((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        boolean boolean42 = namingPolicy8.equals((java.lang.Object) false);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setUseCache(false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type54, type55 };
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("hi!", type51, typeArray56);
        generator47.setDelegates((java.lang.Object[]) typeArray56);
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("Z", type46, typeArray56);
        java.lang.String str60 = signature59.toString();
        java.lang.String str61 = signature59.getDescriptor();
        org.mockito.asm.Type[] typeArray62 = signature59.getArgumentTypes();
        org.mockito.cglib.core.Predicate predicate63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = namingPolicy8.getClassName("(JFIF)B", "I", (java.lang.Object) typeArray62, predicate63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Z(JFIF)V" + "'", str60, "Z(JFIF)V");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JFIF)V" + "'", str61, "(JFIF)V");
        org.junit.Assert.assertNotNull(typeArray62);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isExpert();
        boolean boolean9 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator10.getNamingPolicy();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(false);
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator10);
        propertyDescriptor3.setName("(JFIF)Z");
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertNull(wildcardClass22);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator12.getNamingPolicy();
        generator12.setAttemptLoad(true);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray21);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        generator12.setClasses(classArray22);
        generator5.setClasses(classArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getSuperType();
        org.mockito.asm.Type[] typeArray6 = classInfo3.getInterfaces();
        org.mockito.asm.Type type7 = classInfo3.getType();
        int int8 = classInfo3.getModifiers();
        org.mockito.asm.Type type9 = classInfo3.getSuperType();
        org.mockito.asm.Type type10 = classInfo3.getSuperType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type15 = classInfo14.getType();
        int int16 = classInfo14.getModifiers();
        org.mockito.asm.Type type17 = classInfo14.getSuperType();
        boolean boolean18 = classInfo3.equals((java.lang.Object) classInfo14);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("boolean", method20, method21);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor22.getPropertyEditorClass();
        java.lang.String str24 = propertyDescriptor22.getName();
        java.lang.String str25 = propertyDescriptor22.getShortDescription();
        java.lang.String str26 = propertyDescriptor22.getName();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor22.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass28 = propertyDescriptor22.getPropertyEditorClass();
        boolean boolean29 = classInfo3.equals((java.lang.Object) wildcardClass28);
        int int30 = classInfo3.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JFIF)Lorg/mockito/asm/Type;");
        int int3 = type1.getOpcode((int) (short) -1);
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("boolean", method5, method6);
        propertyDescriptor7.setDisplayName("Z");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor7.setValue("boolean", (java.lang.Object) type11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type15, type16, type17, type18 };
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("hi!", type14, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray19);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        java.lang.String str23 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JFIF)J" + "'", str21, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JFIF)LJFIF)Lorg/mockito/asm/Type;" + "'", str22, "(JFIF)LJFIF)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "LJFIF)Lorg/mockito/asm/Type;" + "'", str23, "LJFIF)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("Lorg/mockito/asm/Type;(JFIF)S");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->Lorg/mockito/asm/Type;");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type(JFIF)LI;", "java.beans.PropertyDescriptor[name=(JFIF)Z; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'org/mockito/asm/Type(JFIF)LI;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray16 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray16);
        java.lang.Class<?> wildcardClass18 = strArray15.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setShortDescription("");
        propertyDescriptor3.setName("[Ljava/lang/String;");
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor3.attributeNames();
        boolean boolean20 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertNotNull(strEnumeration18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        java.lang.Class class15 = null;
        java.lang.Class[] classArray16 = new java.lang.Class[] { class15 };
        generator12.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        boolean boolean20 = generator18.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator18.setClassLoader(classLoader21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        boolean boolean25 = namingPolicy23.equals((java.lang.Object) "I");
        generator12.setNamingPolicy(namingPolicy23);
        propertyDescriptor3.setValue("hi!java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", (java.lang.Object) generator12);
        boolean boolean28 = generator12.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator12.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "hi!");
        boolean boolean4 = signature2.equals((java.lang.Object) 0L);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("boolean", method6, method7);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor8.getPropertyEditorClass();
        java.lang.String str10 = propertyDescriptor8.getName();
        propertyDescriptor8.setHidden(false);
        boolean boolean13 = propertyDescriptor8.isExpert();
        boolean boolean14 = signature2.equals((java.lang.Object) propertyDescriptor8);
        java.lang.String str15 = signature2.getDescriptor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator13.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        generator13.setClassLoader(classLoader18);
        boolean boolean20 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        java.lang.String[] strArray29 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray32 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray32);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray33);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        generator21.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator21.getNamingPolicy();
        boolean boolean40 = generator21.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator21.getNamingPolicy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("boolean", method43, method44);
        propertyDescriptor45.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor45.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method50 = null;
        propertyDescriptor45.setReadMethod(method50);
        boolean boolean52 = propertyDescriptor45.isHidden();
        propertyDescriptor45.setValue("[Ljava/lang/String;", (java.lang.Object) (short) 100);
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("boolean", method58, method59);
        propertyDescriptor60.setDisplayName("Z");
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor60.setValue("boolean", (java.lang.Object) type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type68, type69, type70, type71 };
        org.mockito.cglib.core.Signature signature73 = new org.mockito.cglib.core.Signature("hi!", type67, typeArray72);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray72);
        propertyDescriptor45.setValue("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]", (java.lang.Object) typeArray72);
        boolean boolean76 = namingPolicy41.equals((java.lang.Object) propertyDescriptor45);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        boolean boolean79 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator77.getStrategy();
        boolean boolean82 = namingPolicy41.equals((java.lang.Object) generatorStrategy81);
        generator13.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator13.getStrategy();
        generator5.setStrategy(generatorStrategy84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin86 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JFIF)J" + "'", str74, "(JFIF)J");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.String[] strArray2 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray3 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray4 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray2, methodArray3);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray7 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray7);
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray2, methodArray7);
        java.lang.String[] strArray15 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray19);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray2, methodArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) methodArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(methodArray22);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type4, type5 };
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", type1, typeArray6);
        java.lang.String str8 = signature7.getName();
        java.lang.String str9 = signature7.toString();
        java.lang.String str10 = signature7.getName();
        java.lang.String str11 = signature7.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!(JFIF)V" + "'", str9, "hi!(JFIF)V");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!(JFIF)V" + "'", str11, "hi!(JFIF)V");
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("int");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        java.lang.Class class0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray4 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray3, methodArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod(class0, "java.beans.PropertyDescriptor[name=boolean; displayName=Z; constrained]", classArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=boolean; displayName=Z; constrained]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(methodArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(true);
        generator1.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator1.getNamingPolicy();
        generator1.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator11.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass19 = type18.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray21);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        generator11.setClasses(classArray22);
        java.lang.ClassLoader classLoader26 = generator11.getClassLoader();
        org.mockito.asm.Type[] typeArray28 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) typeArray28);
        generator1.setClassLoader(classLoader26);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str32 = type31.getDescriptor();
        int int34 = type31.getOpcode(9);
        java.lang.Class<?> wildcardClass35 = type31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) propertyDescriptorArray36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method38 = org.mockito.cglib.core.ReflectUtils.findMethod("(JFIF)Z", classLoader26);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/Type" + "'", str20, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Z" + "'", str32, "Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(mixin37);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.beans.PropertyEditor propertyEditor10 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray8);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method14 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNull(propertyEditor10);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.String str19 = classInfo18.toString();
        java.lang.String str20 = classInfo18.toString();
        int int21 = classInfo18.getModifiers();
        org.mockito.asm.Type type22 = classInfo18.getType();
        org.mockito.asm.Type type23 = classInfo18.getSuperType();
        boolean boolean24 = generatorStrategy14.equals((java.lang.Object) type23);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.mockito.asm.Type" + "'", str19, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.mockito.asm.Type" + "'", str20, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (byte) -1);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        int int44 = methodInfo43.getModifiers();
        org.mockito.asm.Type[] typeArray45 = methodInfo43.getExceptionTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) typeArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(typeArray45);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        java.lang.Class<?> wildcardClass13 = namingPolicy12.getClass();
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list15 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass13, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator0.getUseCache();
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(105);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 105");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType("B(JFIF)V");
        propertyDescriptor3.setValue("boolean", (java.lang.Object) "B(JFIF)V");
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean23 = namingPolicy21.equals((java.lang.Object) type22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) type25);
        java.lang.String str27 = type25.getDescriptor();
        boolean boolean28 = namingPolicy21.equals((java.lang.Object) str27);
        generator18.setNamingPolicy(namingPolicy21);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray32 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray32);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray36 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray36);
        java.lang.String[] strArray44 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray48);
        generator18.setDelegates((java.lang.Object[]) methodArray51);
        java.lang.Class<?> wildcardClass53 = generator18.getClass();
        java.lang.Class[] classArray54 = null;
        java.lang.reflect.Constructor constructor55 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass53, classArray54);
        java.lang.String str56 = org.mockito.asm.Type.getConstructorDescriptor(constructor55);
        java.lang.String str57 = org.mockito.asm.Type.getConstructorDescriptor(constructor55);
        java.beans.PropertyEditor propertyEditor58 = propertyDescriptor3.createPropertyEditor((java.lang.Object) constructor55);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass60 = type59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = classInfo62.getType();
        int int64 = classInfo62.getModifiers();
        org.mockito.asm.Type[] typeArray65 = classInfo62.getInterfaces();
        java.lang.Object obj66 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor55, (java.lang.Object[]) typeArray65);
        org.mockito.asm.Type[] typeArray67 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor55);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Z" + "'", str27, "Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(constructor55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "()V" + "'", str56, "()V");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "()V" + "'", str57, "()V");
        org.junit.Assert.assertNull(propertyEditor58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(typeArray67);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(false);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str17);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNull(propertyEditor18);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getType();
        org.mockito.asm.Type type7 = classInfo3.getType();
        int int8 = type7.getSort();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        boolean boolean11 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator9.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator9.getStrategy();
        generator9.setStyle(2);
        generator9.setStyle(2);
        generator9.setUseCache(false);
        boolean boolean20 = generator9.getAttemptLoad();
        boolean boolean21 = generator9.getAttemptLoad();
        boolean boolean22 = type7.equals((java.lang.Object) generator9);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator24.getNamingPolicy();
        generator24.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        boolean boolean31 = generator29.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator29.setClassLoader(classLoader32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass35 = type34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, false);
        generator29.setDelegates((java.lang.Object[]) methodArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator29.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator46.getNamingPolicy();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean49 = namingPolicy47.equals((java.lang.Object) type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) type51);
        java.lang.String str53 = type51.getDescriptor();
        boolean boolean54 = namingPolicy47.equals((java.lang.Object) str53);
        generator44.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator44.getStrategy();
        boolean boolean57 = generator44.getAttemptLoad();
        java.lang.String[] strArray63 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray66 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray65, methodArray66);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray67);
        int int70 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray69);
        generator44.setClasses(classArray69);
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        boolean boolean73 = generatorStrategy43.equals((java.lang.Object) classArray69);
        generator24.setStrategy(generatorStrategy43);
        boolean boolean75 = namingPolicy23.equals((java.lang.Object) generator24);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean81 = namingPolicy79.equals((java.lang.Object) type80);
        java.lang.String str82 = type80.getClassName();
        int int83 = type80.getSize();
        int int84 = type80.getSize();
        int int85 = type80.getSize();
        org.mockito.cglib.core.Predicate predicate86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = namingPolicy23.getClassName("(JFIF)D", "booleanLZ;(JFIF)LI;", (java.lang.Object) int85, predicate86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org/mockito/asm/Type" + "'", str37, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Z" + "'", str53, "Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "double" + "'", str82, "double");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type4, type5, type6, type7 };
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", type3, typeArray8);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("B", type1, typeArray8);
        int int11 = type1.getSize();
        java.lang.String str12 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("LZ;");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray12 = new org.mockito.asm.Type[] { type8, type9, type10, type11 };
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("hi!", type7, typeArray12);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("B", type5, typeArray12);
        org.mockito.asm.Type type15 = signature14.getReturnType();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator18.getNamingPolicy();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean21 = namingPolicy19.equals((java.lang.Object) type20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) type23);
        java.lang.String str25 = type23.getDescriptor();
        boolean boolean26 = namingPolicy19.equals((java.lang.Object) str25);
        generator16.setNamingPolicy(namingPolicy19);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray34 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray34);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray34);
        java.lang.String[] strArray42 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray45 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray45);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray46);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray46);
        generator16.setDelegates((java.lang.Object[]) methodArray49);
        java.lang.Class<?> wildcardClass51 = generator16.getClass();
        java.lang.Class[] classArray52 = null;
        java.lang.reflect.Constructor constructor53 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass51, classArray52);
        org.mockito.asm.Type[] typeArray54 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor53);
        org.mockito.cglib.core.MethodInfo methodInfo56 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor53, (-1));
        org.mockito.asm.Type[] typeArray57 = methodInfo56.getExceptionTypes();
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("short", type15, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray57);
        org.mockito.asm.Type[] typeArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("(JFIF)Lint;", type2, typeArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(constructor53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(methodInfo56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "()LLZ;;" + "'", str59, "()LLZ;;");
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.getClassName();
        java.lang.String str3 = type0.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "B" + "'", str1, "B");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("B", type3, typeArray10);
        org.mockito.asm.Type[] typeArray13 = signature12.getArgumentTypes();
        org.mockito.asm.Type[] typeArray14 = signature12.getArgumentTypes();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("org/mockito/cglib/core/Signature", type1, typeArray14);
        java.lang.String str16 = signature15.toString();
        java.lang.String str17 = signature15.getName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/cglib/core/Signature(JFIF)S" + "'", str16, "org/mockito/cglib/core/Signature(JFIF)S");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str17, "org/mockito/cglib/core/Signature");
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setValue("B", (java.lang.Object) "Z");
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        java.lang.String[] strArray22 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray26);
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        generator14.setClasses(classArray28);
        boolean boolean31 = generator14.getAttemptLoad();
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray34 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray34);
        java.lang.Class<?> wildcardClass36 = strArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        generator14.setDelegates((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.beans.PropertyEditor propertyEditor42 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray41);
        java.lang.Class<?> wildcardClass43 = propertyDescriptor3.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass43);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNull(propertyEditor42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str44, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JFIF)V");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.toString();
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, false, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I" + "'", str1, "I");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I" + "'", str2, "I");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray15);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        boolean boolean14 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getSuperType();
        org.mockito.asm.Type[] typeArray6 = classInfo3.getInterfaces();
        org.mockito.asm.Type type7 = classInfo3.getType();
        java.lang.String str8 = classInfo3.toString();
        int int9 = classInfo3.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.Type" + "'", str8, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        java.lang.String[] strArray13 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray16 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray16);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray13);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        generator0.setClasses(classArray19);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean12 = namingPolicy10.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) type14);
        java.lang.String str16 = type14.getDescriptor();
        boolean boolean17 = namingPolicy10.equals((java.lang.Object) str16);
        generator7.setNamingPolicy(namingPolicy10);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type23, type24 };
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!", type20, typeArray25);
        org.mockito.asm.Type type27 = signature26.getReturnType();
        boolean boolean28 = namingPolicy10.equals((java.lang.Object) type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        int int30 = type29.getSort();
        boolean boolean31 = namingPolicy10.equals((java.lang.Object) type29);
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setUseCache(false);
        java.lang.String[] strArray41 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        generator33.setClasses(classArray47);
        boolean boolean50 = generator33.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setUseCache(false);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray56 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray56);
        generator51.setDelegates((java.lang.Object[]) methodArray57);
        generator33.setDelegates((java.lang.Object[]) methodArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setUseCache(false);
        java.lang.String[] strArray68 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray71 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray70, methodArray71);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray72);
        java.lang.String[] strArray75 = org.mockito.cglib.core.ReflectUtils.getNames(classArray74);
        generator60.setClasses(classArray74);
        boolean boolean77 = generator60.getAttemptLoad();
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray80 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray79, methodArray80);
        java.lang.Class<?> wildcardClass82 = strArray79.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass82);
        generator60.setDelegates((java.lang.Object[]) propertyDescriptorArray83);
        java.lang.reflect.Method[] methodArray87 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray83, false, true);
        generator33.setDelegates((java.lang.Object[]) propertyDescriptorArray83);
        boolean boolean89 = generator33.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator33.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy90);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(methodArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("B");
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray11);
        java.lang.Class<?> wildcardClass15 = type1.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method17 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(JFIF)B" + "'", str14, "(JFIF)B");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        boolean boolean14 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setShortDescription("");
        java.lang.Object obj11 = propertyDescriptor3.getValue("[Ljava/lang/String;");
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.lang.String str16 = classInfo15.toString();
        org.mockito.asm.Type type17 = classInfo15.getSuperType();
        org.mockito.asm.Type[] typeArray18 = classInfo15.getInterfaces();
        org.mockito.asm.Type type19 = classInfo15.getType();
        int int20 = classInfo15.getModifiers();
        org.mockito.asm.Type type21 = classInfo15.getSuperType();
        int int22 = classInfo15.getModifiers();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("B(JFIF)V");
        boolean boolean25 = classInfo15.equals((java.lang.Object) "B(JFIF)V");
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean29 = namingPolicy27.equals((java.lang.Object) type28);
        java.lang.String str30 = type28.getClassName();
        int int31 = type28.getSize();
        int int32 = type28.getSize();
        boolean boolean33 = classInfo15.equals((java.lang.Object) type28);
        java.beans.PropertyEditor propertyEditor34 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type28);
        boolean boolean35 = propertyDescriptor3.isExpert();
        java.lang.String str36 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type" + "'", str16, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "double" + "'", str30, "double");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(propertyEditor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.lang.Object");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        java.lang.String[] strArray5 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray9);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.toString();
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        generator12.setAttemptLoad(true);
        boolean boolean17 = generator12.getAttemptLoad();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setUseCache(false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type25, type26, type27, type28 };
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("hi!", type24, typeArray29);
        generator20.setDelegates((java.lang.Object[]) typeArray29);
        boolean boolean32 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator20.getStrategy();
        generator20.setAttemptLoad(true);
        generator20.setAttemptLoad(true);
        boolean boolean38 = generator20.getAttemptLoad();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass40 = type39.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray42);
        int int44 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray43);
        generator20.setClasses(classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        generator12.setClasses(classArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method50 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass4, "g.mockito.asm.Type", classArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: g.mockito.asm.Type");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I" + "'", str1, "I");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I" + "'", str2, "I");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getSuperType();
        org.mockito.asm.Type[] typeArray6 = classInfo3.getInterfaces();
        org.mockito.asm.Type type7 = classInfo3.getType();
        java.lang.String str8 = classInfo3.toString();
        java.lang.String str9 = classInfo3.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.Type" + "'", str8, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader6 = null;
        generator1.setClassLoader(classLoader6);
        boolean boolean8 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator9.getNamingPolicy();
        generator9.setAttemptLoad(true);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray17 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray18);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        generator9.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator23.getNamingPolicy();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass31);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray34);
        generator23.setClasses(classArray34);
        java.lang.ClassLoader classLoader38 = generator23.getClassLoader();
        generator9.setClassLoader(classLoader38);
        generator1.setClassLoader(classLoader38);
        java.lang.ClassLoader classLoader41 = generator1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method42 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=I; shortDescription=Lorg/mockito/asm/Type;; bound]", classLoader41);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.Class<?> wildcardClass45 = strArray42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, false, false);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        java.lang.Object obj51 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) classArray50);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 14);
        org.mockito.asm.Type[] typeArray54 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass56 = type55.getClass();
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass56);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) propertyDescriptorArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/Type" + "'", str57, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("short", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=boolean; preferred; values={org/mockito/asm/Type=I}; bound]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "short" + "'", str4, "short");
        org.junit.Assert.assertNotNull(strEnumeration5);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.String;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/String;" + "'", str5, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/lang/String;" + "'", str7, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        java.lang.String[] strArray5 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray9);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray17 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray17);
        java.lang.Class<?> wildcardClass19 = strArray16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, false, false);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, false, true);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) strArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean3 = namingPolicy1.equals((java.lang.Object) type2);
        int int4 = type2.getSize();
        int int5 = type2.getSize();
        java.lang.Object obj6 = null;
        boolean boolean7 = type2.equals(obj6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str11 = signature10.getName();
        boolean boolean12 = type2.equals((java.lang.Object) signature10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type13 = type2.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isExpert();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type15, type16 };
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", type12, typeArray17);
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("B", type10, typeArray17);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("void", method22, method23);
        java.lang.reflect.Method method25 = null;
        propertyDescriptor24.setReadMethod(method25);
        propertyDescriptor24.setPreferred(false);
        propertyDescriptor24.setExpert(false);
        boolean boolean31 = propertyDescriptor3.equals((java.lang.Object) false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.Class<?> wildcardClass45 = strArray42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, false, false);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        java.lang.Object obj51 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) classArray50);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 14);
        java.lang.String str54 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo57 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 37);
        org.mockito.cglib.core.Signature signature58 = methodInfo57.getSignature();
        org.mockito.asm.Type[] typeArray59 = methodInfo57.getExceptionTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "()V" + "'", str54, "()V");
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(methodInfo57);
        org.junit.Assert.assertNotNull(signature58);
        org.junit.Assert.assertNotNull(typeArray59);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("B");
        boolean boolean9 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.lang.String str27 = classInfo26.toString();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        org.mockito.asm.Type[] typeArray29 = classInfo26.getInterfaces();
        generator0.setDelegates((java.lang.Object[]) typeArray29);
        boolean boolean31 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setUseCache(false);
        generator35.setAttemptLoad(true);
        boolean boolean40 = generator35.getAttemptLoad();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator35.getStrategy();
        generator32.setStrategy(generatorStrategy43);
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.mockito.asm.Type" + "'", str27, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("[Ljava/lang/String;(JFIF)V");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("I", method3, method4);
        java.lang.reflect.Method method6 = propertyDescriptor5.getReadMethod();
        java.lang.String str7 = propertyDescriptor5.getName();
        java.lang.String str8 = propertyDescriptor5.getName();
        java.lang.reflect.Method method9 = propertyDescriptor5.getReadMethod();
        boolean boolean10 = propertyDescriptor5.isExpert();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        boolean boolean13 = type1.equals((java.lang.Object) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray31 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray31);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray34);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj37 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass11, classArray22, (java.lang.Object[]) strArray36);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("int");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        boolean boolean10 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.lang.String str14 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor[name=int; bound]" + "'", str14, "java.beans.PropertyDescriptor[name=int; bound]");
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        java.lang.String[] strArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setUseCache(false);
        java.lang.String[] strArray9 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray12 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray12);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray13);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        generator1.setClasses(classArray15);
        generator1.setUseCache(true);
        generator1.setUseCache(false);
        generator1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator1.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean30 = namingPolicy28.equals((java.lang.Object) type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) type32);
        java.lang.String str34 = type32.getDescriptor();
        boolean boolean35 = namingPolicy28.equals((java.lang.Object) str34);
        generator25.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator25.getStrategy();
        boolean boolean38 = generator25.getAttemptLoad();
        java.lang.String[] strArray44 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        generator25.setClasses(classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        generator1.setDelegates((java.lang.Object[]) strArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator58.getNamingPolicy();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean61 = namingPolicy59.equals((java.lang.Object) type60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) type63);
        java.lang.String str65 = type63.getDescriptor();
        boolean boolean66 = namingPolicy59.equals((java.lang.Object) str65);
        generator56.setNamingPolicy(namingPolicy59);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray70 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray69, methodArray70);
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray74 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray73, methodArray74);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray69, methodArray74);
        java.lang.String[] strArray82 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray85 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray84, methodArray85);
        java.lang.reflect.Method[] methodArray87 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray82, methodArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray86);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray69, methodArray86);
        generator56.setDelegates((java.lang.Object[]) methodArray89);
        java.lang.reflect.Method[] methodArray91 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray92 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Z" + "'", str34, "Z");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Z" + "'", str65, "Z");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(methodArray86);
        org.junit.Assert.assertNotNull(methodArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(methodArray91);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, true, true);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, false, true);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray6);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray13);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean19 = namingPolicy17.equals((java.lang.Object) type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) type21);
        java.lang.String str23 = type21.getDescriptor();
        boolean boolean24 = namingPolicy17.equals((java.lang.Object) str23);
        generator0.setNamingPolicy(namingPolicy17);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Z" + "'", str23, "Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.toString();
        java.lang.String str15 = type12.toString();
        java.lang.Class<?> wildcardClass16 = type12.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.beans.PropertyEditor propertyEditor22 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass16);
        java.util.List list23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list24 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass16, list23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "I" + "'", str13, "I");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "I" + "'", str15, "I");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNull(propertyEditor22);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.beans.PropertyEditor propertyEditor6 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "org/mockito/asm/Type");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=boolean; bound]");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type16, type17 };
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("hi!", type13, typeArray18);
        org.mockito.asm.Type type20 = signature19.getReturnType();
        org.mockito.asm.Type type21 = signature19.getReturnType();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        int int24 = type22.getOpcode((int) ' ');
        int int25 = type22.getSize();
        java.lang.String str26 = type22.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type29, type30, type31, type32 };
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("hi!", type28, typeArray33);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray33);
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("boolean", type21, typeArray33);
        boolean boolean37 = propertyDescriptor3.equals((java.lang.Object) signature36);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(propertyEditor6);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37 + "'", int24 == 37);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "void" + "'", str26, "void");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(JFIF)V" + "'", str35, "(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        boolean boolean16 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method19 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("Lorg/mockito/asm/Type;");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=boolean; shortDescription=B]");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        boolean boolean18 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator16.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        generator16.setStyle(2);
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator16);
        java.lang.reflect.Method method24 = null;
        propertyDescriptor3.setWriteMethod(method24);
        java.lang.String str26 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=(JFIF)Z; displayName=Z]" + "'", str26, "java.beans.PropertyDescriptor[name=(JFIF)Z; displayName=Z]");
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("LI;", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setWriteMethod(method5);
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method7);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.String; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/String;" + "'", str5, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        java.lang.Class<?> wildcardClass13 = namingPolicy12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray14, true, true);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(classArray18);
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        generator0.setStyle(2);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 14");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        int int1 = type0.getSize();
        java.lang.String str2 = type0.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        org.mockito.asm.Type type12 = signature11.getReturnType();
        java.lang.String str13 = type12.getClassName();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean19 = namingPolicy17.equals((java.lang.Object) type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) type21);
        java.lang.String str23 = type21.getDescriptor();
        boolean boolean24 = namingPolicy17.equals((java.lang.Object) str23);
        generator14.setNamingPolicy(namingPolicy17);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray28 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray28);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray32 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray32);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray32);
        java.lang.String[] strArray40 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray44);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray44);
        generator14.setDelegates((java.lang.Object[]) methodArray47);
        generator14.setAttemptLoad(false);
        boolean boolean51 = type12.equals((java.lang.Object) false);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type54, type55, type56, type57 };
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("hi!", type53, typeArray58);
        org.mockito.asm.Type type60 = signature59.getReturnType();
        java.lang.String str61 = type60.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type66, type67, type68, type69 };
        org.mockito.cglib.core.Signature signature71 = new org.mockito.cglib.core.Signature("hi!", type65, typeArray70);
        org.mockito.cglib.core.Signature signature72 = new org.mockito.cglib.core.Signature("B", type63, typeArray70);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray70);
        org.mockito.cglib.core.Signature signature74 = new org.mockito.cglib.core.Signature("LZ;", type12, typeArray70);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray70);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray70);
        java.lang.String str77 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "S" + "'", str2, "S");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "void" + "'", str13, "void");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Z" + "'", str23, "Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "void" + "'", str61, "void");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(JFIF)V" + "'", str73, "(JFIF)V");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(JFIF)S" + "'", str76, "(JFIF)S");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "S" + "'", str77, "S");
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setConstrained(false);
        boolean boolean13 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean8 = namingPolicy6.equals((java.lang.Object) type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) type10);
        java.lang.String str12 = type10.getDescriptor();
        boolean boolean13 = namingPolicy6.equals((java.lang.Object) str12);
        generator3.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type19, type20 };
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("hi!", type16, typeArray21);
        org.mockito.asm.Type type23 = signature22.getReturnType();
        boolean boolean24 = namingPolicy6.equals((java.lang.Object) type23);
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type30, type31, type32, type33 };
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("hi!", type29, typeArray34);
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("B", type27, typeArray34);
        org.mockito.asm.Type[] typeArray37 = signature36.getArgumentTypes();
        boolean boolean39 = signature36.equals((java.lang.Object) (short) 1);
        java.lang.String str40 = signature36.getName();
        org.mockito.asm.Type[] typeArray41 = signature36.getArgumentTypes();
        generator0.setDelegates((java.lang.Object[]) typeArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin45 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "B" + "'", str40, "B");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy44);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        propertyDescriptor3.setBound(true);
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(JFIF)D");
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("boolean", "V");
        java.lang.String str3 = signature2.getDescriptor();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(JFIF)B");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (-1));
        org.mockito.asm.Type[] typeArray41 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type51, type52, type53, type54 };
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("hi!", type50, typeArray55);
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("B", type48, typeArray55);
        org.mockito.asm.Type[] typeArray58 = signature57.getArgumentTypes();
        org.mockito.asm.Type[] typeArray59 = signature57.getArgumentTypes();
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("org/mockito/cglib/core/Signature", type46, typeArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) typeArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        java.lang.String str16 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("org/mockito/asm/Type", method18, method19);
        boolean boolean21 = propertyDescriptor20.isExpert();
        java.beans.PropertyEditor propertyEditor22 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean21);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(propertyEditor22);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("boolean", method20, method21);
        propertyDescriptor22.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor22.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method27 = null;
        propertyDescriptor22.setReadMethod(method27);
        boolean boolean29 = propertyDescriptor22.isHidden();
        propertyDescriptor22.setValue("[Ljava/lang/String;", (java.lang.Object) (short) 100);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("boolean", method35, method36);
        propertyDescriptor37.setDisplayName("Z");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor37.setValue("boolean", (java.lang.Object) type41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type45, type46, type47, type48 };
        org.mockito.cglib.core.Signature signature50 = new org.mockito.cglib.core.Signature("hi!", type44, typeArray49);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray49);
        propertyDescriptor22.setValue("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]", (java.lang.Object) typeArray49);
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("char", type18, typeArray49);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray49);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray57 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray57);
        java.lang.Class<?> wildcardClass59 = strArray56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray60);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray60, false, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj65 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4, classArray54, (java.lang.Object[]) propertyDescriptorArray60);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.String;.<init>(org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type, org.mockito.asm.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/String;" + "'", str5, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(JFIF)J" + "'", str51, "(JFIF)J");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(methodArray64);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSort();
        java.lang.String str2 = type0.getClassName();
        boolean boolean4 = type0.equals((java.lang.Object) "");
        java.lang.String str5 = type0.getDescriptor();
        int int6 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "void" + "'", str2, "void");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "V" + "'", str5, "V");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        boolean boolean7 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=boolean; displayName=Z]");
        boolean boolean12 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean6 = namingPolicy4.equals((java.lang.Object) type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) type8);
        java.lang.String str10 = type8.getDescriptor();
        boolean boolean11 = namingPolicy4.equals((java.lang.Object) str10);
        generator1.setNamingPolicy(namingPolicy4);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray19 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray18, methodArray19);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray31);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray31);
        generator1.setDelegates((java.lang.Object[]) methodArray34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator1.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator37.getNamingPolicy();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator37.getNamingPolicy();
        generator37.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator47.getNamingPolicy();
        generator47.setAttemptLoad(true);
        generator47.setAttemptLoad(false);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass55 = type54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        generator47.setClasses(classArray58);
        java.lang.ClassLoader classLoader62 = generator47.getClassLoader();
        org.mockito.asm.Type[] typeArray64 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) typeArray64);
        generator37.setClassLoader(classLoader62);
        generator1.setClassLoader(classLoader62);
        java.lang.ClassLoader classLoader68 = generator1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor69 = org.mockito.cglib.core.ReflectUtils.findConstructor("byte", classLoader68);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setBound(false);
        boolean boolean10 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(false);
        boolean boolean13 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        boolean boolean14 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Z" + "'", str13, "Z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean11 = namingPolicy9.equals((java.lang.Object) type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) type13);
        java.lang.String str15 = type13.getDescriptor();
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) str15);
        generator6.setNamingPolicy(namingPolicy9);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray24 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray24);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray36);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray36);
        generator6.setDelegates((java.lang.Object[]) methodArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.String[] strArray49 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray52 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray52);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray55);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator61.getNamingPolicy();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean64 = namingPolicy62.equals((java.lang.Object) type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) type66);
        java.lang.String str68 = type66.getDescriptor();
        boolean boolean69 = namingPolicy62.equals((java.lang.Object) str68);
        generator59.setNamingPolicy(namingPolicy62);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray73 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray72, methodArray73);
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray77 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray76, methodArray77);
        java.lang.reflect.Method[] methodArray79 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray72, methodArray77);
        java.lang.String[] strArray85 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray87 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray88 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray87, methodArray88);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray85, methodArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray89);
        java.lang.reflect.Method[] methodArray92 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray72, methodArray89);
        generator59.setDelegates((java.lang.Object[]) methodArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray92);
        java.lang.reflect.Method[] methodArray95 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray57, methodArray92);
        java.lang.reflect.Method[] methodArray96 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray92);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Z" + "'", str15, "Z");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Z" + "'", str68, "Z");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(methodArray79);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(methodArray92);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(methodArray95);
        org.junit.Assert.assertNotNull(methodArray96);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lorg/mockito/asm/Type;(JFIF)S");
        boolean boolean13 = propertyDescriptor3.isPreferred();
        boolean boolean14 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setStyle(0);
        boolean boolean6 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        boolean boolean3 = generator1.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        boolean boolean8 = namingPolicy6.equals((java.lang.Object) "I");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) type9);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray13 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray13);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray17 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray17);
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray17);
        java.lang.String[] strArray25 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray28 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray28);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray29);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray29);
        boolean boolean33 = namingPolicy6.equals((java.lang.Object) strArray12);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) strArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type42, type43, type44, type45 };
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("hi!", type41, typeArray46);
        org.mockito.asm.Type type48 = signature47.getReturnType();
        java.lang.String str49 = signature47.getName();
        java.lang.String[] strArray55 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray58 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray57, methodArray58);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray59);
        boolean boolean62 = signature47.equals((java.lang.Object) methodArray59);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray59);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) methodArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(methodArray64);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass12 = generator5.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list15 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass12, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str13, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor", "void");
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass39 = type38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) propertyDescriptorArray43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean52 = namingPolicy50.equals((java.lang.Object) type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) type54);
        java.lang.String str56 = type54.getDescriptor();
        boolean boolean57 = namingPolicy50.equals((java.lang.Object) str56);
        generator47.setNamingPolicy(namingPolicy50);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray61 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray60, methodArray61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray65 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray64, methodArray65);
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray60, methodArray65);
        java.lang.String[] strArray73 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray76 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray75, methodArray76);
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray73, methodArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray77);
        java.lang.reflect.Method[] methodArray80 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray60, methodArray77);
        generator47.setDelegates((java.lang.Object[]) methodArray80);
        java.lang.Class<?> wildcardClass82 = generator47.getClass();
        java.lang.Class[] classArray83 = null;
        java.lang.reflect.Constructor constructor84 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass82, classArray83);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass86 = type85.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass86);
        java.lang.String str88 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass86);
        java.lang.String str89 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass86);
        java.beans.PropertyDescriptor[] propertyDescriptorArray90 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass86);
        java.lang.Object obj91 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor84, (java.lang.Object[]) propertyDescriptorArray90);
        org.mockito.asm.Type[] typeArray92 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor84);
        org.mockito.asm.Type[] typeArray93 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor84);
        java.lang.Object obj94 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) typeArray93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/Type" + "'", str42, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Z" + "'", str56, "Z");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(constructor84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org/mockito/asm/Type" + "'", str88, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/Type" + "'", str89, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray90);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getType();
        org.mockito.asm.Type type6 = classInfo3.getType();
        int int7 = classInfo3.getModifiers();
        boolean boolean9 = classInfo3.equals((java.lang.Object) 0.0d);
        int int10 = classInfo3.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getSuperType();
        int int7 = classInfo3.getModifiers();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setUseCache(false);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type15, type16 };
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", type12, typeArray17);
        generator8.setDelegates((java.lang.Object[]) typeArray17);
        boolean boolean20 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator8.getStrategy();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        boolean boolean28 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator26.getStrategy();
        generator8.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator8.getStrategy();
        boolean boolean32 = classInfo3.equals((java.lang.Object) generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setUseCache(false);
        java.lang.String[] strArray46 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray49 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray49);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray50);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        generator38.setClasses(classArray52);
        boolean boolean55 = generator38.getAttemptLoad();
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray58 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray57, methodArray58);
        java.lang.Class<?> wildcardClass60 = strArray57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        generator38.setDelegates((java.lang.Object[]) propertyDescriptorArray61);
        generator33.setDelegates((java.lang.Object[]) propertyDescriptorArray61);
        boolean boolean64 = classInfo3.equals((java.lang.Object) generator33);
        org.mockito.asm.ClassVisitor classVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator33.generateClass(classVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) -1, (byte) 10, (byte) 100 };
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean13 = namingPolicy11.equals((java.lang.Object) type12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) type15);
        java.lang.String str17 = type15.getDescriptor();
        boolean boolean18 = namingPolicy11.equals((java.lang.Object) str17);
        generator8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator8.getStrategy();
        boolean boolean21 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator22.getNamingPolicy();
        generator22.setAttemptLoad(true);
        generator22.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator22.getNamingPolicy();
        generator22.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator32.getNamingPolicy();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass40 = type39.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray42);
        int int44 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray43);
        generator32.setClasses(classArray43);
        java.lang.ClassLoader classLoader47 = generator32.getClassLoader();
        org.mockito.asm.Type[] typeArray49 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) typeArray49);
        generator22.setClassLoader(classLoader47);
        generator8.setClassLoader(classLoader47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class53 = org.mockito.cglib.core.ReflectUtils.defineClass("Lg/mockito/asm/Type;", byteArray7, classLoader47);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 0, 10, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(mixin50);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]]");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.getDescriptor();
        int int5 = type1.getOpcode(101);
        int int7 = type1.getOpcode(19);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ljava.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]];" + "'", str2, "Ljava.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]];");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ljava.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]];" + "'", str3, "Ljava.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]];");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 105 + "'", int5 == 105);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean8 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.String[] strArray40 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray44);
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setUseCache(false);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type54, type55, type56, type57 };
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("hi!", type53, typeArray58);
        generator49.setDelegates((java.lang.Object[]) typeArray58);
        boolean boolean61 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator49.getStrategy();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(true);
        boolean boolean67 = generator49.getAttemptLoad();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass69 = type68.getClass();
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass69);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass69);
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray71);
        int int73 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray72);
        generator49.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator49.getNamingPolicy();
        boolean boolean77 = generator49.getUseCache();
        java.lang.ClassLoader classLoader78 = generator49.getClassLoader();
        generator0.setClassLoader(classLoader78);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org/mockito/asm/Type" + "'", str70, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getType();
        org.mockito.asm.Type[] typeArray7 = classInfo3.getInterfaces();
        org.mockito.asm.Type type8 = classInfo3.getType();
        org.mockito.asm.Type type9 = classInfo3.getType();
        java.lang.Class<?> wildcardClass10 = classInfo3.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method11 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.ReflectUtils$4 is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy7);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(1041);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 1041");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type4, type5 };
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", type1, typeArray6);
        org.mockito.asm.Type type8 = signature7.getReturnType();
        org.mockito.asm.Type[] typeArray9 = signature7.getArgumentTypes();
        java.lang.String str10 = signature7.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(JFIF)V" + "'", str10, "(JFIF)V");
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator13.getNamingPolicy();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean16 = namingPolicy14.equals((java.lang.Object) type15);
        generator5.setNamingPolicy(namingPolicy14);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("boolean", method19, method20);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor21.getPropertyEditorClass();
        java.lang.String str23 = propertyDescriptor21.getName();
        java.lang.String str24 = propertyDescriptor21.getShortDescription();
        java.lang.String str25 = propertyDescriptor21.getName();
        propertyDescriptor21.setPreferred(true);
        boolean boolean28 = namingPolicy14.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/lang/Object");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JFIF)V");
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.getClassName();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean10 = namingPolicy8.equals((java.lang.Object) type9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) type12);
        java.lang.String str14 = type12.getDescriptor();
        boolean boolean15 = namingPolicy8.equals((java.lang.Object) str14);
        generator5.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator17.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy19);
        generator5.setAttemptLoad(true);
        boolean boolean23 = type1.equals((java.lang.Object) generator5);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(JFIF)V" + "'", str2, "(JFIF)V");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(JFIF)V" + "'", str4, "(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Z" + "'", str14, "Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        int int17 = type16.getSort();
        int int18 = type16.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.getClassName();
        java.lang.String str3 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I" + "'", str1, "I");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "int" + "'", str2, "int");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        java.lang.Object obj8 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=boolean; displayName=Z; shortDescription=(JFIF)V; preferred]");
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("boolean", method13, method14);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor15.getPropertyEditorClass();
        java.lang.String str17 = propertyDescriptor15.getName();
        java.lang.reflect.Method method18 = null;
        propertyDescriptor15.setWriteMethod(method18);
        propertyDescriptor15.setHidden(false);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("I", method24, method25);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor26.getPropertyEditorClass();
        java.lang.Object obj29 = propertyDescriptor26.getValue("LZ;");
        propertyDescriptor26.setPreferred(true);
        propertyDescriptor26.setConstrained(true);
        java.lang.reflect.Method method34 = propertyDescriptor26.getWriteMethod();
        propertyDescriptor15.setValue("Z(JFIF)V", (java.lang.Object) propertyDescriptor26);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator38.getNamingPolicy();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean41 = namingPolicy39.equals((java.lang.Object) type40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) type43);
        java.lang.String str45 = type43.getDescriptor();
        boolean boolean46 = namingPolicy39.equals((java.lang.Object) str45);
        generator36.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator48.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generator36.getUseCache();
        java.lang.String[] strArray58 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray61 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray60, methodArray61);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray58);
        generator36.setDelegates((java.lang.Object[]) strArray58);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray58);
        java.beans.PropertyEditor propertyEditor67 = propertyDescriptor15.createPropertyEditor((java.lang.Object) classArray66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method68 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass9, "java.beans.PropertyDescriptor[name=java/lang/Object]", classArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=java/lang/Object]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Z" + "'", str45, "Z");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNull(propertyEditor67);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray7 = classInfo6.getInterfaces();
        int int8 = classInfo6.getModifiers();
        java.lang.Class<?> wildcardClass9 = classInfo6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        boolean boolean14 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator12.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator12.setStyle(2);
        generator12.setStyle(2);
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        boolean boolean25 = generator23.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator23.setClassLoader(classLoader26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) type30);
        int int33 = type29.getOpcode((-1));
        boolean boolean34 = namingPolicy28.equals((java.lang.Object) (-1));
        generator12.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator36.getNamingPolicy();
        generator36.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean47 = namingPolicy45.equals((java.lang.Object) type46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) type49);
        java.lang.String str51 = type49.getDescriptor();
        boolean boolean52 = namingPolicy45.equals((java.lang.Object) str51);
        generator42.setNamingPolicy(namingPolicy45);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray56 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray56);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray60 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray59, methodArray60);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray60);
        java.lang.String[] strArray68 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray71 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray70, methodArray71);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray72);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray72);
        generator42.setDelegates((java.lang.Object[]) methodArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray75);
        generator36.setDelegates((java.lang.Object[]) classArray77);
        generator12.setClasses(classArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method80 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass9, "Lorg/mockito/cglib/proxy/Mixin$Generator;", classArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: Lorg/mockito/cglib/proxy/Mixin$Generator;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Z" + "'", str51, "Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(classArray77);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method6 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        java.lang.String str17 = signature14.getName();
        java.lang.String str18 = signature14.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        generator19.setAttemptLoad(true);
        boolean boolean24 = generator19.getAttemptLoad();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator19.getStrategy();
        boolean boolean28 = signature14.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator19.getNamingPolicy();
        generator19.setUseCache(true);
        boolean boolean32 = generator19.getAttemptLoad();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.Class<?> wildcardClass37 = strArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray38);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, false, false);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray42);
        generator19.setClasses(classArray43);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator19.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Z(JFIF)V" + "'", str18, "Z(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(classArray43);
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        java.lang.String str17 = signature14.getDescriptor();
        java.lang.String str18 = signature14.getDescriptor();
        java.lang.String str19 = signature14.toString();
        org.mockito.asm.Type type20 = signature14.getReturnType();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        boolean boolean24 = signature14.equals((java.lang.Object) false);
        java.lang.String str25 = signature14.toString();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("LI;", method27, method28);
        java.lang.reflect.Method method30 = null;
        propertyDescriptor29.setWriteMethod(method30);
        boolean boolean32 = signature14.equals((java.lang.Object) propertyDescriptor29);
        boolean boolean33 = propertyDescriptor29.isConstrained();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JFIF)V" + "'", str17, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(JFIF)V" + "'", str18, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z(JFIF)V" + "'", str19, "Z(JFIF)V");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z(JFIF)V" + "'", str25, "Z(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        org.mockito.asm.Type[] typeArray41 = methodInfo40.getExceptionTypes();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        java.lang.String str46 = classInfo45.toString();
        org.mockito.asm.Type type47 = classInfo45.getSuperType();
        org.mockito.asm.Type[] typeArray48 = classInfo45.getInterfaces();
        org.mockito.asm.Type type49 = classInfo45.getType();
        int int50 = classInfo45.getModifiers();
        org.mockito.asm.Type type51 = classInfo45.getSuperType();
        org.mockito.asm.Type type52 = classInfo45.getSuperType();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass54 = type53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass54);
        org.mockito.cglib.core.ClassInfo classInfo56 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type57 = classInfo56.getType();
        int int58 = classInfo56.getModifiers();
        org.mockito.asm.Type type59 = classInfo56.getSuperType();
        boolean boolean60 = classInfo45.equals((java.lang.Object) classInfo56);
        boolean boolean61 = methodInfo40.equals((java.lang.Object) classInfo45);
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("boolean", method63, method64);
        java.lang.Class<?> wildcardClass66 = propertyDescriptor65.getPropertyEditorClass();
        java.lang.String str67 = propertyDescriptor65.getName();
        java.lang.reflect.Method method68 = null;
        propertyDescriptor65.setWriteMethod(method68);
        propertyDescriptor65.setHidden(false);
        java.lang.String str72 = propertyDescriptor65.getShortDescription();
        java.lang.Class<?> wildcardClass73 = propertyDescriptor65.getPropertyType();
        java.lang.String str74 = propertyDescriptor65.getDisplayName();
        propertyDescriptor65.setExpert(true);
        boolean boolean77 = methodInfo40.equals((java.lang.Object) true);
        org.mockito.cglib.core.ClassInfo classInfo78 = methodInfo40.getClassInfo();
        java.lang.String str79 = classInfo78.toString();
        java.lang.Object obj80 = null;
        boolean boolean81 = classInfo78.equals(obj80);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.mockito.asm.Type" + "'", str46, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(classInfo78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str79, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setDisplayName("");
        java.lang.String str13 = propertyDescriptor3.getName();
        java.lang.String str14 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "I" + "'", str13, "I");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor[name=I; displayName=; preferred; constrained]" + "'", str14, "java.beans.PropertyDescriptor[name=I; displayName=; preferred; constrained]");
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("char");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (byte) -1);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("boolean", method47, method48);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor49.getPropertyEditorClass();
        java.lang.String str51 = propertyDescriptor49.getName();
        propertyDescriptor49.setConstrained(false);
        java.lang.String str54 = propertyDescriptor49.getShortDescription();
        boolean boolean55 = namingPolicy45.equals((java.lang.Object) str54);
        java.lang.String[] strArray61 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray64 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray64);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray67);
        boolean boolean69 = namingPolicy45.equals((java.lang.Object) classArray67);
        java.lang.String[] strArray70 = org.mockito.cglib.core.ReflectUtils.getNames(classArray67);
        java.lang.Object obj71 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) classArray67);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType("B(JFIF)V");
        propertyDescriptor3.setValue("boolean", (java.lang.Object) "B(JFIF)V");
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean23 = namingPolicy21.equals((java.lang.Object) type22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) type25);
        java.lang.String str27 = type25.getDescriptor();
        boolean boolean28 = namingPolicy21.equals((java.lang.Object) str27);
        generator18.setNamingPolicy(namingPolicy21);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray32 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray32);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray36 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray36);
        java.lang.String[] strArray44 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray48);
        generator18.setDelegates((java.lang.Object[]) methodArray51);
        java.lang.Class<?> wildcardClass53 = generator18.getClass();
        java.lang.Class[] classArray54 = null;
        java.lang.reflect.Constructor constructor55 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass53, classArray54);
        java.lang.String str56 = org.mockito.asm.Type.getConstructorDescriptor(constructor55);
        java.lang.String str57 = org.mockito.asm.Type.getConstructorDescriptor(constructor55);
        java.beans.PropertyEditor propertyEditor58 = propertyDescriptor3.createPropertyEditor((java.lang.Object) constructor55);
        java.lang.String str59 = org.mockito.asm.Type.getConstructorDescriptor(constructor55);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Z" + "'", str27, "Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(constructor55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "()V" + "'", str56, "()V");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "()V" + "'", str57, "()V");
        org.junit.Assert.assertNull(propertyEditor58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "()V" + "'", str59, "()V");
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        java.lang.String str39 = classInfo38.toString();
        int int40 = classInfo38.getModifiers();
        org.mockito.asm.Type type41 = classInfo38.getSuperType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.mockito.cglib.proxy.Mixin$Generator" + "'", str39, "org.mockito.cglib.proxy.Mixin$Generator");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(type41);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setUseCache(false);
        java.lang.String[] strArray9 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray12 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray12);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray13);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        generator1.setClasses(classArray15);
        boolean boolean18 = generator1.getAttemptLoad();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.Class<?> wildcardClass23 = strArray20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        generator1.setDelegates((java.lang.Object[]) propertyDescriptorArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator1.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean35 = namingPolicy33.equals((java.lang.Object) type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) type37);
        java.lang.String str39 = type37.getDescriptor();
        boolean boolean40 = namingPolicy33.equals((java.lang.Object) str39);
        generator30.setNamingPolicy(namingPolicy33);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type44, type45, type46, type47 };
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("hi!", type43, typeArray48);
        org.mockito.asm.Type type50 = signature49.getReturnType();
        boolean boolean51 = namingPolicy33.equals((java.lang.Object) type50);
        generator27.setNamingPolicy(namingPolicy33);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type57, type58, type59, type60 };
        org.mockito.cglib.core.Signature signature62 = new org.mockito.cglib.core.Signature("hi!", type56, typeArray61);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("B", type54, typeArray61);
        org.mockito.asm.Type[] typeArray64 = signature63.getArgumentTypes();
        boolean boolean66 = signature63.equals((java.lang.Object) (short) 1);
        java.lang.String str67 = signature63.getName();
        org.mockito.asm.Type[] typeArray68 = signature63.getArgumentTypes();
        generator27.setDelegates((java.lang.Object[]) typeArray68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator27.getStrategy();
        generator27.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator73.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator73.getNamingPolicy();
        generator73.setAttemptLoad(true);
        generator73.setAttemptLoad(false);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass81 = type80.getClass();
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass81);
        java.lang.Class[] classArray84 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray83);
        int int85 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray84);
        generator73.setClasses(classArray84);
        java.lang.ClassLoader classLoader88 = generator73.getClassLoader();
        generator27.setClassLoader(classLoader88);
        generator1.setClassLoader(classLoader88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method91 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=I; shortDescription=Lorg/mockito/asm/Type;; bound]", classLoader88);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Z" + "'", str39, "Z");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "B" + "'", str67, "B");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/Type" + "'", str82, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        generator0.setAttemptLoad(true);
        boolean boolean25 = generator0.getUseCache();
        boolean boolean26 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getType();
        org.mockito.asm.Type type7 = classInfo3.getType();
        int int8 = type7.getSort();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        boolean boolean11 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator9.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator9.getStrategy();
        generator9.setStyle(2);
        generator9.setStyle(2);
        generator9.setUseCache(false);
        boolean boolean20 = generator9.getAttemptLoad();
        boolean boolean21 = generator9.getAttemptLoad();
        boolean boolean22 = type7.equals((java.lang.Object) generator9);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean31 = namingPolicy29.equals((java.lang.Object) type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) type33);
        java.lang.String str35 = type33.getDescriptor();
        boolean boolean36 = namingPolicy29.equals((java.lang.Object) str35);
        generator26.setNamingPolicy(namingPolicy29);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray40 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray39, methodArray40);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray39, methodArray44);
        java.lang.String[] strArray52 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray55 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray55);
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray56);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray39, methodArray56);
        generator26.setDelegates((java.lang.Object[]) methodArray59);
        java.lang.Class<?> wildcardClass61 = generator26.getClass();
        java.lang.Class[] classArray62 = null;
        java.lang.reflect.Constructor constructor63 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass61, classArray62);
        org.mockito.asm.Type[] typeArray64 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor63);
        java.lang.String str65 = org.mockito.asm.Type.getConstructorDescriptor(constructor63);
        org.mockito.cglib.core.Signature signature66 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor63);
        org.mockito.cglib.core.Signature signature67 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor63);
        org.mockito.cglib.core.MethodInfo methodInfo69 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63, (int) (short) -1);
        org.mockito.asm.Type[] typeArray70 = methodInfo69.getExceptionTypes();
        org.mockito.cglib.core.Predicate predicate71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = namingPolicy23.getClassName("java/lang/Object", "(JFIF)Lorg/mockito/cglib/core/Signature;", (java.lang.Object) typeArray70, predicate71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Z" + "'", str35, "Z");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(constructor63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "()V" + "'", str65, "()V");
        org.junit.Assert.assertNotNull(signature66);
        org.junit.Assert.assertNotNull(signature67);
        org.junit.Assert.assertNotNull(methodInfo69);
        org.junit.Assert.assertNotNull(typeArray70);
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        byte[] byteArray1 = new byte[] {};
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator4.getNamingPolicy();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean7 = namingPolicy5.equals((java.lang.Object) type6);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) type9);
        java.lang.String str11 = type9.getDescriptor();
        boolean boolean12 = namingPolicy5.equals((java.lang.Object) str11);
        generator2.setNamingPolicy(namingPolicy5);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray16 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray16);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray20);
        java.lang.String[] strArray28 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray31 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray31);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray32);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray32);
        generator2.setDelegates((java.lang.Object[]) methodArray35);
        java.lang.Class<?> wildcardClass37 = generator2.getClass();
        java.lang.Class[] classArray38 = null;
        java.lang.reflect.Constructor constructor39 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass37, classArray38);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor39);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor39, (-1));
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor39);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor39, 5);
        int int46 = methodInfo45.getModifiers();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator47.getNamingPolicy();
        generator47.setAttemptLoad(true);
        generator47.setAttemptLoad(false);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass55 = type54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        generator47.setClasses(classArray58);
        java.lang.ClassLoader classLoader62 = generator47.getClassLoader();
        boolean boolean63 = methodInfo45.equals((java.lang.Object) generator47);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass65 = type64.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass65);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass65);
        generator47.setDelegates((java.lang.Object[]) propertyDescriptorArray67);
        java.lang.ClassLoader classLoader69 = generator47.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class70 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=boolean]", byteArray1, classLoader69);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(constructor39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isExpert();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type15, type16 };
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", type12, typeArray17);
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("B", type10, typeArray17);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.String str21 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("D");
        java.lang.String str24 = propertyDescriptor3.getDisplayName();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setUseCache(false);
        generator25.setAttemptLoad(true);
        boolean boolean30 = generator25.getAttemptLoad();
        generator25.setAttemptLoad(true);
        boolean boolean33 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator25.getStrategy();
        boolean boolean36 = generatorStrategy34.equals((java.lang.Object) 100.0d);
        java.beans.PropertyEditor propertyEditor37 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean36);
        propertyDescriptor3.setExpert(false);
        java.lang.String str40 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(propertyEditor37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; shortDescription=D]" + "'", str40, "java.beans.PropertyDescriptor[name=boolean; shortDescription=D]");
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=boolean; propertyEditorClass=class [Ljava.beans.PropertyDescriptor;]", method1, method2);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getType();
        java.lang.String str6 = classInfo3.toString();
        java.lang.Object obj7 = null;
        boolean boolean8 = classInfo3.equals(obj7);
        java.lang.String str9 = classInfo3.toString();
        org.mockito.asm.Type type10 = classInfo3.getSuperType();
        org.mockito.asm.Type type11 = classInfo3.getSuperType();
        int int12 = type11.getSize();
        int int14 = type11.getOpcode(1);
        int int15 = type11.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.Type" + "'", str6, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(method14);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean29 = namingPolicy27.equals((java.lang.Object) type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) type31);
        java.lang.String str33 = type31.getDescriptor();
        boolean boolean34 = namingPolicy27.equals((java.lang.Object) str33);
        generator24.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator24.getStrategy();
        boolean boolean37 = generator24.getAttemptLoad();
        java.lang.String[] strArray43 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray46 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray45, methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray47);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        generator24.setClasses(classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        generator0.setDelegates((java.lang.Object[]) strArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean60 = namingPolicy58.equals((java.lang.Object) type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) type62);
        java.lang.String str64 = type62.getDescriptor();
        boolean boolean65 = namingPolicy58.equals((java.lang.Object) str64);
        generator55.setNamingPolicy(namingPolicy58);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray69 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray69);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray73 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray72, methodArray73);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray73);
        java.lang.String[] strArray81 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray84 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray83, methodArray84);
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray81, methodArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray85);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray85);
        generator55.setDelegates((java.lang.Object[]) methodArray88);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray53, methodArray88);
        java.lang.reflect.Method[] methodArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray92 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray53, methodArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Z" + "'", str33, "Z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodArray84);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(methodArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray90);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass5);
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        java.lang.String[] strArray5 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray16, false, true);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray19);
        java.lang.Class<?> wildcardClass21 = methodArray19.getClass();
        java.util.List list22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list23 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass21, list22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("B", type3, typeArray10);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type1, typeArray10);
        org.mockito.asm.Type type14 = signature13.getReturnType();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setUseCache(false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type22, type23 };
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("hi!", type19, typeArray24);
        generator15.setDelegates((java.lang.Object[]) typeArray24);
        boolean boolean27 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator15.getStrategy();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        boolean boolean35 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator33.getStrategy();
        generator15.setStrategy(generatorStrategy36);
        boolean boolean38 = signature13.equals((java.lang.Object) generatorStrategy36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.getDescriptor();
        int int41 = type39.getSort();
        boolean boolean42 = generatorStrategy36.equals((java.lang.Object) type39);
        java.lang.String str43 = type39.toString();
        java.lang.String str44 = type39.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "I" + "'", str40, "I");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "I" + "'", str43, "I");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "int" + "'", str44, "int");
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        java.lang.String str17 = signature14.getDescriptor();
        java.lang.String str18 = signature14.getDescriptor();
        java.lang.String str19 = signature14.toString();
        org.mockito.asm.Type type20 = signature14.getReturnType();
        org.mockito.asm.Type type21 = signature14.getReturnType();
        java.lang.String str22 = signature14.getDescriptor();
        java.lang.String str23 = signature14.getDescriptor();
        java.lang.String str24 = signature14.getName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(JFIF)V" + "'", str17, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(JFIF)V" + "'", str18, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z(JFIF)V" + "'", str19, "Z(JFIF)V");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(JFIF)V" + "'", str22, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JFIF)V" + "'", str23, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray7 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray7);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray11);
        java.lang.String[] strArray19 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray22 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray22);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray23);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray23);
        generator0.setDelegates((java.lang.Object[]) methodArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(methodArray26);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}](JFIF)V");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        java.lang.String[] strArray5 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray9);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray15);
        java.lang.String[] strArray23 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray26 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray26);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray27);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray34);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray34);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray34);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray12);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, false, true);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) propertyDescriptorArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        propertyDescriptor3.setPreferred(true);
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method11 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(method11);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("()J");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/beans/PropertyDescriptor;", "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.junit.Assert.assertNotNull(type3);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setUseCache(false);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray12 = new org.mockito.asm.Type[] { type8, type9, type10, type11 };
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("hi!", type7, typeArray12);
        generator3.setDelegates((java.lang.Object[]) typeArray12);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Z", type2, typeArray12);
        java.lang.String str16 = signature15.getDescriptor();
        org.mockito.asm.Type type17 = signature15.getReturnType();
        java.lang.String str18 = signature15.getDescriptor();
        java.lang.String str19 = signature15.getDescriptor();
        java.lang.String str20 = signature15.toString();
        org.mockito.asm.Type type21 = signature15.getReturnType();
        org.mockito.asm.Type type22 = signature15.getReturnType();
        java.lang.String str23 = signature15.getDescriptor();
        org.mockito.asm.Type type24 = signature15.getReturnType();
        org.mockito.asm.Type[] typeArray26 = org.mockito.asm.Type.getArgumentTypes("(JFIF)LI;");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("(JFIF)L(JFIF)V;", type24, typeArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(JFIF)L(JFIF)V;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(JFIF)V" + "'", str16, "(JFIF)V");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(JFIF)V" + "'", str18, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(JFIF)V" + "'", str19, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Z(JFIF)V" + "'", str20, "Z(JFIF)V");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JFIF)V" + "'", str23, "(JFIF)V");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray26);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        java.lang.String str8 = classInfo7.toString();
        org.mockito.asm.Type type9 = classInfo7.getSuperType();
        org.mockito.asm.Type[] typeArray10 = classInfo7.getInterfaces();
        org.mockito.asm.Type type11 = classInfo7.getType();
        java.lang.String str12 = classInfo7.toString();
        java.lang.Class<?> wildcardClass13 = classInfo7.getClass();
        boolean boolean14 = classInfo3.equals((java.lang.Object) classInfo7);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("boolean", method16, method17);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor18.getPropertyType();
        propertyDescriptor18.setName("LI;LI;");
        boolean boolean22 = classInfo3.equals((java.lang.Object) propertyDescriptor18);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.Type" + "'", str8, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.Type" + "'", str12, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str26 = signature25.getName();
        java.lang.Class<?> wildcardClass27 = signature25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray28);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, false, false);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass36 = type35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) propertyDescriptorArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/Type" + "'", str38, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=I; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean6 = namingPolicy4.equals((java.lang.Object) type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) type8);
        java.lang.String str10 = type8.getDescriptor();
        boolean boolean11 = namingPolicy4.equals((java.lang.Object) str10);
        generator1.setNamingPolicy(namingPolicy4);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray19 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray18, methodArray19);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray31);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray31);
        generator1.setDelegates((java.lang.Object[]) methodArray34);
        java.lang.Class<?> wildcardClass36 = generator1.getClass();
        java.lang.Class[] classArray37 = null;
        java.lang.reflect.Constructor constructor38 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass36, classArray37);
        org.mockito.asm.Type[] typeArray39 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor38);
        org.mockito.cglib.core.MethodInfo methodInfo41 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor38, (-1));
        java.lang.String str42 = methodInfo41.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass51 = type50.getClass();
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass51);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray54);
        generator43.setClasses(classArray54);
        java.lang.ClassLoader classLoader58 = generator43.getClassLoader();
        boolean boolean59 = methodInfo41.equals((java.lang.Object) generator43);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator60.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator60.getNamingPolicy();
        generator60.setAttemptLoad(true);
        generator60.setAttemptLoad(false);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass68 = type67.getClass();
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass68);
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray71);
        generator60.setClasses(classArray71);
        java.lang.ClassLoader classLoader75 = generator60.getClassLoader();
        generator43.setClassLoader(classLoader75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method77 = org.mockito.cglib.core.ReflectUtils.findMethod("org/mockito/cglib/core/Signature(JFIF)S", classLoader75);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(constructor38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(methodInfo41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<init>()V" + "'", str42, "<init>()V");
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/Type" + "'", str52, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org/mockito/asm/Type" + "'", str69, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setValue("B", (java.lang.Object) "Z");
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        java.lang.String[] strArray22 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray26);
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        generator14.setClasses(classArray28);
        boolean boolean31 = generator14.getAttemptLoad();
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray34 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray34);
        java.lang.Class<?> wildcardClass36 = strArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        generator14.setDelegates((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.beans.PropertyEditor propertyEditor42 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray41);
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=boolean]", method47, method48);
        // The following exception was thrown during execution in test generation
        try {
            propertyDescriptor3.setValue("ava.beans.PropertyDescriptor[name=boolean", (java.lang.Object) method47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNull(propertyEditor42);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getSuperType();
        int int7 = classInfo3.getModifiers();
        int int8 = classInfo3.getModifiers();
        java.lang.String str9 = classInfo3.toString();
        org.mockito.asm.Type type10 = classInfo3.getType();
        java.lang.Class<?> wildcardClass11 = classInfo3.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass11);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.ReflectUtils$4.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.asm.Type type5 = classInfo3.getType();
        int int6 = classInfo3.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("L(JFIF)Z;", "booleanLZ;(JFIF)LI;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'L(JFIF)Z;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean6 = namingPolicy4.equals((java.lang.Object) type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) type8);
        java.lang.String str10 = type8.getDescriptor();
        boolean boolean11 = namingPolicy4.equals((java.lang.Object) str10);
        generator1.setNamingPolicy(namingPolicy4);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray19 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray18, methodArray19);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray19);
        java.lang.String[] strArray27 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray31);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray31);
        generator1.setDelegates((java.lang.Object[]) methodArray34);
        java.lang.String[] strArray41 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        int int48 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray47);
        generator1.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setUseCache(false);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type55, type56, type57, type58 };
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("hi!", type54, typeArray59);
        generator50.setDelegates((java.lang.Object[]) typeArray59);
        boolean boolean62 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator50.getStrategy();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(true);
        boolean boolean68 = generator50.getAttemptLoad();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass70 = type69.getClass();
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass70);
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass70);
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray72);
        int int74 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray73);
        generator50.setClasses(classArray75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator50.getNamingPolicy();
        boolean boolean78 = generator50.getUseCache();
        java.lang.ClassLoader classLoader79 = generator50.getClassLoader();
        generator1.setClassLoader(classLoader79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method81 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]]", classLoader79);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org/mockito/asm/Type" + "'", str71, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("char", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("boolean", "LZ;");
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("boolean", method10, method11);
        propertyDescriptor12.setDisplayName("Z");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor12.setValue("boolean", (java.lang.Object) type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type22, type23 };
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("hi!", type19, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("void", type8, typeArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray24);
        boolean boolean29 = propertyDescriptor3.equals((java.lang.Object) typeArray24);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JFIF)J" + "'", str26, "(JFIF)J");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        propertyDescriptor3.setConstrained(true);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        boolean boolean9 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Z" + "'", str8, "Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        int int3 = type1.getOpcode((int) ' ');
        int int4 = type1.getSize();
        int int6 = type1.getOpcode((int) ' ');
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getDescriptor();
        int int10 = type7.getOpcode(9);
        java.lang.Class<?> wildcardClass11 = type7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray13 = classInfo12.getInterfaces();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; bound]", type1, typeArray13);
        org.mockito.asm.Type[] typeArray15 = signature14.getArgumentTypes();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 37 + "'", int3 == 37);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37 + "'", int6 == 37);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Z" + "'", str8, "Z");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray15);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.Object obj12 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=boolean; values={java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]=false}; constrained]");
        propertyDescriptor3.setName("LI;");
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        propertyDescriptor3.setShortDescription("java/util/Collections$EmptyEnumeration");
        boolean boolean19 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass39 = type38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) propertyDescriptorArray43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean53 = namingPolicy51.equals((java.lang.Object) type52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type56, type57, type58, type59 };
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("hi!", type55, typeArray60);
        boolean boolean62 = namingPolicy51.equals((java.lang.Object) signature61);
        java.lang.String str63 = signature61.getName();
        org.mockito.asm.Type type64 = signature61.getReturnType();
        int int66 = type64.getOpcode(42);
        int int67 = type64.getSize();
        int int69 = type64.getOpcode((int) (byte) 10);
        java.lang.String str70 = type64.getClassName();
        boolean boolean71 = methodInfo49.equals((java.lang.Object) str70);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/Type" + "'", str42, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 47 + "'", int66 == 47);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 15 + "'", int69 == 15);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "void" + "'", str70, "void");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        boolean boolean18 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator16.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        generator16.setStyle(2);
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator16);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        boolean boolean27 = generator25.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, false);
        generator25.setDelegates((java.lang.Object[]) methodArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator25.getStrategy();
        generator16.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean46 = namingPolicy44.equals((java.lang.Object) type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) type48);
        java.lang.String str50 = type48.getDescriptor();
        boolean boolean51 = namingPolicy44.equals((java.lang.Object) str50);
        generator41.setNamingPolicy(namingPolicy44);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray55 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray55);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray59 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray59);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray59);
        java.lang.String[] strArray67 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray70 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray69, methodArray70);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray67, methodArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray71);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray71);
        generator41.setDelegates((java.lang.Object[]) methodArray74);
        java.lang.Class<?> wildcardClass76 = generator41.getClass();
        java.lang.Class[] classArray77 = null;
        java.lang.reflect.Constructor constructor78 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass76, classArray77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass80 = type79.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass80);
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass80);
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass80);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass80);
        java.lang.Object obj85 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor78, (java.lang.Object[]) propertyDescriptorArray84);
        org.mockito.asm.Type[] typeArray86 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor78);
        org.mockito.cglib.core.MethodInfo methodInfo87 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78);
        boolean boolean88 = generatorStrategy39.equals((java.lang.Object) constructor78);
        java.lang.String str89 = org.mockito.asm.Type.getConstructorDescriptor(constructor78);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/Type" + "'", str33, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(constructor78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/Type" + "'", str82, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/Type" + "'", str83, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertNotNull(methodInfo87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "()V" + "'", str89, "()V");
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("boolean", method4, method5);
        java.lang.Class<?> wildcardClass7 = propertyDescriptor6.getPropertyEditorClass();
        java.lang.String str8 = propertyDescriptor6.getName();
        propertyDescriptor6.setConstrained(false);
        java.lang.String str11 = propertyDescriptor6.getShortDescription();
        boolean boolean12 = namingPolicy2.equals((java.lang.Object) str11);
        java.lang.String[] strArray18 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray18, methodArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray24);
        boolean boolean26 = namingPolicy2.equals((java.lang.Object) classArray24);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray28);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        int int31 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.toString();
        int int5 = type0.getOpcode(6);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("boolean", method10, method11);
        propertyDescriptor12.setDisplayName("Z");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor12.setValue("boolean", (java.lang.Object) type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type22, type23 };
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("hi!", type19, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("double", type7, typeArray24);
        boolean boolean28 = type0.equals((java.lang.Object) type7);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = type7.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I" + "'", str1, "I");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I" + "'", str2, "I");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JFIF)J" + "'", str26, "(JFIF)J");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type4, type5, type6, type7 };
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", type3, typeArray8);
        org.mockito.asm.Type type10 = signature9.getReturnType();
        java.lang.String str11 = type10.getClassName();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean17 = namingPolicy15.equals((java.lang.Object) type16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) type19);
        java.lang.String str21 = type19.getDescriptor();
        boolean boolean22 = namingPolicy15.equals((java.lang.Object) str21);
        generator12.setNamingPolicy(namingPolicy15);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray26 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray30);
        java.lang.String[] strArray38 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray41 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray41);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray42);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray42);
        generator12.setDelegates((java.lang.Object[]) methodArray45);
        generator12.setAttemptLoad(false);
        boolean boolean49 = type10.equals((java.lang.Object) false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type54, type55 };
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("hi!", type51, typeArray56);
        org.mockito.asm.Type type58 = signature57.getReturnType();
        java.lang.String str59 = type58.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type64, type65, type66, type67 };
        org.mockito.cglib.core.Signature signature69 = new org.mockito.cglib.core.Signature("hi!", type63, typeArray68);
        org.mockito.cglib.core.Signature signature70 = new org.mockito.cglib.core.Signature("B", type61, typeArray68);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray68);
        org.mockito.cglib.core.Signature signature72 = new org.mockito.cglib.core.Signature("LZ;", type10, typeArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator74.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator74.getNamingPolicy();
        generator74.setAttemptLoad(true);
        java.lang.ClassLoader classLoader79 = null;
        generator74.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator74.getNamingPolicy();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]");
        boolean boolean84 = namingPolicy81.equals((java.lang.Object) type83);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass86 = type85.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass86);
        org.mockito.cglib.core.ClassInfo classInfo88 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass86);
        java.lang.String str89 = classInfo88.toString();
        java.lang.String str90 = classInfo88.toString();
        org.mockito.asm.Type type91 = classInfo88.getSuperType();
        org.mockito.asm.Type[] typeArray92 = classInfo88.getInterfaces();
        org.mockito.cglib.core.Signature signature93 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type83, typeArray92);
        org.mockito.cglib.core.Signature signature94 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]]", type10, typeArray92);
        org.mockito.asm.Type[] typeArray95 = signature94.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) typeArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Z" + "'", str21, "Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "void" + "'", str59, "void");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(JFIF)V" + "'", str71, "(JFIF)V");
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(classInfo88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.mockito.asm.Type" + "'", str89, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.mockito.asm.Type" + "'", str90, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(typeArray95);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setDisplayName("[Ljava/lang/String;(JFIF)V");
        propertyDescriptor3.setDisplayName("[Ljava/beans/PropertyDescriptor;");
        boolean boolean18 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (-1));
        org.mockito.asm.Type[] typeArray41 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, true, true);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, false, true);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        java.lang.Class<?> wildcardClass54 = classArray52.getClass();
        org.mockito.cglib.core.ClassInfo classInfo55 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass54);
        java.lang.Object obj57 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) propertyDescriptorArray56);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(obj57);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.toString();
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I" + "'", str1, "I");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I" + "'", str2, "I");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]()Ljava.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained];");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.Class<?> wildcardClass22 = strArray19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray23);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, false, false);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, false, false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray30);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass9 = generatorStrategy8.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.DefaultGeneratorStrategy is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setUseCache(false);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type15, type16, type17, type18 };
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("hi!", type14, typeArray19);
        generator10.setDelegates((java.lang.Object[]) typeArray19);
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("Z", type9, typeArray19);
        propertyDescriptor3.setValue("", (java.lang.Object) "Z");
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        boolean boolean27 = generator24.getAttemptLoad();
        boolean boolean28 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator24.getStrategy();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        java.lang.String str34 = classInfo33.toString();
        org.mockito.asm.Type type35 = classInfo33.getType();
        org.mockito.asm.Type type36 = classInfo33.getType();
        int int37 = classInfo33.getModifiers();
        boolean boolean39 = classInfo33.equals((java.lang.Object) 0.0d);
        org.mockito.asm.Type[] typeArray40 = classInfo33.getInterfaces();
        boolean boolean41 = generatorStrategy29.equals((java.lang.Object) typeArray40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setUseCache(false);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type49, type50, type51, type52 };
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("hi!", type48, typeArray53);
        generator44.setDelegates((java.lang.Object[]) typeArray53);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("Z", type43, typeArray53);
        java.lang.String str57 = signature56.getDescriptor();
        org.mockito.asm.Type type58 = signature56.getReturnType();
        java.lang.String str59 = signature56.getDescriptor();
        java.lang.String str60 = signature56.getDescriptor();
        java.lang.String str61 = signature56.toString();
        org.mockito.asm.Type type62 = signature56.getReturnType();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator63.setUseCache(false);
        boolean boolean66 = signature56.equals((java.lang.Object) false);
        java.lang.String str67 = signature56.toString();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("LI;", method69, method70);
        java.lang.reflect.Method method72 = null;
        propertyDescriptor71.setWriteMethod(method72);
        boolean boolean74 = signature56.equals((java.lang.Object) propertyDescriptor71);
        boolean boolean75 = generatorStrategy29.equals((java.lang.Object) boolean74);
        boolean boolean76 = propertyDescriptor3.equals((java.lang.Object) boolean75);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.Type" + "'", str34, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(JFIF)V" + "'", str57, "(JFIF)V");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(JFIF)V" + "'", str59, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(JFIF)V" + "'", str60, "(JFIF)V");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Z(JFIF)V" + "'", str61, "Z(JFIF)V");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Z(JFIF)V" + "'", str67, "Z(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method11 = propertyDescriptor3.getWriteMethod();
        boolean boolean12 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean22 = namingPolicy20.equals((java.lang.Object) type21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) type24);
        java.lang.String str26 = type24.getDescriptor();
        boolean boolean27 = namingPolicy20.equals((java.lang.Object) str26);
        generator17.setNamingPolicy(namingPolicy20);
        boolean boolean29 = generator17.getUseCache();
        boolean boolean30 = generator17.getAttemptLoad();
        boolean boolean31 = generator17.getUseCache();
        boolean boolean32 = propertyDescriptor3.equals((java.lang.Object) boolean31);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Z" + "'", str26, "Z");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setWriteMethod(method5);
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        java.lang.String str17 = signature14.getName();
        java.lang.String str18 = signature14.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        generator19.setAttemptLoad(true);
        boolean boolean24 = generator19.getAttemptLoad();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator19.getStrategy();
        boolean boolean28 = signature14.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator19.getNamingPolicy();
        generator19.setUseCache(true);
        boolean boolean32 = generator19.getAttemptLoad();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.Class<?> wildcardClass37 = strArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray38);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, false, false);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray42);
        generator19.setClasses(classArray43);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator19.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Z(JFIF)V" + "'", str18, "Z(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(classArray43);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=boolean; constrained]");
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.String str8 = propertyDescriptor3.getName();
        boolean boolean9 = propertyDescriptor3.isHidden();
        boolean boolean10 = propertyDescriptor3.isExpert();
        java.lang.String str11 = propertyDescriptor3.getName();
        java.lang.ClassLoader classLoader12 = null;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) propertyDescriptorArray18);
        java.lang.ClassLoader classLoader20 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        boolean boolean23 = generator21.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        boolean boolean28 = namingPolicy26.equals((java.lang.Object) "I");
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean30 = namingPolicy26.equals((java.lang.Object) type29);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray37 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray37);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray37);
        java.lang.String[] strArray45 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray48 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray47, methodArray48);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray45, methodArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray49);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray49);
        boolean boolean53 = namingPolicy26.equals((java.lang.Object) strArray32);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) strArray32);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin19.newInstance((java.lang.Object[]) strArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setUseCache(false);
        java.lang.String[] strArray64 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray67 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray66, methodArray67);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray64, methodArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray68);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        generator56.setClasses(classArray70);
        java.lang.String[] strArray73 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        java.lang.String[] strArray74 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin19.newInstance((java.lang.Object[]) strArray74);
        java.beans.PropertyEditor propertyEditor77 = propertyDescriptor3.createPropertyEditor((java.lang.Object) mixin76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass78 = propertyEditor77.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "I" + "'", str11, "I");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNull(propertyEditor77);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setValue("B", (java.lang.Object) "Z");
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        java.lang.String[] strArray22 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray26);
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        generator14.setClasses(classArray28);
        boolean boolean31 = generator14.getAttemptLoad();
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray34 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray34);
        java.lang.Class<?> wildcardClass36 = strArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        generator14.setDelegates((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.beans.PropertyEditor propertyEditor42 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray41);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNull(propertyEditor42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setDisplayName("D");
        propertyDescriptor3.setExpert(true);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        generator0.setStyle(2);
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        boolean boolean18 = generator16.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy21);
        java.lang.String[] strArray28 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray31 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray31);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray32);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = null;
        generator0.setClassLoader(classLoader36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean43 = namingPolicy41.equals((java.lang.Object) type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) type45);
        java.lang.String str47 = type45.getDescriptor();
        boolean boolean48 = namingPolicy41.equals((java.lang.Object) str47);
        generator38.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy52);
        boolean boolean54 = generator38.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setUseCache(false);
        java.lang.String[] strArray63 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray66 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray65, methodArray66);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray67);
        java.lang.String[] strArray70 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        generator55.setClasses(classArray69);
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        generator38.setClasses(classArray69);
        generator0.setClasses(classArray69);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        java.lang.Object[] objArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Z" + "'", str47, "Z");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(classArray75);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)LI;=org/mockito/asm/Type}]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method8 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        java.lang.String str17 = signature14.getName();
        java.lang.String str18 = signature14.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        generator19.setAttemptLoad(true);
        boolean boolean24 = generator19.getAttemptLoad();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator19.getStrategy();
        boolean boolean28 = signature14.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator19.getNamingPolicy();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("I", method33, method34);
        java.lang.reflect.Method method36 = propertyDescriptor35.getReadMethod();
        java.lang.String str37 = propertyDescriptor35.getName();
        java.lang.String str38 = propertyDescriptor35.getName();
        boolean boolean39 = propertyDescriptor35.isExpert();
        org.mockito.cglib.core.Predicate predicate40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = namingPolicy29.getClassName("hi!", "java.beans.PropertyDescriptor[name=boolean; hidden]", (java.lang.Object) propertyDescriptor35, predicate40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Z(JFIF)V" + "'", str18, "Z(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNull(method36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "I" + "'", str37, "I");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "I" + "'", str38, "I");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isExpert();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type15, type16 };
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", type12, typeArray17);
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("B", type10, typeArray17);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.String str21 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        boolean boolean24 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray23 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray23);
        generator18.setDelegates((java.lang.Object[]) methodArray24);
        generator0.setDelegates((java.lang.Object[]) methodArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setUseCache(false);
        java.lang.String[] strArray35 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray38 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray38);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        generator27.setClasses(classArray41);
        boolean boolean44 = generator27.getAttemptLoad();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.Class<?> wildcardClass49 = strArray46.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass49);
        generator27.setDelegates((java.lang.Object[]) propertyDescriptorArray50);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, false, true);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray50);
        java.lang.ClassLoader classLoader56 = null;
        generator0.setClassLoader(classLoader56);
        boolean boolean58 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str7 = classInfo6.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo6.getInterfaces();
        java.lang.String str9 = classInfo6.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator6.getNamingPolicy();
        generator6.setAttemptLoad(true);
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator6.getNamingPolicy();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]");
        boolean boolean16 = namingPolicy13.equals((java.lang.Object) type15);
        boolean boolean18 = namingPolicy13.equals((java.lang.Object) 47);
        generator0.setNamingPolicy(namingPolicy13);
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        java.lang.Object obj3 = null;
        boolean boolean4 = generatorStrategy2.equals(obj3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setUseCache(false);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type12, type13, type14, type15 };
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", type11, typeArray16);
        generator7.setDelegates((java.lang.Object[]) typeArray16);
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("Z", type6, typeArray16);
        java.lang.String str20 = signature19.getDescriptor();
        org.mockito.asm.Type type21 = signature19.getReturnType();
        java.lang.String str22 = signature19.getName();
        java.lang.String str23 = signature19.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setUseCache(false);
        generator24.setAttemptLoad(true);
        boolean boolean29 = generator24.getAttemptLoad();
        generator24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator24.getStrategy();
        boolean boolean33 = signature19.equals((java.lang.Object) generator24);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator24.getNamingPolicy();
        generator24.setUseCache(true);
        boolean boolean37 = generator24.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator38.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator38.getNamingPolicy();
        generator38.setAttemptLoad(true);
        generator38.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator38.getNamingPolicy();
        generator38.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator48.getNamingPolicy();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass56 = type55.getClass();
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass56);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray58);
        int int60 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray59);
        generator48.setClasses(classArray59);
        java.lang.ClassLoader classLoader63 = generator48.getClassLoader();
        org.mockito.asm.Type[] typeArray65 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) typeArray65);
        generator38.setClassLoader(classLoader63);
        generator24.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader69 = generator24.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray70 = generatorStrategy2.generate((org.mockito.cglib.core.ClassGenerator) generator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JFIF)V" + "'", str20, "(JFIF)V");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Z" + "'", str22, "Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Z(JFIF)V" + "'", str23, "Z(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/Type" + "'", str57, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.beans.PropertyEditor propertyEditor6 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "org/mockito/asm/Type");
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = classInfo11.getSuperType();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(propertyEditor6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setConstrained(false);
        boolean boolean10 = propertyDescriptor3.isPreferred();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        java.lang.String str17 = signature14.getName();
        java.lang.String str18 = signature14.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setUseCache(false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type24, type25, type26, type27 };
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", type23, typeArray28);
        generator19.setDelegates((java.lang.Object[]) typeArray28);
        boolean boolean31 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator19.getStrategy();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        boolean boolean39 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        generator19.setStrategy(generatorStrategy40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        java.lang.String str46 = classInfo45.toString();
        org.mockito.asm.Type type47 = classInfo45.getSuperType();
        org.mockito.asm.Type[] typeArray48 = classInfo45.getInterfaces();
        generator19.setDelegates((java.lang.Object[]) typeArray48);
        boolean boolean50 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator53.getNamingPolicy();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean56 = namingPolicy54.equals((java.lang.Object) type55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) type58);
        java.lang.String str60 = type58.getDescriptor();
        boolean boolean61 = namingPolicy54.equals((java.lang.Object) str60);
        generator51.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator51.getStrategy();
        generator19.setStrategy(generatorStrategy63);
        boolean boolean65 = signature14.equals((java.lang.Object) generatorStrategy63);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Z(JFIF)V" + "'", str18, "Z(JFIF)V");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.mockito.asm.Type" + "'", str46, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Z" + "'", str60, "Z");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setValue("D", (java.lang.Object) "hi!");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.Class[] classArray3 = null;
        generator0.setClasses(classArray3);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader6 = null;
        generator1.setClassLoader(classLoader6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator1.getNamingPolicy();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]");
        boolean boolean11 = namingPolicy8.equals((java.lang.Object) type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.lang.String str16 = classInfo15.toString();
        java.lang.String str17 = classInfo15.toString();
        org.mockito.asm.Type type18 = classInfo15.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo15.getInterfaces();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type10, typeArray19);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("boolean", method22, method23);
        propertyDescriptor24.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor24.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor24.setHidden(false);
        java.lang.Class<?> wildcardClass31 = propertyDescriptor24.getPropertyEditorClass();
        propertyDescriptor24.setConstrained(false);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor24.getPropertyType();
        propertyDescriptor24.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        boolean boolean39 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator37.getStrategy();
        generator37.setStyle(2);
        java.beans.PropertyEditor propertyEditor44 = propertyDescriptor24.createPropertyEditor((java.lang.Object) generator37);
        boolean boolean45 = signature20.equals((java.lang.Object) propertyDescriptor24);
        propertyDescriptor24.setHidden(true);
        boolean boolean48 = propertyDescriptor24.isConstrained();
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type" + "'", str16, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNull(propertyEditor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("B", type3, typeArray10);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type1, typeArray10);
        org.mockito.asm.Type type14 = signature13.getReturnType();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setUseCache(false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type22, type23 };
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("hi!", type19, typeArray24);
        generator15.setDelegates((java.lang.Object[]) typeArray24);
        boolean boolean27 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator15.getStrategy();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        boolean boolean35 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator33.getStrategy();
        generator15.setStrategy(generatorStrategy36);
        boolean boolean38 = signature13.equals((java.lang.Object) generatorStrategy36);
        org.mockito.asm.Type type39 = signature13.getReturnType();
        org.mockito.asm.Type type40 = signature13.getReturnType();
        int int41 = type40.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=boolean; expert]");
        java.lang.Object obj13 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]]");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; expert]" + "'", str14, "java.beans.PropertyDescriptor[name=boolean; expert]");
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        java.lang.String[] strArray5 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("I", method15, method16);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor17.getPropertyEditorClass();
        java.lang.Object obj20 = propertyDescriptor17.getValue("LZ;");
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray24 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray24);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray28 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray28);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray28);
        java.lang.String[] strArray36 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray39 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray39);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray40);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray40);
        propertyDescriptor17.setValue("org/mockito/asm/Type", (java.lang.Object) strArray23);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray51 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray50, methodArray51);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray51);
        java.lang.String[] strArray59 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray62 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray62);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray59, methodArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray63);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray69 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray69);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray73 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray72, methodArray73);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray74);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray75);
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray76);
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) methodArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(methodArray78);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.reflect.Method[] methodArray6 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, true);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class<?> wildcardClass8 = propertyDescriptorArray0.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("void", method12, method13);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor14.setReadMethod(method15);
        java.lang.String str17 = propertyDescriptor14.getShortDescription();
        java.lang.reflect.Method method18 = null;
        propertyDescriptor14.setWriteMethod(method18);
        propertyDescriptor14.setPreferred(false);
        propertyDescriptor3.setValue("()J", (java.lang.Object) false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (byte) -1);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        java.lang.String[] strArray49 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray52 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray52);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray53);
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray59 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray60);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray60);
        java.lang.String[] strArray68 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray71 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray70, methodArray71);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray72);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray72);
        java.lang.Object obj76 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) methodArray72);
        org.mockito.asm.Type[] typeArray77 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.asm.Type[] typeArray78 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.asm.Type[] typeArray79 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature80 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.asm.Type type81 = signature80.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(signature80);
        org.junit.Assert.assertNotNull(type81);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean8 = namingPolicy6.equals((java.lang.Object) type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) type10);
        java.lang.String str12 = type10.getDescriptor();
        boolean boolean13 = namingPolicy6.equals((java.lang.Object) str12);
        generator3.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type19, type20 };
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("hi!", type16, typeArray21);
        org.mockito.asm.Type type23 = signature22.getReturnType();
        boolean boolean24 = namingPolicy6.equals((java.lang.Object) type23);
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass27 = type26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = classInfo29.getType();
        int int31 = classInfo29.getModifiers();
        org.mockito.asm.Type type32 = classInfo29.getSuperType();
        int int33 = classInfo29.getModifiers();
        int int34 = classInfo29.getModifiers();
        java.lang.String str35 = classInfo29.toString();
        org.mockito.asm.Type type36 = classInfo29.getType();
        java.lang.Class<?> wildcardClass37 = classInfo29.getClass();
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin41 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.mockito.asm.Type" + "'", str35, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/cglib/core/ReflectUtils$4;" + "'", str38, "Lorg/mockito/cglib/core/ReflectUtils$4;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("int");
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        boolean boolean10 = propertyDescriptor3.isPreferred();
        boolean boolean11 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str26 = signature25.getName();
        java.lang.Class<?> wildcardClass27 = signature25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) propertyDescriptorArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean8 = namingPolicy6.equals((java.lang.Object) type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) type10);
        java.lang.String str12 = type10.getDescriptor();
        boolean boolean13 = namingPolicy6.equals((java.lang.Object) str12);
        generator3.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type19, type20 };
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("hi!", type16, typeArray21);
        org.mockito.asm.Type type23 = signature22.getReturnType();
        boolean boolean24 = namingPolicy6.equals((java.lang.Object) type23);
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("LI;", "LI;");
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        boolean boolean31 = signature28.equals((java.lang.Object) generator29);
        java.lang.String[] strArray37 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray40 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray39, methodArray40);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray41);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray47);
        java.lang.String[] strArray55 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray58 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray57, methodArray58);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray59);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray65 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray64, methodArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray66);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray62, methodArray66);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray66);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray44);
        generator29.setClasses(classArray70);
        generator0.setClasses(classArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(classArray70);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("D", "org.mockito.asm.Type");
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.Class<?> wildcardClass3 = propertyDescriptorArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.Class<?> wildcardClass22 = strArray19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setUseCache(false);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type31, type32, type33, type34 };
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("hi!", type30, typeArray35);
        generator26.setDelegates((java.lang.Object[]) typeArray35);
        boolean boolean38 = generator26.getUseCache();
        generator26.setStyle(2);
        boolean boolean41 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        boolean boolean44 = generator42.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator42.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy47);
        java.lang.String[] strArray54 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray57 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray57);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray58);
        generator26.setClasses(classArray60);
        generator26.setAttemptLoad(true);
        boolean boolean64 = generator26.getAttemptLoad();
        boolean boolean65 = generator26.getAttemptLoad();
        boolean boolean66 = generator26.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray67 = generatorStrategy25.generate((org.mockito.cglib.core.ClassGenerator) generator26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()D", "double");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()D' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader6 = null;
        generator0.setClassLoader(classLoader6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=boolean; displayName=Z; hidden; bound; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=boolean; propertyEditorClass=class [Ljava.lang.String;]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        boolean boolean20 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        generator0.setAttemptLoad(true);
        boolean boolean25 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 19");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type26, type27, type28, type29 };
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("hi!", type25, typeArray30);
        generator21.setDelegates((java.lang.Object[]) typeArray30);
        boolean boolean33 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator21.getStrategy();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        boolean boolean41 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator39.getStrategy();
        generator21.setStrategy(generatorStrategy42);
        generator0.setStrategy(generatorStrategy42);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("boolean", method46, method47);
        propertyDescriptor48.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor52 = propertyDescriptor48.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor48.setHidden(false);
        java.lang.Class<?> wildcardClass55 = propertyDescriptor48.getPropertyEditorClass();
        propertyDescriptor48.setConstrained(false);
        java.lang.Class<?> wildcardClass58 = propertyDescriptor48.getPropertyType();
        propertyDescriptor48.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        boolean boolean63 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator61.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator61.getStrategy();
        generator61.setStyle(2);
        java.beans.PropertyEditor propertyEditor68 = propertyDescriptor48.createPropertyEditor((java.lang.Object) generator61);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator61.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        boolean boolean72 = generator70.getUseCache();
        java.lang.ClassLoader classLoader73 = null;
        generator70.setClassLoader(classLoader73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass76 = type75.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass76);
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass76);
        java.lang.reflect.Method[] methodArray82 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray79, true, false);
        generator70.setDelegates((java.lang.Object[]) methodArray82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator70.getStrategy();
        generator61.setStrategy(generatorStrategy84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator61.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray87 = generatorStrategy42.generate((org.mockito.cglib.core.ClassGenerator) generator61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNull(propertyEditor52);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNull(propertyEditor68);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/Type" + "'", str78, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(methodArray82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; propertyEditorClass=class [Ljava.lang.String;]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.Object obj5 = null;
        boolean boolean6 = generatorStrategy4.equals(obj5);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("boolean", method8, method9);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor10.getPropertyEditorClass();
        java.lang.String str12 = propertyDescriptor10.getName();
        java.lang.String str13 = propertyDescriptor10.getShortDescription();
        java.lang.String str14 = propertyDescriptor10.getName();
        java.lang.String str15 = propertyDescriptor10.getName();
        boolean boolean16 = generatorStrategy4.equals((java.lang.Object) propertyDescriptor10);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setUseCache(false);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray22 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray22);
        generator17.setDelegates((java.lang.Object[]) methodArray23);
        boolean boolean25 = generatorStrategy4.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator17.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean12 = namingPolicy10.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) type14);
        java.lang.String str16 = type14.getDescriptor();
        boolean boolean17 = namingPolicy10.equals((java.lang.Object) str16);
        generator7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator7.getStrategy();
        boolean boolean20 = generator7.getAttemptLoad();
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        int int33 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        generator7.setClasses(classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method37 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass4, "()S", classArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ()S");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass39 = type38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) propertyDescriptorArray43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 14);
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo49.getClassInfo();
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo49.getClassInfo();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/Type" + "'", str42, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setConstrained(false);
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
        org.junit.Assert.assertNotNull(strEnumeration16);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (-1));
        org.mockito.cglib.core.ClassInfo classInfo41 = methodInfo40.getClassInfo();
        java.lang.String str42 = methodInfo40.toString();
        org.mockito.asm.Type[] typeArray43 = methodInfo40.getExceptionTypes();
        org.mockito.cglib.core.Signature signature44 = methodInfo40.getSignature();
        java.lang.Class<?> wildcardClass45 = signature44.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method47 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.Signature is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<init>()V" + "'", str42, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("()Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(method7);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(strEnumeration14);
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=boolean; displayName=(JFIF)B; shortDescription=java.beans.PropertyDescriptor[name=boolean; displayName=Z; shortDescription=(JFIF)V; preferred]]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=I; displayName=; preferred; constrained]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setBound(false);
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean8 = namingPolicy6.equals((java.lang.Object) type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) type10);
        java.lang.String str12 = type10.getDescriptor();
        boolean boolean13 = namingPolicy6.equals((java.lang.Object) str12);
        generator3.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type19, type20 };
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("hi!", type16, typeArray21);
        org.mockito.asm.Type type23 = signature22.getReturnType();
        boolean boolean24 = namingPolicy6.equals((java.lang.Object) type23);
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass27 = type26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = classInfo29.getType();
        int int31 = classInfo29.getModifiers();
        org.mockito.asm.Type type32 = classInfo29.getSuperType();
        int int33 = classInfo29.getModifiers();
        int int34 = classInfo29.getModifiers();
        java.lang.String str35 = classInfo29.toString();
        org.mockito.asm.Type type36 = classInfo29.getType();
        java.lang.Class<?> wildcardClass37 = classInfo29.getClass();
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.mockito.asm.Type" + "'", str35, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/cglib/core/ReflectUtils$4;" + "'", str38, "Lorg/mockito/cglib/core/ReflectUtils$4;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(mixin41);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean11 = namingPolicy9.equals((java.lang.Object) type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) type13);
        java.lang.String str15 = type13.getDescriptor();
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) str15);
        generator6.setNamingPolicy(namingPolicy9);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray24 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray24);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray24);
        java.lang.String[] strArray32 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray36);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray36);
        generator6.setDelegates((java.lang.Object[]) methodArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Z" + "'", str15, "Z");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator9.getNamingPolicy();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean20 = namingPolicy18.equals((java.lang.Object) type19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) type22);
        java.lang.String str24 = type22.getDescriptor();
        boolean boolean25 = namingPolicy18.equals((java.lang.Object) str24);
        generator15.setNamingPolicy(namingPolicy18);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray45);
        generator15.setDelegates((java.lang.Object[]) methodArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        generator9.setDelegates((java.lang.Object[]) classArray50);
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        generator0.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator54.getNamingPolicy();
        generator54.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator54.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getAttemptLoad();
        boolean boolean64 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator62.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator62.getStrategy();
        boolean boolean67 = generator62.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        boolean boolean70 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator68.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator68.getStrategy();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("I");
        java.lang.String str75 = type74.toString();
        boolean boolean76 = generatorStrategy72.equals((java.lang.Object) str75);
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str80 = signature79.getName();
        boolean boolean81 = generatorStrategy72.equals((java.lang.Object) str80);
        boolean boolean83 = generatorStrategy72.equals((java.lang.Object) 100.0f);
        generator62.setStrategy(generatorStrategy72);
        boolean boolean85 = namingPolicy60.equals((java.lang.Object) generator62);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "LI;" + "'", str75, "LI;");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.beans.PropertyEditor propertyEditor6 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "org/mockito/asm/Type");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=boolean; constrained]");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(propertyEditor6);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setExpert(false);
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(strEnumeration11);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray23 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray23);
        generator18.setDelegates((java.lang.Object[]) methodArray24);
        generator0.setDelegates((java.lang.Object[]) methodArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setUseCache(false);
        java.lang.String[] strArray35 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray38 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray38);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray39);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        generator27.setClasses(classArray41);
        boolean boolean44 = generator27.getAttemptLoad();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.Class<?> wildcardClass49 = strArray46.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass49);
        generator27.setDelegates((java.lang.Object[]) propertyDescriptorArray50);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, false, true);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray50);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(1046);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 1046");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("org/mockito/asm/Type");
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("LZ;");
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("boolean", "LZ;");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getDescriptor();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        int int6 = type5.getSize();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "booleanLZ;" + "'", str3, "booleanLZ;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LZ;" + "'", str4, "LZ;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean7 = namingPolicy5.equals((java.lang.Object) "I");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type10, type11, type12, type13 };
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("hi!", type9, typeArray14);
        org.mockito.asm.Type type16 = signature15.getReturnType();
        boolean boolean17 = namingPolicy5.equals((java.lang.Object) type16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = type16.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type5 = classInfo4.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setUseCache(false);
        java.lang.Class class9 = null;
        java.lang.Class[] classArray10 = new java.lang.Class[] { class9 };
        generator6.setClasses(classArray10);
        boolean boolean12 = type5.equals((java.lang.Object) generator6);
        boolean boolean13 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setUseCache(false);
        java.lang.String[] strArray23 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray26 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray26);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray27);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        generator15.setClasses(classArray29);
        boolean boolean32 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        generator15.setClassLoader(classLoader33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator15.getStrategy();
        boolean boolean36 = namingPolicy14.equals((java.lang.Object) generator15);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setUseCache(false);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type42, type43, type44, type45 };
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("hi!", type41, typeArray46);
        generator37.setDelegates((java.lang.Object[]) typeArray46);
        boolean boolean49 = generator37.getUseCache();
        generator37.setStyle(2);
        boolean boolean52 = generator37.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        boolean boolean55 = generator53.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator53.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy58);
        java.lang.String[] strArray65 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray68 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray67, methodArray68);
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray65, methodArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray69);
        generator37.setClasses(classArray71);
        java.lang.ClassLoader classLoader73 = null;
        generator37.setClassLoader(classLoader73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass76 = type75.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass76);
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass76);
        java.lang.reflect.Method[] methodArray82 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray79, true, false);
        java.lang.Class[] classArray83 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray82);
        generator37.setClasses(classArray83);
        java.lang.ClassLoader classLoader85 = generator37.getClassLoader();
        generator15.setClassLoader(classLoader85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method87 = org.mockito.cglib.core.ReflectUtils.findMethod("", classLoader85);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/Type" + "'", str78, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(methodArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classLoader85);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        propertyDescriptor3.setBound(true);
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.beans.PropertyEditor propertyEditor12 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 37);
        propertyDescriptor3.setDisplayName("java.lang.Object");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=boolean; displayName=Z; shortDescription=(JFIF)V; preferred]");
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(propertyEditor12);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=boolean]", method1, method2);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setConstrained(true);
        java.lang.Object obj9 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyDescriptor3.setValue("D", obj9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setUseCache(false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        generator1.setDelegates((java.lang.Object[]) typeArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator13.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator23.getNamingPolicy();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass31);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray34);
        generator23.setClasses(classArray34);
        java.lang.ClassLoader classLoader38 = generator23.getClassLoader();
        org.mockito.asm.Type[] typeArray40 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) typeArray40);
        generator13.setClassLoader(classLoader38);
        generator1.setClassLoader(classLoader38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=boolean; propertyEditorClass=class [Ljava.lang.String;]", classLoader38);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(mixin41);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        byte[] byteArray1 = new byte[] {};
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator2.getNamingPolicy();
        generator2.setAttemptLoad(true);
        generator2.setAttemptLoad(false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray13);
        generator2.setClasses(classArray13);
        java.lang.ClassLoader classLoader17 = generator2.getClassLoader();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) typeArray19);
        java.lang.ClassLoader classLoader21 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        boolean boolean24 = generator22.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator22.setClassLoader(classLoader25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        boolean boolean29 = namingPolicy27.equals((java.lang.Object) "I");
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean31 = namingPolicy27.equals((java.lang.Object) type30);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray34 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray34);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray38 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray38);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray38);
        java.lang.String[] strArray46 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray49 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray49);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray50);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray50);
        boolean boolean54 = namingPolicy27.equals((java.lang.Object) strArray33);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) strArray33);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) strArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class57 = org.mockito.cglib.core.ReflectUtils.defineClass("(JFIF)V", byteArray1, classLoader17);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=boolean]", method1, method2);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setConstrained(true);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean12 = namingPolicy10.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) type14);
        java.lang.String str16 = type14.getDescriptor();
        boolean boolean17 = namingPolicy10.equals((java.lang.Object) str16);
        generator7.setNamingPolicy(namingPolicy10);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray25);
        java.lang.String[] strArray33 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray36 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray37);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray37);
        generator7.setDelegates((java.lang.Object[]) methodArray40);
        java.lang.Class<?> wildcardClass42 = generator7.getClass();
        java.lang.Class[] classArray43 = null;
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass42, classArray43);
        org.mockito.cglib.core.Signature signature45 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor44);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44, 0);
        org.mockito.asm.Type[] typeArray48 = methodInfo47.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo49 = methodInfo47.getClassInfo();
        java.lang.String str50 = methodInfo47.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        boolean boolean53 = generator51.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator51.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator60.getNamingPolicy();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean63 = namingPolicy61.equals((java.lang.Object) type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) type65);
        java.lang.String str67 = type65.getDescriptor();
        boolean boolean68 = namingPolicy61.equals((java.lang.Object) str67);
        generator58.setNamingPolicy(namingPolicy61);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type72, type73, type74, type75 };
        org.mockito.cglib.core.Signature signature77 = new org.mockito.cglib.core.Signature("hi!", type71, typeArray76);
        org.mockito.asm.Type type78 = signature77.getReturnType();
        boolean boolean79 = namingPolicy61.equals((java.lang.Object) type78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.FLOAT_TYPE;
        int int81 = type80.getSort();
        boolean boolean82 = namingPolicy61.equals((java.lang.Object) type80);
        generator51.setNamingPolicy(namingPolicy61);
        boolean boolean84 = methodInfo47.equals((java.lang.Object) generator51);
        boolean boolean85 = generator51.getAttemptLoad();
        boolean boolean86 = generatorStrategy6.equals((java.lang.Object) generator51);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>()V" + "'", str50, "<init>()V");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Z" + "'", str67, "Z");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        int int3 = type0.getOpcode(9);
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.Class[] classArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method14 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass4, "()Lorg/mockito/cglib/core/Signature;", classArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ()Lorg/mockito/cglib/core/Signature;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Z" + "'", str1, "Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("LI;", "LI;");
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        boolean boolean5 = signature2.equals((java.lang.Object) generator3);
        org.mockito.asm.Type type6 = signature2.getReturnType();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("boolean", method8, method9);
        propertyDescriptor10.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor10.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor10.setReadMethod(method15);
        propertyDescriptor10.setValue("B", (java.lang.Object) "Z");
        boolean boolean20 = signature2.equals((java.lang.Object) propertyDescriptor10);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str27 = type26.getDescriptor();
        int int29 = type26.getOpcode(9);
        java.lang.String str30 = type26.getClassName();
        java.lang.String str31 = type26.getInternalName();
        propertyDescriptor10.setValue("(JFIF)LI;", (java.lang.Object) str31);
        java.util.Enumeration<java.lang.String> strEnumeration33 = propertyDescriptor10.attributeNames();
        java.lang.reflect.Method method34 = propertyDescriptor10.getReadMethod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/Type" + "'", str24, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str25, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str27, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 13 + "'", int29 == 13);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(strEnumeration33);
        org.junit.Assert.assertNull(method34);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getSuperType();
        org.mockito.asm.Type type7 = classInfo3.getType();
        java.lang.String str8 = type7.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type5 = classInfo4.getType();
        int int6 = classInfo4.getModifiers();
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) typeArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getType();
        org.mockito.asm.Type type7 = classInfo3.getSuperType();
        java.lang.String str8 = type7.toString();
        java.lang.String str9 = type7.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ljava/lang/Object;" + "'", str8, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.lang.Object" + "'", str9, "java.lang.Object");
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        java.lang.String[] strArray20 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray23 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray23);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        generator0.setClasses(classArray26);
        boolean boolean30 = generator0.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator0.setClassLoader(classLoader31);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("LI;", method1, method2);
        propertyDescriptor3.setPreferred(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "LI;" + "'", str6, "LI;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor[name=LI;]" + "'", str7, "java.beans.PropertyDescriptor[name=LI;]");
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass39 = type38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) propertyDescriptorArray43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 12);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        java.lang.String str53 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/Type" + "'", str42, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "()V" + "'", str53, "()V");
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Ljava.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained];");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 82");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type0.getOpcode((int) ' ');
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray9);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("I", method13, method14);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor15.getPropertyEditorClass();
        java.lang.Object obj18 = propertyDescriptor15.getValue("LZ;");
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray22 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray22);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray26 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray26);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray26);
        java.lang.String[] strArray34 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray37 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray37);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray38);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray38);
        propertyDescriptor15.setValue("org/mockito/asm/Type", (java.lang.Object) strArray21);
        java.lang.String str43 = propertyDescriptor15.getShortDescription();
        propertyDescriptor15.setExpert(true);
        boolean boolean46 = type0.equals((java.lang.Object) propertyDescriptor15);
        java.lang.String str47 = propertyDescriptor15.getName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type52, type53, type54, type55 };
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("hi!", type51, typeArray56);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("B", type49, typeArray56);
        org.mockito.asm.Type[] typeArray59 = signature58.getArgumentTypes();
        org.mockito.asm.Type[] typeArray60 = signature58.getArgumentTypes();
        boolean boolean61 = propertyDescriptor15.equals((java.lang.Object) typeArray60);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 37 + "'", int2 == 37);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(JFIF)V" + "'", str11, "(JFIF)V");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "I" + "'", str43, "I");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "I" + "'", str47, "I");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Z");
        int int2 = type1.getSize();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("boolean", method4, method5);
        propertyDescriptor6.setDisplayName("Z");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor6.setValue("boolean", (java.lang.Object) type10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type14, type15, type16, type17 };
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("hi!", type13, typeArray18);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray18);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray18);
        java.lang.String str22 = type1.getClassName();
        int int24 = type1.getOpcode((int) (short) 1);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(JFIF)J" + "'", str20, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(JFIF)Z" + "'", str21, "(JFIF)Z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator1.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean9 = namingPolicy7.equals((java.lang.Object) type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) type11);
        java.lang.String str13 = type11.getDescriptor();
        boolean boolean14 = namingPolicy7.equals((java.lang.Object) str13);
        generator4.setNamingPolicy(namingPolicy7);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type20, type21 };
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("hi!", type17, typeArray22);
        org.mockito.asm.Type type24 = signature23.getReturnType();
        boolean boolean25 = namingPolicy7.equals((java.lang.Object) type24);
        generator1.setNamingPolicy(namingPolicy7);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type31, type32, type33, type34 };
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("hi!", type30, typeArray35);
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("B", type28, typeArray35);
        org.mockito.asm.Type[] typeArray38 = signature37.getArgumentTypes();
        boolean boolean40 = signature37.equals((java.lang.Object) (short) 1);
        java.lang.String str41 = signature37.getName();
        org.mockito.asm.Type[] typeArray42 = signature37.getArgumentTypes();
        generator1.setDelegates((java.lang.Object[]) typeArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator1.getStrategy();
        generator1.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator47.getNamingPolicy();
        generator47.setAttemptLoad(true);
        generator47.setAttemptLoad(false);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass55 = type54.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        generator47.setClasses(classArray58);
        java.lang.ClassLoader classLoader62 = generator47.getClassLoader();
        generator1.setClassLoader(classLoader62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method64 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}](JFIF)S", classLoader62);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Z" + "'", str13, "Z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "B" + "'", str41, "B");
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("org/mockito/asm/Type");
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setDisplayName("(JFIF)J");
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("LI;", method14, method15);
        java.lang.reflect.Method method17 = propertyDescriptor16.getWriteMethod();
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method17);
        java.lang.String str19 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/Type" + "'", str19, "org/mockito/asm/Type");
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type25, type26 };
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", type22, typeArray27);
        generator18.setDelegates((java.lang.Object[]) typeArray27);
        boolean boolean30 = generator18.getUseCache();
        generator18.setStyle(2);
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        generator18.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean44 = namingPolicy42.equals((java.lang.Object) type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) type46);
        java.lang.String str48 = type46.getDescriptor();
        boolean boolean49 = namingPolicy42.equals((java.lang.Object) str48);
        generator39.setNamingPolicy(namingPolicy42);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray53 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray53);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray57 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray57);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray57);
        java.lang.String[] strArray65 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray68 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray67, methodArray68);
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray65, methodArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray69);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray69);
        generator39.setDelegates((java.lang.Object[]) methodArray72);
        java.lang.Class<?> wildcardClass74 = generator39.getClass();
        java.lang.Class[] classArray75 = null;
        java.lang.reflect.Constructor constructor76 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass74, classArray75);
        org.mockito.cglib.core.Signature signature77 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor76);
        org.mockito.cglib.core.MethodInfo methodInfo79 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor76, 0);
        java.lang.String str80 = org.mockito.asm.Type.getConstructorDescriptor(constructor76);
        org.mockito.cglib.core.MethodInfo methodInfo81 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor76);
        org.mockito.cglib.core.Signature signature82 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor76);
        org.mockito.cglib.core.Signature signature83 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor76);
        org.mockito.asm.Type[] typeArray84 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor76);
        generator18.setDelegates((java.lang.Object[]) typeArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) typeArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Z" + "'", str48, "Z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(constructor76);
        org.junit.Assert.assertNotNull(signature77);
        org.junit.Assert.assertNotNull(methodInfo79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "()V" + "'", str80, "()V");
        org.junit.Assert.assertNotNull(methodInfo81);
        org.junit.Assert.assertNotNull(signature82);
        org.junit.Assert.assertNotNull(signature83);
        org.junit.Assert.assertNotNull(typeArray84);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        boolean boolean14 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method15 = propertyDescriptor3.getReadMethod();
        boolean boolean16 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Z" + "'", str13, "Z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        byte[] byteArray2 = new byte[] { (byte) 1 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("<init>", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.ClassLoader classLoader16 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        boolean boolean19 = generator17.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        boolean boolean24 = namingPolicy22.equals((java.lang.Object) "I");
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean26 = namingPolicy22.equals((java.lang.Object) type25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray45);
        boolean boolean49 = namingPolicy22.equals((java.lang.Object) strArray28);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) strArray28);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("boolean", method52, method53);
        propertyDescriptor54.setDisplayName("Z");
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray59 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray59);
        java.beans.PropertyEditor propertyEditor61 = propertyDescriptor54.createPropertyEditor((java.lang.Object) methodArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray59);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray59);
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) methodArray63);
        java.util.Enumeration<java.lang.String> strEnumeration65 = propertyDescriptor3.attributeNames();
        java.lang.String str66 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNull(propertyEditor61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(strEnumeration65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setUseCache(false);
        java.lang.String[] strArray16 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray19 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray18, methodArray19);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray20);
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        generator8.setClasses(classArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator8.getNamingPolicy();
        boolean boolean27 = generator8.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator8.getNamingPolicy();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("boolean", method30, method31);
        propertyDescriptor32.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor36 = propertyDescriptor32.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method37 = null;
        propertyDescriptor32.setReadMethod(method37);
        boolean boolean39 = propertyDescriptor32.isHidden();
        propertyDescriptor32.setValue("[Ljava/lang/String;", (java.lang.Object) (short) 100);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("boolean", method45, method46);
        propertyDescriptor47.setDisplayName("Z");
        org.mockito.asm.Type type51 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor47.setValue("boolean", (java.lang.Object) type51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type55, type56, type57, type58 };
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("hi!", type54, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray59);
        propertyDescriptor32.setValue("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]", (java.lang.Object) typeArray59);
        boolean boolean63 = namingPolicy28.equals((java.lang.Object) propertyDescriptor32);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        boolean boolean66 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator64.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator64.getStrategy();
        boolean boolean69 = namingPolicy28.equals((java.lang.Object) generatorStrategy68);
        generator0.setNamingPolicy(namingPolicy28);
        boolean boolean71 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNull(propertyEditor36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(JFIF)J" + "'", str61, "(JFIF)J");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method5 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(type4);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        generator0.setClasses(classArray11);
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.asm.Type[] typeArray17 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) typeArray17);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray25);
        java.lang.String[] strArray33 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray36 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray37);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) strArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setUseCache(false);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type47, type48, type49, type50 };
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("hi!", type46, typeArray51);
        generator42.setDelegates((java.lang.Object[]) typeArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin41.newInstance((java.lang.Object[]) typeArray51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setUseCache(false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type62, type63, type64, type65 };
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("hi!", type61, typeArray66);
        generator57.setDelegates((java.lang.Object[]) typeArray66);
        org.mockito.cglib.core.Signature signature69 = new org.mockito.cglib.core.Signature("Z", type56, typeArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin54.newInstance((java.lang.Object[]) typeArray66);
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray66);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        boolean boolean8 = generator0.getUseCache();
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        boolean boolean41 = generator39.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator39.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean51 = namingPolicy49.equals((java.lang.Object) type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) type53);
        java.lang.String str55 = type53.getDescriptor();
        boolean boolean56 = namingPolicy49.equals((java.lang.Object) str55);
        generator46.setNamingPolicy(namingPolicy49);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type60, type61, type62, type63 };
        org.mockito.cglib.core.Signature signature65 = new org.mockito.cglib.core.Signature("hi!", type59, typeArray64);
        org.mockito.asm.Type type66 = signature65.getReturnType();
        boolean boolean67 = namingPolicy49.equals((java.lang.Object) type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        int int69 = type68.getSort();
        boolean boolean70 = namingPolicy49.equals((java.lang.Object) type68);
        generator39.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setUseCache(false);
        java.lang.String[] strArray80 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray83 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray84 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray82, methodArray83);
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray80, methodArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray84);
        java.lang.String[] strArray87 = org.mockito.cglib.core.ReflectUtils.getNames(classArray86);
        generator72.setClasses(classArray86);
        generator39.setClasses(classArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method90 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass35, "java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]", classArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Z" + "'", str55, "Z");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodArray83);
        org.junit.Assert.assertNotNull(methodArray84);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(true);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray9 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        generator1.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator15.getNamingPolicy();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray25);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        generator15.setClasses(classArray26);
        java.lang.ClassLoader classLoader30 = generator15.getClassLoader();
        generator1.setClassLoader(classLoader30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type36, type37, type38, type39 };
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("hi!", type35, typeArray40);
        org.mockito.cglib.core.Signature signature42 = new org.mockito.cglib.core.Signature("B", type33, typeArray40);
        org.mockito.asm.Type[] typeArray43 = signature42.getArgumentTypes();
        boolean boolean45 = signature42.equals((java.lang.Object) (short) 1);
        java.lang.String str46 = signature42.getName();
        org.mockito.asm.Type[] typeArray47 = signature42.getArgumentTypes();
        org.mockito.asm.Type[] typeArray48 = signature42.getArgumentTypes();
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) typeArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor50 = org.mockito.cglib.core.ReflectUtils.findConstructor("byte", classLoader30);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/Type" + "'", str24, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "B" + "'", str46, "B");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(mixin49);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(JFIF)Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=int; bound]", "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (byte) -1);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        java.lang.String[] strArray49 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray52 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray52);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray53);
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray59 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray60);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray60);
        java.lang.String[] strArray68 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray71 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray70, methodArray71);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray72);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray72);
        java.lang.Object obj76 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) methodArray72);
        org.mockito.asm.Type[] typeArray77 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.asm.Type[] typeArray78 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.asm.Type[] typeArray79 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature80 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        java.lang.String str81 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.mockito.asm.Type[] typeArray82 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) typeArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(signature80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "()V" + "'", str81, "()V");
        org.junit.Assert.assertNotNull(typeArray82);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=void]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 40");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("LI;", "LI;");
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getAttemptLoad();
        boolean boolean5 = signature2.equals((java.lang.Object) generator3);
        org.mockito.asm.Type type6 = signature2.getReturnType();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("boolean", method8, method9);
        propertyDescriptor10.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor10.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor10.setReadMethod(method15);
        propertyDescriptor10.setValue("B", (java.lang.Object) "Z");
        boolean boolean20 = signature2.equals((java.lang.Object) propertyDescriptor10);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass22);
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor10.createPropertyEditor((java.lang.Object) propertyDescriptorArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) propertyDescriptorArray26);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/Type" + "'", str24, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNull(propertyEditor27);
        org.junit.Assert.assertNotNull(mixin28);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass13 = generator0.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/cglib/proxy/Mixin$Generator;" + "'", str14, "Lorg/mockito/cglib/proxy/Mixin$Generator;");
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setShortDescription("");
        propertyDescriptor3.setName("[Ljava/lang/String;");
        boolean boolean17 = propertyDescriptor3.isHidden();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("", "hi!");
        boolean boolean22 = signature20.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        boolean boolean26 = signature20.equals((java.lang.Object) false);
        java.lang.String str27 = signature20.getName();
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature20);
        java.lang.String str29 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("Ljava.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained];");
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[Ljava/lang/String;" + "'", str29, "[Ljava/lang/String;");
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.String[] strArray40 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray44);
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = null;
        generator0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        boolean boolean55 = generator52.getAttemptLoad();
        boolean boolean56 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator52.getStrategy();
        generator0.setStrategy(generatorStrategy57);
        boolean boolean59 = generator0.getUseCache();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass61 = type60.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        java.lang.String str64 = classInfo63.toString();
        org.mockito.asm.Type type65 = classInfo63.getSuperType();
        org.mockito.asm.Type[] typeArray66 = classInfo63.getInterfaces();
        org.mockito.asm.Type type67 = classInfo63.getType();
        int int68 = classInfo63.getModifiers();
        org.mockito.asm.Type type69 = classInfo63.getSuperType();
        org.mockito.asm.Type type70 = classInfo63.getSuperType();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass72 = type71.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray73 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass72);
        org.mockito.cglib.core.ClassInfo classInfo74 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = classInfo74.getType();
        int int76 = classInfo74.getModifiers();
        org.mockito.asm.Type type77 = classInfo74.getSuperType();
        boolean boolean78 = classInfo63.equals((java.lang.Object) classInfo74);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator79.setUseCache(false);
        generator79.setAttemptLoad(true);
        boolean boolean84 = generator79.getAttemptLoad();
        generator79.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator79.getStrategy();
        boolean boolean88 = classInfo74.equals((java.lang.Object) generator79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator79.getStrategy();
        generator0.setStrategy(generatorStrategy89);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.mockito.asm.Type" + "'", str64, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(propertyDescriptorArray73);
        org.junit.Assert.assertNotNull(classInfo74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.mockito.asm.Type type0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean4 = namingPolicy2.equals((java.lang.Object) type3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        boolean boolean13 = namingPolicy2.equals((java.lang.Object) signature12);
        java.lang.String str14 = signature12.getName();
        org.mockito.asm.Type[] typeArray15 = signature12.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(typeArray15);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.Class<?> wildcardClass22 = strArray19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray23);
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.Object obj5 = null;
        boolean boolean6 = generatorStrategy4.equals(obj5);
        org.mockito.cglib.core.ClassGenerator classGenerator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = generatorStrategy4.generate(classGenerator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; bound]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("I", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getPropertyEditorClass();
        java.lang.Object obj17 = propertyDescriptor14.getValue("LZ;");
        propertyDescriptor14.setPreferred(true);
        propertyDescriptor14.setConstrained(true);
        java.lang.reflect.Method method22 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor3.setValue("Z(JFIF)V", (java.lang.Object) propertyDescriptor14);
        boolean boolean24 = propertyDescriptor14.isPreferred();
        java.lang.String str25 = propertyDescriptor14.toString();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.beans.PropertyDescriptor[name=I; preferred; constrained]" + "'", str25, "java.beans.PropertyDescriptor[name=I; preferred; constrained]");
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        java.beans.PropertyEditor propertyEditor9 = propertyDescriptor3.createPropertyEditor((java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method11 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("I", method13, method14);
        java.lang.reflect.Method method16 = propertyDescriptor15.getReadMethod();
        java.lang.String str17 = propertyDescriptor15.getName();
        propertyDescriptor15.setName("hi!(JFIF)V");
        java.lang.String str20 = propertyDescriptor15.getDisplayName();
        boolean boolean21 = propertyDescriptor15.isPreferred();
        java.lang.reflect.Method method22 = propertyDescriptor15.getWriteMethod();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor15);
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(propertyEditor9);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "I" + "'", str17, "I");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!(JFIF)V" + "'", str20, "hi!(JFIF)V");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(propertyEditor23);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, false);
        generator0.setDelegates((java.lang.Object[]) methodArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean20 = namingPolicy18.equals((java.lang.Object) type19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) type22);
        java.lang.String str24 = type22.getDescriptor();
        boolean boolean25 = namingPolicy18.equals((java.lang.Object) str24);
        generator15.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator15.getStrategy();
        boolean boolean28 = generator15.getAttemptLoad();
        java.lang.String[] strArray34 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray37 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray37);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray38);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray40);
        generator15.setClasses(classArray40);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        boolean boolean44 = generatorStrategy14.equals((java.lang.Object) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        boolean boolean47 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        java.lang.String[] strArray54 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray57 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray57);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray60);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray62);
        generator45.setClasses(classArray63);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray65 = generatorStrategy14.generate((org.mockito.cglib.core.ClassGenerator) generator45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(classArray63);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type7, type8, type9, type10 };
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("hi!", type6, typeArray11);
        generator2.setDelegates((java.lang.Object[]) typeArray11);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Z", type1, typeArray11);
        java.lang.String str15 = signature14.getDescriptor();
        org.mockito.asm.Type type16 = signature14.getReturnType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type23, type24 };
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!", type20, typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("B", type18, typeArray25);
        org.mockito.asm.Type[] typeArray28 = signature27.getArgumentTypes();
        boolean boolean30 = signature27.equals((java.lang.Object) (short) 1);
        org.mockito.asm.Type[] typeArray31 = signature27.getArgumentTypes();
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) typeArray31);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.Class<?> wildcardClass37 = strArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, false, false);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin32.newInstance((java.lang.Object[]) propertyDescriptorArray38);
        boolean boolean43 = signature14.equals((java.lang.Object) mixin32);
        java.lang.String str44 = signature14.getName();
        java.lang.String str45 = signature14.getName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(JFIF)V" + "'", str15, "(JFIF)V");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Z" + "'", str44, "Z");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Z" + "'", str45, "Z");
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getSuperType();
        int int7 = classInfo3.getModifiers();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getDescriptor();
        java.lang.String str10 = type8.toString();
        java.lang.String str11 = type8.toString();
        java.lang.Class<?> wildcardClass12 = type8.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        boolean boolean19 = classInfo3.equals((java.lang.Object) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "I" + "'", str9, "I");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "I" + "'", str10, "I");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "I" + "'", str11, "I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray4 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray3, methodArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray5);
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor9 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass1, classArray6);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(methodArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.reflect.Method[] methodArray6 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, true);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.Class<?> wildcardClass9 = classArray7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        java.lang.String[] strArray17 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor24 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass9, classArray23);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org/mockito/cglib/core/Signature");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java/lang/Object");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ljava/lang/Object;" + "'", str2, "Ljava/lang/Object;");
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ljava.beans.PropertyDescriptor[name=boolean; constrained];");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(JFIF)Lorg/mockito/asm/Type;");
        int int3 = type1.getOpcode((int) (short) -1);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator4.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator4.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean12 = namingPolicy10.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) type14);
        java.lang.String str16 = type14.getDescriptor();
        boolean boolean17 = namingPolicy10.equals((java.lang.Object) str16);
        generator7.setNamingPolicy(namingPolicy10);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type23, type24 };
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!", type20, typeArray25);
        org.mockito.asm.Type type27 = signature26.getReturnType();
        boolean boolean28 = namingPolicy10.equals((java.lang.Object) type27);
        generator4.setNamingPolicy(namingPolicy10);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str31 = type30.getDescriptor();
        int int33 = type30.getOpcode(9);
        java.lang.Class<?> wildcardClass34 = type30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        generator4.setDelegates((java.lang.Object[]) propertyDescriptorArray36);
        boolean boolean38 = type1.equals((java.lang.Object) generator4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray39, true, true);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray39, false, true);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray39);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        generator4.setClasses(classArray46);
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator4.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Z" + "'", str31, "Z");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 10, (byte) 0 };
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = classInfo10.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setUseCache(false);
        java.lang.Class class15 = null;
        java.lang.Class[] classArray16 = new java.lang.Class[] { class15 };
        generator12.setClasses(classArray16);
        boolean boolean18 = type11.equals((java.lang.Object) generator12);
        boolean boolean19 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        java.lang.String[] strArray29 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray32 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray32);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray33);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        generator21.setClasses(classArray35);
        boolean boolean38 = generator21.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        generator21.setClassLoader(classLoader39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator21.getStrategy();
        boolean boolean42 = namingPolicy20.equals((java.lang.Object) generator21);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setUseCache(false);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type48, type49, type50, type51 };
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("hi!", type47, typeArray52);
        generator43.setDelegates((java.lang.Object[]) typeArray52);
        boolean boolean55 = generator43.getUseCache();
        generator43.setStyle(2);
        boolean boolean58 = generator43.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        boolean boolean61 = generator59.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator59.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy64);
        java.lang.String[] strArray71 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray74 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray73, methodArray74);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray71, methodArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray75);
        generator43.setClasses(classArray77);
        java.lang.ClassLoader classLoader79 = null;
        generator43.setClassLoader(classLoader79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass82 = type81.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass82);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray85, true, false);
        java.lang.Class[] classArray89 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray88);
        generator43.setClasses(classArray89);
        java.lang.ClassLoader classLoader91 = generator43.getClassLoader();
        generator21.setClassLoader(classLoader91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class93 = org.mockito.cglib.core.ReflectUtils.defineClass("char", byteArray6, classLoader91);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, 10, 0]");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/Type" + "'", str84, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass12 = generator5.getClass();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setUseCache(false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type20, type21 };
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("hi!", type17, typeArray22);
        generator13.setDelegates((java.lang.Object[]) typeArray22);
        boolean boolean25 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator13.getStrategy();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        boolean boolean33 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        generator13.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str39 = signature38.getName();
        java.lang.Class<?> wildcardClass40 = signature38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass40);
        generator13.setDelegates((java.lang.Object[]) propertyDescriptorArray41);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray41, false, false);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) methodArray45);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass12, classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setUseCache(false);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type53, type54, type55, type56 };
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("hi!", type52, typeArray57);
        generator48.setDelegates((java.lang.Object[]) typeArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) typeArray57);
        java.lang.Object obj61 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor47, (java.lang.Object[]) classArray60);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 37);
        org.mockito.cglib.core.Signature signature64 = methodInfo63.getSignature();
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("boolean", method66, method67);
        java.lang.Class<?> wildcardClass69 = propertyDescriptor68.getPropertyEditorClass();
        java.lang.String str70 = propertyDescriptor68.getName();
        java.lang.reflect.Method method71 = null;
        propertyDescriptor68.setWriteMethod(method71);
        java.lang.reflect.Method method73 = propertyDescriptor68.getReadMethod();
        propertyDescriptor68.setPreferred(false);
        java.lang.Object obj77 = propertyDescriptor68.getValue("java.beans.PropertyDescriptor[name=boolean; values={java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]=false}; constrained]");
        propertyDescriptor68.setName("LI;");
        java.lang.reflect.Method method80 = null;
        propertyDescriptor68.setWriteMethod(method80);
        propertyDescriptor68.setShortDescription("java/util/Collections$EmptyEnumeration");
        java.lang.String str84 = propertyDescriptor68.getShortDescription();
        boolean boolean85 = methodInfo63.equals((java.lang.Object) propertyDescriptor68);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "boolean" + "'", str70, "boolean");
        org.junit.Assert.assertNull(method73);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java/util/Collections$EmptyEnumeration" + "'", str84, "java/util/Collections$EmptyEnumeration");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        java.lang.Class class0 = null;
        java.lang.Class[] classArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method3 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod(class0, "JFIF)Lorg/mockito/asm/Type", classArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: JFIF)Lorg/mockito/asm/Type");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("I", method42, method43);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor44.getPropertyEditorClass();
        java.lang.Object obj47 = propertyDescriptor44.getValue("LZ;");
        boolean boolean48 = propertyDescriptor44.isHidden();
        java.lang.String str49 = propertyDescriptor44.getName();
        boolean boolean50 = propertyDescriptor44.isHidden();
        boolean boolean51 = propertyDescriptor44.isExpert();
        propertyDescriptor44.setExpert(false);
        boolean boolean54 = methodInfo40.equals((java.lang.Object) propertyDescriptor44);
        propertyDescriptor44.setPreferred(false);
        propertyDescriptor44.setPreferred(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "I" + "'", str49, "I");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.Object obj12 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=boolean; values={java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]=false}; constrained]");
        propertyDescriptor3.setName("LI;");
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        propertyDescriptor3.setShortDescription("java/util/Collections$EmptyEnumeration");
        java.lang.String str19 = propertyDescriptor3.getShortDescription();
        java.lang.String str20 = propertyDescriptor3.getDisplayName();
        java.lang.String str21 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/util/Collections$EmptyEnumeration" + "'", str19, "java/util/Collections$EmptyEnumeration");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LI;" + "'", str20, "LI;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LI;" + "'", str21, "LI;");
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.String;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(JFIF)D");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int4 = type3.getSort();
        java.lang.String str5 = type3.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str8 = type7.getClassName();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("boolean", method10, method11);
        propertyDescriptor12.setDisplayName("Z");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor12.setValue("boolean", (java.lang.Object) type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type20, type21, type22, type23 };
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("hi!", type19, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray24);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("double", type7, typeArray24);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray24);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; expert]", type2, typeArray24);
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.String str31 = signature29.getName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "void" + "'", str5, "void");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JFIF)J" + "'", str26, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(JFIF)V" + "'", str28, "(JFIF)V");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; expert]" + "'", str31, "java.beans.PropertyDescriptor[name=boolean; expert]");
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator13.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        generator13.setClassLoader(classLoader18);
        boolean boolean20 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        java.lang.String[] strArray29 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray32 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray32);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray33);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        generator21.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator21.getNamingPolicy();
        boolean boolean40 = generator21.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator21.getNamingPolicy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("boolean", method43, method44);
        propertyDescriptor45.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor45.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method50 = null;
        propertyDescriptor45.setReadMethod(method50);
        boolean boolean52 = propertyDescriptor45.isHidden();
        propertyDescriptor45.setValue("[Ljava/lang/String;", (java.lang.Object) (short) 100);
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("boolean", method58, method59);
        propertyDescriptor60.setDisplayName("Z");
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor60.setValue("boolean", (java.lang.Object) type64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type68, type69, type70, type71 };
        org.mockito.cglib.core.Signature signature73 = new org.mockito.cglib.core.Signature("hi!", type67, typeArray72);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray72);
        propertyDescriptor45.setValue("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]", (java.lang.Object) typeArray72);
        boolean boolean76 = namingPolicy41.equals((java.lang.Object) propertyDescriptor45);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        boolean boolean79 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator77.getStrategy();
        boolean boolean82 = namingPolicy41.equals((java.lang.Object) generatorStrategy81);
        generator13.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator13.getStrategy();
        generator5.setStrategy(generatorStrategy84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader86 = generator5.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(JFIF)J" + "'", str74, "(JFIF)J");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type5, type6, type7, type8 };
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("hi!", type4, typeArray9);
        generator0.setDelegates((java.lang.Object[]) typeArray9);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        boolean boolean28 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org/mockito/asm/Type" + "'", str21, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=boolean; propertyEditorClass=class org.mockito.asm.Type]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(true);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray9 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        generator1.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator15.getNamingPolicy();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray25);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        generator15.setClasses(classArray26);
        java.lang.ClassLoader classLoader30 = generator15.getClassLoader();
        generator1.setClassLoader(classLoader30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor32 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=boolean; displayName=Z; constrained]", classLoader30);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/Type" + "'", str24, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray3);
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setDisplayName("");
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        java.lang.String str14 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray10 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray10);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray14);
        java.lang.String[] strArray22 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray26);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray26);
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) strArray9);
        boolean boolean31 = propertyDescriptor3.isHidden();
        java.lang.String str32 = propertyDescriptor3.getName();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "I" + "'", str32, "I");
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader6 = null;
        generator1.setClassLoader(classLoader6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator1.getNamingPolicy();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]");
        boolean boolean11 = namingPolicy8.equals((java.lang.Object) type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.lang.String str16 = classInfo15.toString();
        java.lang.String str17 = classInfo15.toString();
        org.mockito.asm.Type type18 = classInfo15.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo15.getInterfaces();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type10, typeArray19);
        java.lang.String str21 = signature20.toString();
        java.lang.String str22 = signature20.getName();
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type" + "'", str16, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]()Ljava.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained];" + "'", str21, "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]()Ljava.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained];");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]" + "'", str22, "java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]");
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.toString();
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String[] strArray12 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray16);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor21 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass4, classArray20);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I" + "'", str1, "I");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I" + "'", str2, "I");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(classArray20);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.util.List list5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list6 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass1, list5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.beans.PropertyEditor propertyEditor10 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray8);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        boolean boolean12 = propertyDescriptor3.isPreferred();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        boolean boolean14 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNull(propertyEditor10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (byte) -1);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("boolean", method47, method48);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor49.getPropertyEditorClass();
        java.lang.String str51 = propertyDescriptor49.getName();
        propertyDescriptor49.setConstrained(false);
        java.lang.String str54 = propertyDescriptor49.getShortDescription();
        boolean boolean55 = namingPolicy45.equals((java.lang.Object) str54);
        java.lang.String[] strArray61 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray64 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray64);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray67);
        boolean boolean69 = namingPolicy45.equals((java.lang.Object) classArray67);
        java.lang.String[] strArray70 = org.mockito.cglib.core.ReflectUtils.getNames(classArray67);
        java.lang.Object obj71 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, (java.lang.Object[]) classArray67);
        java.lang.String str72 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "()V" + "'", str72, "()V");
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray3);
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray4);
        java.lang.Class<?> wildcardClass6 = classArray4.getClass();
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/lang/Class;" + "'", str7, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[Ljava/lang/Class;" + "'", str9, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type10);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setUseCache(false);
        java.lang.Class class8 = null;
        java.lang.Class[] classArray9 = new java.lang.Class[] { class8 };
        generator5.setClasses(classArray9);
        boolean boolean11 = type4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator5.getNamingPolicy();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray16);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        generator5.setClasses(classArray17);
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader6 = null;
        generator1.setClassLoader(classLoader6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator1.getNamingPolicy();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; values={(JFIF)Z=false}; constrained]");
        boolean boolean11 = namingPolicy8.equals((java.lang.Object) type10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.lang.String str16 = classInfo15.toString();
        java.lang.String str17 = classInfo15.toString();
        org.mockito.asm.Type type18 = classInfo15.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo15.getInterfaces();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type10, typeArray19);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("boolean", method22, method23);
        propertyDescriptor24.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor24.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor24.setHidden(false);
        java.lang.Class<?> wildcardClass31 = propertyDescriptor24.getPropertyEditorClass();
        propertyDescriptor24.setConstrained(false);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor24.getPropertyType();
        propertyDescriptor24.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        boolean boolean39 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator37.getStrategy();
        generator37.setStyle(2);
        java.beans.PropertyEditor propertyEditor44 = propertyDescriptor24.createPropertyEditor((java.lang.Object) generator37);
        boolean boolean45 = signature20.equals((java.lang.Object) propertyDescriptor24);
        propertyDescriptor24.setHidden(true);
        boolean boolean48 = propertyDescriptor24.isPreferred();
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type" + "'", str16, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNull(propertyEditor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("B", type3, typeArray10);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; displayName=Z; values={B=Z}]", type1, typeArray10);
        java.lang.String str14 = type1.getClassName();
        java.lang.String str15 = type1.getClassName();
        java.lang.String str16 = type1.getClassName();
        java.lang.String str17 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "short" + "'", str14, "short");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "short" + "'", str15, "short");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "short" + "'", str16, "short");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "short" + "'", str17, "short");
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        generator5.setClasses(classArray16);
        java.lang.ClassLoader classLoader20 = generator5.getClassLoader();
        org.mockito.asm.Type[] typeArray22 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) typeArray22);
        java.lang.ClassLoader classLoader24 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        boolean boolean27 = generator25.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        boolean boolean32 = namingPolicy30.equals((java.lang.Object) "I");
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean34 = namingPolicy30.equals((java.lang.Object) type33);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray37 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray37);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray41 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray41);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray41);
        java.lang.String[] strArray49 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray52 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray52);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray53);
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray53);
        boolean boolean57 = namingPolicy30.equals((java.lang.Object) strArray36);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) strArray36);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) strArray36);
        generator0.setClassLoader(classLoader20);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray63 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray62, methodArray63);
        java.lang.Class<?> wildcardClass65 = strArray62.getClass();
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass65);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) propertyDescriptorArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[Ljava/lang/String;" + "'", str66, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setName("(JFIF)Z");
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        boolean boolean18 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator16.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        generator16.setStyle(2);
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generator16);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        boolean boolean27 = generator25.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, false);
        generator25.setDelegates((java.lang.Object[]) methodArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator25.getStrategy();
        generator16.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean46 = namingPolicy44.equals((java.lang.Object) type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) type48);
        java.lang.String str50 = type48.getDescriptor();
        boolean boolean51 = namingPolicy44.equals((java.lang.Object) str50);
        generator41.setNamingPolicy(namingPolicy44);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray55 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray55);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray59 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray59);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray59);
        java.lang.String[] strArray67 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray70 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray69, methodArray70);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray67, methodArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray71);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray71);
        generator41.setDelegates((java.lang.Object[]) methodArray74);
        java.lang.Class<?> wildcardClass76 = generator41.getClass();
        java.lang.Class[] classArray77 = null;
        java.lang.reflect.Constructor constructor78 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass76, classArray77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass80 = type79.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass80);
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass80);
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass80);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass80);
        java.lang.Object obj85 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor78, (java.lang.Object[]) propertyDescriptorArray84);
        org.mockito.asm.Type[] typeArray86 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor78);
        org.mockito.cglib.core.MethodInfo methodInfo87 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78);
        boolean boolean88 = generatorStrategy39.equals((java.lang.Object) constructor78);
        org.mockito.cglib.core.Signature signature89 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor78);
        org.mockito.cglib.core.MethodInfo methodInfo91 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78, 3);
        org.mockito.asm.Type[] typeArray92 = methodInfo91.getExceptionTypes();
        int int93 = methodInfo91.getModifiers();
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/Type" + "'", str33, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Z" + "'", str50, "Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(constructor78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/Type" + "'", str82, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/Type" + "'", str83, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertNotNull(methodInfo87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(signature89);
        org.junit.Assert.assertNotNull(methodInfo91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.beans.PropertyEditor propertyEditor10 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray8);
        java.lang.Object obj12 = propertyDescriptor3.getValue("[Ljava/lang/String;");
        boolean boolean13 = propertyDescriptor3.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        boolean boolean15 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNull(propertyEditor10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray10 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray10);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray14);
        java.lang.String[] strArray22 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray26);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray26);
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) strArray9);
        java.util.Enumeration<java.lang.String> strEnumeration31 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method32 = null;
        propertyDescriptor3.setWriteMethod(method32);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(strEnumeration31);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] { type2, type3, type4, type5 };
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("hi!", type1, typeArray6);
        org.mockito.asm.Type type8 = signature7.getReturnType();
        java.lang.String str9 = type8.getDescriptor();
        java.lang.Class<?> wildcardClass10 = type8.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.util.List list12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list13 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass10, list12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "V" + "'", str9, "V");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/cglib/proxy/Mixin$Generator;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(JFIF)LZ;", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass5);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setUseCache(false);
        java.lang.String[] strArray9 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray12 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray12);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray13);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        generator1.setClasses(classArray15);
        boolean boolean18 = generator1.getAttemptLoad();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.Class<?> wildcardClass23 = strArray20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        generator1.setDelegates((java.lang.Object[]) propertyDescriptorArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator1.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean35 = namingPolicy33.equals((java.lang.Object) type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) type37);
        java.lang.String str39 = type37.getDescriptor();
        boolean boolean40 = namingPolicy33.equals((java.lang.Object) str39);
        generator30.setNamingPolicy(namingPolicy33);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type44, type45, type46, type47 };
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("hi!", type43, typeArray48);
        org.mockito.asm.Type type50 = signature49.getReturnType();
        boolean boolean51 = namingPolicy33.equals((java.lang.Object) type50);
        generator27.setNamingPolicy(namingPolicy33);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type57, type58, type59, type60 };
        org.mockito.cglib.core.Signature signature62 = new org.mockito.cglib.core.Signature("hi!", type56, typeArray61);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("B", type54, typeArray61);
        org.mockito.asm.Type[] typeArray64 = signature63.getArgumentTypes();
        boolean boolean66 = signature63.equals((java.lang.Object) (short) 1);
        java.lang.String str67 = signature63.getName();
        org.mockito.asm.Type[] typeArray68 = signature63.getArgumentTypes();
        generator27.setDelegates((java.lang.Object[]) typeArray68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator27.getStrategy();
        generator27.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator73.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator73.getNamingPolicy();
        generator73.setAttemptLoad(true);
        generator73.setAttemptLoad(false);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass81 = type80.getClass();
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass81);
        java.lang.Class[] classArray84 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray83);
        int int85 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray84);
        generator73.setClasses(classArray84);
        java.lang.ClassLoader classLoader88 = generator73.getClassLoader();
        generator27.setClassLoader(classLoader88);
        generator1.setClassLoader(classLoader88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor91 = org.mockito.cglib.core.ReflectUtils.findConstructor("int", classLoader88);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Z" + "'", str39, "Z");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "B" + "'", str67, "B");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/Type" + "'", str82, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean3 = namingPolicy1.equals((java.lang.Object) type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str6 = type5.getClassName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("boolean", method8, method9);
        propertyDescriptor10.setDisplayName("Z");
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor10.setValue("boolean", (java.lang.Object) type14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type18, type19, type20, type21 };
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("hi!", type17, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray22);
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("double", type5, typeArray22);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        int int28 = type2.getOpcode(13);
        java.lang.String str29 = type2.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = type2.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(JFIF)J" + "'", str24, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(JFIF)D" + "'", str26, "(JFIF)D");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "double" + "'", str29, "double");
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str7 = classInfo6.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean15 = namingPolicy13.equals((java.lang.Object) type14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) type17);
        java.lang.String str19 = type17.getDescriptor();
        boolean boolean20 = namingPolicy13.equals((java.lang.Object) str19);
        generator10.setNamingPolicy(namingPolicy13);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type24, type25, type26, type27 };
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", type23, typeArray28);
        org.mockito.asm.Type type30 = signature29.getReturnType();
        boolean boolean31 = namingPolicy13.equals((java.lang.Object) type30);
        generator7.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setUseCache(false);
        java.lang.String[] strArray41 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        generator33.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator33.getStrategy();
        boolean boolean51 = namingPolicy13.equals((java.lang.Object) generator33);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        boolean boolean54 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator52.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("I");
        java.lang.String str59 = type58.toString();
        boolean boolean60 = generatorStrategy56.equals((java.lang.Object) str59);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str64 = signature63.getName();
        boolean boolean65 = generatorStrategy56.equals((java.lang.Object) str64);
        generator33.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setUseCache(false);
        generator67.setAttemptLoad(true);
        boolean boolean72 = generator67.getAttemptLoad();
        generator67.setAttemptLoad(true);
        boolean boolean75 = generator67.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator67.getStrategy();
        boolean boolean78 = generatorStrategy76.equals((java.lang.Object) 100.0d);
        generator33.setStrategy(generatorStrategy76);
        generator0.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "LI;" + "'", str59, "LI;");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle(2);
        generator0.setStyle(2);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (-1));
        org.mockito.cglib.core.ClassInfo classInfo41 = methodInfo40.getClassInfo();
        java.lang.String str42 = methodInfo40.toString();
        org.mockito.asm.Type[] typeArray43 = methodInfo40.getExceptionTypes();
        org.mockito.asm.Type[] typeArray44 = methodInfo40.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo45 = methodInfo40.getClassInfo();
        org.mockito.cglib.core.Signature signature46 = methodInfo40.getSignature();
        java.lang.String str47 = methodInfo40.toString();
        java.lang.String str48 = methodInfo40.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<init>()V" + "'", str42, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<init>()V" + "'", str48, "<init>()V");
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isExpert();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]]");
        java.lang.String str14 = type13.toString();
        java.lang.String str15 = type13.getDescriptor();
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str15);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Ljava.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]];" + "'", str14, "Ljava.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]];");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Ljava.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]];" + "'", str15, "Ljava.beans.PropertyDescriptor[name=I; shortDescription=java.beans.PropertyDescriptor[name=boolean]];");
        org.junit.Assert.assertNull(propertyEditor16);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("(JFIF)L(JFIF)D;", "(JFIF)L(JFIF)D;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(JFIF)L(JFIF)D;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean15 = namingPolicy13.equals((java.lang.Object) type14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) type17);
        java.lang.String str19 = type17.getDescriptor();
        boolean boolean20 = namingPolicy13.equals((java.lang.Object) str19);
        generator10.setNamingPolicy(namingPolicy13);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type24, type25, type26, type27 };
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("hi!", type23, typeArray28);
        org.mockito.asm.Type type30 = signature29.getReturnType();
        boolean boolean31 = namingPolicy13.equals((java.lang.Object) type30);
        generator7.setNamingPolicy(namingPolicy13);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type37, type38, type39, type40 };
        org.mockito.cglib.core.Signature signature42 = new org.mockito.cglib.core.Signature("hi!", type36, typeArray41);
        org.mockito.cglib.core.Signature signature43 = new org.mockito.cglib.core.Signature("B", type34, typeArray41);
        org.mockito.asm.Type[] typeArray44 = signature43.getArgumentTypes();
        boolean boolean46 = signature43.equals((java.lang.Object) (short) 1);
        java.lang.String str47 = signature43.getName();
        org.mockito.asm.Type[] typeArray48 = signature43.getArgumentTypes();
        generator7.setDelegates((java.lang.Object[]) typeArray48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator7.getStrategy();
        generator7.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "B" + "'", str47, "B");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setName("(JFIF)D");
        java.lang.String str14 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor[name=(JFIF)D; hidden]" + "'", str14, "java.beans.PropertyDescriptor[name=(JFIF)D; hidden]");
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=boolean; displayName=Z]");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type3 = type1.getElementType();
        int int5 = type1.getOpcode(105);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ljava.beans.PropertyDescriptor[name=boolean; displayName=Z];" + "'", str2, "Ljava.beans.PropertyDescriptor[name=boolean; displayName=Z];");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 109 + "'", int5 == 109);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setValue("B", (java.lang.Object) "Z");
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        java.lang.String[] strArray22 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray26);
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        generator14.setClasses(classArray28);
        boolean boolean31 = generator14.getAttemptLoad();
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray34 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray34);
        java.lang.Class<?> wildcardClass36 = strArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        generator14.setDelegates((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.beans.PropertyEditor propertyEditor42 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray41);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNull(propertyEditor42);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 100, (byte) 1, (byte) 100, (byte) 0 };
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean12 = namingPolicy10.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) type14);
        java.lang.String str16 = type14.getDescriptor();
        boolean boolean17 = namingPolicy10.equals((java.lang.Object) str16);
        generator7.setNamingPolicy(namingPolicy10);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray25);
        java.lang.String[] strArray33 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray36 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray36);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray37);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray37);
        generator7.setDelegates((java.lang.Object[]) methodArray40);
        java.lang.Class<?> wildcardClass42 = generator7.getClass();
        java.lang.Class[] classArray43 = null;
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass42, classArray43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44, (-1));
        java.lang.String str48 = methodInfo47.toString();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator49.getNamingPolicy();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass57 = type56.getClass();
        java.lang.String str58 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass57);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray59);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray60);
        generator49.setClasses(classArray60);
        java.lang.ClassLoader classLoader64 = generator49.getClassLoader();
        boolean boolean65 = methodInfo47.equals((java.lang.Object) generator49);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator66.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator66.getNamingPolicy();
        generator66.setAttemptLoad(true);
        generator66.setAttemptLoad(false);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass74 = type73.getClass();
        java.lang.String str75 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass74);
        java.beans.PropertyDescriptor[] propertyDescriptorArray76 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass74);
        java.lang.Class[] classArray77 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray76);
        int int78 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray77);
        generator66.setClasses(classArray77);
        java.lang.ClassLoader classLoader81 = generator66.getClassLoader();
        generator49.setClassLoader(classLoader81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class83 = org.mockito.cglib.core.ReflectUtils.defineClass("", byteArray6, classLoader81);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 100, 1, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(methodInfo47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<init>()V" + "'", str48, "<init>()V");
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org/mockito/asm/Type" + "'", str58, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/Type" + "'", str75, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classLoader81);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        java.lang.String str7 = type6.toString();
        boolean boolean8 = generatorStrategy4.equals((java.lang.Object) str7);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str12 = signature11.getName();
        boolean boolean13 = generatorStrategy4.equals((java.lang.Object) str12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        boolean boolean18 = generatorStrategy4.equals((java.lang.Object) classInfo17);
        java.lang.String[] strArray24 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray27 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray27);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray28);
        int int31 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        boolean boolean33 = classInfo17.equals((java.lang.Object) strArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) strArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LI;" + "'", str7, "LI;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean3 = namingPolicy1.equals((java.lang.Object) type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        boolean boolean12 = namingPolicy1.equals((java.lang.Object) signature11);
        java.lang.String str13 = signature11.toString();
        java.lang.String str14 = signature11.getName();
        java.lang.Class<?> wildcardClass15 = signature11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!(JFIF)V" + "'", str13, "hi!(JFIF)V");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type19);
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setDisplayName("");
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean12 = namingPolicy10.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) type14);
        java.lang.String str16 = type14.getDescriptor();
        boolean boolean17 = namingPolicy10.equals((java.lang.Object) str16);
        generator7.setNamingPolicy(namingPolicy10);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type21, type22, type23, type24 };
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("hi!", type20, typeArray25);
        org.mockito.asm.Type type27 = signature26.getReturnType();
        boolean boolean28 = namingPolicy10.equals((java.lang.Object) type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        int int30 = type29.getSort();
        boolean boolean31 = namingPolicy10.equals((java.lang.Object) type29);
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean40 = namingPolicy38.equals((java.lang.Object) type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) type42);
        java.lang.String str44 = type42.getDescriptor();
        boolean boolean45 = namingPolicy38.equals((java.lang.Object) str44);
        generator35.setNamingPolicy(namingPolicy38);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray49 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray49);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray53 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray53);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray53);
        java.lang.String[] strArray61 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray64 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray64);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray65);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray65);
        generator35.setDelegates((java.lang.Object[]) methodArray68);
        java.lang.Class<?> wildcardClass70 = generator35.getClass();
        java.lang.Class[] classArray71 = null;
        java.lang.reflect.Constructor constructor72 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass70, classArray71);
        org.mockito.asm.Type[] typeArray73 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor72);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor72, (-1));
        org.mockito.cglib.core.ClassInfo classInfo76 = methodInfo75.getClassInfo();
        org.mockito.cglib.core.Signature signature77 = methodInfo75.getSignature();
        org.mockito.asm.Type[] typeArray78 = methodInfo75.getExceptionTypes();
        org.mockito.cglib.core.Predicate predicate79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = namingPolicy10.getClassName("I(JFIF)Lorg/mockito/asm/Type;", "java.beans.PropertyDescriptor[name=boolean; displayName=(JFIF)B; shortDescription=java.beans.PropertyDescriptor[name=boolean; displayName=Z; shortDescription=(JFIF)V; preferred]]", (java.lang.Object) methodInfo75, predicate79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Z" + "'", str44, "Z");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(constructor72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertNotNull(classInfo76);
        org.junit.Assert.assertNotNull(signature77);
        org.junit.Assert.assertNotNull(typeArray78);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.String[] strArray7 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray10 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray10);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray13);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        generator0.setDelegates((java.lang.Object[]) classArray13);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        java.lang.String str7 = type6.toString();
        boolean boolean8 = generatorStrategy4.equals((java.lang.Object) str7);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str12 = signature11.getName();
        boolean boolean13 = generatorStrategy4.equals((java.lang.Object) str12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        boolean boolean18 = generatorStrategy4.equals((java.lang.Object) classInfo17);
        java.lang.String[] strArray24 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray27 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray27);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray28);
        int int31 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        boolean boolean33 = classInfo17.equals((java.lang.Object) strArray32);
        org.mockito.asm.Type type34 = classInfo17.getType();
        org.mockito.asm.Type type35 = classInfo17.getSuperType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LI;" + "'", str7, "LI;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray8 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray8);
        java.beans.PropertyEditor propertyEditor10 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray8);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNull(propertyEditor10);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean]", "(JFIF)L(JFIF)V;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.junit.Assert.assertNotNull(type3);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 0);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (byte) -1);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature44 = methodInfo43.getSignature();
        java.lang.String str45 = signature44.getDescriptor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getType();
        org.mockito.asm.Type type6 = classInfo3.getType();
        int int7 = type6.getSize();
        int int8 = type6.getSize();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int16 = type15.getSort();
        boolean boolean17 = type6.equals((java.lang.Object) type15);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getAttemptLoad();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator5.getStrategy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("I");
        java.lang.String str12 = type11.toString();
        boolean boolean13 = generatorStrategy9.equals((java.lang.Object) str12);
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str17 = signature16.getName();
        boolean boolean18 = generatorStrategy9.equals((java.lang.Object) str17);
        boolean boolean20 = generatorStrategy9.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass22);
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, false);
        boolean boolean29 = generatorStrategy9.equals((java.lang.Object) false);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("boolean", method31, method32);
        propertyDescriptor33.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor37 = propertyDescriptor33.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method38 = null;
        propertyDescriptor33.setReadMethod(method38);
        boolean boolean40 = propertyDescriptor33.isHidden();
        propertyDescriptor33.setValue("[Ljava/lang/String;", (java.lang.Object) (short) 100);
        boolean boolean44 = generatorStrategy9.equals((java.lang.Object) "[Ljava/lang/String;");
        generator0.setStrategy(generatorStrategy9);
        boolean boolean46 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader47 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LI;" + "'", str12, "LI;");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/Type" + "'", str24, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(propertyEditor37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 62);
        java.lang.String str40 = methodInfo39.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<init>()V" + "'", str40, "<init>()V");
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isExpert();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type13, type14, type15, type16 };
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("hi!", type12, typeArray17);
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("B", type10, typeArray17);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        boolean boolean21 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.Class<?> wildcardClass22 = strArray19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        generator0.setDelegates((java.lang.Object[]) propertyDescriptorArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("boolean", method27, method28);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor29.getPropertyType();
        java.lang.String str31 = propertyDescriptor29.getDisplayName();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor29.getPropertyEditorClass();
        propertyDescriptor29.setShortDescription("java.beans.PropertyDescriptor[name=boolean; displayName=Z; shortDescription=(JFIF)V; preferred]");
        propertyDescriptor29.setDisplayName("(JFIF)B");
        java.lang.String str37 = propertyDescriptor29.getShortDescription();
        boolean boolean38 = generatorStrategy25.equals((java.lang.Object) propertyDescriptor29);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        boolean boolean41 = generator39.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = generatorStrategy25.generate((org.mockito.cglib.core.ClassGenerator) generator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; displayName=Z; shortDescription=(JFIF)V; preferred]" + "'", str37, "java.beans.PropertyDescriptor[name=boolean; displayName=Z; shortDescription=(JFIF)V; preferred]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Bvoid", "()Ljava.beans.PropertyDescriptor[name=boolean; constrained];");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Bvoid()Ljava.beans.PropertyDescriptor[name=boolean; constrained];" + "'", str3, "Bvoid()Ljava.beans.PropertyDescriptor[name=boolean; constrained];");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Bvoid" + "'", str4, "Bvoid");
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("[Ljava/beans/PropertyDescriptor;", "");
        java.lang.String str3 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str3, "[Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.String str7 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getClass();
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray12 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray12);
        java.lang.Class<?> wildcardClass14 = strArray11.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method21 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass8, "()V", classArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ()V");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Ljava/lang/String;" + "'", str15, "[Ljava/lang/String;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("boolean", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getPropertyEditorClass();
        java.lang.String str16 = propertyDescriptor14.getName();
        java.lang.reflect.Method method17 = null;
        propertyDescriptor14.setWriteMethod(method17);
        propertyDescriptor14.setHidden(false);
        java.lang.reflect.Method method21 = propertyDescriptor14.getReadMethod();
        propertyDescriptor14.setBound(false);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType("B(JFIF)V");
        propertyDescriptor14.setValue("boolean", (java.lang.Object) "B(JFIF)V");
        java.util.Enumeration<java.lang.String> strEnumeration28 = propertyDescriptor14.attributeNames();
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) strEnumeration28);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("I", method31, method32);
        java.lang.Class<?> wildcardClass34 = propertyDescriptor33.getPropertyEditorClass();
        java.lang.Object obj36 = propertyDescriptor33.getValue("LZ;");
        java.lang.String str37 = propertyDescriptor33.getShortDescription();
        boolean boolean38 = propertyDescriptor33.isPreferred();
        java.lang.reflect.Method method39 = propertyDescriptor33.getReadMethod();
        boolean boolean40 = propertyDescriptor33.isPreferred();
        boolean boolean41 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor33);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(strEnumeration28);
        org.junit.Assert.assertNull(propertyEditor29);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "I" + "'", str37, "I");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(method39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (-1));
        org.mockito.asm.Type[] typeArray41 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 5);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.Signature signature45 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor37);
        java.lang.String str46 = signature45.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<init>()V" + "'", str46, "<init>()V");
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setHidden(true);
        java.lang.String str12 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor[name=I; displayName=; hidden]" + "'", str12, "java.beans.PropertyDescriptor[name=I; displayName=; hidden]");
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lava.beans.PropertyDescriptor[name=boolean;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 43");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean13 = namingPolicy11.equals((java.lang.Object) type12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) type15);
        java.lang.String str17 = type15.getDescriptor();
        boolean boolean18 = namingPolicy11.equals((java.lang.Object) str17);
        generator8.setNamingPolicy(namingPolicy11);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type22, type23, type24, type25 };
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("hi!", type21, typeArray26);
        org.mockito.asm.Type type28 = signature27.getReturnType();
        boolean boolean29 = namingPolicy11.equals((java.lang.Object) type28);
        generator5.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean36 = namingPolicy34.equals((java.lang.Object) type35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) type38);
        java.lang.String str40 = type38.getDescriptor();
        boolean boolean41 = namingPolicy34.equals((java.lang.Object) str40);
        generator31.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator43.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator31.getUseCache();
        java.lang.String[] strArray53 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray56 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray56);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray53, methodArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray53);
        generator31.setDelegates((java.lang.Object[]) strArray53);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray53);
        generator5.setClasses(classArray61);
        generator0.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator66.getNamingPolicy();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean69 = namingPolicy67.equals((java.lang.Object) type68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) type71);
        java.lang.String str73 = type71.getDescriptor();
        boolean boolean74 = namingPolicy67.equals((java.lang.Object) str73);
        generator64.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator64.getStrategy();
        boolean boolean77 = generator64.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator64.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy78);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass83 = type82.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass83);
        org.mockito.cglib.core.ClassInfo classInfo85 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass83);
        java.lang.String str86 = classInfo85.toString();
        java.lang.String str87 = classInfo85.toString();
        int int88 = classInfo85.getModifiers();
        org.mockito.asm.Type[] typeArray89 = classInfo85.getInterfaces();
        int int90 = classInfo85.getModifiers();
        org.mockito.asm.Type type91 = classInfo85.getType();
        org.mockito.asm.Type type92 = classInfo85.getType();
        org.mockito.cglib.core.Predicate predicate93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = namingPolicy78.getClassName("float", "()B", (java.lang.Object) classInfo85, predicate93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Z" + "'", str40, "Z");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Z" + "'", str73, "Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(classInfo85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.mockito.asm.Type" + "'", str86, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org.mockito.asm.Type" + "'", str87, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(type92);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setUseCache(false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type6, type7, type8, type9 };
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("hi!", type5, typeArray10);
        generator1.setDelegates((java.lang.Object[]) typeArray10);
        boolean boolean13 = generator1.getUseCache();
        generator1.setStyle(2);
        boolean boolean16 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        boolean boolean19 = generator17.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy22);
        java.lang.String[] strArray29 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray32 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray32);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray33);
        generator1.setClasses(classArray35);
        generator1.setAttemptLoad(true);
        boolean boolean39 = generator1.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator40.getNamingPolicy();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator40.getNamingPolicy();
        generator40.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator50.getNamingPolicy();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass58 = type57.getClass();
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray60);
        int int62 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray61);
        generator50.setClasses(classArray61);
        java.lang.ClassLoader classLoader65 = generator50.getClassLoader();
        org.mockito.asm.Type[] typeArray67 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) typeArray67);
        generator40.setClassLoader(classLoader65);
        generator1.setClassLoader(classLoader65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method71 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=boolean; constrained]", classLoader65);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/Type" + "'", str59, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean6 = namingPolicy4.equals((java.lang.Object) type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) type8);
        java.lang.String str10 = type8.getDescriptor();
        boolean boolean11 = namingPolicy4.equals((java.lang.Object) str10);
        generator1.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator1.getStrategy();
        boolean boolean14 = generator1.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator15.getNamingPolicy();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator15.getNamingPolicy();
        generator15.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator25.getNamingPolicy();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray36);
        generator25.setClasses(classArray36);
        java.lang.ClassLoader classLoader40 = generator25.getClassLoader();
        org.mockito.asm.Type[] typeArray42 = org.mockito.asm.Type.getArgumentTypes("(JFIF)B");
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) typeArray42);
        generator15.setClassLoader(classLoader40);
        generator1.setClassLoader(classLoader40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor46 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=boolean; displayName=Z]", classLoader40);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/Type" + "'", str34, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(mixin43);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.String[] strArray40 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray44);
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("boolean", method54, method55);
        propertyDescriptor56.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor60 = propertyDescriptor56.createPropertyEditor((java.lang.Object) true);
        propertyDescriptor56.setHidden(false);
        java.lang.Class<?> wildcardClass63 = propertyDescriptor56.getPropertyEditorClass();
        propertyDescriptor56.setConstrained(false);
        java.lang.Class<?> wildcardClass66 = propertyDescriptor56.getPropertyType();
        java.lang.Object obj68 = propertyDescriptor56.getValue("Lorg/mockito/cglib/core/Signature;");
        org.mockito.cglib.core.Predicate predicate69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = namingPolicy50.getClassName("D", "java.beans.PropertyDescriptor[name=I]", (java.lang.Object) "Lorg/mockito/cglib/core/Signature;", predicate69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNull(propertyEditor60);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNull(obj68);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("void");
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setUseCache(false);
        java.lang.String[] strArray10 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray13 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray13);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray14);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        generator2.setClasses(classArray16);
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator2.getStrategy();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = classInfo25.getType();
        int int27 = classInfo25.getModifiers();
        org.mockito.asm.Type type28 = classInfo25.getSuperType();
        int int29 = classInfo25.getModifiers();
        int int30 = classInfo25.getModifiers();
        java.lang.String str31 = classInfo25.toString();
        boolean boolean32 = generatorStrategy21.equals((java.lang.Object) classInfo25);
        boolean boolean33 = type1.equals((java.lang.Object) classInfo25);
        org.mockito.asm.Type type34 = classInfo25.getSuperType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.mockito.asm.Type" + "'", str31, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean6 = namingPolicy4.equals((java.lang.Object) type5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) type8);
        java.lang.String str10 = type8.getDescriptor();
        boolean boolean11 = namingPolicy4.equals((java.lang.Object) str10);
        generator1.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy15);
        boolean boolean17 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setUseCache(false);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        generator18.setClasses(classArray32);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        generator1.setClasses(classArray32);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor39 = org.mockito.cglib.core.ReflectUtils.getConstructor(class0, classArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("boolean", "LZ;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        int int4 = type3.getSort();
        java.lang.String str5 = type3.toString();
        java.lang.String str6 = type3.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LZ;" + "'", str5, "LZ;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "LZ;" + "'", str6, "LZ;");
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method6 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = classInfo3.getType();
        int int5 = classInfo3.getModifiers();
        org.mockito.asm.Type type6 = classInfo3.getType();
        org.mockito.asm.Type[] typeArray7 = classInfo3.getInterfaces();
        org.mockito.asm.Type type8 = classInfo3.getType();
        org.mockito.asm.Type type9 = classInfo3.getType();
        java.lang.String str10 = classInfo3.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setShortDescription("");
        propertyDescriptor3.setName("[Ljava/lang/String;");
        boolean boolean17 = propertyDescriptor3.isHidden();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("", "hi!");
        boolean boolean22 = signature20.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setUseCache(false);
        boolean boolean26 = signature20.equals((java.lang.Object) false);
        java.lang.String str27 = signature20.getName();
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature20);
        java.lang.String str29 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method31 = null;
        propertyDescriptor3.setReadMethod(method31);
        java.lang.reflect.Method method33 = null;
        propertyDescriptor3.setReadMethod(method33);
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[Ljava/lang/String;" + "'", str29, "[Ljava/lang/String;");
        org.junit.Assert.assertNull(wildcardClass30);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean8 = namingPolicy6.equals((java.lang.Object) type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) type10);
        java.lang.String str12 = type10.getDescriptor();
        boolean boolean13 = namingPolicy6.equals((java.lang.Object) str12);
        generator3.setNamingPolicy(namingPolicy6);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type19, type20 };
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("hi!", type16, typeArray21);
        org.mockito.asm.Type type23 = signature22.getReturnType();
        boolean boolean24 = namingPolicy6.equals((java.lang.Object) type23);
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setUseCache(false);
        java.lang.String[] strArray34 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray37 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray37);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray38);
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        generator26.setClasses(classArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator26.getStrategy();
        boolean boolean44 = namingPolicy6.equals((java.lang.Object) generator26);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        boolean boolean47 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator45.getStrategy();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("I");
        java.lang.String str52 = type51.toString();
        boolean boolean53 = generatorStrategy49.equals((java.lang.Object) str52);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.String str57 = signature56.getName();
        boolean boolean58 = generatorStrategy49.equals((java.lang.Object) str57);
        generator26.setStrategy(generatorStrategy49);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass61 = type60.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        java.lang.String str64 = classInfo63.toString();
        org.mockito.asm.Type type65 = classInfo63.getType();
        java.lang.String str66 = classInfo63.toString();
        java.lang.Object obj67 = null;
        boolean boolean68 = classInfo63.equals(obj67);
        int int69 = classInfo63.getModifiers();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        boolean boolean72 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator70.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator70.getStrategy();
        java.lang.Object obj75 = null;
        boolean boolean76 = generatorStrategy74.equals(obj75);
        java.lang.reflect.Method method78 = null;
        java.lang.reflect.Method method79 = null;
        java.beans.PropertyDescriptor propertyDescriptor80 = new java.beans.PropertyDescriptor("boolean", method78, method79);
        java.lang.Class<?> wildcardClass81 = propertyDescriptor80.getPropertyEditorClass();
        java.lang.String str82 = propertyDescriptor80.getName();
        java.lang.String str83 = propertyDescriptor80.getShortDescription();
        java.lang.String str84 = propertyDescriptor80.getName();
        java.lang.String str85 = propertyDescriptor80.getName();
        boolean boolean86 = generatorStrategy74.equals((java.lang.Object) propertyDescriptor80);
        java.util.Enumeration<java.lang.String> strEnumeration87 = propertyDescriptor80.attributeNames();
        boolean boolean88 = classInfo63.equals((java.lang.Object) strEnumeration87);
        boolean boolean89 = generatorStrategy49.equals((java.lang.Object) classInfo63);
        org.mockito.asm.Type type90 = classInfo63.getSuperType();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "LI;" + "'", str52, "LI;");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.mockito.asm.Type" + "'", str64, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.mockito.asm.Type" + "'", str66, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "boolean" + "'", str84, "boolean");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strEnumeration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(type90);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType("B(JFIF)V");
        propertyDescriptor3.setValue("boolean", (java.lang.Object) "B(JFIF)V");
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        boolean boolean18 = propertyDescriptor3.isPreferred();
        boolean boolean19 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setReadMethod(method11);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.ClassLoader classLoader16 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        boolean boolean19 = generator17.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator17.setClassLoader(classLoader20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        boolean boolean24 = namingPolicy22.equals((java.lang.Object) "I");
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean26 = namingPolicy22.equals((java.lang.Object) type25);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray45);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray45);
        boolean boolean49 = namingPolicy22.equals((java.lang.Object) strArray28);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) strArray28);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("boolean", method52, method53);
        propertyDescriptor54.setDisplayName("Z");
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray59 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray59);
        java.beans.PropertyEditor propertyEditor61 = propertyDescriptor54.createPropertyEditor((java.lang.Object) methodArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray59);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray59);
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) methodArray63);
        propertyDescriptor3.setHidden(false);
        boolean boolean67 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNull(propertyEditor61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj6 = propertyDescriptor3.getValue("LZ;");
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.String str8 = propertyDescriptor3.getName();
        boolean boolean9 = propertyDescriptor3.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("I", method14, method15);
        propertyDescriptor16.setShortDescription("Lorg/mockito/asm/Type;");
        propertyDescriptor16.setBound(true);
        java.lang.String str21 = propertyDescriptor16.getShortDescription();
        propertyDescriptor16.setConstrained(false);
        propertyDescriptor16.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration26 = propertyDescriptor16.attributeNames();
        boolean boolean27 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor16);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(strEnumeration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str4 = classInfo3.toString();
        org.mockito.asm.Type type5 = classInfo3.getSuperType();
        org.mockito.asm.Type[] typeArray6 = classInfo3.getInterfaces();
        org.mockito.asm.Type type7 = classInfo3.getType();
        org.mockito.asm.Type type8 = classInfo3.getSuperType();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, false, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        boolean boolean18 = classInfo3.equals((java.lang.Object) int17);
        org.mockito.asm.Type type19 = classInfo3.getSuperType();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, true);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, false, true);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) propertyDescriptorArray20);
        int int28 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        java.lang.Class<?> wildcardClass29 = classArray27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass29);
        boolean boolean33 = classInfo3.equals((java.lang.Object) propertyDescriptorArray32);
        int int34 = classInfo3.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type" + "'", str4, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=boolean]");
        boolean boolean10 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setName("short");
        java.lang.Object obj15 = propertyDescriptor3.getValue("B(JFIF)V");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass18 = type17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.String str21 = classInfo20.toString();
        org.mockito.asm.Type type22 = classInfo20.getSuperType();
        org.mockito.asm.Type[] typeArray23 = classInfo20.getInterfaces();
        org.mockito.asm.Type type24 = classInfo20.getType();
        int int25 = classInfo20.getModifiers();
        org.mockito.asm.Type type26 = classInfo20.getType();
        org.mockito.asm.Type type27 = classInfo20.getType();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=boolean; shortDescription=B]", (java.lang.Object) classInfo20);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.mockito.asm.Type" + "'", str21, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("boolean", method11, method12);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor13.getPropertyEditorClass();
        java.lang.String str15 = propertyDescriptor13.getName();
        propertyDescriptor13.setHidden(false);
        boolean boolean18 = propertyDescriptor13.isExpert();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type23, type24, type25, type26 };
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("hi!", type22, typeArray27);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("B", type20, typeArray27);
        java.beans.PropertyEditor propertyEditor30 = propertyDescriptor13.createPropertyEditor((java.lang.Object) type20);
        java.lang.String str31 = propertyDescriptor13.getName();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor13.getPropertyEditorClass();
        java.beans.PropertyEditor propertyEditor33 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor13);
        boolean boolean34 = propertyDescriptor13.isExpert();
        propertyDescriptor13.setName("Ljava.beans.PropertyDescriptor[name=boolean; displayName=Z];");
        propertyDescriptor13.setHidden(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNull(propertyEditor30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNull(propertyEditor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setUseCache(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        generator0.setClasses(classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = null;
        generator0.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        boolean boolean27 = generator25.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator25.setClassLoader(classLoader28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, false);
        generator25.setDelegates((java.lang.Object[]) methodArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator25.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean45 = namingPolicy43.equals((java.lang.Object) type44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) type47);
        java.lang.String str49 = type47.getDescriptor();
        boolean boolean50 = namingPolicy43.equals((java.lang.Object) str49);
        generator40.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator40.getStrategy();
        boolean boolean53 = generator40.getAttemptLoad();
        java.lang.String[] strArray59 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray62 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray62);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray59, methodArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray63);
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray65);
        generator40.setClasses(classArray65);
        java.lang.String[] strArray68 = org.mockito.cglib.core.ReflectUtils.getNames(classArray65);
        boolean boolean69 = generatorStrategy39.equals((java.lang.Object) classArray65);
        generator21.setClasses(classArray65);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray71 = generatorStrategy20.generate((org.mockito.cglib.core.ClassGenerator) generator21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/Type" + "'", str33, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Z" + "'", str49, "Z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("I", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getPropertyEditorClass();
        java.lang.Object obj17 = propertyDescriptor14.getValue("LZ;");
        propertyDescriptor14.setPreferred(true);
        propertyDescriptor14.setConstrained(true);
        java.lang.reflect.Method method22 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor3.setValue("Z(JFIF)V", (java.lang.Object) propertyDescriptor14);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean29 = namingPolicy27.equals((java.lang.Object) type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) type31);
        java.lang.String str33 = type31.getDescriptor();
        boolean boolean34 = namingPolicy27.equals((java.lang.Object) str33);
        generator24.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator36.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy38);
        boolean boolean40 = generator24.getUseCache();
        java.lang.String[] strArray46 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray49 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray49);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray46);
        generator24.setDelegates((java.lang.Object[]) strArray46);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) strArray46);
        java.beans.PropertyEditor propertyEditor55 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray54);
        java.lang.reflect.Method method56 = propertyDescriptor3.getWriteMethod();
        boolean boolean57 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Z" + "'", str33, "Z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNull(propertyEditor55);
        org.junit.Assert.assertNull(method56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("boolean", method1, method2);
        propertyDescriptor3.setDisplayName("Z");
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setValue("B", (java.lang.Object) "Z");
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setUseCache(false);
        java.lang.String[] strArray22 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray26);
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        generator14.setClasses(classArray28);
        boolean boolean31 = generator14.getAttemptLoad();
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray34 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray33, methodArray34);
        java.lang.Class<?> wildcardClass36 = strArray33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        generator14.setDelegates((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.beans.PropertyEditor propertyEditor42 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray41);
        propertyDescriptor3.setConstrained(true);
        boolean boolean45 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNull(propertyEditor42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int1 = type0.getSort();
        java.lang.String str2 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str5 = type4.getClassName();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("boolean", method7, method8);
        propertyDescriptor9.setDisplayName("Z");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        propertyDescriptor9.setValue("boolean", (java.lang.Object) type13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type17, type18, type19, type20 };
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("hi!", type16, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray21);
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("double", type4, typeArray21);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = type0.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "void" + "'", str2, "void");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(JFIF)J" + "'", str23, "(JFIF)J");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(JFIF)V" + "'", str25, "(JFIF)V");
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type4, type5, type6, type7 };
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("hi!", type3, typeArray8);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("B", type1, typeArray8);
        org.mockito.asm.Type type11 = signature10.getReturnType();
        org.mockito.asm.Type[] typeArray12 = signature10.getArgumentTypes();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.lang.String str17 = classInfo16.toString();
        org.mockito.asm.Type type18 = classInfo16.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo16.getInterfaces();
        org.mockito.asm.Type type20 = classInfo16.getType();
        int int21 = classInfo16.getModifiers();
        org.mockito.asm.Type type22 = classInfo16.getType();
        boolean boolean23 = signature10.equals((java.lang.Object) classInfo16);
        org.mockito.asm.Type type24 = classInfo16.getType();
        java.lang.String str25 = classInfo16.toString();
        java.lang.Object obj26 = null;
        boolean boolean27 = classInfo16.equals(obj26);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.Type" + "'", str25, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=boolean; expert]");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ava.beans.PropertyDescriptor[name=boolean" + "'", str2, "ava.beans.PropertyDescriptor[name=boolean");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lava.beans.PropertyDescriptor[name=boolean;" + "'", str3, "Lava.beans.PropertyDescriptor[name=boolean;");
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator2.getNamingPolicy();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        boolean boolean5 = namingPolicy3.equals((java.lang.Object) type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) type7);
        java.lang.String str9 = type7.getDescriptor();
        boolean boolean10 = namingPolicy3.equals((java.lang.Object) str9);
        generator0.setNamingPolicy(namingPolicy3);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray14 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray14);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray18 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray18);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray18);
        java.lang.String[] strArray26 = new java.lang.String[] { "boolean", "", "", "boolean", "" };
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray29 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray29);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray30);
        generator0.setDelegates((java.lang.Object[]) methodArray33);
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        java.lang.Class[] classArray36 = null;
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, 62);
        int int40 = methodInfo39.getModifiers();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("I", method42, method43);
        propertyDescriptor44.setShortDescription("Lorg/mockito/asm/Type;");
        propertyDescriptor44.setBound(true);
        propertyDescriptor44.setPreferred(true);
        propertyDescriptor44.setShortDescription("void");
        java.util.Enumeration<java.lang.String> strEnumeration53 = propertyDescriptor44.attributeNames();
        boolean boolean54 = methodInfo39.equals((java.lang.Object) strEnumeration53);
        java.lang.String str55 = methodInfo39.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 62 + "'", int40 == 62);
        org.junit.Assert.assertNotNull(strEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>()V" + "'", str55, "<init>()V");
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("void(JFIF)LZ;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }
}


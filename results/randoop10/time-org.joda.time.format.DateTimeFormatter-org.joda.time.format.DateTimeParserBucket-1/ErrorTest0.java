import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfYear();
        boolean boolean6 = mutableDateTime4.isAfterNow();
        boolean boolean7 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        boolean boolean14 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate13);
        int int15 = localDate13.getDayOfWeek();
        org.joda.time.LocalDate.Property property16 = localDate13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval19 = localDate13.toInterval(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime4.toMutableDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) -1, dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime20", (mutableDateTime2.compareTo(mutableDateTime20) == 0) == mutableDateTime2.equals(mutableDateTime20));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        boolean boolean26 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes((int) (byte) 1);
        boolean boolean34 = mutableDateTime3.equals((java.lang.Object) dateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        boolean boolean21 = dateTimeZone17.isStandardOffset((long) (short) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime3.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        mutableDateTime3.addYears((int) 'u');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property8.setCopy((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        boolean boolean16 = mutableDateTime14.isAfterNow();
        boolean boolean17 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        int int25 = localDate23.getDayOfWeek();
        org.joda.time.LocalDate.Property property26 = localDate23.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval29 = localDate23.toInterval(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime14.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate10.toDateTimeAtCurrentTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and mutableDateTime30", (mutableDateTime12.compareTo(mutableDateTime30) == 0) == mutableDateTime12.equals(mutableDateTime30));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight12 = dateTime8.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        boolean boolean16 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime14.setZone(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) '4');
        org.joda.time.DateTime dateTime22 = dateTime8.toDateTime(dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime14", (dateTime8.compareTo(mutableDateTime14) == 0) == dateTime8.equals(mutableDateTime14));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket9.saveField(dateTimeFieldType10, "1970-01-01T00:00:00.000Z", locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology3, locale12);
        java.lang.String str15 = chronology3.toString();
        org.joda.time.DurationField durationField16 = chronology3.eras();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(3940L, chronology3);
        org.joda.time.DurationField durationField19 = chronology3.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField19, and durationField16", !(durationField16.compareTo(durationField19) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField19.compareTo(durationField16))));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval22 = localDate16.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone21);
        int int25 = dateTimeZone21.getStandardOffset((long) 2039);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime23", (dateTime10.compareTo(dateTime23) == 0) == dateTime10.equals(dateTime23));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.months();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime10", (dateTime7.compareTo(mutableDateTime10) == 0) == dateTime7.equals(mutableDateTime10));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.DurationField durationField2 = chronology1.weekyears();
        org.joda.time.DurationField durationField3 = chronology1.years();
        org.joda.time.DateTimeField dateTimeField4 = chronology1.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField2 and durationField3", (durationField2.compareTo(durationField3) == 0) == durationField2.equals(durationField3));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        dateTimeParserBucket17.saveField(dateTimeFieldType18, "1970-01-01T00:00:00.000Z", locale27);
        java.lang.Integer int30 = dateTimeParserBucket17.getPivotYear();
        java.util.Locale locale31 = dateTimeParserBucket17.getLocale();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property34.getFieldType();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket17.saveField(dateTimeFieldType35, "", locale51);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType35.getDurationType();
        mutableDateTime1.add(durationFieldType55, 31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime33", (instant10.compareTo(mutableDateTime33) == 0) == instant10.equals(mutableDateTime33));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        int int20 = mutableDateTime3.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        boolean boolean8 = mutableDateTime6.isAfterNow();
        boolean boolean9 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        boolean boolean16 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate15);
        int int17 = localDate15.getDayOfWeek();
        org.joda.time.LocalDate.Property property18 = localDate15.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval21 = localDate15.toInterval(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime6.toMutableDateTime(dateTimeZone20);
        int int23 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDateTime25.toDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology31 = localDateTime25.getChronology();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket43.saveField(dateTimeFieldType44, "1970-01-01T00:00:00.000Z", locale46);
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "1970-01-01T00:00:00.000Z", locale46);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket53.saveField(dateTimeFieldType54, "1970-01-01T00:00:00.000Z", locale56);
        java.lang.String str58 = locale46.getDisplayCountry(locale56);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket70.saveField(dateTimeFieldType71, "1970-01-01T00:00:00.000Z", locale73);
        dateTimeParserBucket63.saveField(dateTimeFieldType64, "1970-01-01T00:00:00.000Z", locale73);
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(0L, chronology77, locale78, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale83 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket80.saveField(dateTimeFieldType81, "1970-01-01T00:00:00.000Z", locale83);
        java.lang.String str85 = locale73.getDisplayCountry(locale83);
        java.lang.String str86 = locale56.getDisplayVariant(locale73);
        java.lang.String str87 = locale73.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology31, locale73);
        org.joda.time.Chronology chronology89 = chronology31.withUTC();
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime(1L, chronology89);
        org.joda.time.DateTimeField dateTimeField91 = chronology89.year();
        org.joda.time.DateTimeField dateTimeField92 = chronology89.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime93 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology89);
        org.joda.time.DateTimeField dateTimeField94 = chronology89.monthOfYear();
        org.joda.time.DateTime dateTime95 = mutableDateTime3.toDateTime(chronology89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale24);
        dateTimeParserBucket14.saveField(dateTimeFieldType15, "1970-01-01T00:00:00.000Z", locale24);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket31.saveField(dateTimeFieldType32, "1970-01-01T00:00:00.000Z", locale34);
        java.lang.String str36 = locale24.getDisplayCountry(locale34);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket58.saveField(dateTimeFieldType59, "1970-01-01T00:00:00.000Z", locale61);
        java.lang.String str63 = locale51.getDisplayCountry(locale61);
        java.lang.String str64 = locale34.getDisplayVariant(locale51);
        java.lang.String str65 = locale51.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology9, locale51);
        org.joda.time.Chronology chronology67 = chronology9.withUTC();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DurationField durationField69 = chronology67.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime68", (dateTime8.compareTo(dateTime68) == 0) == dateTime8.equals(dateTime68));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.DurationField durationField2 = chronology1.weekyears();
        org.joda.time.DurationField durationField3 = chronology1.years();
        org.joda.time.DurationField durationField4 = chronology1.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField2 and durationField3", (durationField2.compareTo(durationField3) == 0) == durationField2.equals(durationField3));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfYear();
        boolean boolean6 = mutableDateTime4.isAfterNow();
        boolean boolean7 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        boolean boolean14 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate13);
        int int15 = localDate13.getDayOfWeek();
        org.joda.time.LocalDate.Property property16 = localDate13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval19 = localDate13.toInterval(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime4.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 6, dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime20", (mutableDateTime2.compareTo(mutableDateTime20) == 0) == mutableDateTime2.equals(mutableDateTime20));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "1970-01-01T00:00:00.000Z", locale39);
        dateTimeParserBucket29.saveField(dateTimeFieldType30, "1970-01-01T00:00:00.000Z", locale39);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket46.saveField(dateTimeFieldType47, "1970-01-01T00:00:00.000Z", locale49);
        java.lang.String str51 = locale39.getDisplayCountry(locale49);
        java.lang.String str52 = property23.getAsText(locale39);
        java.lang.String str53 = locale39.getCountry();
        java.util.Set<java.lang.String> strSet54 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str55 = dateTimeZone17.getName(259200000L, locale39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.DurationField durationField15 = chronology2.eras();
        org.joda.time.DurationField durationField16 = chronology2.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField16, and durationField15", !(durationField15.compareTo(durationField16) == 0) || (Math.signum(durationField15.compareTo(durationField15)) == Math.signum(durationField16.compareTo(durationField15))));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Chronology chronology4 = null;
        mutableDateTime3.setChronology(chronology4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.year();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone12);
        boolean boolean17 = dateTimeZone9.equals((java.lang.Object) dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        long long24 = dateTimeZone9.getMillisKeepLocal(dateTimeZone20, (long) 59);
        mutableDateTime3.setZone(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and mutableDateTime8", (mutableDateTime3.compareTo(mutableDateTime8) == 0) == mutableDateTime3.equals(mutableDateTime8));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTime.Property property21 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval34 = localDate28.toInterval(dateTimeZone33);
        int[] intArray36 = new int[] { 'a' };
        int int37 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate28, intArray36);
        org.joda.time.Interval interval38 = localDate28.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate28.getFieldType(2);
        org.joda.time.LocalDate.Property property41 = localDate28.weekyear();
        org.joda.time.LocalDate localDate42 = property41.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate43 = property41.roundFloorCopy();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        boolean boolean50 = localDate46.isEqual((org.joda.time.ReadablePartial) localDate49);
        int int51 = localDate49.getDayOfWeek();
        org.joda.time.LocalDate.Property property52 = localDate49.weekOfWeekyear();
        org.joda.time.LocalDate localDate53 = property52.roundFloorCopy();
        int int54 = localDate53.size();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate56 = localDate53.minus(readablePeriod55);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.dayOfYear();
        boolean boolean60 = mutableDateTime58.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime58.setZone(dateTimeZone62);
        long long65 = dateTimeZone62.nextTransition((long) '4');
        org.joda.time.DateTime dateTime66 = localDate56.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight67 = localDate43.toDateMidnight(dateTimeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime58", (dateTime8.compareTo(mutableDateTime58) == 0) == dateTime8.equals(mutableDateTime58));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int17 = mutableDateTime15.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfYear();
        boolean boolean23 = mutableDateTime21.isAfterNow();
        boolean boolean24 = mutableDateTime19.isBefore((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        boolean boolean31 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate30);
        int int32 = localDate30.getDayOfWeek();
        org.joda.time.LocalDate.Property property33 = localDate30.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval36 = localDate30.toInterval(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime21.toMutableDateTime(dateTimeZone35);
        mutableDateTime15.setZone(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime19", (mutableDateTime15.compareTo(mutableDateTime19) == 0) == mutableDateTime15.equals(mutableDateTime19));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale24);
        dateTimeParserBucket14.saveField(dateTimeFieldType15, "1970-01-01T00:00:00.000Z", locale24);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket31.saveField(dateTimeFieldType32, "1970-01-01T00:00:00.000Z", locale34);
        java.lang.String str36 = locale24.getDisplayCountry(locale34);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket58.saveField(dateTimeFieldType59, "1970-01-01T00:00:00.000Z", locale61);
        java.lang.String str63 = locale51.getDisplayCountry(locale61);
        java.lang.String str64 = locale34.getDisplayVariant(locale51);
        java.lang.String str65 = locale51.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology9, locale51);
        org.joda.time.Chronology chronology67 = chronology9.withUTC();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone70);
        boolean boolean73 = dateTimeZone70.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(dateTimeZone70);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusHours(1);
        int int77 = localDateTime76.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.minusMonths(2039);
        int int80 = localDateTime76.getSecondOfMinute();
        long long82 = chronology67.set((org.joda.time.ReadablePartial) localDateTime76, (long) 10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime68", (dateTime8.compareTo(dateTime68) == 0) == dateTime8.equals(dateTime68));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfSecond();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        int int33 = dateTime32.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime15.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        int int2 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime1.setChronology(chronology3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        mutableDateTime1.set(dateTimeFieldType8, (int) '4');
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket19.saveField(dateTimeFieldType20, "1970-01-01T00:00:00.000Z", locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology13, locale22);
        java.lang.String str25 = chronology13.toString();
        org.joda.time.DurationField durationField26 = chronology13.eras();
        boolean boolean27 = dateTimeFieldType8.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField28 = chronology13.monthOfYear();
        org.joda.time.DurationField durationField29 = chronology13.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField29, and durationField26", !(durationField26.compareTo(durationField29) == 0) || (Math.signum(durationField26.compareTo(durationField26)) == Math.signum(durationField29.compareTo(durationField26))));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addSeconds(10);
        int int13 = mutableDateTime1.getDayOfWeek();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        dateTimeParserBucket18.saveField(dateTimeFieldType19, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket18.getZone();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime34.add(readableDuration36, 3);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime34.getZone();
        org.joda.time.DateTime dateTime40 = localDateTime32.toDateTime(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) 0, false, 0L);
        mutableDateTime1.setZoneRetainFields(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime34", (instant10.compareTo(mutableDateTime34) == 0) == instant10.equals(mutableDateTime34));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        mutableDateTime1.setDayOfMonth(1);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        boolean boolean17 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime15.setZone(dateTimeZone19);
        long long22 = dateTimeZone19.nextTransition((long) '4');
        mutableDateTime1.setZone(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime15", (instant10.compareTo(mutableDateTime15) == 0) == instant10.equals(mutableDateTime15));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.DateTime.Property property35 = dateTime15.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        mutableDateTime1.setMillis((long) 35);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime7.add(readablePeriod13, 4);
        org.joda.time.Instant instant16 = mutableDateTime7.toInstant();
        boolean boolean18 = mutableDateTime7.isAfter((long) (byte) 1);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant16", (mutableDateTime7.compareTo(instant16) == 0) == mutableDateTime7.equals(instant16));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfCeiling();
        org.joda.time.Instant instant5 = mutableDateTime4.toInstant();
        int int6 = mutableDateTime4.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and instant5", (mutableDateTime4.compareTo(instant5) == 0) == mutableDateTime4.equals(instant5));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        boolean boolean17 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime15.setZone(dateTimeZone19);
        long long22 = dateTimeZone19.nextTransition((long) '4');
        java.lang.String str24 = dateTimeZone19.getShortName((long) 100);
        mutableDateTime1.setZoneRetainFields(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime15", (instant10.compareTo(mutableDateTime15) == 0) == instant10.equals(mutableDateTime15));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        boolean boolean15 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate11.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withChronology(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime21.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.minus(readableDuration25);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 0);
        int int29 = mutableDateTime28.getEra();
        org.joda.time.Chronology chronology30 = null;
        mutableDateTime28.setChronology(chronology30);
        boolean boolean32 = dateTime21.isBefore((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DateTime dateTime34 = dateTime21.minusYears(3600000);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        boolean boolean41 = localDate37.isEqual((org.joda.time.ReadablePartial) localDate40);
        int int42 = localDate40.getDayOfWeek();
        org.joda.time.LocalDate.Property property43 = localDate40.weekOfWeekyear();
        org.joda.time.LocalDate localDate44 = property43.roundFloorCopy();
        org.joda.time.LocalDate localDate45 = property43.roundCeilingCopy();
        org.joda.time.LocalDate localDate46 = property43.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval49 = localDate46.toInterval(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime34.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) 53);
        mutableDateTime50.setZone(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = localDate2.toDateTimeAtCurrentTime(dateTimeZone53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and mutableDateTime50", (dateTime34.compareTo(mutableDateTime50) == 0) == dateTime34.equals(mutableDateTime50));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfYear();
        boolean boolean23 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime21.setZone(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableDateTime21.add(readablePeriod27, 4);
        org.joda.time.Instant instant30 = mutableDateTime21.toInstant();
        int int31 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) instant30);
        boolean boolean32 = instant30.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.LocalDate.Property property11 = localDate5.property(dateTimeFieldType10);
        org.joda.time.LocalDate.Property property12 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate14 = property12.setCopy("70");
        org.joda.time.LocalDate.Property property15 = localDate14.monthOfYear();
        org.joda.time.LocalDate localDate16 = property15.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        boolean boolean22 = mutableDateTime20.isAfterNow();
        boolean boolean23 = mutableDateTime18.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        boolean boolean30 = localDate26.isEqual((org.joda.time.ReadablePartial) localDate29);
        int int31 = localDate29.getDayOfWeek();
        org.joda.time.LocalDate.Property property32 = localDate29.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval35 = localDate29.toInterval(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime20.toMutableDateTime(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.millisOfSecond();
        int int38 = property15.getDifference((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.LocalDate localDate39 = property15.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime36", (mutableDateTime8.compareTo(mutableDateTime36) == 0) == mutableDateTime8.equals(mutableDateTime36));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        boolean boolean23 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.plus(readableDuration28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withChronology(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime29.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.minus(readableDuration33);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        int int37 = mutableDateTime36.getEra();
        org.joda.time.Chronology chronology38 = null;
        mutableDateTime36.setChronology(chronology38);
        boolean boolean40 = dateTime29.isBefore((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTime dateTime42 = dateTime29.minusYears(3600000);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        boolean boolean49 = localDate45.isEqual((org.joda.time.ReadablePartial) localDate48);
        int int50 = localDate48.getDayOfWeek();
        org.joda.time.LocalDate.Property property51 = localDate48.weekOfWeekyear();
        org.joda.time.LocalDate localDate52 = property51.roundFloorCopy();
        org.joda.time.LocalDate localDate53 = property51.roundCeilingCopy();
        org.joda.time.LocalDate localDate54 = property51.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval57 = localDate54.toInterval(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime42.toMutableDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str63 = dateTimeZone61.getNameKey((long) 53);
        mutableDateTime58.setZone(dateTimeZone61);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((java.lang.Object) dateTime14, dateTimeZone61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and mutableDateTime58", (dateTime42.compareTo(mutableDateTime58) == 0) == dateTime42.equals(mutableDateTime58));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 10, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.monthOfYear();
        java.lang.String str24 = dateTimeField22.getAsText((long) 35449917);
        long long27 = dateTimeField22.add((long) '4', 2000);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket37.saveField(dateTimeFieldType38, "1970-01-01T00:00:00.000Z", locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology31, locale40);
        java.lang.String str43 = locale40.getISO3Country();
        java.lang.String str44 = locale40.getVariant();
        java.lang.String str45 = dateTimeField22.getAsShortText((long) 32, locale40);
        java.util.Calendar calendar46 = mutableDateTime15.toCalendar(locale40);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.fromCalendarFields(calendar46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 0);
        int int5 = dateTimeParserBucket4.getOffset();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 23);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        int int22 = mutableDateTime11.getEra();
        org.joda.time.DateTime dateTime23 = mutableDateTime11.toDateTimeISO();
        boolean boolean24 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfHalfday();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket33.saveField(dateTimeFieldType34, "1970-01-01T00:00:00.000Z", locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology27, locale36);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField41 = chronology27.weekyear();
        org.joda.time.DateTime dateTime42 = dateTime23.toDateTime(chronology27);
        boolean boolean43 = dateTimeParserBucket4.restoreState((java.lang.Object) dateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime42", (mutableDateTime11.compareTo(dateTime42) == 0) == mutableDateTime11.equals(dateTime42));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 0, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        boolean boolean7 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        boolean boolean18 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate17);
        int int19 = localDate17.getDayOfWeek();
        org.joda.time.LocalDate.Property property20 = localDate17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval23 = localDate17.toInterval(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) ' ', dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime24", (dateTime11.compareTo(dateTime24) == 0) == dateTime11.equals(dateTime24));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.dayOfYear();
        boolean boolean7 = mutableDateTime5.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime5.setZone(dateTimeZone9);
        long long12 = dateTimeZone9.nextTransition((long) '4');
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        boolean boolean14 = instant3.isEqual((org.joda.time.ReadableInstant) mutableDateTime13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime5", (mutableDateTime1.compareTo(mutableDateTime5) == 0) == mutableDateTime1.equals(mutableDateTime5));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfFloor();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        java.lang.String str7 = mutableDateTime1.toString();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket16.saveField(dateTimeFieldType17, "1970-01-01T00:00:00.000Z", locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology10, locale19);
        java.lang.String str22 = chronology10.toString();
        mutableDateTime1.setChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField24 = chronology10.secondOfMinute();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime28 = localTime25.withPeriodAdded(readablePeriod26, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
        boolean boolean33 = localTime28.isSupported(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalTime localTime37 = localTime34.withPeriodAdded(readablePeriod35, (int) (short) 0);
        org.joda.time.LocalTime.Property property38 = localTime34.secondOfMinute();
        org.joda.time.LocalTime localTime39 = property38.withMaximumValue();
        org.joda.time.LocalTime localTime40 = property38.getLocalTime();
        org.joda.time.LocalTime localTime41 = property38.withMaximumValue();
        org.joda.time.LocalTime localTime42 = property38.roundHalfCeilingCopy();
        int int43 = localTime28.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime.Property property44 = localTime28.millisOfDay();
        org.joda.time.LocalTime localTime46 = localTime28.plusMinutes(724);
        int[] intArray53 = new int[] { 35466617, 1969, 0, (-292275054), 31, 12 };
        int int54 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localTime46, intArray53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime30", (mutableDateTime1.compareTo(mutableDateTime30) == 0) == mutableDateTime1.equals(mutableDateTime30));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        boolean boolean7 = localDate2.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDate.Property property8 = localDate2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime10.setZone(dateTimeZone14);
        long long17 = dateTimeZone14.nextTransition((long) '4');
        boolean boolean18 = localDate2.equals((java.lang.Object) '4');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime10", (mutableDateTime4.compareTo(mutableDateTime10) == 0) == mutableDateTime4.equals(mutableDateTime10));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        long long24 = dateTimeZone20.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(dateTimeZone20);
        java.util.Date date26 = dateTime25.toDate();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromDateFields(date26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundCeiling();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfYear();
        boolean boolean6 = mutableDateTime4.isAfterNow();
        boolean boolean7 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        boolean boolean14 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate13);
        int int15 = localDate13.getDayOfWeek();
        org.joda.time.LocalDate.Property property16 = localDate13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval19 = localDate13.toInterval(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime4.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime22.add(readablePeriod28, 4);
        org.joda.time.Instant instant31 = mutableDateTime22.toInstant();
        int int32 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) instant31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(3577835150L, dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime20", (mutableDateTime2.compareTo(mutableDateTime20) == 0) == mutableDateTime2.equals(mutableDateTime20));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '4', chronology9);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket33.saveField(dateTimeFieldType34, "1970-01-01T00:00:00.000Z", locale36);
        dateTimeParserBucket26.saveField(dateTimeFieldType27, "1970-01-01T00:00:00.000Z", locale36);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket43.saveField(dateTimeFieldType44, "1970-01-01T00:00:00.000Z", locale46);
        java.lang.String str48 = locale36.getDisplayCountry(locale46);
        java.lang.String str49 = property20.getAsText(locale36);
        java.lang.String str50 = dateTimeZone16.getShortName((long) 3, locale36);
        java.lang.String str51 = property12.getAsText(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime19", (dateTime13.compareTo(mutableDateTime19) == 0) == dateTime13.equals(mutableDateTime19));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfHalfday();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket11.saveField(dateTimeFieldType12, "1970-01-01T00:00:00.000Z", locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology5, locale14);
        java.lang.String str17 = chronology5.toString();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology5.add(readablePeriod19, 345600050L, (int) (short) 0);
        mutableDateTime1.setChronology(chronology5);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.LocalTime localTime34 = localTime27.minusMillis(2);
        long long36 = chronology5.set((org.joda.time.ReadablePartial) localTime34, (long) 32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime29", (mutableDateTime1.compareTo(mutableDateTime29) == 0) == mutableDateTime1.equals(mutableDateTime29));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        long long3 = property2.remainder();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set((int) (short) 1);
        mutableDateTime5.addHours((int) (byte) 1);
        mutableDateTime5.setMillis(11550157878993L);
        mutableDateTime5.setWeekyear(3600000);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime14 = localTime12.withSecondOfMinute((int) (short) 10);
        int int16 = localTime12.getValue((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = mutableDateTime18.toString(dateTimeFormatter19);
        mutableDateTime18.addMonths((int) (byte) 1);
        org.joda.time.Instant instant23 = mutableDateTime18.toInstant();
        org.joda.time.DateTime dateTime24 = localTime12.toDateTime((org.joda.time.ReadableInstant) instant23);
        boolean boolean25 = mutableDateTime5.isAfter((org.joda.time.ReadableInstant) instant23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and dateTime24", (mutableDateTime18.compareTo(dateTime24) == 0) == mutableDateTime18.equals(dateTime24));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime14.withWeekyear(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.plus(readableDuration30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withChronology(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.DateTime.Property property40 = dateTime35.property(dateTimeFieldType39);
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        int int49 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate47.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval53 = localDate47.toInterval(dateTimeZone52);
        int[] intArray55 = new int[] { 'a' };
        int int56 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localDate47, intArray55);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket62.saveField(dateTimeFieldType63, "1970-01-01T00:00:00.000Z", locale65);
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str68 = localDate47.toString("1", locale65);
        org.joda.time.LocalDate localDate70 = localDate47.withMonthOfYear(5);
        org.joda.time.Chronology chronology71 = localDate70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfEra();
        org.joda.time.DateTime dateTime73 = dateTime18.withChronology(chronology71);
        org.joda.time.DateTimeField dateTimeField74 = chronology71.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime73", (dateTime18.compareTo(dateTime73) == 0) == dateTime18.equals(dateTime73));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTime.Property property21 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval34 = localDate28.toInterval(dateTimeZone33);
        int[] intArray36 = new int[] { 'a' };
        int int37 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate28, intArray36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDate.Property property39 = localDate28.property(dateTimeFieldType38);
        org.joda.time.LocalDate localDate40 = property39.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfYear();
        boolean boolean45 = mutableDateTime43.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime43.setZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(6048000000L, dateTimeZone47);
        org.joda.time.Interval interval50 = localDate40.toInterval(dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime43", (mutableDateTime18.compareTo(mutableDateTime43) == 0) == mutableDateTime18.equals(mutableDateTime43));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTime.Property property21 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval34 = localDate28.toInterval(dateTimeZone33);
        int[] intArray36 = new int[] { 'a' };
        int int37 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate28, intArray36);
        org.joda.time.Interval interval38 = localDate28.toInterval();
        java.util.Date date39 = localDate28.toDate();
        org.joda.time.LocalDate localDate41 = localDate28.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDate localDate43 = localDate28.withCenturyOfEra(70);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 0, chronology48);
        boolean boolean50 = localDate46.isEqual((org.joda.time.ReadablePartial) localDate49);
        int int51 = localDate49.getDayOfWeek();
        org.joda.time.LocalDate.Property property52 = localDate49.weekOfWeekyear();
        org.joda.time.LocalDate localDate53 = property52.roundFloorCopy();
        org.joda.time.LocalDate localDate54 = property52.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate56 = localDate54.plus(readablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int61 = dateTimeZone59.getOffset((long) '4');
        long long63 = dateTimeZone59.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime64 = localDate54.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight65 = localDate28.toDateMidnight(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.dayOfYear();
        boolean boolean69 = mutableDateTime67.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime67.setZone(dateTimeZone71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime67.add(readablePeriod73, 4);
        org.joda.time.Instant instant76 = mutableDateTime67.toInstant();
        boolean boolean78 = mutableDateTime67.isAfter((long) (byte) 1);
        mutableDateTime67.addWeekyears(69);
        int int81 = mutableDateTime67.getYear();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        mutableDateTime67.add(readablePeriod82);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime67.yearOfCentury();
        boolean boolean85 = dateMidnight65.isAfter((org.joda.time.ReadableInstant) mutableDateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and instant76", (mutableDateTime18.compareTo(instant76) == 0) == mutableDateTime18.equals(instant76));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-32L), chronology9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime13", (dateTime8.compareTo(mutableDateTime13) == 0) == dateTime8.equals(mutableDateTime13));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        int int10 = localDate9.size();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        boolean boolean16 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime14.setZone(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) '4');
        org.joda.time.DateTime dateTime22 = localDate12.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate24 = localDate12.plusYears((-1));
        org.joda.time.DateTime dateTime25 = localDate12.toDateTimeAtCurrentTime();
        java.util.Locale locale27 = null;
        java.lang.String str28 = localDate12.toString("\u82f1\u6587", locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime25", (dateTime22.compareTo(dateTime25) == 0) == dateTime22.equals(dateTime25));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfYear();
        boolean boolean6 = mutableDateTime4.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime4.setZone(dateTimeZone8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime4.add(readablePeriod10, 4);
        mutableDateTime4.setTime((long) (short) 10);
        int int15 = mutableDateTime4.getEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime4.toDateTimeISO();
        boolean boolean17 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket26.saveField(dateTimeFieldType27, "1970-01-01T00:00:00.000Z", locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology20, locale29);
        org.joda.time.DateTimeField dateTimeField32 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = chronology20.weekyear();
        org.joda.time.DateTime dateTime35 = dateTime16.toDateTime(chronology20);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromMillisOfDay(18697835150L, chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and dateTime35", (mutableDateTime4.compareTo(dateTime35) == 0) == mutableDateTime4.equals(dateTime35));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfHalfday();
        long long27 = dateTimeField25.roundCeiling(35L);
        mutableDateTime1.setRounding(dateTimeField25);
        int int30 = dateTimeField25.get(223200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addSeconds(10);
        int int13 = mutableDateTime1.getDayOfWeek();
        int int14 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        boolean boolean20 = mutableDateTime18.isAfterNow();
        boolean boolean21 = mutableDateTime16.isBefore((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        boolean boolean28 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate27);
        int int29 = localDate27.getDayOfWeek();
        org.joda.time.LocalDate.Property property30 = localDate27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval33 = localDate27.toInterval(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime18.toMutableDateTime(dateTimeZone32);
        mutableDateTime1.setZoneRetainFields(dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime16", (instant10.compareTo(mutableDateTime16) == 0) == instant10.equals(mutableDateTime16));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfCeiling();
        org.joda.time.Instant instant5 = mutableDateTime4.toInstant();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and instant5", (mutableDateTime4.compareTo(instant5) == 0) == mutableDateTime4.equals(instant5));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMillis(2022);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfSecond((int) '#');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.plus(readableDuration34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withChronology(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.withChronology(chronology38);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        org.joda.time.DateTime.Property property44 = dateTime39.property(dateTimeFieldType43);
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        boolean boolean52 = localDate48.isEqual((org.joda.time.ReadablePartial) localDate51);
        int int53 = localDate51.getDayOfWeek();
        org.joda.time.LocalDate.Property property54 = localDate51.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval57 = localDate51.toInterval(dateTimeZone56);
        int[] intArray59 = new int[] { 'a' };
        int int60 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localDate51, intArray59);
        org.joda.time.Interval interval61 = localDate51.toInterval();
        java.util.Date date62 = localDate51.toDate();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 0, chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (short) 0, chronology67);
        boolean boolean69 = localDate65.isEqual((org.joda.time.ReadablePartial) localDate68);
        int int70 = localDate68.getDayOfWeek();
        org.joda.time.LocalDate.Property property71 = localDate68.weekOfWeekyear();
        org.joda.time.LocalDate localDate72 = property71.roundFloorCopy();
        org.joda.time.LocalDate localDate73 = property71.roundCeilingCopy();
        org.joda.time.LocalDate localDate74 = property71.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval77 = localDate74.toInterval(dateTimeZone76);
        int int78 = localDate51.compareTo((org.joda.time.ReadablePartial) localDate74);
        org.joda.time.LocalDate localDate80 = localDate51.plusMonths(5);
        org.joda.time.Chronology chronology81 = localDate51.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime18.toMutableDateTime(chronology81);
        org.joda.time.DateTimeZone dateTimeZone84 = chronology81.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime83", (dateTime18.compareTo(mutableDateTime83) == 0) == dateTime18.equals(mutableDateTime83));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute((int) (short) 10);
        int int4 = localTime0.getValue((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = mutableDateTime6.toString(dateTimeFormatter7);
        mutableDateTime6.addMonths((int) (byte) 1);
        org.joda.time.Instant instant11 = mutableDateTime6.toInstant();
        org.joda.time.DateTime dateTime12 = localTime0.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear(99);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant11", (mutableDateTime6.compareTo(instant11) == 0) == mutableDateTime6.equals(instant11));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(31);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        boolean boolean11 = dateTimeZone8.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone8);
        boolean boolean13 = dateTimeZone5.equals((java.lang.Object) dateTimeZone8);
        long long15 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, (-32L));
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        boolean boolean19 = mutableDateTime17.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime17.setZone(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime17.add(readablePeriod23, 4);
        org.joda.time.Instant instant26 = mutableDateTime17.toInstant();
        int int27 = mutableDateTime17.getWeekyear();
        mutableDateTime17.setDayOfMonth(1);
        boolean boolean30 = dateTimeZone8.equals((java.lang.Object) mutableDateTime17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and instant26", (mutableDateTime4.compareTo(instant26) == 0) == mutableDateTime4.equals(instant26));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        int int35 = dateTime15.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute((int) (short) 10);
        int int4 = localTime0.getValue((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = mutableDateTime6.toString(dateTimeFormatter7);
        mutableDateTime6.addMonths((int) (byte) 1);
        org.joda.time.Instant instant11 = mutableDateTime6.toInstant();
        org.joda.time.DateTime dateTime12 = localTime0.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.DateTime dateTime15 = localTime0.toDateTimeToday(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant11", (mutableDateTime6.compareTo(instant11) == 0) == mutableDateTime6.equals(instant11));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        int int6 = dateTimeFormatter5.getDefaultYear();
        boolean boolean7 = dateTimeFormatter5.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime10.setZone(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime10.add(readablePeriod16, 4);
        mutableDateTime10.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.getMutableDateTime();
        int int25 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        java.lang.Object obj26 = mutableDateTime24.clone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(obj26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDateTime31.toDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone34);
        int int38 = localDateTime37.getCenturyOfEra();
        org.joda.time.Chronology chronology39 = localDateTime37.getChronology();
        mutableDateTime27.setChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter5.withChronology(chronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and mutableDateTime27", (mutableDateTime22.compareTo(mutableDateTime27) == 0) == mutableDateTime22.equals(mutableDateTime27));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        int int20 = mutableDateTime19.getEra();
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime19.setChronology(chronology21);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTime dateTime25 = dateTime12.minusYears(3600000);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int33 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate36 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate37 = property34.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval40 = localDate37.toInterval(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime25.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 53);
        mutableDateTime41.setZone(dateTimeZone44);
        long long49 = dateTimeZone44.previousTransition(600010L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime41", (dateTime25.compareTo(mutableDateTime41) == 0) == dateTime25.equals(mutableDateTime41));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        org.joda.time.DateTimeField dateTimeField14 = chronology2.millisOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology2);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        java.lang.String str30 = chronology18.toString();
        org.joda.time.DurationField durationField31 = chronology18.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology18);
        int[] intArray34 = chronology2.get((org.joda.time.ReadablePartial) localTime32, (long) 35449917);
        org.joda.time.DateTimeField dateTimeField35 = chronology2.yearOfEra();
        org.joda.time.DurationField durationField36 = dateTimeField35.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField31, durationField36, and durationField31", !(durationField31.compareTo(durationField36) == 0) || (Math.signum(durationField31.compareTo(durationField31)) == Math.signum(durationField36.compareTo(durationField31))));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) (byte) -1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        boolean boolean21 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate20);
        int int22 = localDate20.getDayOfWeek();
        org.joda.time.LocalDate.Property property23 = localDate20.weekOfWeekyear();
        org.joda.time.LocalDate localDate24 = property23.roundFloorCopy();
        org.joda.time.LocalDate localDate25 = property23.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate25.plus(readablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int32 = dateTimeZone30.getOffset((long) '4');
        long long34 = dateTimeZone30.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime35 = localDate25.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime14.toDateTime(dateTimeZone30);
        long long39 = dateTimeZone30.adjustOffset(1644573120000L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime36", (dateTime14.compareTo(dateTime36) == 0) == dateTime14.equals(dateTime36));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        java.lang.Object obj17 = mutableDateTime15.clone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone25);
        int int29 = localDateTime28.getCenturyOfEra();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        mutableDateTime18.setChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and mutableDateTime18", (mutableDateTime13.compareTo(mutableDateTime18) == 0) == mutableDateTime13.equals(mutableDateTime18));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        long long24 = dateTimeZone20.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(dateTimeZone20);
        java.util.Date date26 = dateTime25.toDate();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.fromDateFields(date26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int17 = mutableDateTime15.getRoundingMode();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime15.add(readablePeriod18);
        mutableDateTime15.addMillis(31);
        org.joda.time.Instant instant22 = mutableDateTime15.toInstant();
        org.joda.time.Instant instant23 = mutableDateTime15.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and instant22", (mutableDateTime15.compareTo(instant22) == 0) == mutableDateTime15.equals(instant22));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        java.lang.Class<?> wildcardClass16 = localTime15.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfHalfday();
        long long27 = dateTimeField25.roundCeiling(35L);
        mutableDateTime1.setRounding(dateTimeField25);
        boolean boolean30 = dateTimeField25.isLeap((-3599906L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        java.lang.Object obj17 = mutableDateTime15.clone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone25);
        int int29 = localDateTime28.getCenturyOfEra();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        mutableDateTime18.setChronology(chronology30);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and mutableDateTime18", (mutableDateTime13.compareTo(mutableDateTime18) == 0) == mutableDateTime13.equals(mutableDateTime18));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(chronology2);
        org.joda.time.DurationField durationField5 = chronology2.eras();
        java.util.Locale locale8 = new java.util.Locale("hi!", "1");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str11 = locale8.getExtension('x');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(22863028020010L, chronology2, locale8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField5", Math.signum(durationField3.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField3)));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfYear();
        boolean boolean6 = mutableDateTime4.isAfterNow();
        boolean boolean7 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        boolean boolean14 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket29.saveField(dateTimeFieldType30, "1970-01-01T00:00:00.000Z", locale32);
        dateTimeParserBucket22.saveField(dateTimeFieldType23, "1970-01-01T00:00:00.000Z", locale32);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket39.saveField(dateTimeFieldType40, "1970-01-01T00:00:00.000Z", locale42);
        java.lang.String str44 = locale32.getDisplayCountry(locale42);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale47, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale54, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket56.saveField(dateTimeFieldType57, "1970-01-01T00:00:00.000Z", locale59);
        dateTimeParserBucket49.saveField(dateTimeFieldType50, "1970-01-01T00:00:00.000Z", locale59);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology63, locale64, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale69 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket66.saveField(dateTimeFieldType67, "1970-01-01T00:00:00.000Z", locale69);
        java.lang.String str71 = locale59.getDisplayCountry(locale69);
        java.lang.String str72 = locale42.getDisplayVariant(locale59);
        java.lang.String str73 = dateTimeZone16.getName((long) 'x', locale42);
        org.joda.time.Interval interval74 = localDate10.toInterval(dateTimeZone16);
        long long76 = dateTimeZone16.previousTransition((long) 69);
        mutableDateTime4.setZone(dateTimeZone16);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(1644573073922L, dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime4", (mutableDateTime2.compareTo(mutableDateTime4) == 0) == mutableDateTime2.equals(mutableDateTime4));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        org.joda.time.DateTimeField dateTimeField14 = chronology2.millisOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology2);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        java.lang.String str30 = chronology18.toString();
        org.joda.time.DurationField durationField31 = chronology18.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology18);
        int[] intArray34 = chronology2.get((org.joda.time.ReadablePartial) localTime32, (long) 35449917);
        org.joda.time.DateTimeField dateTimeField35 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField36 = chronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField31, durationField36, and durationField31", !(durationField31.compareTo(durationField36) == 0) || (Math.signum(durationField31.compareTo(durationField31)) == Math.signum(durationField36.compareTo(durationField31))));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology25);
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.Chronology chronology30 = chronology25.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField16 = chronology2.weekyear();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology2);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime19.getZone();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime19.add(readableDuration21, 3);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime19.getZone();
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        org.joda.time.Chronology chronology27 = chronology2.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = chronology2.minuteOfDay();
        org.joda.time.DurationField durationField29 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology2.millisOfDay();
        org.joda.time.DurationField durationField31 = chronology2.millis();
        org.joda.time.DurationField durationField32 = chronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField32, durationField29, and durationField31", !(durationField32.compareTo(durationField29) == 0) || (Math.signum(durationField32.compareTo(durationField31)) == Math.signum(durationField29.compareTo(durationField31))));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfCeiling();
        org.joda.time.Instant instant5 = mutableDateTime4.toInstant();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        boolean boolean12 = localDate8.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.minusSeconds(0);
        org.joda.time.DateTime dateTime22 = dateTime20.plusDays(1);
        boolean boolean23 = dateTime20.isAfterNow();
        org.joda.time.DateTime dateTime24 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        int int27 = property25.get();
        org.joda.time.DateTime dateTime28 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime30 = dateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket35.saveField(dateTimeFieldType36, "1970-01-01T00:00:00.000Z", locale38);
        int int40 = dateTime30.get(dateTimeFieldType36);
        boolean boolean41 = instant5.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime43 = dateTime30.withYear(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant5", (mutableDateTime2.compareTo(instant5) == 0) == mutableDateTime2.equals(instant5));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.plus(readableDuration15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withChronology(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime22 = dateTime18.minusMillis(2022);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfSecond((int) '#');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readablePeriod25);
        boolean boolean27 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property28 = dateTime22.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant3", (mutableDateTime1.compareTo(instant3) == 0) == mutableDateTime1.equals(instant3));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 3);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        int int8 = dateTimeZone6.getOffset((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        boolean boolean18 = mutableDateTime16.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime16.setZone(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableDateTime16.add(readablePeriod22, 4);
        org.joda.time.Instant instant25 = mutableDateTime16.toInstant();
        boolean boolean27 = mutableDateTime16.isAfter((long) (byte) 1);
        mutableDateTime16.addWeekyears(69);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 0, chronology34);
        boolean boolean36 = localDate32.isEqual((org.joda.time.ReadablePartial) localDate35);
        int int37 = localDate35.getDayOfWeek();
        org.joda.time.LocalDate.Property property38 = localDate35.weekOfWeekyear();
        int int39 = localDate35.getDayOfWeek();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        boolean boolean46 = localDate42.isEqual((org.joda.time.ReadablePartial) localDate45);
        int int47 = localDate45.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean49 = localDate45.isSupported(dateTimeFieldType48);
        int int50 = localDate35.get(dateTimeFieldType48);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType48.getRangeDurationType();
        mutableDateTime16.add(durationFieldType51, 69);
        mutableDateTime14.add(durationFieldType51, 238);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime9.withFieldAdded(durationFieldType51, 31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant25", (mutableDateTime1.compareTo(instant25) == 0) == mutableDateTime1.equals(instant25));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute((int) (short) 10);
        int int4 = localTime0.getValue((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = mutableDateTime6.toString(dateTimeFormatter7);
        mutableDateTime6.addMonths((int) (byte) 1);
        org.joda.time.Instant instant11 = mutableDateTime6.toInstant();
        org.joda.time.DateTime dateTime12 = localTime0.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalTime localTime14 = localTime0.plusHours(366);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant11", (mutableDateTime6.compareTo(instant11) == 0) == mutableDateTime6.equals(instant11));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        boolean boolean4 = property3.isLeap();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfCeiling();
        org.joda.time.Instant instant10 = mutableDateTime9.toInstant();
        int int11 = property3.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.MutableDateTime mutableDateTime12 = property3.roundCeiling();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant10", (mutableDateTime7.compareTo(instant10) == 0) == mutableDateTime7.equals(instant10));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        int int2 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime1.setChronology(chronology3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        mutableDateTime1.set(dateTimeFieldType8, (int) '4');
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket19.saveField(dateTimeFieldType20, "1970-01-01T00:00:00.000Z", locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology13, locale22);
        java.lang.String str25 = chronology13.toString();
        org.joda.time.DurationField durationField26 = chronology13.eras();
        boolean boolean27 = dateTimeFieldType8.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField28 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology13.minuteOfHour();
        long long31 = dateTimeField29.roundCeiling(1644573061055L);
        org.joda.time.DurationField durationField32 = dateTimeField29.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField32, and durationField26", !(durationField26.compareTo(durationField32) == 0) || (Math.signum(durationField26.compareTo(durationField26)) == Math.signum(durationField32.compareTo(durationField26))));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        mutableDateTime1.addWeekyears(69);
        mutableDateTime1.setSecondOfDay(3);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(366, 7, 2);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        boolean boolean27 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate26);
        int int28 = localDate26.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate26.plus(readablePeriod29);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        int int33 = mutableDateTime32.getEra();
        org.joda.time.Chronology chronology34 = null;
        mutableDateTime32.setChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        mutableDateTime32.set(dateTimeFieldType39, (int) '4');
        int int42 = localDate30.get(dateTimeFieldType39);
        int int43 = localDate20.get(dateTimeFieldType39);
        int int44 = mutableDateTime1.get(dateTimeFieldType39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime37", (instant10.compareTo(mutableDateTime37) == 0) == instant10.equals(mutableDateTime37));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.LocalDateTime localDateTime6 = property3.setCopy(5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfEra(35449917);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(29);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.months();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology19);
        boolean boolean22 = localDateTime8.equals((java.lang.Object) chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime21", (dateTime18.compareTo(mutableDateTime21) == 0) == dateTime18.equals(mutableDateTime21));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        long long17 = mutableDateTime1.getMillis();
        java.util.Date date18 = mutableDateTime1.toDate();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        boolean boolean4 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime2.setZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime2.add(readablePeriod8, 4);
        org.joda.time.Instant instant11 = mutableDateTime2.toInstant();
        mutableDateTime2.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        org.joda.time.DateTimeField dateTimeField30 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology18.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime15.toMutableDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(obj0, chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime32", (mutableDateTime2.compareTo(mutableDateTime32) == 0) == mutableDateTime2.equals(mutableDateTime32));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour((int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withChronology(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekOfWeekyear(4);
        boolean boolean35 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime32.minusWeeks(0);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(6);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        boolean boolean46 = localDate42.isEqual((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTimeISO();
        org.joda.time.DateTime.Property property52 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime51.minusSeconds(0);
        org.joda.time.DateTime dateTime56 = dateTime54.plusDays(1);
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int62 = dateTimeZone60.getOffset((long) '4');
        long long64 = dateTimeZone60.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime65 = dateTime56.toDateTime(dateTimeZone60);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((java.lang.Object) dateTime39, dateTimeZone60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime56 and dateTime65", (dateTime56.compareTo(dateTime65) == 0) == dateTime56.equals(dateTime65));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone19);
        int int23 = dateTimeZone19.getOffsetFromLocal((long) ' ');
        java.lang.String str24 = dateTimeZone19.toString();
        int int26 = dateTimeZone19.getOffset((long) 2000);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone19);
        mutableDateTime1.setZone(dateTimeZone19);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.util.Locale locale14 = new java.util.Locale("hi!", "1");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        int int22 = dateTimeField20.getMaximumTextLength(locale21);
        org.joda.time.DurationField durationField23 = dateTimeField20.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        boolean boolean27 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime25.setZone(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableDateTime25.add(readablePeriod31, 4);
        mutableDateTime25.setTime((long) (short) 10);
        int int36 = mutableDateTime25.getEra();
        org.joda.time.DateTime dateTime37 = mutableDateTime25.toDateTimeISO();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale47, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket49.saveField(dateTimeFieldType50, "1970-01-01T00:00:00.000Z", locale52);
        dateTimeParserBucket42.saveField(dateTimeFieldType43, "1970-01-01T00:00:00.000Z", locale52);
        mutableDateTime25.set(dateTimeFieldType43, (int) ' ');
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Calendar calendar58 = mutableDateTime25.toCalendar(locale57);
        int int59 = dateTimeField20.getMaximumTextLength(locale57);
        java.lang.String str60 = locale14.getDisplayCountry(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(36000000L, chronology9, locale14, (java.lang.Integer) 35485989);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField23", Math.signum(durationField11.compareTo(durationField23)) == -Math.signum(durationField23.compareTo(durationField11)));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTime.Property property21 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval34 = localDate28.toInterval(dateTimeZone33);
        int[] intArray36 = new int[] { 'a' };
        int int37 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate28, intArray36);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket43.saveField(dateTimeFieldType44, "1970-01-01T00:00:00.000Z", locale46);
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str49 = localDate28.toString("1", locale46);
        org.joda.time.LocalDate localDate51 = localDate28.withMonthOfYear(5);
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now(chronology52);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.dayOfYear();
        boolean boolean58 = mutableDateTime56.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime56.setZone(dateTimeZone60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        mutableDateTime56.add(readablePeriod62, 4);
        org.joda.time.Instant instant65 = mutableDateTime56.toInstant();
        boolean boolean67 = mutableDateTime56.isAfter((long) (byte) 1);
        mutableDateTime56.addWeekyears(69);
        int int70 = mutableDateTime56.getWeekOfWeekyear();
        mutableDateTime54.setMillis((org.joda.time.ReadableInstant) mutableDateTime56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and instant65", (mutableDateTime18.compareTo(instant65) == 0) == mutableDateTime18.equals(instant65));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket9.saveField(dateTimeFieldType10, "1970-01-01T00:00:00.000Z", locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology3, locale12);
        org.joda.time.DateTimeField dateTimeField15 = chronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = chronology3.weekyear();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) ' ', chronology3);
        org.joda.time.LocalTime localTime20 = localTime18.minusSeconds(35466617);
        int int21 = localTime20.size();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfYear();
        boolean boolean32 = mutableDateTime30.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime30.setZone(dateTimeZone34);
        long long37 = dateTimeZone34.nextTransition((long) '4');
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone34);
        java.lang.String str40 = dateTimeZone34.getNameKey((long) (byte) 100);
        long long43 = dateTimeZone34.adjustOffset(25260020L, true);
        long long46 = dateTimeZone34.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        boolean boolean54 = localTime49.isSupported(dateTimeFieldType53);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType53.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime47.property(dateTimeFieldType53);
        boolean boolean57 = localTime20.isSupported(dateTimeFieldType53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime30 and mutableDateTime51", (mutableDateTime30.compareTo(mutableDateTime51) == 0) == mutableDateTime30.equals(mutableDateTime51));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.DurationField durationField15 = chronology2.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology2.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField19, and durationField15", !(durationField15.compareTo(durationField19) == 0) || (Math.signum(durationField15.compareTo(durationField15)) == Math.signum(durationField19.compareTo(durationField15))));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField(4);
        org.joda.time.MutableDateTime mutableDateTime6 = property2.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        java.lang.String str17 = dateTimeZone12.getShortName((long) 100);
        mutableDateTime6.setZoneRetainFields(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        boolean boolean22 = mutableDateTime20.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime20.setZone(dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime20.add(readablePeriod26, 4);
        mutableDateTime20.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.getMutableDateTime();
        int int35 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime34.setDate(45L);
        mutableDateTime34.addHours(11);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDateTime42.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.year();
        int int50 = dateTimeField49.getMaximumValue();
        mutableDateTime34.setRounding(dateTimeField49);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime34.millisOfDay();
        mutableDateTime34.setYear(238);
        boolean boolean55 = mutableDateTime6.isBefore((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (short) 0, chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 0, chronology60);
        boolean boolean62 = localDate58.isEqual((org.joda.time.ReadablePartial) localDate61);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property65.getFieldType();
        org.joda.time.LocalDate.Property property67 = localDate61.property(dateTimeFieldType66);
        org.joda.time.LocalDate localDate69 = property67.addToCopy((int) (byte) 10);
        org.joda.time.LocalDate localDate70 = property67.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField71 = property67.getField();
        boolean boolean72 = dateTimeField71.isSupported();
        mutableDateTime6.setRounding(dateTimeField71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime64", (mutableDateTime8.compareTo(mutableDateTime64) == 0) == mutableDateTime8.equals(mutableDateTime64));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTimeISO();
        java.lang.Object obj12 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.hourOfDay();
        mutableDateTime1.addMonths(35);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.addWrapField(35449917);
        mutableDateTime18.setHourOfDay(0);
        mutableDateTime18.addDays(1970);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfHalfday();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and dateTime28", (mutableDateTime18.compareTo(dateTime28) == 0) == mutableDateTime18.equals(dateTime28));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalTime localTime3 = localTime0.withPeriodAdded(readablePeriod1, (int) (short) 0);
        org.joda.time.LocalTime.Property property4 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime6 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField8 = property4.getField();
        org.joda.time.LocalTime localTime9 = property4.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        boolean boolean20 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime18.setZone(dateTimeZone22);
        long long25 = dateTimeZone22.nextTransition((long) '4');
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone22);
        java.lang.String str28 = dateTimeZone22.getNameKey((long) (byte) 100);
        long long31 = dateTimeZone22.adjustOffset(25260020L, true);
        long long34 = dateTimeZone22.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(chronology36);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        boolean boolean42 = localTime37.isSupported(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType41.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime35.property(dateTimeFieldType41);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime50 = property47.addWrapField(4);
        java.lang.String str51 = mutableDateTime50.toString();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime50.millisOfDay();
        mutableDateTime50.setYear(28);
        mutableDateTime50.addMinutes(32);
        boolean boolean57 = mutableDateTime35.isBefore((org.joda.time.ReadableInstant) mutableDateTime50);
        boolean boolean58 = property4.equals((java.lang.Object) boolean57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime39", (mutableDateTime18.compareTo(mutableDateTime39) == 0) == mutableDateTime18.equals(mutableDateTime39));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale24);
        dateTimeParserBucket14.saveField(dateTimeFieldType15, "1970-01-01T00:00:00.000Z", locale24);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket31.saveField(dateTimeFieldType32, "1970-01-01T00:00:00.000Z", locale34);
        java.lang.String str36 = locale24.getDisplayCountry(locale34);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket58.saveField(dateTimeFieldType59, "1970-01-01T00:00:00.000Z", locale61);
        java.lang.String str63 = locale51.getDisplayCountry(locale61);
        java.lang.String str64 = locale34.getDisplayVariant(locale51);
        java.lang.String str65 = locale51.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology9, locale51);
        org.joda.time.Chronology chronology67 = chronology9.withUTC();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DateTime.Property property69 = dateTime68.weekOfWeekyear();
        org.joda.time.DateTime dateTime71 = property69.addWrapFieldToCopy(2000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime68", (dateTime8.compareTo(dateTime68) == 0) == dateTime8.equals(dateTime68));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        int int2 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime12.weekyear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfYear();
        boolean boolean23 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        mutableDateTime21.setZoneRetainFields(dateTimeZone24);
        mutableDateTime21.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int32 = dateTimeZone30.getOffset((long) '4');
        mutableDateTime21.setZoneRetainFields(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime21.setMillis((org.joda.time.ReadableInstant) mutableDateTime35);
        long long37 = mutableDateTime21.getMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str42 = dateTimeZone40.getNameKey((long) 53);
        mutableDateTime21.setZone(dateTimeZone40);
        mutableDateTime1.setZoneRetainFields(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and mutableDateTime35", (mutableDateTime21.compareTo(mutableDateTime35) == 0) == mutableDateTime21.equals(mutableDateTime35));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        mutableDateTime1.addWeekyears(69);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        boolean boolean21 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate20);
        int int22 = localDate20.getDayOfWeek();
        org.joda.time.LocalDate.Property property23 = localDate20.weekOfWeekyear();
        int int24 = localDate20.getDayOfWeek();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        boolean boolean31 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate30);
        int int32 = localDate30.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean34 = localDate30.isSupported(dateTimeFieldType33);
        int int35 = localDate20.get(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType33.getRangeDurationType();
        mutableDateTime1.add(durationFieldType36, 69);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = mutableDateTime40.toString(dateTimeFormatter41);
        long long43 = mutableDateTime40.getMillis();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.getMutableDateTime();
        org.joda.time.Chronology chronology48 = null;
        mutableDateTime47.setChronology(chronology48);
        mutableDateTime47.addDays(0);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableDateTime47.add(readablePeriod52);
        mutableDateTime40.setTime((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime47.setYear((int) (short) 10);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime40", (instant10.compareTo(mutableDateTime40) == 0) == instant10.equals(mutableDateTime40));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval22 = localDate16.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra(181);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime23", (dateTime24.compareTo(dateTime23) == 0) == dateTime24.equals(dateTime23));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalTime localTime3 = localTime0.withPeriodAdded(readablePeriod1, (int) (short) 0);
        org.joda.time.LocalTime.Property property4 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property4.withMaximumValue();
        int int7 = localTime6.size();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        boolean boolean11 = mutableDateTime9.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime9.setZoneRetainFields(dateTimeZone12);
        mutableDateTime9.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int20 = dateTimeZone18.getOffset((long) '4');
        mutableDateTime9.setZoneRetainFields(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) mutableDateTime23);
        long long25 = mutableDateTime9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 53);
        mutableDateTime9.setZone(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localTime6.toDateTimeToday(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime23", (mutableDateTime9.compareTo(mutableDateTime23) == 0) == mutableDateTime9.equals(mutableDateTime23));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        org.joda.time.DateTimeField dateTimeField14 = chronology2.millisOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology2);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        java.lang.String str30 = chronology18.toString();
        org.joda.time.DurationField durationField31 = chronology18.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology18);
        int[] intArray34 = chronology2.get((org.joda.time.ReadablePartial) localTime32, (long) 35449917);
        org.joda.time.DateTimeField dateTimeField35 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField36 = chronology2.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField31, durationField36, and durationField31", !(durationField31.compareTo(durationField36) == 0) || (Math.signum(durationField31.compareTo(durationField31)) == Math.signum(durationField36.compareTo(durationField31))));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.minus((long) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears(0);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime19.toMutableDateTime(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime19.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and mutableDateTime24", (dateTime19.compareTo(mutableDateTime24) == 0) == dateTime19.equals(mutableDateTime24));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime34 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property37.getAsText(locale38);
        org.joda.time.MutableDateTime mutableDateTime40 = property37.roundFloor();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime40.add(readableDuration42, (int) (byte) 0);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.add(1);
        boolean boolean48 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and dateTime34", (mutableDateTime22.compareTo(dateTime34) == 0) == mutableDateTime22.equals(dateTime34));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.minus((long) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        boolean boolean25 = mutableDateTime23.isAfterNow();
        boolean boolean26 = mutableDateTime21.isBefore((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        boolean boolean33 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket58.saveField(dateTimeFieldType59, "1970-01-01T00:00:00.000Z", locale61);
        java.lang.String str63 = locale51.getDisplayCountry(locale61);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(0L, chronology72, locale73, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket75.saveField(dateTimeFieldType76, "1970-01-01T00:00:00.000Z", locale78);
        dateTimeParserBucket68.saveField(dateTimeFieldType69, "1970-01-01T00:00:00.000Z", locale78);
        org.joda.time.Chronology chronology82 = null;
        java.util.Locale locale83 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket(0L, chronology82, locale83, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale88 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket85.saveField(dateTimeFieldType86, "1970-01-01T00:00:00.000Z", locale88);
        java.lang.String str90 = locale78.getDisplayCountry(locale88);
        java.lang.String str91 = locale61.getDisplayVariant(locale78);
        java.lang.String str92 = dateTimeZone35.getName((long) 'x', locale61);
        org.joda.time.Interval interval93 = localDate29.toInterval(dateTimeZone35);
        long long95 = dateTimeZone35.previousTransition((long) 69);
        mutableDateTime23.setZone(dateTimeZone35);
        org.joda.time.DateTime dateTime97 = dateTime16.withZone(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime21", (mutableDateTime8.compareTo(mutableDateTime21) == 0) == mutableDateTime8.equals(mutableDateTime21));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.era();
        java.lang.String str18 = chronology16.toString();
        org.joda.time.DateTime dateTime19 = dateTime13.withChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime19", (mutableDateTime1.compareTo(dateTime19) == 0) == mutableDateTime1.equals(dateTime19));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField16 = chronology2.weekyear();
        org.joda.time.Chronology chronology17 = chronology2.withUTC();
        org.joda.time.DurationField durationField18 = chronology2.minutes();
        org.joda.time.DurationField durationField19 = chronology2.years();
        org.joda.time.DurationField durationField20 = chronology2.weekyears();
        org.joda.time.Chronology chronology21 = chronology2.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField19 and durationField20", (durationField19.compareTo(durationField20) == 0) == durationField19.equals(durationField20));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime34 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime1.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and dateTime34", (mutableDateTime22.compareTo(dateTime34) == 0) == mutableDateTime22.equals(dateTime34));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket28.saveField(dateTimeFieldType29, "1970-01-01T00:00:00.000Z", locale31);
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale31);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket38.saveField(dateTimeFieldType39, "1970-01-01T00:00:00.000Z", locale41);
        java.lang.String str43 = locale31.getDisplayCountry(locale41);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket55.saveField(dateTimeFieldType56, "1970-01-01T00:00:00.000Z", locale58);
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale58);
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale63, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket65.saveField(dateTimeFieldType66, "1970-01-01T00:00:00.000Z", locale68);
        java.lang.String str70 = locale58.getDisplayCountry(locale68);
        java.lang.String str71 = locale41.getDisplayVariant(locale58);
        java.lang.String str72 = dateTimeZone15.getName((long) 'x', locale41);
        org.joda.time.Interval interval73 = localDate9.toInterval(dateTimeZone15);
        long long75 = dateTimeZone15.previousTransition((long) 69);
        mutableDateTime3.setZone(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTime.Property property21 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval34 = localDate28.toInterval(dateTimeZone33);
        int[] intArray36 = new int[] { 'a' };
        int int37 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate28, intArray36);
        org.joda.time.Interval interval38 = localDate28.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate28.getFieldType(2);
        org.joda.time.LocalDate.Property property41 = localDate28.weekyear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        int int49 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate47.weekOfWeekyear();
        org.joda.time.LocalDate localDate51 = property50.roundFloorCopy();
        org.joda.time.LocalDate localDate52 = property50.roundCeilingCopy();
        org.joda.time.LocalDate localDate53 = property50.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval56 = localDate53.toInterval(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate28.toDateTimeAtStartOfDay(dateTimeZone55);
        int int58 = localDate28.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.dayOfYear();
        boolean boolean62 = mutableDateTime60.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime60.setZone(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableDateTime60.add(readablePeriod66, 4);
        mutableDateTime60.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime60.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = mutableDateTime60.toDateTime(dateTimeZone72);
        boolean boolean75 = dateTimeZone72.isStandardOffset((-36L));
        org.joda.time.Interval interval76 = localDate28.toInterval(dateTimeZone72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime60 and dateTime73", (mutableDateTime60.compareTo(dateTime73) == 0) == mutableDateTime60.equals(dateTime73));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) '4', chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plus(readableDuration18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.era();
        long long22 = chronology10.set((org.joda.time.ReadablePartial) localDateTime19, (long) 22);
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket35.saveField(dateTimeFieldType36, "1970-01-01T00:00:00.000Z", locale38);
        dateTimeParserBucket28.saveField(dateTimeFieldType29, "1970-01-01T00:00:00.000Z", locale38);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket45.saveField(dateTimeFieldType46, "1970-01-01T00:00:00.000Z", locale48);
        java.lang.String str50 = locale38.getDisplayCountry(locale48);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket62.saveField(dateTimeFieldType63, "1970-01-01T00:00:00.000Z", locale65);
        dateTimeParserBucket55.saveField(dateTimeFieldType56, "1970-01-01T00:00:00.000Z", locale65);
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket(0L, chronology69, locale70, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale75 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket72.saveField(dateTimeFieldType73, "1970-01-01T00:00:00.000Z", locale75);
        java.lang.String str77 = locale65.getDisplayCountry(locale75);
        java.lang.String str78 = locale48.getDisplayVariant(locale65);
        java.util.Locale.setDefault(category23, locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale48, (java.lang.Integer) 7);
        java.util.Locale locale82 = dateTimeParserBucket81.getLocale();
        java.lang.Integer int83 = dateTimeParserBucket81.getPivotYear();
        java.lang.Object obj84 = dateTimeParserBucket81.saveState();
        org.joda.time.DateTimeZone dateTimeZone85 = dateTimeParserBucket81.getZone();
        org.joda.time.MutableDateTime mutableDateTime86 = org.joda.time.MutableDateTime.now(dateTimeZone85);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate(dateTimeZone85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime86", (dateTime9.compareTo(mutableDateTime86) == 0) == dateTime9.equals(mutableDateTime86));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        int int2 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime1.setChronology(chronology3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        mutableDateTime1.set(dateTimeFieldType8, (int) '4');
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket19.saveField(dateTimeFieldType20, "1970-01-01T00:00:00.000Z", locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology13, locale22);
        java.lang.String str25 = chronology13.toString();
        org.joda.time.DurationField durationField26 = chronology13.eras();
        boolean boolean27 = dateTimeFieldType8.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField28 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology13.minuteOfHour();
        org.joda.time.DurationField durationField30 = chronology13.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField30, and durationField26", !(durationField26.compareTo(durationField30) == 0) || (Math.signum(durationField26.compareTo(durationField26)) == Math.signum(durationField30.compareTo(durationField26))));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology25);
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        boolean boolean34 = dateTimeFormatter33.isParser();
        org.joda.time.Chronology chronology35 = dateTimeFormatter33.getChronology();
        boolean boolean36 = dateTimeFormatter33.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter33.withDefaultYear(0);
        boolean boolean39 = mutableDateTime1.equals((java.lang.Object) dateTimeFormatter38);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = dateTimeFormatter38.getPrinter();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime13.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withChronology(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withChronology(chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.DateTime.Property property39 = dateTime34.property(dateTimeFieldType38);
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        boolean boolean47 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate46);
        int int48 = localDate46.getDayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval52 = localDate46.toInterval(dateTimeZone51);
        int[] intArray54 = new int[] { 'a' };
        int int55 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localDate46, intArray54);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket61.saveField(dateTimeFieldType62, "1970-01-01T00:00:00.000Z", locale64);
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str67 = localDate46.toString("1", locale64);
        org.joda.time.LocalDate localDate69 = localDate46.withMonthOfYear(5);
        org.joda.time.Chronology chronology70 = localDate69.getChronology();
        org.joda.time.Chronology chronology71 = chronology70.withUTC();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.minuteOfDay();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = chronology71.add(readablePeriod74, (long) 'a', 292278993);
        org.joda.time.DateTime dateTime78 = dateTime13.toDateTime(chronology71);
        org.joda.time.DateTime.Property property79 = dateTime13.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime78", (dateTime13.compareTo(dateTime78) == 0) == dateTime13.equals(dateTime78));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime34 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(3577924725L, dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        int int14 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.minuteOfDay();
        mutableDateTime1.setMillisOfSecond(238);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        mutableDateTime18.addWeeks(2);
        int int21 = mutableDateTime18.getDayOfMonth();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        boolean boolean28 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate24.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 0, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 0, chronology37);
        boolean boolean39 = localDate35.isEqual((org.joda.time.ReadablePartial) localDate38);
        int int40 = localDate38.getDayOfWeek();
        org.joda.time.LocalDate.Property property41 = localDate38.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval44 = localDate38.toInterval(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = dateTime32.toDateTime(dateTimeZone43);
        boolean boolean46 = mutableDateTime18.isEqual((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = mutableDateTime1.equals((java.lang.Object) boolean46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime45", (dateTime32.compareTo(dateTime45) == 0) == dateTime32.equals(dateTime45));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval22 = localDate16.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime10.minusHours(771);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        int int27 = dateTime25.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime23", (dateTime10.compareTo(dateTime23) == 0) == dateTime10.equals(dateTime23));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        int int10 = localDate9.size();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        boolean boolean16 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime14.setZone(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) '4');
        org.joda.time.DateTime dateTime22 = localDate12.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.LocalDate localDate32 = property31.roundFloorCopy();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) 100);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket46.saveField(dateTimeFieldType47, "1970-01-01T00:00:00.000Z", locale49);
        dateTimeParserBucket39.saveField(dateTimeFieldType40, "1970-01-01T00:00:00.000Z", locale49);
        org.joda.time.LocalDate.Property property52 = localDate34.property(dateTimeFieldType40);
        int int53 = localDate34.size();
        boolean boolean54 = localDate12.isAfter((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime57.getZone();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone58);
        boolean boolean61 = dateTime59.isBefore((long) 53);
        org.joda.time.DateTime dateTime63 = dateTime59.withWeekyear(365);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean65 = dateTime63.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDate.Property property66 = localDate12.property(dateTimeFieldType64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime57", (mutableDateTime14.compareTo(mutableDateTime57) == 0) == mutableDateTime14.equals(mutableDateTime57));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval22 = localDate16.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime10.minusHours(771);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        org.joda.time.DateTime dateTime27 = dateTime25.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime23", (dateTime10.compareTo(dateTime23) == 0) == dateTime10.equals(dateTime23));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime10.getZone();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfHalfday();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket20.saveField(dateTimeFieldType21, "1970-01-01T00:00:00.000Z", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology14, locale23);
        java.lang.String str26 = chronology14.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology14.add(readablePeriod28, 345600050L, (int) (short) 0);
        mutableDateTime10.setChronology(chronology14);
        org.joda.time.DurationField durationField33 = chronology14.weekyears();
        boolean boolean34 = property8.equals((java.lang.Object) chronology14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime10", (mutableDateTime1.compareTo(mutableDateTime10) == 0) == mutableDateTime1.equals(mutableDateTime10));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval22 = localDate16.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone21);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(dateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime23", (dateTime10.compareTo(dateTime23) == 0) == dateTime10.equals(dateTime23));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour((int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.DateTime dateTime20 = dateTime17.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long26 = dateTimeZone22.convertLocalToUTC((long) 2039, true, (long) (byte) 100);
        org.joda.time.DateTime dateTime27 = dateTime20.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime27", (dateTime20.compareTo(dateTime27) == 0) == dateTime20.equals(dateTime27));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime dateTime17 = dateTime14.minusMinutes(2022);
        boolean boolean18 = dateTime17.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.millis();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, chronology9);
        org.joda.time.DurationField durationField12 = chronology9.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime11", (mutableDateTime1.compareTo(mutableDateTime11) == 0) == mutableDateTime1.equals(mutableDateTime11));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.LocalDate localDate10 = property8.withMinimumValue();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withChronology(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.withChronology(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        org.joda.time.DateTime.Property property32 = dateTime27.property(dateTimeFieldType31);
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        boolean boolean40 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate39);
        int int41 = localDate39.getDayOfWeek();
        org.joda.time.LocalDate.Property property42 = localDate39.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval45 = localDate39.toInterval(dateTimeZone44);
        int[] intArray47 = new int[] { 'a' };
        int int48 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) localDate39, intArray47);
        int int49 = dateTimeField33.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField33.getType();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        boolean boolean52 = localDate10.isSupported(durationFieldType51);
        org.joda.time.LocalDate localDate54 = localDate10.plusDays(35449917);
        org.joda.time.LocalDate localDate56 = localDate10.withWeekOfWeekyear(32);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 0, chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 0, chronology61);
        boolean boolean63 = localDate59.isEqual((org.joda.time.ReadablePartial) localDate62);
        int int64 = localDate62.getDayOfWeek();
        org.joda.time.LocalDate.Property property65 = localDate62.weekOfWeekyear();
        org.joda.time.LocalDate localDate66 = property65.roundFloorCopy();
        int int67 = localDate66.size();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDate localDate69 = localDate66.minus(readablePeriod68);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.dayOfYear();
        boolean boolean73 = mutableDateTime71.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime71.setZone(dateTimeZone75);
        long long78 = dateTimeZone75.nextTransition((long) '4');
        org.joda.time.DateTime dateTime79 = localDate69.toDateTimeAtCurrentTime(dateTimeZone75);
        org.joda.time.LocalDate localDate81 = localDate69.withCenturyOfEra(3);
        org.joda.time.LocalDate localDate83 = localDate81.plusWeeks(53);
        org.joda.time.LocalDate localDate84 = localDate10.withFields((org.joda.time.ReadablePartial) localDate81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and mutableDateTime71", (mutableDateTime29.compareTo(mutableDateTime71) == 0) == mutableDateTime29.equals(mutableDateTime71));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTime.Property property21 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval34 = localDate28.toInterval(dateTimeZone33);
        int[] intArray36 = new int[] { 'a' };
        int int37 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate28, intArray36);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket43.saveField(dateTimeFieldType44, "1970-01-01T00:00:00.000Z", locale46);
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str49 = localDate28.toString("1", locale46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDate28.getFieldTypes();
        int int51 = localDate28.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (short) 0, chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 0, chronology56);
        boolean boolean58 = localDate54.isEqual((org.joda.time.ReadablePartial) localDate57);
        int int59 = localDate57.getDayOfWeek();
        org.joda.time.LocalDate.Property property60 = localDate57.weekOfWeekyear();
        org.joda.time.LocalDate localDate61 = property60.roundFloorCopy();
        int int62 = localDate61.size();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDate localDate64 = localDate61.minus(readablePeriod63);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.dayOfYear();
        boolean boolean68 = mutableDateTime66.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime66.setZone(dateTimeZone70);
        long long73 = dateTimeZone70.nextTransition((long) '4');
        org.joda.time.DateTime dateTime74 = localDate64.toDateTimeAtCurrentTime(dateTimeZone70);
        org.joda.time.LocalDate localDate76 = localDate64.plusYears((-1));
        java.lang.String str77 = localDate64.toString();
        int int78 = localDate28.compareTo((org.joda.time.ReadablePartial) localDate64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime66", (mutableDateTime18.compareTo(mutableDateTime66) == 0) == mutableDateTime18.equals(mutableDateTime66));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.era();
        java.lang.String str18 = chronology16.toString();
        org.joda.time.DateTime dateTime19 = dateTime13.withChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime19", (mutableDateTime1.compareTo(dateTime19) == 0) == mutableDateTime1.equals(dateTime19));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone23);
        int int25 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime11.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        boolean boolean36 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime34.setZone(dateTimeZone38);
        long long41 = dateTimeZone38.nextTransition((long) '4');
        java.lang.String str43 = dateTimeZone38.getShortName(35L);
        boolean boolean44 = dateTimeZone38.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter29.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime46 = mutableDateTime11.toDateTime(dateTimeZone38);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime11.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime46", (dateTime24.compareTo(dateTime46) == 0) == dateTime24.equals(dateTime46));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        int int10 = localDate9.size();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate15 = localDate9.minusYears(1);
        int int16 = localDate9.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight17 = localDate9.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        boolean boolean27 = mutableDateTime25.isAfterNow();
        boolean boolean28 = mutableDateTime23.isBefore((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime23.add(readableDuration29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime23.era();
        java.util.GregorianCalendar gregorianCalendar32 = mutableDateTime23.toGregorianCalendar();
        int int33 = mutableDateTime23.getYearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = mutableDateTime23.getRoundingField();
        mutableDateTime21.setMillis((org.joda.time.ReadableInstant) mutableDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and mutableDateTime25", (mutableDateTime21.compareTo(mutableDateTime25) == 0) == mutableDateTime21.equals(mutableDateTime25));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate5.plus(readablePeriod8);
        int int10 = localDate5.size();
        org.joda.time.LocalDate localDate12 = localDate5.withWeekyear(59);
        int int13 = localDate5.getCenturyOfEra();
        org.joda.time.LocalDate.Property property14 = localDate5.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        boolean boolean18 = mutableDateTime16.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime16.setZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime22.monthOfYear();
        org.joda.time.DateTime dateTime25 = property24.getDateTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int33 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        int int35 = localDate31.getDayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDate31.getFieldTypes();
        org.joda.time.LocalDate localDate38 = localDate31.plusMonths((int) ' ');
        org.joda.time.DateTime dateTime39 = localDate31.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate40 = dateTime39.toLocalDate();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        boolean boolean47 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDate43.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTimeISO();
        org.joda.time.DateTime.Property property53 = dateTime49.weekyear();
        org.joda.time.DateTime dateTime54 = dateTime49.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property55 = dateTime54.secondOfDay();
        org.joda.time.DateTime.Property property56 = dateTime54.yearOfCentury();
        org.joda.time.DateTime dateTime57 = property56.roundCeilingCopy();
        org.joda.time.Instant instant58 = dateTime57.toInstant();
        boolean boolean59 = dateTime39.isEqual((org.joda.time.ReadableInstant) instant58);
        boolean boolean60 = dateTime25.equals((java.lang.Object) instant58);
        int int61 = property14.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime49 and instant58", (dateTime49.compareTo(instant58) == 0) == dateTime49.equals(instant58));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        mutableDateTime1.addWeekyears(69);
        int int15 = mutableDateTime1.getYear();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.getMutableDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        boolean boolean26 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate25);
        int int27 = localDate25.getDayOfWeek();
        org.joda.time.LocalDate.Property property28 = localDate25.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval31 = localDate25.toInterval(dateTimeZone30);
        long long33 = dateTimeZone30.convertUTCToLocal((long) 0);
        mutableDateTime19.setZone(dateTimeZone30);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName(1644573060565L, locale36);
        org.joda.time.DateTime dateTime38 = mutableDateTime1.toDateTime(dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime17", (instant10.compareTo(mutableDateTime17) == 0) == instant10.equals(mutableDateTime17));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = localDateTime4.getChronology();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket22.saveField(dateTimeFieldType23, "1970-01-01T00:00:00.000Z", locale25);
        dateTimeParserBucket15.saveField(dateTimeFieldType16, "1970-01-01T00:00:00.000Z", locale25);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket32.saveField(dateTimeFieldType33, "1970-01-01T00:00:00.000Z", locale35);
        java.lang.String str37 = locale25.getDisplayCountry(locale35);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale47, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket49.saveField(dateTimeFieldType50, "1970-01-01T00:00:00.000Z", locale52);
        dateTimeParserBucket42.saveField(dateTimeFieldType43, "1970-01-01T00:00:00.000Z", locale52);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology56, locale57, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket59.saveField(dateTimeFieldType60, "1970-01-01T00:00:00.000Z", locale62);
        java.lang.String str64 = locale52.getDisplayCountry(locale62);
        java.lang.String str65 = locale35.getDisplayVariant(locale52);
        java.lang.String str66 = locale52.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology10, locale52);
        org.joda.time.Chronology chronology68 = chronology10.withUTC();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(1L, chronology68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology68);
        org.joda.time.Instant instant71 = dateTime70.toInstant();
        org.joda.time.MutableDateTime mutableDateTime72 = instant71.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime70", (dateTime9.compareTo(dateTime70) == 0) == dateTime9.equals(dateTime70));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour((int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.DateTime dateTime20 = dateTime17.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long26 = dateTimeZone22.convertLocalToUTC((long) 2039, true, (long) (byte) 100);
        org.joda.time.DateTime dateTime27 = dateTime20.toDateTime(dateTimeZone22);
        java.util.Date date28 = dateTime20.toDate();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime27", (dateTime20.compareTo(dateTime27) == 0) == dateTime20.equals(dateTime27));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int4 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime7.add(readablePeriod13, 4);
        mutableDateTime7.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime7.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = mutableDateTime7.toDateTime(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withZone(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime20", (mutableDateTime7.compareTo(dateTime20) == 0) == mutableDateTime7.equals(dateTime20));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.months();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(72576000011L, chronology9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime11", (dateTime8.compareTo(mutableDateTime11) == 0) == dateTime8.equals(mutableDateTime11));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear(4);
        org.joda.time.DateTime.Property property17 = dateTime14.monthOfYear();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int23 = dateTimeZone21.getOffset((long) '4');
        long long25 = dateTimeZone21.nextTransition((long) 70);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = mutableDateTime27.toString(dateTimeFormatter28);
        mutableDateTime27.addMonths((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        boolean boolean36 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime34.setZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(6048000000L, dateTimeZone38);
        mutableDateTime27.setZone(dateTimeZone38);
        long long43 = dateTimeZone21.getMillisKeepLocal(dateTimeZone38, (long) 'u');
        int int45 = dateTimeZone38.getStandardOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime14.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int48 = dateTime14.get(dateTimeFieldType47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime46", (dateTime14.compareTo(mutableDateTime46) == 0) == dateTime14.equals(mutableDateTime46));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        java.lang.Object obj17 = mutableDateTime15.clone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone25);
        int int29 = localDateTime28.getCenturyOfEra();
        org.joda.time.Chronology chronology30 = localDateTime28.getChronology();
        mutableDateTime18.setChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and mutableDateTime18", (mutableDateTime13.compareTo(mutableDateTime18) == 0) == mutableDateTime13.equals(mutableDateTime18));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval22 = localDate16.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime10.toDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readablePeriod25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime23", (dateTime26.compareTo(dateTime23) == 0) == dateTime26.equals(dateTime23));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.DurationField durationField2 = chronology1.weekyears();
        org.joda.time.DurationField durationField3 = chronology1.years();
        org.joda.time.DurationField durationField4 = chronology1.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField2 and durationField3", (durationField2.compareTo(durationField3) == 0) == durationField2.equals(durationField3));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField16 = chronology2.weekyear();
        org.joda.time.Chronology chronology17 = chronology2.withUTC();
        org.joda.time.DurationField durationField18 = chronology2.minutes();
        org.joda.time.DurationField durationField19 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology2.secondOfDay();
        org.joda.time.DurationField durationField21 = chronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField18, and durationField19", !(durationField21.compareTo(durationField18) == 0) || (Math.signum(durationField21.compareTo(durationField19)) == Math.signum(durationField18.compareTo(durationField19))));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField16 = chronology2.weekyear();
        org.joda.time.Chronology chronology17 = chronology2.withUTC();
        org.joda.time.DurationField durationField18 = chronology2.minutes();
        org.joda.time.DurationField durationField19 = chronology2.years();
        org.joda.time.DurationField durationField20 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = chronology2.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField19 and durationField20", (durationField19.compareTo(durationField20) == 0) == durationField19.equals(durationField20));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks(771);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        mutableDateTime1.setDayOfMonth(1);
        int int14 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime18.setChronology(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.year();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.era();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        boolean boolean26 = mutableDateTime18.equals((java.lang.Object) chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekOfWeekyear();
        org.joda.time.Chronology chronology28 = chronology25.withUTC();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTime dateTime30 = mutableDateTime1.toDateTime(chronology28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime16", (instant10.compareTo(mutableDateTime16) == 0) == instant10.equals(mutableDateTime16));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfCeiling();
        org.joda.time.Instant instant5 = mutableDateTime4.toInstant();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        boolean boolean12 = localDate8.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.minusSeconds(0);
        org.joda.time.DateTime dateTime22 = dateTime20.plusDays(1);
        boolean boolean23 = dateTime20.isAfterNow();
        org.joda.time.DateTime dateTime24 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        int int27 = property25.get();
        org.joda.time.DateTime dateTime28 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime30 = dateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket35.saveField(dateTimeFieldType36, "1970-01-01T00:00:00.000Z", locale38);
        int int40 = dateTime30.get(dateTimeFieldType36);
        boolean boolean41 = instant5.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property42 = dateTime30.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant5", (mutableDateTime2.compareTo(instant5) == 0) == mutableDateTime2.equals(instant5));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        long long22 = dateTimeZone17.adjustOffset((-35473049L), false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(3);
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(69);
        org.joda.time.DateTime dateTime20 = dateTime15.minusMonths(0);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(5);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 2039, true, (long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime20.toMutableDateTime(dateTimeZone24);
        java.util.TimeZone timeZone30 = dateTimeZone24.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime29", (dateTime15.compareTo(mutableDateTime29) == 0) == dateTime15.equals(mutableDateTime29));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.LocalDate.Property property11 = localDate5.property(dateTimeFieldType10);
        org.joda.time.LocalDate.Property property12 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate14 = property12.setCopy("70");
        org.joda.time.LocalDate.Property property15 = localDate14.monthOfYear();
        org.joda.time.LocalDate localDate16 = property15.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        boolean boolean22 = mutableDateTime20.isAfterNow();
        boolean boolean23 = mutableDateTime18.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        boolean boolean30 = localDate26.isEqual((org.joda.time.ReadablePartial) localDate29);
        int int31 = localDate29.getDayOfWeek();
        org.joda.time.LocalDate.Property property32 = localDate29.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval35 = localDate29.toInterval(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime20.toMutableDateTime(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.millisOfSecond();
        int int38 = property15.getDifference((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.LocalDate localDate39 = property15.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime36", (mutableDateTime8.compareTo(mutableDateTime36) == 0) == mutableDateTime8.equals(mutableDateTime36));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DurationField durationField16 = chronology2.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField18, and durationField16", !(durationField16.compareTo(durationField18) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField18.compareTo(durationField16))));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(366, 29);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalTime localTime43 = localTime40.withPeriodAdded(readablePeriod41, (int) (short) 0);
        org.joda.time.LocalTime.Property property44 = localTime40.secondOfMinute();
        org.joda.time.LocalTime localTime45 = property44.withMaximumValue();
        org.joda.time.LocalTime localTime46 = property44.getLocalTime();
        org.joda.time.LocalTime localTime47 = property44.withMaximumValue();
        org.joda.time.LocalTime localTime48 = property44.getLocalTime();
        int int49 = localTime48.getSecondOfMinute();
        org.joda.time.LocalTime.Property property50 = localTime48.millisOfDay();
        int int51 = localTime48.size();
        org.joda.time.Chronology chronology52 = localTime48.getChronology();
        boolean boolean53 = dateTimeZone39.equals((java.lang.Object) chronology52);
        org.joda.time.DateTime dateTime54 = dateTime36.withZone(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.DateTime.Property property18 = dateTime12.centuryOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime27.weekyear();
        org.joda.time.DateTime dateTime32 = property31.roundHalfFloorCopy();
        boolean boolean33 = dateTime32.isEqualNow();
        org.joda.time.DateTime dateTime34 = dateTime32.withLaterOffsetAtOverlap();
        boolean boolean35 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Instant instant36 = dateTime12.toInstant();
        java.lang.String str37 = dateTime12.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant36", (dateTime12.compareTo(instant36) == 0) == dateTime12.equals(instant36));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant17", (dateTime16.compareTo(instant17) == 0) == dateTime16.equals(instant17));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        long long3 = property2.remainder();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime7.add(readablePeriod13, 4);
        mutableDateTime7.setTime((long) (short) 10);
        int int18 = mutableDateTime7.getEra();
        org.joda.time.DateTime dateTime19 = mutableDateTime7.toDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime7.add(readablePeriod20, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfHalfday();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket34.saveField(dateTimeFieldType35, "1970-01-01T00:00:00.000Z", locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology28, locale37);
        java.lang.String str40 = chronology28.toString();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField42 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = chronology28.yearOfCentury();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) 69, chronology28);
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType24.getField(chronology28);
        java.util.Locale locale46 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology28, locale46);
        org.joda.time.DateTime dateTime48 = mutableDateTime7.toDateTime(chronology28);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime5, chronology28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime48", (mutableDateTime7.compareTo(dateTime48) == 0) == mutableDateTime7.equals(dateTime48));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTime.Property property21 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval34 = localDate28.toInterval(dateTimeZone33);
        int[] intArray36 = new int[] { 'a' };
        int int37 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate28, intArray36);
        org.joda.time.Interval interval38 = localDate28.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate28.getFieldType(2);
        org.joda.time.LocalDate.Property property41 = localDate28.dayOfYear();
        org.joda.time.LocalDate localDate42 = property41.roundHalfFloorCopy();
        int int43 = localDate42.getDayOfMonth();
        org.joda.time.LocalDate.Property property44 = localDate42.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfYear();
        boolean boolean48 = mutableDateTime46.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime46.setZone(dateTimeZone50);
        long long53 = dateTimeZone50.nextTransition((long) '4');
        java.lang.String str55 = dateTimeZone50.getShortName(35L);
        boolean boolean56 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime57 = localDate42.toDateTimeAtCurrentTime(dateTimeZone50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime46", (mutableDateTime18.compareTo(mutableDateTime46) == 0) == mutableDateTime18.equals(mutableDateTime46));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        long long24 = dateTimeZone20.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.plus(887172685974L);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTimeISO();
        java.lang.Object obj12 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        long long18 = dateTimeZone16.convertUTCToLocal(2100000L);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone16);
        int int21 = dateTimeZone16.getOffsetFromLocal(1644573051593L);
        java.lang.String str23 = dateTimeZone16.getNameKey((long) 20);
        mutableDateTime1.setZone(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime26.toString(dateTimeFormatter27);
        mutableDateTime26.addMonths((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.year();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        boolean boolean38 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.LocalDate.Property property43 = localDate37.property(dateTimeFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType42.getRangeDurationType();
        mutableDateTime26.add(durationFieldType44, (int) (byte) 1);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime26.yearOfCentury();
        mutableDateTime26.addHours(32);
        boolean boolean50 = dateTimeZone16.equals((java.lang.Object) 32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime11", (mutableDateTime1.compareTo(dateTime11) == 0) == mutableDateTime1.equals(dateTime11));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfCeiling();
        org.joda.time.Instant instant5 = mutableDateTime4.toInstant();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        boolean boolean12 = localDate8.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.minusSeconds(0);
        org.joda.time.DateTime dateTime22 = dateTime20.plusDays(1);
        boolean boolean23 = dateTime20.isAfterNow();
        org.joda.time.DateTime dateTime24 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        int int27 = property25.get();
        org.joda.time.DateTime dateTime28 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime30 = dateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket35.saveField(dateTimeFieldType36, "1970-01-01T00:00:00.000Z", locale38);
        int int40 = dateTime30.get(dateTimeFieldType36);
        boolean boolean41 = instant5.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property42 = dateTime30.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant5", (mutableDateTime2.compareTo(instant5) == 0) == mutableDateTime2.equals(instant5));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone3 = mutableDateTime2.getZone();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone3);
        boolean boolean6 = dateTime4.isBefore((long) 53);
        org.joda.time.DateTime dateTime8 = dateTime4.withWeekyear(365);
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded((long) ' ', 17);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfHalfday();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket20.saveField(dateTimeFieldType21, "1970-01-01T00:00:00.000Z", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology14, locale23);
        java.lang.String str26 = chronology14.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField28 = chronology14.weekyear();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime31.getZone();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime31.add(readableDuration33, 3);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        int int38 = dateTimeZone36.getOffset((long) (byte) 1);
        org.joda.time.Chronology chronology39 = chronology14.withZone(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.DateTime dateTime42 = dateTime11.toDateTime(chronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime27 and mutableDateTime40", (mutableDateTime27.compareTo(mutableDateTime40) == 0) == mutableDateTime27.equals(mutableDateTime40));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        int int15 = mutableDateTime14.getEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.year();
        org.joda.time.DurationField durationField17 = property16.getLeapDurationField();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withChronology(chronology31);
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfMinute();
        org.joda.time.DateTime dateTime35 = dateTime30.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.plus(readablePeriod36);
        org.joda.time.DateTime.Property property38 = dateTime37.secondOfMinute();
        long long39 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(25, 0);
        org.joda.time.DateTime dateTime43 = dateTime37.withZoneRetainFields(dateTimeZone42);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime14", (instant10.compareTo(mutableDateTime14) == 0) == instant10.equals(mutableDateTime14));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField16 = chronology2.weekyear();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology2);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime19.getZone();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime19.add(readableDuration21, 3);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime19.getZone();
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        org.joda.time.Chronology chronology27 = chronology2.withZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.Instant instant29 = mutableDateTime28.toInstant();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        boolean boolean34 = mutableDateTime32.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime32.setZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(6048000000L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone36);
        long long41 = dateTimeZone36.convertUTCToLocal((long) 0);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime43 = mutableDateTime28.toDateTime(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and dateTime39", (mutableDateTime15.compareTo(dateTime39) == 0) == mutableDateTime15.equals(dateTime39));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket13.saveField(dateTimeFieldType14, "1970-01-01T00:00:00.000Z", locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology7, locale16);
        java.lang.String str19 = chronology7.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField21 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology7.yearOfCentury();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 69, chronology7);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType3.getField(chronology7);
        java.util.Locale locale25 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology7, locale25);
        java.lang.String str27 = property1.getAsText(locale25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and mutableDateTime20", (dateTime0.compareTo(mutableDateTime20) == 0) == dateTime0.equals(mutableDateTime20));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        mutableDateTime1.setMillis((long) 35);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime7.add(readablePeriod13, 4);
        org.joda.time.Instant instant16 = mutableDateTime7.toInstant();
        boolean boolean18 = mutableDateTime7.isAfter((long) (byte) 1);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime1.add(readableDuration20, 601004);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant16", (mutableDateTime7.compareTo(instant16) == 0) == mutableDateTime7.equals(instant16));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        long long17 = mutableDateTime1.getMillis();
        java.util.Date date18 = mutableDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(3);
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(69);
        org.joda.time.DateTime dateTime20 = dateTime15.minusMonths(0);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(5);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 2039, true, (long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime20.toMutableDateTime(dateTimeZone24);
        long long32 = dateTimeZone24.adjustOffset(31536000000L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime29", (dateTime15.compareTo(mutableDateTime29) == 0) == dateTime15.equals(mutableDateTime29));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology25);
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        int int3 = property2.getMinimumValueOverall();
        java.util.Locale locale7 = new java.util.Locale("dayOfYear", "TW", "");
        java.lang.String str8 = locale7.getLanguage();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet10 = locale7.getExtensionKeys();
        int int11 = property2.getMaximumTextLength(locale7);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        boolean boolean15 = mutableDateTime13.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime13.setZone(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableDateTime13.add(readablePeriod19, 4);
        org.joda.time.Instant instant22 = mutableDateTime13.toInstant();
        boolean boolean24 = mutableDateTime13.isAfter((long) (byte) 1);
        mutableDateTime13.addWeekyears(69);
        mutableDateTime13.setSecondOfDay(3);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime13.minuteOfDay();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.era();
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField36 = chronology32.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        java.lang.Integer int54 = dateTimeParserBucket41.getPivotYear();
        java.util.Locale locale55 = dateTimeParserBucket41.getLocale();
        java.lang.String str56 = locale55.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((-259200031L), chronology32, locale55);
        java.lang.String str58 = property29.getAsText(locale55);
        java.util.Locale locale59 = locale55.stripExtensions();
        java.lang.String str60 = locale7.getDisplayVariant(locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant22", (mutableDateTime1.compareTo(instant22) == 0) == mutableDateTime1.equals(instant22));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfYear();
        boolean boolean23 = mutableDateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime21.setZone(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableDateTime21.add(readablePeriod27, 4);
        org.joda.time.Instant instant30 = mutableDateTime21.toInstant();
        int int31 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) instant30);
        java.lang.String str33 = dateTimeZone17.getShortName((long) 42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant30", (mutableDateTime1.compareTo(instant30) == 0) == mutableDateTime1.equals(instant30));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add(28);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.weekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        boolean boolean13 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime8.add(readableDuration14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime8.era();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale24);
        int int26 = mutableDateTime8.get(dateTimeFieldType22);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime8.centuryOfEra();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket38.saveField(dateTimeFieldType39, "1970-01-01T00:00:00.000Z", locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology32, locale41);
        java.lang.String str44 = chronology32.toString();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField46 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = chronology32.yearOfCentury();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 69, chronology32);
        org.joda.time.DateTimeField dateTimeField49 = chronology32.hourOfDay();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromMillisOfDay(2100000L, chronology32);
        mutableDateTime8.setChronology(chronology32);
        org.joda.time.DateTime dateTime52 = mutableDateTime5.toDateTime(chronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime10", (mutableDateTime8.compareTo(mutableDateTime10) == 0) == mutableDateTime8.equals(mutableDateTime10));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 0, chronology7);
        boolean boolean9 = localDate5.isEqual((org.joda.time.ReadablePartial) localDate8);
        int int10 = localDate8.getDayOfWeek();
        org.joda.time.LocalDate.Property property11 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property11.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = property11.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval17 = localDate14.toInterval(dateTimeZone16);
        mutableDateTime1.setZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis(52);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        boolean boolean33 = mutableDateTime31.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime31.setZone(dateTimeZone35);
        long long38 = dateTimeZone35.nextTransition((long) '4');
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone35);
        java.lang.String str41 = dateTimeZone35.getNameKey((long) (byte) 100);
        long long44 = dateTimeZone35.adjustOffset(25260020L, true);
        long long47 = dateTimeZone35.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone35);
        boolean boolean49 = dateTime20.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean51 = dateTime20.isBefore(1644573086334L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime48", (dateTime20.compareTo(mutableDateTime48) == 0) == dateTime20.equals(mutableDateTime48));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        int int4 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plus(readableDuration23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        long long27 = chronology15.set((org.joda.time.ReadablePartial) localDateTime24, (long) 22);
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket40.saveField(dateTimeFieldType41, "1970-01-01T00:00:00.000Z", locale43);
        dateTimeParserBucket33.saveField(dateTimeFieldType34, "1970-01-01T00:00:00.000Z", locale43);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket50.saveField(dateTimeFieldType51, "1970-01-01T00:00:00.000Z", locale53);
        java.lang.String str55 = locale43.getDisplayCountry(locale53);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket67.saveField(dateTimeFieldType68, "1970-01-01T00:00:00.000Z", locale70);
        dateTimeParserBucket60.saveField(dateTimeFieldType61, "1970-01-01T00:00:00.000Z", locale70);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket77.saveField(dateTimeFieldType78, "1970-01-01T00:00:00.000Z", locale80);
        java.lang.String str82 = locale70.getDisplayCountry(locale80);
        java.lang.String str83 = locale53.getDisplayVariant(locale70);
        java.util.Locale.setDefault(category28, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale53, (java.lang.Integer) 7);
        org.joda.time.DurationField durationField87 = chronology15.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter2.withChronology(chronology15);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField90 = chronology15.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime89", (dateTime14.compareTo(dateTime89) == 0) == dateTime14.equals(dateTime89));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale24);
        dateTimeParserBucket14.saveField(dateTimeFieldType15, "1970-01-01T00:00:00.000Z", locale24);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket31.saveField(dateTimeFieldType32, "1970-01-01T00:00:00.000Z", locale34);
        java.lang.String str36 = locale24.getDisplayCountry(locale34);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket58.saveField(dateTimeFieldType59, "1970-01-01T00:00:00.000Z", locale61);
        java.lang.String str63 = locale51.getDisplayCountry(locale61);
        java.lang.String str64 = locale34.getDisplayVariant(locale51);
        java.lang.String str65 = locale51.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology9, locale51);
        org.joda.time.Chronology chronology67 = chronology9.withUTC();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DateTime.Property property69 = dateTime68.millisOfSecond();
        int int70 = property69.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime68", (dateTime8.compareTo(dateTime68) == 0) == dateTime8.equals(dateTime68));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Chronology chronology4 = null;
        mutableDateTime3.setChronology(chronology4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.year();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        boolean boolean13 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime10.add(readableDuration14, (int) (short) 1);
        boolean boolean17 = mutableDateTime3.equals((java.lang.Object) readableDuration14);
        mutableDateTime3.addMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        boolean boolean30 = localDate26.isEqual((org.joda.time.ReadablePartial) localDate29);
        int int31 = localDate29.getDayOfWeek();
        org.joda.time.LocalDate.Property property32 = localDate29.weekOfWeekyear();
        org.joda.time.LocalDate localDate33 = property32.roundFloorCopy();
        org.joda.time.LocalDate localDate34 = property32.roundCeilingCopy();
        org.joda.time.LocalDate localDate35 = property32.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval38 = localDate35.toInterval(dateTimeZone37);
        mutableDateTime22.setZoneRetainFields(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(1646992302977L, dateTimeZone37);
        int int42 = dateTimeZone37.getOffset((long) 11);
        mutableDateTime3.setZone(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime3.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and mutableDateTime8", (mutableDateTime3.compareTo(mutableDateTime8) == 0) == mutableDateTime3.equals(mutableDateTime8));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime40 = property37.addWrapField(4);
        java.lang.String str41 = mutableDateTime40.toString();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime40.millisOfDay();
        mutableDateTime40.setYear(28);
        mutableDateTime40.addMinutes(32);
        boolean boolean47 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 0, chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (short) 0, chronology52);
        boolean boolean54 = localDate50.isEqual((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime56.plus(readableDuration59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.withChronology(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.withWeekOfWeekyear(4);
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology66, locale67, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket(0L, chronology73, locale74, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket76.saveField(dateTimeFieldType77, "1970-01-01T00:00:00.000Z", locale79);
        dateTimeParserBucket69.saveField(dateTimeFieldType70, "1970-01-01T00:00:00.000Z", locale79);
        org.joda.time.DateTime.Property property82 = dateTime62.property(dateTimeFieldType70);
        org.joda.time.DateTime dateTime84 = dateTime62.plusWeeks(49);
        org.joda.time.DateTime dateTime86 = dateTime84.withWeekOfWeekyear(49);
        org.joda.time.DateTime dateTime88 = dateTime84.minusMinutes(15);
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime29", (mutableDateTime8.compareTo(mutableDateTime29) == 0) == mutableDateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        boolean boolean4 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime2.setZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime2.add(readablePeriod8, 4);
        org.joda.time.Instant instant11 = mutableDateTime2.toInstant();
        mutableDateTime2.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        org.joda.time.DateTimeField dateTimeField30 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology18.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime15.toMutableDateTime(chronology18);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromMillisOfDay(4320000004L, chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime32", (mutableDateTime2.compareTo(mutableDateTime32) == 0) == mutableDateTime2.equals(mutableDateTime32));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readableDuration25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withChronology(chronology27);
        org.joda.time.DateTime.Property property29 = dateTime26.secondOfMinute();
        org.joda.time.DateTime dateTime31 = dateTime26.withMinuteOfHour((int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        org.joda.time.DateTime dateTime34 = dateTime31.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long40 = dateTimeZone36.convertLocalToUTC((long) 2039, true, (long) (byte) 100);
        org.joda.time.DateTime dateTime41 = dateTime34.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = dateTime13.toDateTime(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime41", (dateTime34.compareTo(dateTime41) == 0) == dateTime34.equals(dateTime41));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        long long3 = property2.remainder();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime5.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfCeiling();
        java.util.Locale locale10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = property7.set("1", locale10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableDateTime11.setMillis(readableInstant12);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        boolean boolean17 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime15.setZoneRetainFields(dateTimeZone18);
        mutableDateTime15.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int26 = dateTimeZone24.getOffset((long) '4');
        mutableDateTime15.setZoneRetainFields(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) mutableDateTime29);
        long long31 = mutableDateTime15.getMillis();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str36 = dateTimeZone34.getNameKey((long) 53);
        mutableDateTime15.setZone(dateTimeZone34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime11, dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime29", (mutableDateTime15.compareTo(mutableDateTime29) == 0) == mutableDateTime15.equals(mutableDateTime29));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 10, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.monthOfYear();
        java.lang.String str24 = dateTimeField22.getAsText((long) 35449917);
        long long27 = dateTimeField22.add((long) '4', 2000);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket37.saveField(dateTimeFieldType38, "1970-01-01T00:00:00.000Z", locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology31, locale40);
        java.lang.String str43 = locale40.getISO3Country();
        java.lang.String str44 = locale40.getVariant();
        java.lang.String str45 = dateTimeField22.getAsShortText((long) 32, locale40);
        java.util.Calendar calendar46 = mutableDateTime15.toCalendar(locale40);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromCalendarFields(calendar46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime13.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withChronology(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withChronology(chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.DateTime.Property property39 = dateTime34.property(dateTimeFieldType38);
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        boolean boolean47 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate46);
        int int48 = localDate46.getDayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval52 = localDate46.toInterval(dateTimeZone51);
        int[] intArray54 = new int[] { 'a' };
        int int55 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localDate46, intArray54);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket61.saveField(dateTimeFieldType62, "1970-01-01T00:00:00.000Z", locale64);
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str67 = localDate46.toString("1", locale64);
        org.joda.time.LocalDate localDate69 = localDate46.withMonthOfYear(5);
        org.joda.time.Chronology chronology70 = localDate69.getChronology();
        org.joda.time.Chronology chronology71 = chronology70.withUTC();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.minuteOfDay();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = chronology71.add(readablePeriod74, (long) 'a', 292278993);
        org.joda.time.DateTime dateTime78 = dateTime13.toDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField79 = chronology71.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime78", (dateTime8.compareTo(dateTime78) == 0) == dateTime8.equals(dateTime78));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.millis();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, chronology9);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        int int14 = mutableDateTime13.getEra();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime13.add(readableDuration15);
        java.util.GregorianCalendar gregorianCalendar17 = mutableDateTime13.toGregorianCalendar();
        mutableDateTime13.setMillisOfSecond(25);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime20.withPeriodAdded(readablePeriod21, (int) (short) 0);
        org.joda.time.LocalTime.Property property24 = localTime20.secondOfMinute();
        org.joda.time.LocalTime localTime25 = property24.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime26 = property24.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime28 = property24.addCopy((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime13.property(dateTimeFieldType29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime11.property(dateTimeFieldType29);
        org.joda.time.MutableDateTime mutableDateTime32 = property31.roundHalfFloor();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime32", (mutableDateTime1.compareTo(mutableDateTime32) == 0) == mutableDateTime1.equals(mutableDateTime32));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology25);
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        boolean boolean34 = dateTimeFormatter33.isParser();
        org.joda.time.Chronology chronology35 = dateTimeFormatter33.getChronology();
        boolean boolean36 = dateTimeFormatter33.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter33.withDefaultYear(0);
        boolean boolean39 = mutableDateTime1.equals((java.lang.Object) dateTimeFormatter38);
        org.joda.time.Chronology chronology40 = dateTimeFormatter38.getChronolgy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        int int20 = mutableDateTime19.getEra();
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime19.setChronology(chronology21);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTime dateTime25 = dateTime12.minusYears(3600000);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int33 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate36 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate37 = property34.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval40 = localDate37.toInterval(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime25.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 53);
        mutableDateTime41.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime41", (dateTime25.compareTo(mutableDateTime41) == 0) == dateTime25.equals(mutableDateTime41));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        int int14 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(25, 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra((int) (byte) 100);
        boolean boolean29 = dateTimeZone21.isLocalDateTimeGap(localDateTime28);
        mutableDateTime18.setZone(dateTimeZone21);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("+00:0011");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        boolean boolean40 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime.Property property46 = dateTime42.weekyear();
        org.joda.time.DateTime dateTime47 = property46.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField48 = property46.getField();
        java.util.Locale locale53 = new java.util.Locale("dayOfYear", "TW", "");
        java.lang.String str54 = locale53.getLanguage();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.lang.String str56 = dateTimeField48.getAsShortText((long) 14, locale53);
        java.lang.String str57 = locale53.getVariant();
        java.lang.String str58 = locale33.getDisplayScript(locale53);
        java.lang.String str59 = dateTimeZone21.getName((long) 42, locale53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime42", (mutableDateTime1.compareTo(dateTime42) == 0) == mutableDateTime1.equals(dateTime42));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        mutableDateTime1.setDayOfMonth(1);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.era();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        mutableDateTime1.setDayOfMonth(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readableDuration25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withChronology(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withChronology(chronology29);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.DateTime.Property property35 = dateTime30.property(dateTimeFieldType34);
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        boolean boolean43 = localDate39.isEqual((org.joda.time.ReadablePartial) localDate42);
        int int44 = localDate42.getDayOfWeek();
        org.joda.time.LocalDate.Property property45 = localDate42.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval48 = localDate42.toInterval(dateTimeZone47);
        int[] intArray50 = new int[] { 'a' };
        int int51 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDate42, intArray50);
        org.joda.time.Interval interval52 = localDate42.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = localDate42.getFieldType(2);
        java.lang.String str55 = dateTimeFieldType54.toString();
        boolean boolean56 = mutableDateTime1.isSupported(dateTimeFieldType54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime32", (instant10.compareTo(mutableDateTime32) == 0) == instant10.equals(mutableDateTime32));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 363);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withChronology(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withChronology(chronology17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DateTime.Property property23 = dateTime18.property(dateTimeFieldType22);
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        boolean boolean31 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate30);
        int int32 = localDate30.getDayOfWeek();
        org.joda.time.LocalDate.Property property33 = localDate30.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval36 = localDate30.toInterval(dateTimeZone35);
        int[] intArray38 = new int[] { 'a' };
        int int39 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDate30, intArray38);
        org.joda.time.Interval interval40 = localDate30.toInterval();
        java.util.Date date41 = localDate30.toDate();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        int int49 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate47.weekOfWeekyear();
        org.joda.time.LocalDate localDate51 = property50.roundFloorCopy();
        org.joda.time.LocalDate localDate52 = property50.roundCeilingCopy();
        org.joda.time.LocalDate localDate53 = property50.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval56 = localDate53.toInterval(dateTimeZone55);
        int int57 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate59 = localDate30.plusMonths(5);
        org.joda.time.Chronology chronology60 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.clockhourOfDay();
        org.joda.time.DateTime dateTime63 = dateTime1.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime63", (dateTime1.compareTo(dateTime63) == 0) == dateTime1.equals(dateTime63));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 0, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        boolean boolean7 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.plus(readableDuration12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withChronology(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.withChronology(chronology16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.DateTime.Property property22 = dateTime17.property(dateTimeFieldType21);
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        boolean boolean30 = localDate26.isEqual((org.joda.time.ReadablePartial) localDate29);
        int int31 = localDate29.getDayOfWeek();
        org.joda.time.LocalDate.Property property32 = localDate29.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval35 = localDate29.toInterval(dateTimeZone34);
        int[] intArray37 = new int[] { 'a' };
        int int38 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDate29, intArray37);
        org.joda.time.Interval interval39 = localDate29.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDate29.getFieldType(2);
        org.joda.time.LocalDate.Property property42 = localDate29.weekyear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        boolean boolean49 = localDate45.isEqual((org.joda.time.ReadablePartial) localDate48);
        int int50 = localDate48.getDayOfWeek();
        org.joda.time.LocalDate.Property property51 = localDate48.weekOfWeekyear();
        org.joda.time.LocalDate localDate52 = property51.roundFloorCopy();
        org.joda.time.LocalDate localDate53 = property51.roundCeilingCopy();
        org.joda.time.LocalDate localDate54 = property51.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval57 = localDate54.toInterval(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDate29.toDateTimeAtStartOfDay(dateTimeZone56);
        boolean boolean60 = dateTimeZone56.isStandardOffset(1644573061055L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 17, dateTimeZone56);
        int int64 = dateTimeZone56.getStandardOffset(233939762L);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology66);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime69 = property68.roundHalfCeiling();
        org.joda.time.Instant instant70 = mutableDateTime69.toInstant();
        int int71 = dateTimeZone56.getOffset((org.joda.time.ReadableInstant) instant70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and mutableDateTime67", (mutableDateTime19.compareTo(mutableDateTime67) == 0) == mutableDateTime19.equals(mutableDateTime67));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plus(readableDuration23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        long long27 = chronology15.set((org.joda.time.ReadablePartial) localDateTime24, (long) 22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField29 = chronology15.weekOfWeekyear();
        long long33 = chronology15.add((-67L), 3601987L, 238);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField35 = chronology15.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime34", (dateTime14.compareTo(dateTime34) == 0) == dateTime14.equals(dateTime34));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        boolean boolean27 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.plus(readableDuration32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withChronology(chronology34);
        org.joda.time.DateTime.Property property36 = dateTime33.secondOfMinute();
        org.joda.time.DateTime dateTime38 = dateTime33.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime33.minusSeconds(31);
        boolean boolean41 = instant20.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime42 = dateTime33.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant20", (dateTime17.compareTo(instant20) == 0) == dateTime17.equals(instant20));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        boolean boolean17 = dateTime14.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime14.withTimeAtStartOfDay();
        int int19 = dateTime18.getMillisOfDay();
        org.joda.time.DateTime.Property property20 = dateTime18.year();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.withPeriodAdded(readablePeriod21, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.era();
        org.joda.time.Instant instant27 = mutableDateTime25.toInstant();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        boolean boolean34 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate30.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.plus(readableDuration39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withChronology(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime46 = dateTime42.minusMillis(2022);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillisOfSecond((int) '#');
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.plus(readablePeriod49);
        boolean boolean51 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean52 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and instant27", (mutableDateTime25.compareTo(instant27) == 0) == mutableDateTime25.equals(instant27));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add((-292275054));
        org.joda.time.DurationField durationField37 = property34.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime29", (mutableDateTime8.compareTo(mutableDateTime29) == 0) == mutableDateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.LocalDate.Property property11 = localDate5.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtCurrentTime();
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.DateTime.Property property15 = dateTime12.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        boolean boolean20 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime18.setZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(6048000000L, dateTimeZone22);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime.Property property27 = dateTime24.property(dateTimeFieldType26);
        boolean boolean28 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime18", (mutableDateTime8.compareTo(mutableDateTime18) == 0) == mutableDateTime8.equals(mutableDateTime18));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        int int14 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime1.add(readableDuration15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime1.add(readableDuration17, 53);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        java.lang.Object obj22 = mutableDateTime21.clone();
        boolean boolean23 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        int int24 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((-441853200035L), dateTimeZone27);
        mutableDateTime1.setZone(dateTimeZone27);
        int int31 = dateTimeZone27.getStandardOffset((long) 198970);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property26 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis(3);
        org.joda.time.DateTime.Property property30 = dateTime29.year();
        org.joda.time.DateTime dateTime32 = dateTime29.plusSeconds(69);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        long long37 = dateTime34.getMillis();
        org.joda.time.DateTime.Property property38 = dateTime34.year();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0);
        int int41 = mutableDateTime40.getEra();
        org.joda.time.Chronology chronology42 = null;
        mutableDateTime40.setChronology(chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property46.getFieldType();
        mutableDateTime40.set(dateTimeFieldType47, (int) '4');
        boolean boolean50 = dateTime34.isEqual((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime45", (instant10.compareTo(mutableDateTime45) == 0) == instant10.equals(mutableDateTime45));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone23);
        int int25 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime11.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        boolean boolean36 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime34.setZone(dateTimeZone38);
        long long41 = dateTimeZone38.nextTransition((long) '4');
        java.lang.String str43 = dateTimeZone38.getShortName(35L);
        boolean boolean44 = dateTimeZone38.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter29.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime46 = mutableDateTime11.toDateTime(dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime11.add(readableDuration47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime46", (dateTime24.compareTo(dateTime46) == 0) == dateTime24.equals(dateTime46));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone23);
        int int25 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime11.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        boolean boolean36 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime34.setZone(dateTimeZone38);
        long long41 = dateTimeZone38.nextTransition((long) '4');
        java.lang.String str43 = dateTimeZone38.getShortName(35L);
        boolean boolean44 = dateTimeZone38.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter29.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime46 = mutableDateTime11.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        org.joda.time.DateTime.Property property48 = dateTime46.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime24", (mutableDateTime11.compareTo(dateTime24) == 0) == mutableDateTime11.equals(dateTime24));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime16.setZone(dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and mutableDateTime17", (mutableDateTime16.compareTo(mutableDateTime17) == 0) == mutableDateTime16.equals(mutableDateTime17));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime40 = property37.addWrapField(4);
        java.lang.String str41 = mutableDateTime40.toString();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime40.millisOfDay();
        mutableDateTime40.setYear(28);
        mutableDateTime40.addMinutes(32);
        boolean boolean47 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime25.setMillis((long) 'u');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime29", (mutableDateTime8.compareTo(mutableDateTime29) == 0) == mutableDateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.millis();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        boolean boolean18 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readableDuration23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withChronology(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.withChronology(chronology27);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
        org.joda.time.DateTime.Property property33 = dateTime28.property(dateTimeFieldType32);
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket46.saveField(dateTimeFieldType47, "1970-01-01T00:00:00.000Z", locale49);
        dateTimeParserBucket39.saveField(dateTimeFieldType40, "1970-01-01T00:00:00.000Z", locale49);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale54, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket56.saveField(dateTimeFieldType57, "1970-01-01T00:00:00.000Z", locale59);
        java.lang.String str61 = locale49.getDisplayCountry(locale59);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology63, locale64, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(0L, chronology70, locale71, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale76 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket73.saveField(dateTimeFieldType74, "1970-01-01T00:00:00.000Z", locale76);
        dateTimeParserBucket66.saveField(dateTimeFieldType67, "1970-01-01T00:00:00.000Z", locale76);
        org.joda.time.Chronology chronology80 = null;
        java.util.Locale locale81 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket(0L, chronology80, locale81, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket83.saveField(dateTimeFieldType84, "1970-01-01T00:00:00.000Z", locale86);
        java.lang.String str88 = locale76.getDisplayCountry(locale86);
        java.lang.String str89 = locale59.getDisplayVariant(locale76);
        int int90 = dateTimeField34.getMaximumTextLength(locale59);
        mutableDateTime7.setRounding(dateTimeField34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime11", (mutableDateTime1.compareTo(mutableDateTime11) == 0) == mutableDateTime1.equals(mutableDateTime11));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey(27300064L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant17", (dateTime8.compareTo(instant17) == 0) == dateTime8.equals(instant17));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField2 = chronology1.era();
        org.joda.time.DurationField durationField3 = chronology1.weeks();
        org.joda.time.DateTimeField dateTimeField4 = chronology1.year();
        org.joda.time.DurationField durationField5 = chronology1.eras();
        org.joda.time.DurationField durationField6 = chronology1.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField5", Math.signum(durationField3.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField3)));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addWeeks(2);
        int int3 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        boolean boolean21 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate20);
        int int22 = localDate20.getDayOfWeek();
        org.joda.time.LocalDate.Property property23 = localDate20.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval26 = localDate20.toInterval(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime14.toDateTime(dateTimeZone25);
        boolean boolean28 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone29 = mutableDateTime0.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime27", (dateTime14.compareTo(dateTime27) == 0) == dateTime14.equals(dateTime27));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime13.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withChronology(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withChronology(chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.DateTime.Property property39 = dateTime34.property(dateTimeFieldType38);
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        boolean boolean47 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate46);
        int int48 = localDate46.getDayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval52 = localDate46.toInterval(dateTimeZone51);
        int[] intArray54 = new int[] { 'a' };
        int int55 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localDate46, intArray54);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket61.saveField(dateTimeFieldType62, "1970-01-01T00:00:00.000Z", locale64);
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str67 = localDate46.toString("1", locale64);
        org.joda.time.LocalDate localDate69 = localDate46.withMonthOfYear(5);
        org.joda.time.Chronology chronology70 = localDate69.getChronology();
        org.joda.time.Chronology chronology71 = chronology70.withUTC();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.minuteOfDay();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = chronology71.add(readablePeriod74, (long) 'a', 292278993);
        org.joda.time.DateTime dateTime78 = dateTime13.toDateTime(chronology71);
        int int79 = dateTime13.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime78", (dateTime13.compareTo(dateTime78) == 0) == dateTime13.equals(dateTime78));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = mutableDateTime5.toString(dateTimeFormatter6);
        mutableDateTime5.addMonths((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfYear();
        boolean boolean14 = mutableDateTime12.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime12.setZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(6048000000L, dateTimeZone16);
        mutableDateTime5.setZone(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime5.add(readablePeriod20, 403);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime5.add(readableDuration23, 403);
        boolean boolean26 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime12", (instant3.compareTo(mutableDateTime12) == 0) == instant3.equals(mutableDateTime12));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime3.add(readableDuration20);
        int int22 = mutableDateTime3.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addSeconds(10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13, 6);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        java.lang.String str30 = chronology18.toString();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField32 = chronology18.weekyear();
        org.joda.time.Chronology chronology33 = chronology18.withUTC();
        org.joda.time.DurationField durationField34 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField35 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology18.weekyearOfCentury();
        java.util.Locale locale39 = new java.util.Locale("", "Germany");
        int int40 = dateTimeField36.getMaximumShortTextLength(locale39);
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleKeys();
        java.util.Calendar calendar42 = mutableDateTime1.toCalendar(locale39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        boolean boolean49 = localDate45.isEqual((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate45.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime54 = dateTime51.toDateTimeISO();
        org.joda.time.DateTime.Property property55 = dateTime51.weekyear();
        org.joda.time.DateTime dateTime56 = dateTime51.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime56.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime62 = dateTime60.minusYears(52);
        int int63 = dateTime60.getCenturyOfEra();
        org.joda.time.DateTime.Property property64 = dateTime60.yearOfCentury();
        org.joda.time.Interval interval65 = property64.toInterval();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.dayOfYear();
        boolean boolean69 = mutableDateTime67.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime67.setZone(dateTimeZone71);
        long long74 = dateTimeZone71.nextTransition((long) '4');
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now(dateTimeZone71);
        int int76 = property64.compareTo((org.joda.time.ReadableInstant) mutableDateTime75);
        java.lang.Object obj77 = mutableDateTime75.clone();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHours(32);
        mutableDateTime75.setZone(dateTimeZone79);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = mutableDateTime1.toDateTime(dateTimeZone79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime67", (instant10.compareTo(mutableDateTime67) == 0) == instant10.equals(mutableDateTime67));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField(4);
        org.joda.time.MutableDateTime mutableDateTime7 = property2.addWrapField((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        boolean boolean14 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.plus(readableDuration19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withChronology(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withChronology(chronology23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        org.joda.time.DateTime.Property property29 = dateTime24.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        boolean boolean37 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate36);
        int int38 = localDate36.getDayOfWeek();
        org.joda.time.LocalDate.Property property39 = localDate36.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval42 = localDate36.toInterval(dateTimeZone41);
        int[] intArray44 = new int[] { 'a' };
        int int45 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDate36, intArray44);
        org.joda.time.Interval interval46 = localDate36.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDate36.getFieldType(2);
        org.joda.time.LocalDate.Property property49 = localDate36.weekyear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (short) 0, chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 0, chronology54);
        boolean boolean56 = localDate52.isEqual((org.joda.time.ReadablePartial) localDate55);
        int int57 = localDate55.getDayOfWeek();
        org.joda.time.LocalDate.Property property58 = localDate55.weekOfWeekyear();
        org.joda.time.LocalDate localDate59 = property58.roundFloorCopy();
        org.joda.time.LocalDate localDate60 = property58.roundCeilingCopy();
        org.joda.time.LocalDate localDate61 = property58.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval64 = localDate61.toInterval(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate36.toDateTimeAtStartOfDay(dateTimeZone63);
        int int66 = localDate36.getWeekyear();
        org.joda.time.Chronology chronology67 = localDate36.getChronology();
        org.joda.time.Chronology chronology68 = chronology67.withUTC();
        org.joda.time.DateTime dateTime69 = mutableDateTime7.toDateTime(chronology68);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.dayOfYear();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (short) 0, chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) (short) 0, chronology77);
        boolean boolean79 = localDate75.isEqual((org.joda.time.ReadablePartial) localDate78);
        int int80 = localDate78.getDayOfWeek();
        org.joda.time.LocalDate.Property property81 = localDate78.weekOfWeekyear();
        org.joda.time.LocalDate localDate82 = property81.roundFloorCopy();
        org.joda.time.LocalDate localDate83 = property81.roundCeilingCopy();
        org.joda.time.LocalDate localDate84 = property81.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval87 = localDate84.toInterval(dateTimeZone86);
        mutableDateTime71.setZoneRetainFields(dateTimeZone86);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(dateTimeZone86);
        boolean boolean90 = mutableDateTime7.isEqual((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime69", (mutableDateTime7.compareTo(dateTime69) == 0) == mutableDateTime7.equals(dateTime69));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        boolean boolean21 = mutableDateTime19.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime19.setZone(dateTimeZone23);
        long long26 = dateTimeZone23.nextTransition((long) '4');
        java.lang.String str28 = dateTimeZone23.getShortName(35L);
        org.joda.time.DateTime dateTime29 = dateTime12.withZone(dateTimeZone23);
        int int31 = dateTimeZone23.getOffsetFromLocal(1969L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime29", (dateTime8.compareTo(dateTime29) == 0) == dateTime8.equals(dateTime29));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone23);
        int int25 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime11.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime11.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.addWrapField(25260000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and dateTime24", (mutableDateTime29.compareTo(dateTime24) == 0) == mutableDateTime29.equals(dateTime24));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int17 = mutableDateTime15.getRoundingMode();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime15.add(readablePeriod18);
        mutableDateTime15.addMillis(31);
        org.joda.time.Instant instant22 = mutableDateTime15.toInstant();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime15.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and instant22", (mutableDateTime15.compareTo(instant22) == 0) == mutableDateTime15.equals(instant22));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        long long17 = mutableDateTime1.getMillis();
        java.util.Date date18 = mutableDateTime1.toDate();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromDateFields(date18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime13 = property9.setCopy((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = property9.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField15 = property9.getField();
        org.joda.time.LocalDateTime localDateTime16 = property9.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        long long20 = property19.remainder();
        org.joda.time.MutableDateTime mutableDateTime22 = property19.set((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime22.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfCeiling();
        java.util.Locale locale27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = property24.set("1", locale27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        mutableDateTime28.setMillis(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime28.getZone();
        long long33 = dateTimeZone31.previousTransition(1644573073768L);
        org.joda.time.DateTime dateTime34 = localDateTime16.toDateTime(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime18", (dateTime7.compareTo(mutableDateTime18) == 0) == dateTime7.equals(mutableDateTime18));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.getMutableDateTime();
        org.joda.time.Chronology chronology5 = null;
        mutableDateTime4.setChronology(chronology5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.year();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.Chronology chronology11 = chronology9.withUTC();
        boolean boolean12 = mutableDateTime4.equals((java.lang.Object) chronology11);
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        boolean boolean19 = mutableDateTime17.isAfterNow();
        boolean boolean20 = mutableDateTime15.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime15.add(readableDuration21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime15.era();
        java.util.GregorianCalendar gregorianCalendar24 = mutableDateTime15.toGregorianCalendar();
        int int25 = mutableDateTime15.getYearOfCentury();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket37.saveField(dateTimeFieldType38, "1970-01-01T00:00:00.000Z", locale40);
        dateTimeParserBucket30.saveField(dateTimeFieldType31, "1970-01-01T00:00:00.000Z", locale40);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket47.saveField(dateTimeFieldType48, "1970-01-01T00:00:00.000Z", locale50);
        java.lang.String str52 = locale40.getDisplayCountry(locale50);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale50.getDisplayScript(locale53);
        java.util.Calendar calendar55 = mutableDateTime15.toCalendar(locale50);
        java.lang.String str56 = locale13.getDisplayScript(locale50);
        java.lang.String str57 = locale50.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(3578031174L, chronology11, locale50, (java.lang.Integer) (-292275054), 37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar24 and calendar55", (gregorianCalendar24.compareTo(calendar55) == 0) == gregorianCalendar24.equals(calendar55));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime34 = mutableDateTime1.toDateTimeISO();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        boolean boolean41 = localDate37.isEqual((org.joda.time.ReadablePartial) localDate40);
        int int42 = localDate40.getDayOfWeek();
        org.joda.time.LocalDate.Property property43 = localDate40.weekOfWeekyear();
        org.joda.time.LocalDate localDate44 = property43.roundFloorCopy();
        org.joda.time.LocalDate localDate45 = property43.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate47 = localDate45.plus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate49 = localDate45.minus(readablePeriod48);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfYear(100);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (short) 0, chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 0, chronology56);
        boolean boolean58 = localDate54.isEqual((org.joda.time.ReadablePartial) localDate57);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        org.joda.time.LocalDate.Property property63 = localDate57.property(dateTimeFieldType62);
        org.joda.time.LocalDate localDate65 = property63.addToCopy((int) (byte) 10);
        org.joda.time.LocalDate.Property property66 = localDate65.dayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localDate65.getFieldTypes();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) (short) 0, chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (short) 0, chronology72);
        boolean boolean74 = localDate70.isEqual((org.joda.time.ReadablePartial) localDate73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = localDate70.toDateTimeAtStartOfDay(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTime dateTime80 = dateTime76.plus(readableDuration79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = dateTime80.withChronology(chronology81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = dateTime80.withChronology(chronology83);
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime86.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property87.getFieldType();
        org.joda.time.DateTime.Property property89 = dateTime84.property(dateTimeFieldType88);
        org.joda.time.DateTime.Property property90 = dateTime84.minuteOfDay();
        long long91 = property90.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property90.getFieldType();
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType92.getRangeDurationType();
        boolean boolean94 = localDate65.isSupported(durationFieldType93);
        org.joda.time.LocalDate localDate96 = localDate51.withFieldAdded(durationFieldType93, 42);
        org.joda.time.DateTime dateTime98 = dateTime34.withFieldAdded(durationFieldType93, 174);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        java.util.GregorianCalendar gregorianCalendar15 = mutableDateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        boolean boolean22 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.plus(readableDuration27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withChronology(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withChronology(chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        org.joda.time.DateTime.Property property37 = dateTime32.property(dateTimeFieldType36);
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 0, chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        boolean boolean45 = localDate41.isEqual((org.joda.time.ReadablePartial) localDate44);
        int int46 = localDate44.getDayOfWeek();
        org.joda.time.LocalDate.Property property47 = localDate44.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval50 = localDate44.toInterval(dateTimeZone49);
        int[] intArray52 = new int[] { 'a' };
        int int53 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localDate44, intArray52);
        org.joda.time.Interval interval54 = localDate44.toInterval();
        java.util.Date date55 = localDate44.toDate();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (short) 0, chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 0, chronology60);
        boolean boolean62 = localDate58.isEqual((org.joda.time.ReadablePartial) localDate61);
        int int63 = localDate61.getDayOfWeek();
        org.joda.time.LocalDate.Property property64 = localDate61.weekOfWeekyear();
        org.joda.time.LocalDate localDate65 = property64.roundFloorCopy();
        org.joda.time.LocalDate localDate66 = property64.roundCeilingCopy();
        org.joda.time.LocalDate localDate67 = property64.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval70 = localDate67.toInterval(dateTimeZone69);
        int int71 = localDate44.compareTo((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.LocalDate localDate73 = localDate44.plusMonths(5);
        org.joda.time.Chronology chronology74 = localDate44.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology74);
        boolean boolean77 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime34", (instant10.compareTo(mutableDateTime34) == 0) == instant10.equals(mutableDateTime34));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        mutableDateTime3.add((long) 59);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime3.copy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        long long20 = dateTimeZone17.previousTransition(0L);
        org.joda.time.DateTime dateTime21 = localTime15.toDateTimeToday(dateTimeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.DateTime.Property property18 = dateTime12.centuryOfEra();
        org.joda.time.DateTime.Property property19 = dateTime12.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateTime dateTime23 = dateTime12.withFieldAdded(durationFieldType21, 6);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime12.minus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime12.plusMonths(1970);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 0);
        long long34 = dateTimeParserBucket32.computeMillis(true);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        boolean boolean41 = localDate37.isEqual((org.joda.time.ReadablePartial) localDate40);
        int int42 = localDate40.getDayOfWeek();
        org.joda.time.LocalDate.Property property43 = localDate40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval46 = localDate40.toInterval(dateTimeZone45);
        long long48 = dateTimeZone45.convertUTCToLocal((long) 0);
        dateTimeParserBucket32.setZone(dateTimeZone45);
        java.lang.String str51 = dateTimeZone45.getName((long) ' ');
        boolean boolean53 = dateTimeZone45.isStandardOffset((long) 6);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(dateTimeZone45);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 0, chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 0, chronology59);
        boolean boolean61 = localDate57.isEqual((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate57.toDateTimeAtStartOfDay(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime63.plus(readableDuration66);
        int int68 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime63);
        java.lang.String str70 = dateTimeZone45.getNameKey((long) (byte) 0);
        org.joda.time.DateTime dateTime71 = dateTime12.toDateTime(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime71", (dateTime8.compareTo(dateTime71) == 0) == dateTime8.equals(dateTime71));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 363);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withChronology(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withChronology(chronology17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DateTime.Property property23 = dateTime18.property(dateTimeFieldType22);
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        boolean boolean31 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate30);
        int int32 = localDate30.getDayOfWeek();
        org.joda.time.LocalDate.Property property33 = localDate30.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval36 = localDate30.toInterval(dateTimeZone35);
        int[] intArray38 = new int[] { 'a' };
        int int39 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDate30, intArray38);
        org.joda.time.Interval interval40 = localDate30.toInterval();
        java.util.Date date41 = localDate30.toDate();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        int int49 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate47.weekOfWeekyear();
        org.joda.time.LocalDate localDate51 = property50.roundFloorCopy();
        org.joda.time.LocalDate localDate52 = property50.roundCeilingCopy();
        org.joda.time.LocalDate localDate53 = property50.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval56 = localDate53.toInterval(dateTimeZone55);
        int int57 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate59 = localDate30.plusMonths(5);
        org.joda.time.Chronology chronology60 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.clockhourOfDay();
        org.joda.time.DateTime dateTime63 = dateTime1.toDateTime(chronology60);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) (short) 0, chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) (short) 0, chronology68);
        boolean boolean70 = localDate66.isEqual((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = localDate66.toDateTimeAtStartOfDay(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) (short) 0, chronology76);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) (short) 0, chronology79);
        boolean boolean81 = localDate77.isEqual((org.joda.time.ReadablePartial) localDate80);
        int int82 = localDate80.getDayOfWeek();
        org.joda.time.LocalDate.Property property83 = localDate80.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval86 = localDate80.toInterval(dateTimeZone85);
        org.joda.time.DateTime dateTime87 = dateTime74.toDateTime(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime63.toDateTime(dateTimeZone85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime87", (dateTime12.compareTo(dateTime87) == 0) == dateTime12.equals(dateTime87));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusWeeks(69);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = mutableDateTime16.toString(dateTimeFormatter17);
        mutableDateTime16.addMonths((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        boolean boolean25 = mutableDateTime23.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime23.setZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(6048000000L, dateTimeZone27);
        mutableDateTime16.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        boolean boolean37 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate36);
        int int38 = localDate36.getDayOfWeek();
        org.joda.time.LocalDate.Property property39 = localDate36.weekOfWeekyear();
        org.joda.time.LocalDate localDate40 = property39.roundFloorCopy();
        org.joda.time.LocalDate localDate41 = property39.roundCeilingCopy();
        org.joda.time.LocalDate localDate42 = property39.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval45 = localDate42.toInterval(dateTimeZone44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        boolean boolean52 = localDate48.isEqual((org.joda.time.ReadablePartial) localDate51);
        int int53 = localDate51.getDayOfWeek();
        org.joda.time.LocalDate.Property property54 = localDate51.weekOfWeekyear();
        org.joda.time.LocalDate localDate55 = property54.roundFloorCopy();
        org.joda.time.LocalDate localDate56 = property54.roundCeilingCopy();
        org.joda.time.LocalDate localDate57 = property54.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval60 = localDate57.toInterval(dateTimeZone59);
        org.joda.time.LocalDate.Property property61 = localDate57.dayOfMonth();
        org.joda.time.LocalDate.Property property62 = localDate57.yearOfEra();
        org.joda.time.LocalDate localDate64 = property62.addToCopy(2);
        org.joda.time.LocalDate localDate66 = localDate64.withYear(14);
        org.joda.time.DateMidnight dateMidnight67 = localDate64.toDateMidnight();
        int int68 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateMidnight67);
        mutableDateTime16.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime70 = dateTime14.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (short) 0, chronology72);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) (short) 0, chronology75);
        boolean boolean77 = localDate73.isEqual((org.joda.time.ReadablePartial) localDate76);
        int int78 = localDate76.getDayOfWeek();
        org.joda.time.LocalDate.Property property79 = localDate76.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property79.getFieldType();
        org.joda.time.LocalDate localDate81 = property79.withMinimumValue();
        org.joda.time.LocalDate localDate83 = property79.addWrapFieldToCopy(0);
        boolean boolean84 = dateTimeZone44.equals((java.lang.Object) localDate83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime70", (dateTime14.compareTo(dateTime70) == 0) == dateTime14.equals(dateTime70));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add((-292275054));
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime39.getZone();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone40);
        long long42 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime29", (mutableDateTime8.compareTo(mutableDateTime29) == 0) == mutableDateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        dateTimeParserBucket18.saveField(dateTimeFieldType19, "1970-01-01T00:00:00.000Z", locale28);
        mutableDateTime1.set(dateTimeFieldType19, (int) ' ');
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime1.millisOfSecond();
        int int35 = mutableDateTime1.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int40 = dateTimeZone38.getOffset((long) '4');
        long long43 = dateTimeZone38.adjustOffset(100L, false);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime1.toMutableDateTime(dateTimeZone38);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime44", (mutableDateTime1.compareTo(mutableDateTime44) == 0) == mutableDateTime1.equals(mutableDateTime44));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval22 = localDate16.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime10.minusHours(771);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillis(3121273L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime23", (dateTime10.compareTo(dateTime23) == 0) == dateTime10.equals(dateTime23));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        int int2 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime1.setChronology(chronology3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        mutableDateTime1.set(dateTimeFieldType8, (int) '4');
        org.joda.time.DateTimeField dateTimeField11 = mutableDateTime1.getRoundingField();
        mutableDateTime1.setMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfHalfday();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket23.saveField(dateTimeFieldType24, "1970-01-01T00:00:00.000Z", locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology17, locale26);
        org.joda.time.DateTimeField dateTimeField29 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology17.halfdayOfDay();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 1970, chronology17);
        org.joda.time.DurationField durationField35 = chronology17.weekyears();
        org.joda.time.DateTime dateTime36 = mutableDateTime1.toDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField37 = chronology17.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime36", (mutableDateTime1.compareTo(dateTime36) == 0) == mutableDateTime1.equals(dateTime36));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket28.saveField(dateTimeFieldType29, "1970-01-01T00:00:00.000Z", locale31);
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale31);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket38.saveField(dateTimeFieldType39, "1970-01-01T00:00:00.000Z", locale41);
        java.lang.String str43 = locale31.getDisplayCountry(locale41);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket55.saveField(dateTimeFieldType56, "1970-01-01T00:00:00.000Z", locale58);
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale58);
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale63, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket65.saveField(dateTimeFieldType66, "1970-01-01T00:00:00.000Z", locale68);
        java.lang.String str70 = locale58.getDisplayCountry(locale68);
        java.lang.String str71 = locale41.getDisplayVariant(locale58);
        java.lang.String str72 = dateTimeZone15.getName((long) 'x', locale41);
        org.joda.time.Interval interval73 = localDate9.toInterval(dateTimeZone15);
        long long75 = dateTimeZone15.previousTransition((long) 69);
        mutableDateTime3.setZone(dateTimeZone15);
        org.joda.time.LocalTime localTime77 = org.joda.time.LocalTime.now(dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundHalfEven();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 0);
        long long12 = dateTimeParserBucket10.computeMillis(true);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        boolean boolean19 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getDayOfWeek();
        org.joda.time.LocalDate.Property property21 = localDate18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval24 = localDate18.toInterval(dateTimeZone23);
        long long26 = dateTimeZone23.convertUTCToLocal((long) 0);
        dateTimeParserBucket10.setZone(dateTimeZone23);
        long long30 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime4.toMutableDateTime(dateTimeZone23);
        int int32 = mutableDateTime4.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime31", (mutableDateTime4.compareTo(mutableDateTime31) == 0) == mutableDateTime4.equals(mutableDateTime31));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.weekOfWeekyear();
        boolean boolean15 = dateTimeZone1.equals((java.lang.Object) property14);
        org.joda.time.DateTime dateTime16 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime17 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime19 = property14.addWrapFieldToCopy(35449917);
        org.joda.time.DateTime dateTime20 = property14.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfYear();
        boolean boolean26 = mutableDateTime24.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime24.setZone(dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime24.add(readablePeriod30, 4);
        mutableDateTime24.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime24.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = mutableDateTime24.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks(771);
        int int40 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime20.minusSeconds(15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime24 and dateTime37", (mutableDateTime24.compareTo(dateTime37) == 0) == mutableDateTime24.equals(dateTime37));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate5.plus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate9.withCenturyOfEra((int) 'a');
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfSecond(100);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        boolean boolean27 = mutableDateTime25.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime25.setZone(dateTimeZone29);
        long long32 = dateTimeZone29.nextTransition((long) '4');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone29);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime33.minus((long) (short) 10);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears(0);
        org.joda.time.LocalDate localDate39 = dateTime36.toLocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        org.joda.time.Chronology chronology45 = null;
        mutableDateTime44.setChronology(chronology45);
        mutableDateTime44.addDays(0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.getMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutableDateTime50.add(readablePeriod51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 0, chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (short) 0, chronology57);
        boolean boolean59 = localDate55.isEqual((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime61.plus(readableDuration64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.withChronology(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.withChronology(chronology68);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property72.getFieldType();
        org.joda.time.DateTime.Property property74 = dateTime69.property(dateTimeFieldType73);
        org.joda.time.DateTimeField dateTimeField75 = property74.getField();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) (short) 0, chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) (short) 0, chronology80);
        boolean boolean82 = localDate78.isEqual((org.joda.time.ReadablePartial) localDate81);
        int int83 = localDate81.getDayOfWeek();
        org.joda.time.LocalDate.Property property84 = localDate81.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval87 = localDate81.toInterval(dateTimeZone86);
        int[] intArray89 = new int[] { 'a' };
        int int90 = dateTimeField75.getMaximumValue((org.joda.time.ReadablePartial) localDate81, intArray89);
        org.joda.time.Interval interval91 = localDate81.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = localDate81.getFieldType(2);
        java.lang.String str94 = dateTimeFieldType93.toString();
        boolean boolean95 = mutableDateTime50.isSupported(dateTimeFieldType93);
        int int96 = localDate39.get(dateTimeFieldType93);
        mutableDateTime15.set(dateTimeFieldType93, 27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and mutableDateTime42", (mutableDateTime25.compareTo(mutableDateTime42) == 0) == mutableDateTime25.equals(mutableDateTime42));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime12.toYearMonthDay();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        boolean boolean19 = mutableDateTime17.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime17.setZone(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime17.add(readablePeriod23, 4);
        mutableDateTime17.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = property30.getMutableDateTime();
        int int32 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        int int33 = mutableDateTime31.getRoundingMode();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableDateTime31.add(readablePeriod34);
        mutableDateTime31.addMillis(31);
        org.joda.time.Instant instant38 = mutableDateTime31.toInstant();
        boolean boolean39 = dateTime12.isEqual((org.joda.time.ReadableInstant) instant38);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime12.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and instant38", (mutableDateTime29.compareTo(instant38) == 0) == mutableDateTime29.equals(instant38));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField35 = chronology19.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutableDateTime1.add(readablePeriod33, 35449917);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime1.property(dateTimeFieldType36);
        int int38 = property37.getMinimumValueOverall();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        boolean boolean4 = property3.isLeap();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.addWrapField(35449917);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        boolean boolean13 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        int int21 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate.Property property22 = localDate19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval25 = localDate19.toInterval(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime10.toMutableDateTime(dateTimeZone24);
        mutableDateTime10.add((long) 59);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableDateTime10.add(readablePeriod29, 1970);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutableDateTime6.add(readablePeriod33, 35563161);
        mutableDateTime6.setMillisOfDay(235);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime26", (mutableDateTime8.compareTo(mutableDateTime26) == 0) == mutableDateTime8.equals(mutableDateTime26));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        boolean boolean25 = mutableDateTime20.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int33 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval37 = localDate31.toInterval(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime22.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfYear();
        boolean boolean42 = mutableDateTime40.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime40.setZone(dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutableDateTime40.add(readablePeriod46, 4);
        org.joda.time.Instant instant49 = mutableDateTime40.toInstant();
        int int50 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) instant49);
        org.joda.time.DateMidnight dateMidnight51 = localDate17.toDateMidnight(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime20", (mutableDateTime8.compareTo(mutableDateTime20) == 0) == mutableDateTime8.equals(mutableDateTime20));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime13.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withChronology(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withChronology(chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.DateTime.Property property39 = dateTime34.property(dateTimeFieldType38);
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        boolean boolean47 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate46);
        int int48 = localDate46.getDayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval52 = localDate46.toInterval(dateTimeZone51);
        int[] intArray54 = new int[] { 'a' };
        int int55 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localDate46, intArray54);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket61.saveField(dateTimeFieldType62, "1970-01-01T00:00:00.000Z", locale64);
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str67 = localDate46.toString("1", locale64);
        org.joda.time.LocalDate localDate69 = localDate46.withMonthOfYear(5);
        org.joda.time.Chronology chronology70 = localDate69.getChronology();
        org.joda.time.Chronology chronology71 = chronology70.withUTC();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.minuteOfDay();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = chronology71.add(readablePeriod74, (long) 'a', 292278993);
        org.joda.time.DateTime dateTime78 = dateTime13.toDateTime(chronology71);
        org.joda.time.DurationField durationField79 = chronology71.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime78", (dateTime8.compareTo(dateTime78) == 0) == dateTime8.equals(dateTime78));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 771);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay(dateTimeZone9);
        int int11 = localDate4.getWeekyear();
        org.joda.time.Chronology chronology12 = localDate4.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTime dateTime14 = dateTime1.toDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime14", (dateTime1.compareTo(dateTime14) == 0) == dateTime1.equals(dateTime14));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        long long14 = dateTimeZone11.nextTransition((long) '4');
        java.lang.String str16 = dateTimeZone11.getShortName(35L);
        boolean boolean17 = dateTimeZone11.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withPivotYear(200);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket32.saveField(dateTimeFieldType33, "1970-01-01T00:00:00.000Z", locale35);
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale35);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket25.getZone();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime41.getZone();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime41.add(readableDuration43, 3);
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime41.getZone();
        org.joda.time.DateTime dateTime47 = localDateTime39.toDateTime(dateTimeZone46);
        long long51 = dateTimeZone46.convertLocalToUTC((long) 0, false, 0L);
        long long53 = dateTimeZone46.convertUTCToLocal(6048000000L);
        java.util.Locale locale58 = new java.util.Locale("dayOfYear", "TW", "");
        java.lang.String str59 = dateTimeZone46.getName(3577986998L, locale58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter2.withZone(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime41", (mutableDateTime7.compareTo(mutableDateTime41) == 0) == mutableDateTime7.equals(mutableDateTime41));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime40 = property37.addWrapField(4);
        java.lang.String str41 = mutableDateTime40.toString();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime40.millisOfDay();
        mutableDateTime40.setYear(28);
        mutableDateTime40.addMinutes(32);
        boolean boolean47 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime25.addMillis(58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime29", (mutableDateTime8.compareTo(mutableDateTime29) == 0) == mutableDateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone13);
        boolean boolean16 = dateTimeZone13.isStandardOffset((-36L));
        int int18 = dateTimeZone13.getOffset((long) 1991);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        long long17 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        boolean boolean24 = localTime19.isSupported(dateTimeFieldType23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.property(dateTimeFieldType23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        org.joda.time.LocalDateTime localDateTime32 = property30.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear(11);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withPeriodAdded(readablePeriod37, 69);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withDayOfYear(46);
        int int42 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        long long24 = dateTimeZone20.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.plus(887172685974L);
        org.joda.time.DateTime dateTime29 = dateTime27.minusYears(6813);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        long long4 = property3.remainder();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.set((int) (short) 1);
        mutableDateTime6.addHours((int) (byte) 1);
        mutableDateTime6.setMillis(11550157878993L);
        mutableDateTime6.setWeekyear(3600000);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '4', chronology23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plus(readableDuration31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.era();
        long long35 = chronology23.set((org.joda.time.ReadablePartial) localDateTime32, (long) 22);
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket58.saveField(dateTimeFieldType59, "1970-01-01T00:00:00.000Z", locale61);
        java.lang.String str63 = locale51.getDisplayCountry(locale61);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(0L, chronology72, locale73, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket75.saveField(dateTimeFieldType76, "1970-01-01T00:00:00.000Z", locale78);
        dateTimeParserBucket68.saveField(dateTimeFieldType69, "1970-01-01T00:00:00.000Z", locale78);
        org.joda.time.Chronology chronology82 = null;
        java.util.Locale locale83 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket(0L, chronology82, locale83, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale88 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket85.saveField(dateTimeFieldType86, "1970-01-01T00:00:00.000Z", locale88);
        java.lang.String str90 = locale78.getDisplayCountry(locale88);
        java.lang.String str91 = locale61.getDisplayVariant(locale78);
        java.util.Locale.setDefault(category36, locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket94 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale61, (java.lang.Integer) 7);
        org.joda.time.DurationField durationField95 = chronology23.hours();
        org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime6, chronology23);
        org.joda.time.DateTime dateTime97 = new org.joda.time.DateTime(3577988416L, chronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime96", (mutableDateTime2.compareTo(mutableDateTime96) == 0) == mutableDateTime2.equals(mutableDateTime96));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        boolean boolean15 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate11.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withChronology(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withChronology(chronology24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        org.joda.time.DateTime.Property property30 = dateTime25.property(dateTimeFieldType29);
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        boolean boolean38 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate37);
        int int39 = localDate37.getDayOfWeek();
        org.joda.time.LocalDate.Property property40 = localDate37.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval43 = localDate37.toInterval(dateTimeZone42);
        int[] intArray45 = new int[] { 'a' };
        int int46 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) localDate37, intArray45);
        org.joda.time.Interval interval47 = localDate37.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDate37.getFieldType(2);
        org.joda.time.LocalDate.Property property50 = localDate37.weekyear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (short) 0, chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        boolean boolean57 = localDate53.isEqual((org.joda.time.ReadablePartial) localDate56);
        int int58 = localDate56.getDayOfWeek();
        org.joda.time.LocalDate.Property property59 = localDate56.weekOfWeekyear();
        org.joda.time.LocalDate localDate60 = property59.roundFloorCopy();
        org.joda.time.LocalDate localDate61 = property59.roundCeilingCopy();
        org.joda.time.LocalDate localDate62 = property59.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval65 = localDate62.toInterval(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = localDate37.toDateTimeAtStartOfDay(dateTimeZone64);
        boolean boolean68 = dateTimeZone64.isStandardOffset(1644573061055L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 17, dateTimeZone64);
        int int72 = dateTimeZone64.getStandardOffset(233939762L);
        mutableDateTime1.setZone(dateTimeZone64);
        java.lang.String str75 = dateTimeZone64.getNameKey((long) (short) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime27", (mutableDateTime1.compareTo(mutableDateTime27) == 0) == mutableDateTime1.equals(mutableDateTime27));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        mutableDateTime1.setMillis((long) (-1));
        mutableDateTime1.setMillis(1644573073768L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds(1);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime.Property property26 = dateTime24.monthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property28 = dateTime24.weekyear();
        org.joda.time.DateTime.Property property29 = dateTime24.weekOfWeekyear();
        org.joda.time.DateTime dateTime30 = property29.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime24", (mutableDateTime1.compareTo(dateTime24) == 0) == mutableDateTime1.equals(dateTime24));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.DateTime dateTime15 = dateTime8.withDurationAdded((long) 2100000, 100);
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours(365);
        org.joda.time.DateTime dateTime19 = dateTime15.minusSeconds((int) (short) 1);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        long long26 = dateTimeParserBucket24.computeMillis(true);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        boolean boolean33 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate32);
        int int34 = localDate32.getDayOfWeek();
        org.joda.time.LocalDate.Property property35 = localDate32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval38 = localDate32.toInterval(dateTimeZone37);
        long long40 = dateTimeZone37.convertUTCToLocal((long) 0);
        dateTimeParserBucket24.setZone(dateTimeZone37);
        java.lang.String str43 = dateTimeZone37.getName((long) ' ');
        boolean boolean45 = dateTimeZone37.isStandardOffset((long) 6);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime19.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.weekyear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 0, chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (short) 0, chronology52);
        boolean boolean54 = localDate50.isEqual((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime59 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime.Property property60 = dateTime59.hourOfDay();
        org.joda.time.DateTime dateTime62 = dateTime59.minusSeconds(0);
        org.joda.time.DateTime dateTime64 = dateTime62.plusDays(1);
        org.joda.time.DateTime.Property property65 = dateTime64.millisOfSecond();
        org.joda.time.DateTime dateTime67 = property65.setCopy((int) '#');
        org.joda.time.DateTime dateTime70 = dateTime67.withDurationAdded((long) 3600000, (int) (byte) 10);
        long long71 = property47.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and mutableDateTime46", (dateTime19.compareTo(mutableDateTime46) == 0) == dateTime19.equals(mutableDateTime46));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.DateTime.Property property18 = dateTime12.centuryOfEra();
        org.joda.time.DateTime.Property property19 = dateTime12.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateTime dateTime23 = dateTime12.withFieldAdded(durationFieldType21, 6);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime12.minus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime12.plusMonths(1970);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 0);
        long long34 = dateTimeParserBucket32.computeMillis(true);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        boolean boolean41 = localDate37.isEqual((org.joda.time.ReadablePartial) localDate40);
        int int42 = localDate40.getDayOfWeek();
        org.joda.time.LocalDate.Property property43 = localDate40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval46 = localDate40.toInterval(dateTimeZone45);
        long long48 = dateTimeZone45.convertUTCToLocal((long) 0);
        dateTimeParserBucket32.setZone(dateTimeZone45);
        java.lang.String str51 = dateTimeZone45.getName((long) ' ');
        boolean boolean53 = dateTimeZone45.isStandardOffset((long) 6);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(dateTimeZone45);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 0, chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 0, chronology59);
        boolean boolean61 = localDate57.isEqual((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate57.toDateTimeAtStartOfDay(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime63.plus(readableDuration66);
        int int68 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime63);
        java.lang.String str70 = dateTimeZone45.getNameKey((long) (byte) 0);
        org.joda.time.DateTime dateTime71 = dateTime12.toDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime71", (dateTime8.compareTo(dateTime71) == 0) == dateTime8.equals(dateTime71));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addWeeks(2);
        int int3 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        boolean boolean21 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate20);
        int int22 = localDate20.getDayOfWeek();
        org.joda.time.LocalDate.Property property23 = localDate20.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval26 = localDate20.toInterval(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime14.toDateTime(dateTimeZone25);
        boolean boolean28 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) dateTime27);
        mutableDateTime0.addHours(35536114);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime27", (dateTime14.compareTo(dateTime27) == 0) == dateTime14.equals(dateTime27));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 10, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.monthOfYear();
        java.lang.String str24 = dateTimeField22.getAsText((long) 35449917);
        long long27 = dateTimeField22.add((long) '4', 2000);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket37.saveField(dateTimeFieldType38, "1970-01-01T00:00:00.000Z", locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology31, locale40);
        java.lang.String str43 = locale40.getISO3Country();
        java.lang.String str44 = locale40.getVariant();
        java.lang.String str45 = dateTimeField22.getAsShortText((long) 32, locale40);
        java.util.Calendar calendar46 = mutableDateTime15.toCalendar(locale40);
        java.util.Locale locale47 = locale40.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        mutableDateTime1.addMonths(9);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        boolean boolean11 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket26.saveField(dateTimeFieldType27, "1970-01-01T00:00:00.000Z", locale29);
        dateTimeParserBucket19.saveField(dateTimeFieldType20, "1970-01-01T00:00:00.000Z", locale29);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "1970-01-01T00:00:00.000Z", locale39);
        java.lang.String str41 = locale29.getDisplayCountry(locale39);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket53.saveField(dateTimeFieldType54, "1970-01-01T00:00:00.000Z", locale56);
        dateTimeParserBucket46.saveField(dateTimeFieldType47, "1970-01-01T00:00:00.000Z", locale56);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket63.saveField(dateTimeFieldType64, "1970-01-01T00:00:00.000Z", locale66);
        java.lang.String str68 = locale56.getDisplayCountry(locale66);
        java.lang.String str69 = locale39.getDisplayVariant(locale56);
        java.lang.String str70 = dateTimeZone13.getName((long) 'x', locale39);
        org.joda.time.Interval interval71 = localDate7.toInterval(dateTimeZone13);
        int int73 = dateTimeZone13.getOffsetFromLocal((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime75 = mutableDateTime1.toDateTime(dateTimeZone13);
        java.util.TimeZone timeZone76 = dateTimeZone13.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime75", (mutableDateTime1.compareTo(dateTime75) == 0) == mutableDateTime1.equals(dateTime75));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        org.joda.time.DateTimeField dateTimeField14 = chronology2.millisOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology2);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        java.lang.String str30 = chronology18.toString();
        org.joda.time.DurationField durationField31 = chronology18.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology18);
        int[] intArray34 = chronology2.get((org.joda.time.ReadablePartial) localTime32, (long) 35449917);
        org.joda.time.DateTimeField dateTimeField35 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField37 = chronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField31, durationField37, and durationField31", !(durationField31.compareTo(durationField37) == 0) || (Math.signum(durationField31.compareTo(durationField31)) == Math.signum(durationField37.compareTo(durationField31))));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime12.toYearMonthDay();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        boolean boolean19 = mutableDateTime17.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime17.setZone(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime17.add(readablePeriod23, 4);
        mutableDateTime17.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = property30.getMutableDateTime();
        int int32 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        int int33 = mutableDateTime31.getRoundingMode();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableDateTime31.add(readablePeriod34);
        mutableDateTime31.addMillis(31);
        org.joda.time.Instant instant38 = mutableDateTime31.toInstant();
        boolean boolean39 = dateTime12.isEqual((org.joda.time.ReadableInstant) instant38);
        long long40 = dateTime12.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and instant38", (mutableDateTime29.compareTo(instant38) == 0) == mutableDateTime29.equals(instant38));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        long long3 = property2.remainder();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime5.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 100);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime11.setZoneRetainFields(dateTimeZone14);
        mutableDateTime11.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        mutableDateTime11.setZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime11.setMillis((org.joda.time.ReadableInstant) mutableDateTime25);
        long long27 = mutableDateTime11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plus(readableDuration33);
        org.joda.time.DateTime dateTime35 = localDateTime30.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) (byte) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis(0);
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) dateTime37);
        int int41 = mutableDateTime11.getDayOfWeek();
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime11.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime25", (mutableDateTime6.compareTo(mutableDateTime25) == 0) == mutableDateTime6.equals(mutableDateTime25));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime40 = property37.addWrapField(4);
        java.lang.String str41 = mutableDateTime40.toString();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime40.millisOfDay();
        mutableDateTime40.setYear(28);
        mutableDateTime40.addMinutes(32);
        boolean boolean47 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        int int48 = mutableDateTime40.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime29", (mutableDateTime8.compareTo(mutableDateTime29) == 0) == mutableDateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone23);
        int int25 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str26 = property4.getAsText();
        boolean boolean27 = property4.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime24", (mutableDateTime11.compareTo(dateTime24) == 0) == mutableDateTime11.equals(dateTime24));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        int int21 = mutableDateTime20.getEra();
        org.joda.time.Chronology chronology22 = null;
        mutableDateTime20.setChronology(chronology22);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        mutableDateTime20.set(dateTimeFieldType27, (int) '4');
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket38.saveField(dateTimeFieldType39, "1970-01-01T00:00:00.000Z", locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology32, locale41);
        java.lang.String str44 = chronology32.toString();
        org.joda.time.DurationField durationField45 = chronology32.eras();
        boolean boolean46 = dateTimeFieldType27.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField47 = chronology32.clockhourOfHalfday();
        int int48 = mutableDateTime18.get(dateTimeField47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime25", (mutableDateTime8.compareTo(mutableDateTime25) == 0) == mutableDateTime8.equals(mutableDateTime25));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        java.lang.String str19 = dateTimeZone18.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant17", (dateTime8.compareTo(instant17) == 0) == dateTime8.equals(instant17));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Chronology chronology4 = null;
        mutableDateTime3.setChronology(chronology4);
        mutableDateTime3.addDays(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime3.add(readablePeriod8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime3.yearOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.secondOfDay();
        org.joda.time.DateTime dateTime12 = mutableDateTime3.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(600);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfHalfday();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket23.saveField(dateTimeFieldType24, "1970-01-01T00:00:00.000Z", locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology17, locale26);
        org.joda.time.DateTimeField dateTimeField29 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology17.weekyear();
        org.joda.time.Chronology chronology32 = chronology17.withUTC();
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.getMutableDateTime();
        org.joda.time.Chronology chronology38 = null;
        mutableDateTime37.setChronology(chronology38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.year();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.joda.time.Chronology chronology44 = chronology42.withUTC();
        boolean boolean45 = mutableDateTime37.equals((java.lang.Object) chronology44);
        org.joda.time.DateTime dateTime46 = dateTime33.toDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime33", (mutableDateTime1.compareTo(dateTime33) == 0) == mutableDateTime1.equals(dateTime33));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale24);
        dateTimeParserBucket14.saveField(dateTimeFieldType15, "1970-01-01T00:00:00.000Z", locale24);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket31.saveField(dateTimeFieldType32, "1970-01-01T00:00:00.000Z", locale34);
        java.lang.String str36 = locale24.getDisplayCountry(locale34);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket58.saveField(dateTimeFieldType59, "1970-01-01T00:00:00.000Z", locale61);
        java.lang.String str63 = locale51.getDisplayCountry(locale61);
        java.lang.String str64 = locale34.getDisplayVariant(locale51);
        java.lang.String str65 = locale51.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology9, locale51);
        org.joda.time.Chronology chronology67 = chronology9.withUTC();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DateTime.Property property69 = dateTime68.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime68.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime72 = dateTime68.minusSeconds(601000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime70", (dateTime8.compareTo(mutableDateTime70) == 0) == dateTime8.equals(mutableDateTime70));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        long long27 = dateTimeZone12.adjustOffset(3940L, true);
        java.lang.String str28 = dateTimeZone12.toString();
        java.util.TimeZone timeZone29 = dateTimeZone12.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        boolean boolean34 = mutableDateTime32.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime32.setZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(6048000000L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone36);
        java.util.Locale locale42 = new java.util.Locale("FR");
        java.lang.String str43 = dateTimeZone36.getName((-259200000L), locale42);
        boolean boolean44 = dateTimeZone12.equals((java.lang.Object) (-259200000L));
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfYear();
        boolean boolean48 = mutableDateTime46.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime46.setZone(dateTimeZone50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableDateTime46.add(readablePeriod52, 4);
        mutableDateTime46.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.getMutableDateTime();
        int int61 = mutableDateTime46.compareTo((org.joda.time.ReadableInstant) mutableDateTime60);
        mutableDateTime46.addMillis(2);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) (short) 0, chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) (short) 0, chronology68);
        boolean boolean70 = localDate66.isEqual((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = localDate66.toDateTimeAtStartOfDay(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime72.plus(readableDuration75);
        boolean boolean78 = dateTime72.equals((java.lang.Object) 1L);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime81 = dateTime72.withPeriodAdded(readablePeriod79, (-1));
        boolean boolean82 = mutableDateTime46.isEqual((org.joda.time.ReadableInstant) dateTime72);
        mutableDateTime46.setTime(100L);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime46.monthOfYear();
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime46.dayOfYear();
        int int87 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) mutableDateTime46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime58", (mutableDateTime8.compareTo(mutableDateTime58) == 0) == mutableDateTime8.equals(mutableDateTime58));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add((-292275054));
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime29", (mutableDateTime8.compareTo(mutableDateTime29) == 0) == mutableDateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = mutableDateTime1.toString(dateTimeFormatter2);
        long long4 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.Chronology chronology9 = null;
        mutableDateTime8.setChronology(chronology9);
        mutableDateTime8.addDays(0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime8.add(readablePeriod13);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        int int22 = dateTimeField20.getMaximumTextLength(locale21);
        int int24 = dateTimeField20.get((long) 6);
        boolean boolean25 = dateTimeField20.isSupported();
        mutableDateTime1.setRounding(dateTimeField20, 3);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        boolean boolean34 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate33);
        int int35 = localDate33.getDayOfWeek();
        org.joda.time.LocalDate.Property property36 = localDate33.weekOfWeekyear();
        org.joda.time.LocalDate localDate37 = property36.roundFloorCopy();
        int int38 = localDate37.size();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate40 = localDate37.minus(readablePeriod39);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        boolean boolean44 = mutableDateTime42.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime42.setZone(dateTimeZone46);
        long long49 = dateTimeZone46.nextTransition((long) '4');
        org.joda.time.DateTime dateTime50 = localDate40.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = mutableDateTime1.toDateTime(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime42", (mutableDateTime6.compareTo(mutableDateTime42) == 0) == mutableDateTime6.equals(mutableDateTime42));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        boolean boolean22 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate21);
        int int23 = localDate21.getDayOfWeek();
        org.joda.time.LocalDate.Property property24 = localDate21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval27 = localDate21.toInterval(dateTimeZone26);
        long long29 = dateTimeZone26.convertUTCToLocal((long) 0);
        mutableDateTime15.setZone(dateTimeZone26);
        mutableDateTime1.setZone(dateTimeZone26);
        java.lang.String str32 = dateTimeZone26.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime11", (mutableDateTime1.compareTo(dateTime11) == 0) == mutableDateTime1.equals(dateTime11));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and instant10", (mutableDateTime14.compareTo(instant10) == 0) == mutableDateTime14.equals(instant10));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.DateTime.Property property18 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfSecond(31);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        boolean boolean28 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate24.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.plus(readableDuration33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withChronology(chronology35);
        boolean boolean37 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfYear();
        boolean boolean42 = mutableDateTime40.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime40.setZoneRetainFields(dateTimeZone43);
        mutableDateTime40.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int51 = dateTimeZone49.getOffset((long) '4');
        mutableDateTime40.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime40.setMillis((org.joda.time.ReadableInstant) mutableDateTime54);
        long long56 = mutableDateTime40.getMillis();
        boolean boolean57 = dateTime19.isAfter((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Chronology chronology58 = dateTime19.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime40 and mutableDateTime54", (mutableDateTime40.compareTo(mutableDateTime54) == 0) == mutableDateTime40.equals(mutableDateTime54));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime20.withPeriodAdded(readablePeriod21, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        boolean boolean28 = localTime23.isSupported(dateTimeFieldType27);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime32 = localTime29.withPeriodAdded(readablePeriod30, (int) (short) 0);
        org.joda.time.LocalTime.Property property33 = localTime29.secondOfMinute();
        org.joda.time.LocalTime localTime34 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime35 = property33.getLocalTime();
        org.joda.time.LocalTime localTime36 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime37 = property33.roundHalfCeilingCopy();
        int int38 = localTime23.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.LocalTime.Property property39 = localTime23.millisOfDay();
        org.joda.time.LocalTime localTime40 = property39.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime41 = property39.getLocalTime();
        org.joda.time.LocalTime localTime43 = property39.addWrapFieldToCopy((-292275054));
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalTime localTime47 = localTime44.withPeriodAdded(readablePeriod45, (int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalTime localTime50 = localTime44.withPeriodAdded(readablePeriod48, 366);
        org.joda.time.LocalTime localTime52 = localTime50.plusMillis(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfHalfday();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket63.saveField(dateTimeFieldType64, "1970-01-01T00:00:00.000Z", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology57, locale66);
        java.lang.String str69 = chronology57.toString();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField71 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology57.yearOfCentury();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 69, chronology57);
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType53.getField(chronology57);
        boolean boolean75 = localTime52.isSupported(dateTimeFieldType53);
        boolean boolean76 = localTime43.isSupported(dateTimeFieldType53);
        int int77 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.Chronology chronology78 = localTime43.getChronology();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalTime localTime80 = localTime43.minus(readablePeriod79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime25", (mutableDateTime8.compareTo(mutableDateTime25) == 0) == mutableDateTime8.equals(mutableDateTime25));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone19);
        int int23 = dateTimeZone19.getOffsetFromLocal((long) ' ');
        java.lang.String str24 = dateTimeZone19.toString();
        int int26 = dateTimeZone19.getOffset((long) 2000);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone19);
        mutableDateTime1.setZone(dateTimeZone19);
        long long30 = dateTimeZone19.convertUTCToLocal((long) 35473);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime10", (dateTime7.compareTo(dateTime10) == 0) == dateTime7.equals(dateTime10));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        mutableDateTime1.addWeekyears(69);
        mutableDateTime1.setSecondOfDay(3);
        mutableDateTime1.setDayOfYear((int) (byte) 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.plus(readableDuration30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withChronology(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.DateTime.Property property40 = dateTime35.property(dateTimeFieldType39);
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        int int49 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate47.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval53 = localDate47.toInterval(dateTimeZone52);
        int[] intArray55 = new int[] { 'a' };
        int int56 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localDate47, intArray55);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket62.saveField(dateTimeFieldType63, "1970-01-01T00:00:00.000Z", locale65);
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str68 = localDate47.toString("1", locale65);
        org.joda.time.LocalDate localDate70 = localDate47.withMonthOfYear(5);
        org.joda.time.Chronology chronology71 = localDate70.getChronology();
        org.joda.time.Chronology chronology72 = chronology71.withUTC();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.era();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.halfdayOfDay();
        long long77 = dateTimeField75.roundHalfFloor(1644573199621L);
        int int78 = mutableDateTime1.get(dateTimeField75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime37", (instant10.compareTo(mutableDateTime37) == 0) == instant10.equals(mutableDateTime37));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        mutableDateTime1.setMillis((long) 35);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime7.add(readablePeriod13, 4);
        org.joda.time.Instant instant16 = mutableDateTime7.toInstant();
        boolean boolean18 = mutableDateTime7.isAfter((long) (byte) 1);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime7.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant16", (mutableDateTime1.compareTo(instant16) == 0) == mutableDateTime1.equals(instant16));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusWeeks(69);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = mutableDateTime16.toString(dateTimeFormatter17);
        mutableDateTime16.addMonths((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        boolean boolean25 = mutableDateTime23.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime23.setZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(6048000000L, dateTimeZone27);
        mutableDateTime16.setZone(dateTimeZone27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        boolean boolean37 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate36);
        int int38 = localDate36.getDayOfWeek();
        org.joda.time.LocalDate.Property property39 = localDate36.weekOfWeekyear();
        org.joda.time.LocalDate localDate40 = property39.roundFloorCopy();
        org.joda.time.LocalDate localDate41 = property39.roundCeilingCopy();
        org.joda.time.LocalDate localDate42 = property39.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval45 = localDate42.toInterval(dateTimeZone44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        boolean boolean52 = localDate48.isEqual((org.joda.time.ReadablePartial) localDate51);
        int int53 = localDate51.getDayOfWeek();
        org.joda.time.LocalDate.Property property54 = localDate51.weekOfWeekyear();
        org.joda.time.LocalDate localDate55 = property54.roundFloorCopy();
        org.joda.time.LocalDate localDate56 = property54.roundCeilingCopy();
        org.joda.time.LocalDate localDate57 = property54.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval60 = localDate57.toInterval(dateTimeZone59);
        org.joda.time.LocalDate.Property property61 = localDate57.dayOfMonth();
        org.joda.time.LocalDate.Property property62 = localDate57.yearOfEra();
        org.joda.time.LocalDate localDate64 = property62.addToCopy(2);
        org.joda.time.LocalDate localDate66 = localDate64.withYear(14);
        org.joda.time.DateMidnight dateMidnight67 = localDate64.toDateMidnight();
        int int68 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateMidnight67);
        mutableDateTime16.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime70 = dateTime14.toDateTime(dateTimeZone44);
        boolean boolean72 = dateTimeZone44.equals((java.lang.Object) "year");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime70", (dateTime14.compareTo(dateTime70) == 0) == dateTime14.equals(dateTime70));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology25);
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        mutableDateTime1.setMillis((long) (-1));
        mutableDateTime1.setMillis(1644573073768L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds(1);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime.Property property26 = dateTime24.monthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property28 = dateTime24.weekyear();
        org.joda.time.DateTime dateTime30 = dateTime24.plusYears(69);
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks(1970);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime24", (mutableDateTime1.compareTo(dateTime24) == 0) == mutableDateTime1.equals(dateTime24));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int4 = dateTimeZone2.getOffset((long) '4');
        long long6 = dateTimeZone2.previousTransition((long) ' ');
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket18.saveField(dateTimeFieldType19, "1970-01-01T00:00:00.000Z", locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology12, locale21);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology12);
        org.joda.time.DateTime dateTime25 = dateTime8.toDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime25", (dateTime8.compareTo(dateTime25) == 0) == dateTime8.equals(dateTime25));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.LocalDate localDate18 = dateTime16.toLocalDate();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.withDurationAdded(readableDuration19, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant17", (dateTime21.compareTo(instant17) == 0) == dateTime21.equals(instant17));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(1);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime13.withDurationAdded(2100005L, 7);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.Instant instant20 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTimeISO();
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant20", (dateTime21.compareTo(instant20) == 0) == dateTime21.equals(instant20));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime20.withPeriodAdded(readablePeriod21, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        boolean boolean28 = localTime23.isSupported(dateTimeFieldType27);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime32 = localTime29.withPeriodAdded(readablePeriod30, (int) (short) 0);
        org.joda.time.LocalTime.Property property33 = localTime29.secondOfMinute();
        org.joda.time.LocalTime localTime34 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime35 = property33.getLocalTime();
        org.joda.time.LocalTime localTime36 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime37 = property33.roundHalfCeilingCopy();
        int int38 = localTime23.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.LocalTime.Property property39 = localTime23.millisOfDay();
        org.joda.time.LocalTime localTime40 = property39.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime41 = property39.getLocalTime();
        org.joda.time.LocalTime localTime43 = property39.addWrapFieldToCopy((-292275054));
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalTime localTime47 = localTime44.withPeriodAdded(readablePeriod45, (int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalTime localTime50 = localTime44.withPeriodAdded(readablePeriod48, 366);
        org.joda.time.LocalTime localTime52 = localTime50.plusMillis(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfHalfday();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket63.saveField(dateTimeFieldType64, "1970-01-01T00:00:00.000Z", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology57, locale66);
        java.lang.String str69 = chronology57.toString();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField71 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology57.yearOfCentury();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 69, chronology57);
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType53.getField(chronology57);
        boolean boolean75 = localTime52.isSupported(dateTimeFieldType53);
        boolean boolean76 = localTime43.isSupported(dateTimeFieldType53);
        int int77 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.Chronology chronology78 = localTime43.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime25", (mutableDateTime8.compareTo(mutableDateTime25) == 0) == mutableDateTime8.equals(mutableDateTime25));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(3);
        int int16 = dateTime13.getYearOfCentury();
        org.joda.time.DateTime dateTime18 = dateTime13.withYearOfEra(14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        int int26 = localDate24.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate24.plus(readablePeriod27);
        int int29 = localDate24.size();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 0);
        long long36 = dateTimeParserBucket34.computeMillis(true);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        boolean boolean43 = localDate39.isEqual((org.joda.time.ReadablePartial) localDate42);
        int int44 = localDate42.getDayOfWeek();
        org.joda.time.LocalDate.Property property45 = localDate42.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval48 = localDate42.toInterval(dateTimeZone47);
        long long50 = dateTimeZone47.convertUTCToLocal((long) 0);
        dateTimeParserBucket34.setZone(dateTimeZone47);
        java.lang.String str53 = dateTimeZone47.getName((long) ' ');
        boolean boolean55 = dateTimeZone47.isStandardOffset((long) 6);
        org.joda.time.Interval interval56 = localDate24.toInterval(dateTimeZone47);
        java.util.TimeZone timeZone57 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime58 = dateTime18.toDateTime(dateTimeZone47);
        java.lang.String str60 = dateTimeZone47.getShortName(592L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime58", (dateTime18.compareTo(dateTime58) == 0) == dateTime18.equals(dateTime58));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        mutableDateTime1.setMinuteOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(6048000000L, dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) ' ');
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        boolean boolean17 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime19 = dateTime15.withYearOfEra(86399);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime7", (mutableDateTime1.compareTo(mutableDateTime7) == 0) == mutableDateTime1.equals(mutableDateTime7));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.DateTimeField dateTimeField8 = property4.getField();
        org.joda.time.LocalTime localTime10 = property4.setCopy((int) '#');
        org.joda.time.LocalTime localTime12 = property4.addCopy(2022L);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        boolean boolean16 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime14.setZoneRetainFields(dateTimeZone17);
        mutableDateTime14.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int25 = dateTimeZone23.getOffset((long) '4');
        mutableDateTime14.setZoneRetainFields(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) mutableDateTime28);
        long long30 = mutableDateTime14.getMillis();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 53);
        mutableDateTime14.setZone(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = localTime12.toDateTimeToday(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime28", (mutableDateTime14.compareTo(mutableDateTime28) == 0) == mutableDateTime14.equals(mutableDateTime28));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        boolean boolean21 = mutableDateTime19.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime19.setZone(dateTimeZone23);
        long long26 = dateTimeZone23.nextTransition((long) '4');
        java.lang.String str28 = dateTimeZone23.getShortName(35L);
        org.joda.time.DateTime dateTime29 = dateTime12.withZone(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime29", (dateTime8.compareTo(dateTime29) == 0) == dateTime8.equals(dateTime29));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime20.withPeriodAdded(readablePeriod21, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        boolean boolean28 = localTime23.isSupported(dateTimeFieldType27);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime32 = localTime29.withPeriodAdded(readablePeriod30, (int) (short) 0);
        org.joda.time.LocalTime.Property property33 = localTime29.secondOfMinute();
        org.joda.time.LocalTime localTime34 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime35 = property33.getLocalTime();
        org.joda.time.LocalTime localTime36 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime37 = property33.roundHalfCeilingCopy();
        int int38 = localTime23.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.LocalTime.Property property39 = localTime23.millisOfDay();
        org.joda.time.LocalTime localTime40 = property39.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime41 = property39.getLocalTime();
        org.joda.time.LocalTime localTime43 = property39.addWrapFieldToCopy((-292275054));
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalTime localTime47 = localTime44.withPeriodAdded(readablePeriod45, (int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalTime localTime50 = localTime44.withPeriodAdded(readablePeriod48, 366);
        org.joda.time.LocalTime localTime52 = localTime50.plusMillis(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfHalfday();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket63.saveField(dateTimeFieldType64, "1970-01-01T00:00:00.000Z", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology57, locale66);
        java.lang.String str69 = chronology57.toString();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField71 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology57.yearOfCentury();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 69, chronology57);
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType53.getField(chronology57);
        boolean boolean75 = localTime52.isSupported(dateTimeFieldType53);
        boolean boolean76 = localTime43.isSupported(dateTimeFieldType53);
        int int77 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime43);
        int int78 = localTime43.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime25", (mutableDateTime8.compareTo(mutableDateTime25) == 0) == mutableDateTime8.equals(mutableDateTime25));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        boolean boolean4 = property3.isLeap();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.addWrapField(35449917);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        boolean boolean13 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        int int21 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate.Property property22 = localDate19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval25 = localDate19.toInterval(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime10.toMutableDateTime(dateTimeZone24);
        mutableDateTime10.add((long) 59);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableDateTime10.add(readablePeriod29, 1970);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime10.getZone();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket43.saveField(dateTimeFieldType44, "1970-01-01T00:00:00.000Z", locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology37, locale46);
        java.lang.String str49 = chronology37.toString();
        org.joda.time.DurationField durationField50 = chronology37.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(3940L, chronology37);
        boolean boolean54 = dateTime52.isBefore((long) (-1));
        org.joda.time.DateTime.Property property55 = dateTime52.weekyear();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime52.plus(readableDuration56);
        java.lang.String str58 = dateTime57.toString();
        int int59 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime26", (mutableDateTime8.compareTo(mutableDateTime26) == 0) == mutableDateTime8.equals(mutableDateTime26));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime14", (dateTime7.compareTo(mutableDateTime14) == 0) == dateTime7.equals(mutableDateTime14));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(381044902L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfYear();
        boolean boolean6 = mutableDateTime4.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime4.setZoneRetainFields(dateTimeZone7);
        mutableDateTime4.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime4.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        int int26 = localDate24.getDayOfWeek();
        org.joda.time.LocalDate.Property property27 = localDate24.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval30 = localDate24.toInterval(dateTimeZone29);
        long long32 = dateTimeZone29.convertUTCToLocal((long) 0);
        mutableDateTime18.setZone(dateTimeZone29);
        mutableDateTime4.setZone(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone29);
        mutableDateTime1.setZoneRetainFields(dateTimeZone29);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        boolean boolean43 = localDate39.isEqual((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.plus(readableDuration48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withChronology(chronology50);
        org.joda.time.DateTime.Property property52 = dateTime49.secondOfMinute();
        org.joda.time.DateTime dateTime54 = dateTime49.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTime.Property property55 = dateTime54.millisOfDay();
        org.joda.time.DateTime dateTime56 = property55.roundHalfCeilingCopy();
        int int57 = dateTime56.getMillisOfDay();
        org.joda.time.DateMidnight dateMidnight58 = dateTime56.toDateMidnight();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and dateTime14", (mutableDateTime4.compareTo(dateTime14) == 0) == mutableDateTime4.equals(dateTime14));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime1.add(readablePeriod14, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfHalfday();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket28.saveField(dateTimeFieldType29, "1970-01-01T00:00:00.000Z", locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology22, locale31);
        java.lang.String str34 = chronology22.toString();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField36 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology22.yearOfCentury();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 69, chronology22);
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType18.getField(chronology22);
        java.util.Locale locale40 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology22, locale40);
        org.joda.time.DateTime dateTime42 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField43 = null;
        mutableDateTime1.setRounding(dateTimeField43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime42", (dateTime13.compareTo(dateTime42) == 0) == dateTime13.equals(dateTime42));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 0, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        boolean boolean7 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = dateTime12.minusDays(2039);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        boolean boolean23 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.plus(readableDuration28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withChronology(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime29.secondOfMinute();
        org.joda.time.DateTime dateTime34 = dateTime29.withMinuteOfHour((int) (byte) 10);
        boolean boolean35 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime16.plusDays(7);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int43 = dateTimeZone41.getOffset((long) '4');
        long long46 = dateTimeZone41.adjustOffset(100L, false);
        long long49 = dateTimeZone41.convertLocalToUTC((long) 19, true);
        org.joda.time.DateTime dateTime50 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(3578056374L, dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime50", (dateTime38.compareTo(dateTime50) == 0) == dateTime38.equals(dateTime50));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        mutableDateTime1.setYear((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime7.add(readablePeriod13, 4);
        org.joda.time.Instant instant16 = mutableDateTime7.toInstant();
        int int17 = mutableDateTime7.getWeekyear();
        mutableDateTime7.setDayOfMonth(1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        boolean boolean26 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.plus(readableDuration31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withChronology(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime38 = dateTime34.minusMillis(2022);
        org.joda.time.DateTime.Property property39 = dateTime38.weekOfWeekyear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        boolean boolean46 = localDate42.isEqual((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate42.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime48.plus(readableDuration51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.withChronology(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime52.secondOfMinute();
        org.joda.time.DateTime dateTime57 = dateTime52.withMinuteOfHour((int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar58 = dateTime57.toGregorianCalendar();
        org.joda.time.DateTime dateTime60 = dateTime57.withCenturyOfEra(4);
        boolean boolean61 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) dateTime38);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant16", (mutableDateTime7.compareTo(instant16) == 0) == mutableDateTime7.equals(instant16));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.plus(readableDuration15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withChronology(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime22 = dateTime18.minusMillis(2022);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfSecond((int) '#');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readablePeriod25);
        boolean boolean27 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        boolean boolean34 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate30.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.plus(readableDuration39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withChronology(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.withChronology(chronology43);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        org.joda.time.DateTime.Property property49 = dateTime44.property(dateTimeFieldType48);
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (short) 0, chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        boolean boolean57 = localDate53.isEqual((org.joda.time.ReadablePartial) localDate56);
        int int58 = localDate56.getDayOfWeek();
        org.joda.time.LocalDate.Property property59 = localDate56.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval62 = localDate56.toInterval(dateTimeZone61);
        int[] intArray64 = new int[] { 'a' };
        int int65 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDate56, intArray64);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology68, locale69, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket71.saveField(dateTimeFieldType72, "1970-01-01T00:00:00.000Z", locale74);
        java.util.Set<java.lang.String> strSet76 = locale74.getUnicodeLocaleAttributes();
        java.lang.String str77 = localDate56.toString("1", locale74);
        org.joda.time.LocalDate localDate79 = localDate56.withMonthOfYear(5);
        org.joda.time.Chronology chronology80 = localDate79.getChronology();
        org.joda.time.Chronology chronology81 = chronology80.withUTC();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology80.getZone();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology80);
        org.joda.time.DateTime dateTime84 = dateTime22.toDateTime(chronology80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant3", (mutableDateTime1.compareTo(instant3) == 0) == mutableDateTime1.equals(instant3));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0);
        int int10 = mutableDateTime9.getEra();
        org.joda.time.Chronology chronology11 = null;
        mutableDateTime9.setChronology(chronology11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        mutableDateTime9.set(dateTimeFieldType16, (int) '4');
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket27.saveField(dateTimeFieldType28, "1970-01-01T00:00:00.000Z", locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology21, locale30);
        java.lang.String str33 = chronology21.toString();
        org.joda.time.DurationField durationField34 = chronology21.eras();
        boolean boolean35 = dateTimeFieldType16.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField36 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology21.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter7.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField39 = chronology21.year();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalTime localTime43 = localTime40.withPeriodAdded(readablePeriod41, (int) (short) 0);
        org.joda.time.LocalTime.Property property44 = localTime40.secondOfMinute();
        org.joda.time.LocalTime localTime45 = property44.withMaximumValue();
        org.joda.time.LocalTime localTime46 = property44.getLocalTime();
        org.joda.time.LocalTime localTime47 = property44.withMaximumValue();
        org.joda.time.LocalTime localTime48 = property44.getLocalTime();
        int int49 = localTime48.getSecondOfMinute();
        int int50 = localTime48.getMinuteOfHour();
        java.lang.String str52 = localTime48.toString("zh");
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalTime localTime56 = localTime53.withPeriodAdded(readablePeriod54, (int) (short) 0);
        org.joda.time.LocalTime.Property property57 = localTime53.secondOfMinute();
        org.joda.time.LocalTime localTime58 = property57.withMaximumValue();
        org.joda.time.LocalTime localTime59 = property57.getLocalTime();
        org.joda.time.LocalTime localTime60 = property57.withMaximumValue();
        org.joda.time.LocalTime localTime61 = property57.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime62 = property57.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime63 = localTime48.withFields((org.joda.time.ReadablePartial) localTime62);
        int[] intArray65 = chronology21.get((org.joda.time.ReadablePartial) localTime62, 4709318400000L);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.dayOfYear();
        boolean boolean69 = mutableDateTime67.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime67.setZone(dateTimeZone71);
        long long74 = dateTimeZone71.nextTransition((long) '4');
        java.lang.String str76 = dateTimeZone71.getShortName(35L);
        boolean boolean77 = dateTimeZone71.isFixed();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone71);
        org.joda.time.Chronology chronology79 = chronology21.withZone(dateTimeZone71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime67", (mutableDateTime14.compareTo(mutableDateTime67) == 0) == mutableDateTime14.equals(mutableDateTime67));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        int int20 = mutableDateTime3.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 0, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        boolean boolean15 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate14);
        int int16 = localDate14.getDayOfWeek();
        int int17 = localDate14.getMonthOfYear();
        int[] intArray18 = localDate14.getValues();
        int int19 = localDate14.getDayOfYear();
        org.joda.time.LocalDate localDate21 = localDate14.minusWeeks(3522);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        boolean boolean25 = mutableDateTime23.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime23.setZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime32 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime32.plusDays(6814);
        boolean boolean36 = mutableDateTime8.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime23", (mutableDateTime1.compareTo(mutableDateTime23) == 0) == mutableDateTime1.equals(mutableDateTime23));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime3.add(readableDuration20);
        mutableDateTime3.add((long) 73052);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        int int2 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.plus(readableDuration15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withChronology(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        boolean boolean21 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getCenturyOfEra();
        org.joda.time.DateTime dateTime24 = dateTime20.minusDays((int) '4');
        java.util.Locale locale28 = new java.util.Locale("dayOfYear", "TW", "");
        java.util.Calendar calendar29 = dateTime20.toCalendar(locale28);
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime30);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfYear();
        boolean boolean42 = mutableDateTime40.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime40.setZone(dateTimeZone44);
        long long47 = dateTimeZone44.nextTransition((long) '4');
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone44);
        java.lang.String str50 = dateTimeZone44.getNameKey((long) (byte) 100);
        long long53 = dateTimeZone44.adjustOffset(25260020L, true);
        long long56 = dateTimeZone44.adjustOffset(0L, true);
        long long59 = dateTimeZone44.adjustOffset(3940L, true);
        java.lang.String str60 = dateTimeZone44.toString();
        java.lang.String str62 = dateTimeZone44.getName((long) 771);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((java.lang.Object) dateTime30, dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime40", (mutableDateTime1.compareTo(mutableDateTime40) == 0) == mutableDateTime1.equals(mutableDateTime40));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        int int10 = localDate9.size();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        boolean boolean16 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime14.setZone(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) '4');
        org.joda.time.DateTime dateTime22 = localDate12.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate24 = localDate12.plusYears((-1));
        org.joda.time.DateTime dateTime25 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property26 = localDate12.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime25", (dateTime22.compareTo(dateTime25) == 0) == dateTime22.equals(dateTime25));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        int int20 = dateTime19.getMillisOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateTime19.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfYear();
        boolean boolean26 = mutableDateTime24.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime24.setZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(6048000000L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone28);
        long long33 = dateTimeZone28.convertUTCToLocal((long) 0);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime35 = dateTime19.toDateTime(dateTimeZone28);
        java.lang.String str37 = dateTimeZone28.getShortName(6703200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime35", (dateTime17.compareTo(dateTime35) == 0) == dateTime17.equals(dateTime35));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalTime localTime3 = localTime0.withPeriodAdded(readablePeriod1, (int) (short) 0);
        org.joda.time.LocalTime.Property property4 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime6 = property4.getLocalTime();
        org.joda.time.LocalTime localTime7 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property4.getLocalTime();
        int int9 = localTime8.getSecondOfMinute();
        org.joda.time.LocalTime.Property property10 = localTime8.millisOfDay();
        int int11 = localTime8.size();
        org.joda.time.Chronology chronology12 = localTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField14, and durationField13", !(durationField13.compareTo(durationField14) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField14.compareTo(durationField13))));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear((int) (byte) 1);
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears((int) ' ');
        org.joda.time.DateTime dateTime40 = dateTime38.minusYears(54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        boolean boolean11 = mutableDateTime9.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime9.setZone(dateTimeZone13);
        long long16 = dateTimeZone13.nextTransition((long) '4');
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone13);
        java.lang.String str19 = dateTimeZone13.getNameKey((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusDays((int) 'a');
        int int27 = localDateTime24.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withMillisOfDay(2022);
        boolean boolean30 = dateTimeZone13.isLocalDateTimeGap(localDateTime24);
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.minuteOfHour();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        boolean boolean38 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate34.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.plus(readableDuration43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withChronology(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.withChronology(chronology47);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property51.getFieldType();
        org.joda.time.DateTime.Property property53 = dateTime48.property(dateTimeFieldType52);
        java.lang.String str54 = dateTimeFieldType52.getName();
        int int55 = localDateTime24.get(dateTimeFieldType52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and mutableDateTime50", (mutableDateTime9.compareTo(mutableDateTime50) == 0) == mutableDateTime9.equals(mutableDateTime50));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '4', chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.halfdayOfDay();
        long long17 = dateTimeField14.getDifferenceAsLong(2100005L, 259200000L);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime19.getZone();
        java.lang.String str22 = dateTimeZone20.getName((long) 7);
        int int24 = dateTimeZone20.getOffsetFromLocal((long) '#');
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) 259200000L, dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime25", (dateTime8.compareTo(dateTime25) == 0) == dateTime8.equals(dateTime25));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        boolean boolean22 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime24.weekyear();
        org.joda.time.DateTime dateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis(3);
        org.joda.time.DateTime.Property property32 = dateTime31.year();
        org.joda.time.DateTime dateTime34 = dateTime31.plusSeconds(69);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.plus(readablePeriod35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        long long39 = dateTime36.getMillis();
        org.joda.time.DateTime.Property property40 = dateTime36.year();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime36.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime15.toMutableDateTime(dateTimeZone42);
        java.util.TimeZone timeZone44 = dateTimeZone42.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime43", (mutableDateTime1.compareTo(mutableDateTime43) == 0) == mutableDateTime1.equals(mutableDateTime43));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addWeeks(2);
        int int3 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        boolean boolean21 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate20);
        int int22 = localDate20.getDayOfWeek();
        org.joda.time.LocalDate.Property property23 = localDate20.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval26 = localDate20.toInterval(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime14.toDateTime(dateTimeZone25);
        boolean boolean28 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime0.dayOfWeek();
        java.lang.String str30 = mutableDateTime0.toString();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableDateTime0.add(readablePeriod31, 35629398);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime27", (dateTime14.compareTo(dateTime27) == 0) == dateTime14.equals(dateTime27));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.Chronology chronology13 = chronology8.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime12", (dateTime7.compareTo(mutableDateTime12) == 0) == dateTime7.equals(mutableDateTime12));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime34 = mutableDateTime1.toDateTimeISO();
        int int35 = dateTime34.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withField(dateTimeFieldType15, (int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded((long) 238, 35);
        org.joda.time.DateTime dateTime22 = dateTime17.plusYears(25);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter31.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(238, (int) (byte) 10);
        long long39 = dateTimeZone36.adjustOffset((long) 97, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter32.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime22.toDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime41", (dateTime22.compareTo(dateTime41) == 0) == dateTime22.equals(dateTime41));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone26);
        java.lang.String str33 = dateTimeZone26.getNameKey((long) 11);
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(dateTimeZone26);
        int int36 = dateTimeZone26.getStandardOffset(147600000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime34", (dateTime8.compareTo(dateTime34) == 0) == dateTime8.equals(dateTime34));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        boolean boolean4 = property3.isLeap();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.addWrapField(35449917);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        boolean boolean13 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        int int21 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate.Property property22 = localDate19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval25 = localDate19.toInterval(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime10.toMutableDateTime(dateTimeZone24);
        mutableDateTime10.add((long) 59);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableDateTime10.add(readablePeriod29, 1970);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setHourOfDay((int) (byte) 0);
        mutableDateTime10.setYear(933);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime26", (mutableDateTime8.compareTo(mutableDateTime26) == 0) == mutableDateTime8.equals(mutableDateTime26));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.era();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket14.saveField(dateTimeFieldType15, "1970-01-01T00:00:00.000Z", locale17);
        int int19 = mutableDateTime1.get(dateTimeFieldType15);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfYear();
        boolean boolean32 = mutableDateTime30.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime30.setZone(dateTimeZone34);
        long long37 = dateTimeZone34.nextTransition((long) '4');
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone34);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.weekyears();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology44 = localTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfHalfday();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket50.saveField(dateTimeFieldType51, "1970-01-01T00:00:00.000Z", locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology44, locale53);
        java.lang.String str56 = locale53.getISO3Country();
        java.lang.String str57 = locale53.getVariant();
        java.util.Locale.setDefault(category41, locale53);
        java.lang.String str59 = locale53.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology39, locale53, (java.lang.Integer) 3600000);
        boolean boolean62 = locale53.hasExtensions();
        int int63 = property20.getMaximumTextLength(locale53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime30", (mutableDateTime1.compareTo(mutableDateTime30) == 0) == mutableDateTime1.equals(mutableDateTime30));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, 35);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone25);
        boolean boolean30 = dateTimeZone22.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 9, dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime18.toMutableDateTime(dateTimeZone22);
        long long36 = dateTimeZone22.convertLocalToUTC((long) 311, false, 704L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime32", (mutableDateTime1.compareTo(mutableDateTime32) == 0) == mutableDateTime1.equals(mutableDateTime32));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        boolean boolean4 = property3.isLeap();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfCeiling();
        org.joda.time.Instant instant10 = mutableDateTime9.toInstant();
        int int11 = property3.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.MutableDateTime mutableDateTime12 = property3.roundHalfFloor();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant10", (mutableDateTime7.compareTo(instant10) == 0) == mutableDateTime7.equals(instant10));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays((int) 'a');
        int int9 = localDateTime6.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str13 = dateTimeFieldType12.getName();
        int int14 = localDateTime11.indexOf(dateTimeFieldType12);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        boolean boolean24 = dateTimeZone21.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone21);
        boolean boolean26 = dateTimeZone18.equals((java.lang.Object) dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int31 = dateTimeZone29.getOffset((long) '4');
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone29, (long) 59);
        mutableDateTime1.setZone(dateTimeZone29);
        long long36 = dateTimeZone29.previousTransition(2055L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime17", (mutableDateTime1.compareTo(mutableDateTime17) == 0) == mutableDateTime1.equals(mutableDateTime17));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int17 = mutableDateTime1.getSecondOfDay();
        java.util.Date date18 = mutableDateTime1.toDate();
        java.lang.String str19 = mutableDateTime1.toString();
        int int20 = mutableDateTime1.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(31);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime1.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        int int33 = dateTimeField31.getMaximumTextLength(locale32);
        java.lang.String str34 = locale32.toLanguageTag();
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale32.getLanguage();
        java.lang.String str37 = dateTimeZone22.getName((-115200000L), locale32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime25", (mutableDateTime1.compareTo(mutableDateTime25) == 0) == mutableDateTime1.equals(mutableDateTime25));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket9.saveField(dateTimeFieldType10, "1970-01-01T00:00:00.000Z", locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology3, locale12);
        java.lang.String str15 = chronology3.toString();
        org.joda.time.DurationField durationField16 = chronology3.eras();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(3940L, chronology3);
        org.joda.time.DurationField durationField19 = chronology3.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField19, and durationField16", !(durationField16.compareTo(durationField19) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField19.compareTo(durationField16))));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.millis();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime11", (mutableDateTime1.compareTo(mutableDateTime11) == 0) == mutableDateTime1.equals(mutableDateTime11));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket9.saveField(dateTimeFieldType10, "1970-01-01T00:00:00.000Z", locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology3, locale12);
        java.lang.String str15 = chronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField17 = chronology3.weekyear();
        org.joda.time.Chronology chronology18 = chronology3.withUTC();
        org.joda.time.DurationField durationField19 = chronology3.minutes();
        org.joda.time.DurationField durationField20 = chronology3.years();
        org.joda.time.DurationField durationField21 = chronology3.weekyears();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(1969L, chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField20 and durationField21", (durationField20.compareTo(durationField21) == 0) == durationField20.equals(durationField21));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Chronology chronology4 = null;
        mutableDateTime3.setChronology(chronology4);
        mutableDateTime3.addDays(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime3.add(readablePeriod8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime3.yearOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.secondOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        boolean boolean18 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate14.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readableDuration23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withChronology(chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        boolean boolean33 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.plus(readableDuration38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withChronology(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.withChronology(chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property46.getFieldType();
        org.joda.time.DateTime.Property property48 = dateTime43.property(dateTimeFieldType47);
        boolean boolean49 = dateTime26.equals((java.lang.Object) property48);
        org.joda.time.DateTime.Property property50 = dateTime26.weekOfWeekyear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (short) 0, chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        boolean boolean57 = localDate53.isEqual((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate53.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.plus(readableDuration62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.withChronology(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime63.withChronology(chronology66);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property70.getFieldType();
        org.joda.time.DateTime.Property property72 = dateTime67.property(dateTimeFieldType71);
        org.joda.time.DateTimeField dateTimeField73 = property72.getField();
        org.joda.time.DateTime dateTime75 = property72.addToCopy(2100000);
        boolean boolean76 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean77 = dateTime75.isAfterNow();
        org.joda.time.DateTime dateTime79 = dateTime75.plus(1644573057639L);
        org.joda.time.Instant instant80 = dateTime75.toInstant();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and instant80", (mutableDateTime3.compareTo(instant80) == 0) == mutableDateTime3.equals(instant80));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        boolean boolean17 = dateTime14.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime18.withSecondOfMinute(9);
        org.joda.time.DateTime.Property property21 = dateTime18.secondOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        boolean boolean28 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate27);
        int int29 = localDate27.getDayOfWeek();
        org.joda.time.LocalDate.Property property30 = localDate27.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = property30.roundFloorCopy();
        int int32 = localDate31.size();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate34 = localDate31.minus(readablePeriod33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate37 = localDate31.minusYears(1);
        int int38 = localDate31.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight39 = localDate31.toDateMidnight();
        org.joda.time.Chronology chronology40 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekyear();
        org.joda.time.DateTime dateTime44 = dateTime18.toDateTime(chronology40);
        org.joda.time.DateTime.Property property45 = dateTime18.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime44", (dateTime8.compareTo(dateTime44) == 0) == dateTime8.equals(dateTime44));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        java.lang.String str14 = chronology2.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField16 = chronology2.weekyear();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology2);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime19.getZone();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime19.add(readableDuration21, 3);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime19.getZone();
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        org.joda.time.Chronology chronology27 = chronology2.withZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        boolean boolean33 = mutableDateTime31.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime31.setZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(6048000000L, dateTimeZone35);
        long long39 = dateTimeZone35.previousTransition(2100000L);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 39, dateTimeZone35);
        long long42 = dateTimeZone24.getMillisKeepLocal(dateTimeZone35, (-441853200035L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and mutableDateTime31", (mutableDateTime19.compareTo(mutableDateTime31) == 0) == mutableDateTime19.equals(mutableDateTime31));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField(4);
        java.lang.String str6 = mutableDateTime5.toString();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.millisOfDay();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.minuteOfDay();
        mutableDateTime5.addHours(69);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfYear();
        boolean boolean14 = mutableDateTime12.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime12.setZone(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime12.add(readablePeriod18, 4);
        mutableDateTime12.setTime((long) (short) 10);
        int int23 = mutableDateTime12.getEra();
        org.joda.time.DateTime dateTime24 = mutableDateTime12.toDateTimeISO();
        int int25 = mutableDateTime12.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime12.add(readableDuration26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime12.add(readableDuration28, 53);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        java.lang.Object obj33 = mutableDateTime32.clone();
        boolean boolean34 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        int int35 = mutableDateTime12.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((-441853200035L), dateTimeZone38);
        mutableDateTime12.setZone(dateTimeZone38);
        mutableDateTime5.setZone(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and dateTime24", (mutableDateTime12.compareTo(dateTime24) == 0) == mutableDateTime12.equals(dateTime24));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        mutableDateTime1.add((long) 238);
        int int5 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime20 = dateTime15.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime20.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime26 = dateTime24.minusYears(52);
        int int27 = dateTime24.getCenturyOfEra();
        org.joda.time.DateTime.Property property28 = dateTime24.yearOfCentury();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        boolean boolean33 = mutableDateTime31.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime31.setZone(dateTimeZone35);
        long long38 = dateTimeZone35.nextTransition((long) '4');
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        int int40 = property28.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        java.lang.Object obj41 = mutableDateTime39.clone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(32);
        mutableDateTime39.setZone(dateTimeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        mutableDateTime6.setZone(dateTimeZone43);
        java.lang.String str48 = dateTimeZone43.getName((long) 377);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime6", (mutableDateTime1.compareTo(mutableDateTime6) == 0) == mutableDateTime1.equals(mutableDateTime6));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        boolean boolean4 = property3.isLeap();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.addWrapField(35449917);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        boolean boolean13 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        int int21 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate.Property property22 = localDate19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval25 = localDate19.toInterval(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime10.toMutableDateTime(dateTimeZone24);
        mutableDateTime10.add((long) 59);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableDateTime10.add(readablePeriod29, 1970);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime10.getZone();
        mutableDateTime10.setMinuteOfDay(57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime26", (mutableDateTime8.compareTo(mutableDateTime26) == 0) == mutableDateTime8.equals(mutableDateTime26));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        boolean boolean22 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate21);
        int int23 = localDate21.getDayOfWeek();
        org.joda.time.LocalDate.Property property24 = localDate21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval27 = localDate21.toInterval(dateTimeZone26);
        long long29 = dateTimeZone26.convertUTCToLocal((long) 0);
        mutableDateTime15.setZone(dateTimeZone26);
        mutableDateTime1.setZone(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(198970);
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime11", (mutableDateTime1.compareTo(dateTime11) == 0) == mutableDateTime1.equals(dateTime11));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        int int33 = dateTime32.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate16.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readableDuration25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withChronology(chronology27);
        boolean boolean29 = localDate9.equals((java.lang.Object) dateTime28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.getMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar34 = mutableDateTime33.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean36 = mutableDateTime33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        boolean boolean43 = localDate39.isEqual((org.joda.time.ReadablePartial) localDate42);
        int int44 = localDate42.getDayOfWeek();
        org.joda.time.LocalDate.Property property45 = localDate42.weekOfWeekyear();
        org.joda.time.LocalDate localDate46 = property45.roundFloorCopy();
        int int47 = localDate46.size();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate49 = localDate46.minus(readablePeriod48);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate52 = localDate46.withMonthOfYear(10);
        org.joda.time.LocalDate localDate54 = localDate52.withYear((int) '4');
        org.joda.time.LocalDate localDate56 = localDate52.withEra((int) (short) 1);
        org.joda.time.LocalDate.Property property57 = localDate52.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        long long61 = dateTimeZone59.convertUTCToLocal(2100000L);
        org.joda.time.DateTime dateTime62 = localDate52.toDateTimeAtMidnight(dateTimeZone59);
        mutableDateTime33.setZone(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = localDate9.toDateTimeAtCurrentTime(dateTimeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime31", (mutableDateTime11.compareTo(mutableDateTime31) == 0) == mutableDateTime11.equals(mutableDateTime31));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(2);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((long) 51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime12", (dateTime8.compareTo(dateTime12) == 0) == dateTime8.equals(dateTime12));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.months();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime10", (dateTime7.compareTo(mutableDateTime10) == 0) == dateTime7.equals(mutableDateTime10));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        int int20 = mutableDateTime19.getEra();
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime19.setChronology(chronology21);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTime dateTime25 = dateTime12.minusYears(3600000);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int33 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate36 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate37 = property34.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval40 = localDate37.toInterval(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime25.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 53);
        mutableDateTime41.setZone(dateTimeZone44);
        int int49 = dateTimeZone44.getOffsetFromLocal(381180859L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime41", (dateTime25.compareTo(mutableDateTime41) == 0) == dateTime25.equals(mutableDateTime41));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute((int) (short) 10);
        int int4 = localTime0.getValue((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = mutableDateTime6.toString(dateTimeFormatter7);
        mutableDateTime6.addMonths((int) (byte) 1);
        org.joda.time.Instant instant11 = mutableDateTime6.toInstant();
        org.joda.time.DateTime dateTime12 = localTime0.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime13 = localTime0.toDateTimeToday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant11", (mutableDateTime6.compareTo(instant11) == 0) == mutableDateTime6.equals(instant11));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(2);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        mutableDateTime16.setChronology(chronology17);
        mutableDateTime16.addDays(0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.getMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime22.add(readablePeriod23);
        mutableDateTime22.addDays(35449917);
        int int27 = mutableDateTime22.getHourOfDay();
        int int28 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime12", (dateTime8.compareTo(dateTime12) == 0) == dateTime8.equals(dateTime12));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        mutableDateTime1.addWeekyears(69);
        int int15 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant16 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        boolean boolean23 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate22);
        int int24 = localDate22.getDayOfWeek();
        org.joda.time.LocalDate.Property property25 = localDate22.weekOfWeekyear();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.joda.time.LocalDate localDate27 = property25.roundCeilingCopy();
        org.joda.time.LocalDate localDate28 = property25.withMinimumValue();
        int int29 = localDate28.getYearOfCentury();
        org.joda.time.LocalDate localDate31 = localDate28.withCenturyOfEra(2000);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = instant16.toMutableDateTime(chronology32);
        java.lang.String str34 = chronology32.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant16", (mutableDateTime1.compareTo(instant16) == 0) == mutableDateTime1.equals(instant16));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        java.util.Date date8 = localDateTime6.toDate();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime10.setZone(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime10.add(readablePeriod16, 4);
        mutableDateTime10.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = mutableDateTime10.toDateTime(dateTimeZone22);
        boolean boolean24 = localDateTime6.equals((java.lang.Object) dateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime6.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime23", (mutableDateTime10.compareTo(dateTime23) == 0) == mutableDateTime10.equals(dateTime23));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTime.Property property21 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.dayOfYear();
        boolean boolean28 = mutableDateTime26.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime26.setZone(dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutableDateTime26.add(readablePeriod32, 4);
        mutableDateTime26.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = mutableDateTime26.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime22.withZone(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime26 and dateTime39", (mutableDateTime26.compareTo(dateTime39) == 0) == mutableDateTime26.equals(dateTime39));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks(771);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        long long24 = dateTimeZone20.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.plus(887172685974L);
        long long28 = dateTime27.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        mutableDateTime1.setMinuteOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(6048000000L, dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) ' ');
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        boolean boolean17 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime15);
        int int18 = dateTime15.getHourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime15.minusMillis(1969);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime7", (mutableDateTime1.compareTo(mutableDateTime7) == 0) == mutableDateTime1.equals(mutableDateTime7));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime1.add(readablePeriod14, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfHalfday();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket28.saveField(dateTimeFieldType29, "1970-01-01T00:00:00.000Z", locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology22, locale31);
        java.lang.String str34 = chronology22.toString();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField36 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology22.yearOfCentury();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 69, chronology22);
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType18.getField(chronology22);
        java.util.Locale locale40 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology22, locale40);
        org.joda.time.DateTime dateTime42 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology47 = localTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.clockhourOfHalfday();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket53.saveField(dateTimeFieldType54, "1970-01-01T00:00:00.000Z", locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology47, locale56);
        java.lang.String str59 = locale56.getISO3Country();
        java.lang.String str60 = locale56.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale56, (java.lang.Integer) 3);
        java.lang.Integer int63 = dateTimeParserBucket62.getPivotYear();
        dateTimeParserBucket62.setOffset((int) ' ');
        org.joda.time.Chronology chronology66 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.monthOfYear();
        mutableDateTime1.setChronology(chronology66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime42", (dateTime13.compareTo(dateTime42) == 0) == dateTime13.equals(dateTime42));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        long long3 = property2.remainder();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set((int) (short) 1);
        mutableDateTime5.addHours((int) (byte) 1);
        mutableDateTime5.setMillis(11550157878993L);
        mutableDateTime5.setWeekyear(3600000);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) '4', chronology22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plus(readableDuration30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.era();
        long long34 = chronology22.set((org.joda.time.ReadablePartial) localDateTime31, (long) 22);
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket47.saveField(dateTimeFieldType48, "1970-01-01T00:00:00.000Z", locale50);
        dateTimeParserBucket40.saveField(dateTimeFieldType41, "1970-01-01T00:00:00.000Z", locale50);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket57.saveField(dateTimeFieldType58, "1970-01-01T00:00:00.000Z", locale60);
        java.lang.String str62 = locale50.getDisplayCountry(locale60);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(0L, chronology71, locale72, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket74.saveField(dateTimeFieldType75, "1970-01-01T00:00:00.000Z", locale77);
        dateTimeParserBucket67.saveField(dateTimeFieldType68, "1970-01-01T00:00:00.000Z", locale77);
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket(0L, chronology81, locale82, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale87 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket84.saveField(dateTimeFieldType85, "1970-01-01T00:00:00.000Z", locale87);
        java.lang.String str89 = locale77.getDisplayCountry(locale87);
        java.lang.String str90 = locale60.getDisplayVariant(locale77);
        java.util.Locale.setDefault(category35, locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket93 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale60, (java.lang.Integer) 7);
        org.joda.time.DurationField durationField94 = chronology22.hours();
        org.joda.time.MutableDateTime mutableDateTime95 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime5, chronology22);
        org.joda.time.MutableDateTime.Property property96 = mutableDateTime5.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime95", (mutableDateTime5.compareTo(mutableDateTime95) == 0) == mutableDateTime5.equals(mutableDateTime95));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        long long17 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        boolean boolean24 = localTime19.isSupported(dateTimeFieldType23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.property(dateTimeFieldType23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale24);
        dateTimeParserBucket14.saveField(dateTimeFieldType15, "1970-01-01T00:00:00.000Z", locale24);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket31.saveField(dateTimeFieldType32, "1970-01-01T00:00:00.000Z", locale34);
        java.lang.String str36 = locale24.getDisplayCountry(locale34);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket58.saveField(dateTimeFieldType59, "1970-01-01T00:00:00.000Z", locale61);
        java.lang.String str63 = locale51.getDisplayCountry(locale61);
        java.lang.String str64 = locale34.getDisplayVariant(locale51);
        java.lang.String str65 = locale51.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology9, locale51);
        org.joda.time.Chronology chronology67 = chronology9.withUTC();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DateTime.Property property69 = dateTime68.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime68.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.DateTime dateTime72 = dateTime68.plus(readablePeriod71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime70", (dateTime8.compareTo(mutableDateTime70) == 0) == dateTime8.equals(mutableDateTime70));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, 35);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone25);
        boolean boolean30 = dateTimeZone22.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 9, dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime18.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight33 = dateTime18.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime32", (mutableDateTime1.compareTo(mutableDateTime32) == 0) == mutableDateTime1.equals(mutableDateTime32));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plus(readableDuration13);
        org.joda.time.DateTime dateTime15 = localDateTime10.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra(69);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.centuryOfEra();
        int int25 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minusDays(35454362);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDateTime31.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime31.plusSeconds(5);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.monthOfYear();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.plus(readableDuration53);
        org.joda.time.DateTime dateTime55 = localDateTime50.toDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.minus(readableDuration59);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime47.withField(dateTimeFieldType62, 19);
        boolean boolean65 = localDateTime31.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean67 = localDateTime31.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime28.property(dateTimeFieldType66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime76 = localDateTime71.toDateTime(dateTimeZone74);
        org.joda.time.Chronology chronology77 = localDateTime71.getChronology();
        org.joda.time.LocalDateTime.Property property78 = localDateTime71.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime80 = property78.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime82 = property78.setCopy((int) '4');
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusWeeks(11);
        org.joda.time.DateTime dateTime85 = localDateTime84.toDateTime();
        org.joda.time.DateTime.Property property86 = dateTime85.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, 26);
        org.joda.time.DateTime dateTime90 = dateTime85.toDateTime(dateTimeZone89);
        org.joda.time.DateTime dateTime92 = dateTime85.plusDays(117);
        int int93 = property68.compareTo((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime85 and dateTime90", (dateTime85.compareTo(dateTime90) == 0) == dateTime85.equals(dateTime90));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.minus((long) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears(0);
        org.joda.time.LocalDate localDate22 = dateTime19.toLocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        org.joda.time.Chronology chronology28 = null;
        mutableDateTime27.setChronology(chronology28);
        mutableDateTime27.addDays(0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.getMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableDateTime33.add(readablePeriod34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 0, chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 0, chronology40);
        boolean boolean42 = localDate38.isEqual((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.plus(readableDuration47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.withChronology(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime48.withChronology(chronology51);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property55.getFieldType();
        org.joda.time.DateTime.Property property57 = dateTime52.property(dateTimeFieldType56);
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 0, chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) (short) 0, chronology63);
        boolean boolean65 = localDate61.isEqual((org.joda.time.ReadablePartial) localDate64);
        int int66 = localDate64.getDayOfWeek();
        org.joda.time.LocalDate.Property property67 = localDate64.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval70 = localDate64.toInterval(dateTimeZone69);
        int[] intArray72 = new int[] { 'a' };
        int int73 = dateTimeField58.getMaximumValue((org.joda.time.ReadablePartial) localDate64, intArray72);
        org.joda.time.Interval interval74 = localDate64.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = localDate64.getFieldType(2);
        java.lang.String str77 = dateTimeFieldType76.toString();
        boolean boolean78 = mutableDateTime33.isSupported(dateTimeFieldType76);
        int int79 = localDate22.get(dateTimeFieldType76);
        org.joda.time.LocalDate.Property property80 = localDate22.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime25", (mutableDateTime8.compareTo(mutableDateTime25) == 0) == mutableDateTime8.equals(mutableDateTime25));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.millis();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, chronology9);
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime11", (mutableDateTime1.compareTo(mutableDateTime11) == 0) == mutableDateTime1.equals(mutableDateTime11));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.DateTime.Property property18 = dateTime12.centuryOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime27.weekyear();
        org.joda.time.DateTime dateTime32 = property31.roundHalfFloorCopy();
        boolean boolean33 = dateTime32.isEqualNow();
        org.joda.time.DateTime dateTime34 = dateTime32.withLaterOffsetAtOverlap();
        boolean boolean35 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Instant instant36 = dateTime12.toInstant();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        boolean boolean43 = localDate39.isEqual((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property46.getFieldType();
        org.joda.time.LocalDate.Property property48 = localDate42.property(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = localDate42.toDateTimeAtCurrentTime();
        int int50 = dateTime49.getSecondOfMinute();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond(376);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime59 = property56.addWrapField(4);
        org.joda.time.MutableDateTime mutableDateTime60 = property56.roundHalfEven();
        mutableDateTime60.addMinutes(2000);
        boolean boolean63 = dateTime52.isAfter((org.joda.time.ReadableInstant) mutableDateTime60);
        mutableDateTime60.setMinuteOfDay(181);
        boolean boolean66 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant36", (dateTime12.compareTo(instant36) == 0) == dateTime12.equals(instant36));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(2022);
        int int6 = dateTimeFormatter3.getDefaultYear();
        boolean boolean7 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property12.addCopy(0);
        org.joda.time.LocalTime localTime16 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property12.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        boolean boolean21 = mutableDateTime19.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime19.setZone(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableDateTime19.add(readablePeriod25, 4);
        mutableDateTime19.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime19.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = mutableDateTime19.toDateTime(dateTimeZone31);
        int int33 = property12.compareTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime19.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeFormatter37.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter37.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser40 = dateTimeFormatter37.getParser();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        boolean boolean44 = mutableDateTime42.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime42.setZone(dateTimeZone46);
        long long49 = dateTimeZone46.nextTransition((long) '4');
        java.lang.String str51 = dateTimeZone46.getShortName(35L);
        boolean boolean52 = dateTimeZone46.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter37.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime54 = mutableDateTime19.toDateTime(dateTimeZone46);
        boolean boolean56 = dateTimeZone46.isStandardOffset(1644573291574L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter3.withZone(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and dateTime32", (mutableDateTime19.compareTo(dateTime32) == 0) == mutableDateTime19.equals(dateTime32));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        boolean boolean4 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime2.setZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime2.add(readablePeriod8, 4);
        org.joda.time.Instant instant11 = mutableDateTime2.toInstant();
        mutableDateTime2.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        org.joda.time.DateTimeField dateTimeField30 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology18.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime15.toMutableDateTime(chronology18);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromMillisOfDay(3600082L, chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime32", (mutableDateTime2.compareTo(mutableDateTime32) == 0) == mutableDateTime2.equals(mutableDateTime32));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour((int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withChronology(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekOfWeekyear(4);
        boolean boolean35 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime32.minusWeeks(0);
        org.joda.time.DateTime dateTime39 = dateTime32.minusYears(35513);
        org.joda.time.Instant instant40 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime42 = dateTime32.minusYears(35607);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant40", (dateTime8.compareTo(instant40) == 0) == dateTime8.equals(instant40));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.setDate(45L);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.minuteOfHour();
        int int20 = mutableDateTime15.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMillis((int) 'u');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plus(readableDuration26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.minus(readablePeriod28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.plus(readableDuration30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime31.getFields();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.Chronology chronology34 = localDateTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime15, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and mutableDateTime38", (mutableDateTime13.compareTo(mutableDateTime38) == 0) == mutableDateTime13.equals(mutableDateTime38));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone13);
        java.util.Date date15 = mutableDateTime1.toDate();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromDateFields(date15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        int int20 = dateTime19.getMillisOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateTime19.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfYear();
        boolean boolean26 = mutableDateTime24.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime24.setZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(6048000000L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone28);
        long long33 = dateTimeZone28.convertUTCToLocal((long) 0);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime35 = dateTime19.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = dateTime19.withWeekOfWeekyear((int) '#');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime35", (dateTime19.compareTo(dateTime35) == 0) == dateTime19.equals(dateTime35));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        boolean boolean4 = property3.isLeap();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.addWrapField(35449917);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        boolean boolean12 = mutableDateTime10.isAfterNow();
        boolean boolean13 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        boolean boolean20 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        int int21 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate.Property property22 = localDate19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval25 = localDate19.toInterval(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime10.toMutableDateTime(dateTimeZone24);
        mutableDateTime10.add((long) 59);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableDateTime10.add(readablePeriod29, 1970);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime10.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        mutableDateTime34.setMillisOfDay(45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime26", (mutableDateTime8.compareTo(mutableDateTime26) == 0) == mutableDateTime8.equals(mutableDateTime26));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology25);
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDateTime33.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) '4', chronology39);
        org.joda.time.DurationField durationField42 = chronology39.days();
        org.joda.time.DurationField durationField43 = chronology39.halfdays();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology39.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone44);
        int int47 = dateTimeZone44.getOffsetFromLocal((-295200003L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        int int14 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime1.add(readableDuration15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.weekOfWeekyear();
        boolean boolean32 = dateTimeZone18.equals((java.lang.Object) property31);
        org.joda.time.DateTime dateTime33 = property31.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = property31.roundFloorCopy();
        boolean boolean35 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = mutableDateTime1.toDateTime(chronology36);
        mutableDateTime1.setDayOfYear(80);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime1.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime37", (dateTime13.compareTo(dateTime37) == 0) == dateTime13.equals(dateTime37));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readablePeriod5);
        int int7 = localDateTime6.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear(35);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int16 = dateTimeZone14.getOffset((long) '4');
        org.joda.time.DateTime dateTime17 = localDateTime11.toDateTime(dateTimeZone14);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime21 = property19.addToCopy(80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant18", (dateTime17.compareTo(instant18) == 0) == dateTime17.equals(instant18));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology25);
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        long long3 = mutableDateTime1.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plus(readableDuration10);
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType4.getField(chronology15);
        mutableDateTime1.setChronology(chronology15);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        boolean boolean22 = mutableDateTime20.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime20.setZone(dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime20.add(readablePeriod26, 4);
        org.joda.time.Instant instant29 = mutableDateTime20.toInstant();
        int int30 = mutableDateTime20.getWeekyear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime20.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar32 = mutableDateTime20.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDateTime35.toDateTime(dateTimeZone38);
        int int42 = dateTimeZone38.getOffsetFromLocal((long) ' ');
        java.lang.String str43 = dateTimeZone38.toString();
        int int45 = dateTimeZone38.getOffset((long) 2000);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone38);
        mutableDateTime20.setZone(dateTimeZone38);
        mutableDateTime1.setZoneRetainFields(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and instant29", (mutableDateTime20.compareTo(instant29) == 0) == mutableDateTime20.equals(instant29));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(35493088);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        boolean boolean22 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.plus(readableDuration27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withChronology(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withChronology(chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        org.joda.time.DateTime.Property property37 = dateTime32.property(dateTimeFieldType36);
        org.joda.time.DateTime.Property property38 = dateTime32.secondOfMinute();
        org.joda.time.DateTime dateTime40 = dateTime32.withYearOfEra(1);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) dateTime40);
        int int43 = property13.getDifference((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime34", (instant10.compareTo(mutableDateTime34) == 0) == instant10.equals(mutableDateTime34));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket9.saveField(dateTimeFieldType10, "1970-01-01T00:00:00.000Z", locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology3, locale12);
        java.lang.String str15 = chronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField17 = chronology3.weekyear();
        org.joda.time.Chronology chronology18 = chronology3.withUTC();
        org.joda.time.DurationField durationField19 = chronology3.minutes();
        org.joda.time.DurationField durationField20 = chronology3.years();
        org.joda.time.DurationField durationField21 = chronology3.weekyears();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 19, chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField20 and durationField21", (durationField20.compareTo(durationField21) == 0) == durationField20.equals(durationField21));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        int int2 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime1.setChronology(chronology3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        mutableDateTime1.set(dateTimeFieldType8, (int) '4');
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfHalfday();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket19.saveField(dateTimeFieldType20, "1970-01-01T00:00:00.000Z", locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology13, locale22);
        java.lang.String str25 = chronology13.toString();
        org.joda.time.DurationField durationField26 = chronology13.eras();
        boolean boolean27 = dateTimeFieldType8.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField28 = chronology13.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.DurationField durationField30 = chronology13.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField30, and durationField26", !(durationField26.compareTo(durationField30) == 0) || (Math.signum(durationField26.compareTo(durationField26)) == Math.signum(durationField30.compareTo(durationField26))));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '4', chronology9);
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.joda.time.DurationField durationField13 = chronology9.halfdays();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology9.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays((int) 'a');
        int int24 = localDateTime21.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withMillisOfDay(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str28 = dateTimeFieldType27.getName();
        int int29 = localDateTime26.indexOf(dateTimeFieldType27);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime16.property(dateTimeFieldType27);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime32.getZone();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        boolean boolean39 = dateTimeZone36.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone36);
        boolean boolean41 = dateTimeZone33.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int46 = dateTimeZone44.getOffset((long) '4');
        long long48 = dateTimeZone33.getMillisKeepLocal(dateTimeZone44, (long) 59);
        mutableDateTime16.setZone(dateTimeZone44);
        long long51 = dateTimeZone14.getMillisKeepLocal(dateTimeZone44, (-176169600035L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and mutableDateTime32", (mutableDateTime16.compareTo(mutableDateTime32) == 0) == mutableDateTime16.equals(mutableDateTime32));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        boolean boolean22 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate21);
        int int23 = localDate21.getDayOfWeek();
        org.joda.time.LocalDate.Property property24 = localDate21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval27 = localDate21.toInterval(dateTimeZone26);
        long long29 = dateTimeZone26.convertUTCToLocal((long) 0);
        mutableDateTime15.setZone(dateTimeZone26);
        mutableDateTime1.setZone(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        int int38 = dateTimeZone35.getOffsetFromLocal((long) (-1));
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone35);
        long long41 = dateTimeZone26.getMillisKeepLocal(dateTimeZone35, 1644573186128L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime11", (mutableDateTime1.compareTo(dateTime11) == 0) == mutableDateTime1.equals(dateTime11));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime13.withMillisOfSecond(376);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime13.toMutableDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime19", (dateTime8.compareTo(mutableDateTime19) == 0) == dateTime8.equals(mutableDateTime19));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        int int20 = mutableDateTime19.getEra();
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime19.setChronology(chronology21);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTime dateTime25 = dateTime12.minusYears(3600000);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int33 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate36 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate37 = property34.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval40 = localDate37.toInterval(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime25.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 53);
        mutableDateTime41.setZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime41", (dateTime25.compareTo(mutableDateTime41) == 0) == dateTime25.equals(mutableDateTime41));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear((int) (byte) 1);
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears((int) ' ');
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology42, locale51);
        org.joda.time.DateTimeField dateTimeField54 = chronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology42.weekyear();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) ' ', chronology42);
        long long61 = chronology42.add(0L, 32L, 22);
        org.joda.time.DateTimeField dateTimeField62 = chronology42.dayOfWeek();
        int int63 = dateTime34.get(dateTimeField62);
        int int65 = dateTimeField62.getMaximumValue((long) (-41));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        int int20 = mutableDateTime19.getEra();
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime19.setChronology(chronology21);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTime dateTime25 = dateTime12.minusYears(3600000);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int33 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate36 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate37 = property34.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval40 = localDate37.toInterval(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime25.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str46 = dateTimeZone44.getNameKey((long) 53);
        mutableDateTime41.setZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime41", (dateTime25.compareTo(mutableDateTime41) == 0) == dateTime25.equals(mutableDateTime41));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = mutableDateTime1.toString(dateTimeFormatter2);
        long long4 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.Chronology chronology9 = null;
        mutableDateTime8.setChronology(chronology9);
        mutableDateTime8.addDays(0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime8.add(readablePeriod13);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime1.addDays(32);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        boolean boolean21 = mutableDateTime19.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime19.setZone(dateTimeZone23);
        java.lang.String str25 = mutableDateTime19.toString();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime19.add(readablePeriod26);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        boolean boolean39 = mutableDateTime37.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime37.setZone(dateTimeZone41);
        long long44 = dateTimeZone41.nextTransition((long) '4');
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone41);
        java.lang.String str47 = dateTimeZone41.getNameKey((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(0L, dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusDays((int) 'a');
        int int55 = localDateTime52.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.withMillisOfDay(2022);
        boolean boolean58 = dateTimeZone41.isLocalDateTimeGap(localDateTime52);
        mutableDateTime19.setZoneRetainFields(dateTimeZone41);
        mutableDateTime1.setZoneRetainFields(dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime19", (mutableDateTime6.compareTo(mutableDateTime19) == 0) == mutableDateTime6.equals(mutableDateTime19));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        boolean boolean22 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate21);
        int int23 = localDate21.getDayOfWeek();
        org.joda.time.LocalDate.Property property24 = localDate21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval27 = localDate21.toInterval(dateTimeZone26);
        long long29 = dateTimeZone26.convertUTCToLocal((long) 0);
        mutableDateTime15.setZone(dateTimeZone26);
        mutableDateTime1.setZone(dateTimeZone26);
        java.lang.String str32 = dateTimeZone26.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime11", (mutableDateTime1.compareTo(dateTime11) == 0) == mutableDateTime1.equals(dateTime11));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int17 = mutableDateTime1.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.year();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket27.saveField(dateTimeFieldType28, "1970-01-01T00:00:00.000Z", locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology21, locale30);
        java.lang.String str33 = chronology21.toString();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField35 = chronology21.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        org.joda.time.Chronology chronology39 = chronology21.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField40 = chronology39.hours();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1, chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime42", (mutableDateTime1.compareTo(mutableDateTime42) == 0) == mutableDateTime1.equals(mutableDateTime42));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear(42);
        int int18 = localDateTime17.getMillisOfDay();
        int int19 = localDateTime17.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.util.GregorianCalendar gregorianCalendar21 = mutableDateTime20.toGregorianCalendar();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDate22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime20", (dateTime7.compareTo(mutableDateTime20) == 0) == dateTime7.equals(mutableDateTime20));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        long long21 = dateTimeZone12.adjustOffset(25260020L, true);
        long long24 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = localTime27.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        boolean boolean43 = localDate39.isEqual((org.joda.time.ReadablePartial) localDate42);
        int int44 = localDate42.getDayOfWeek();
        org.joda.time.LocalDate.Property property45 = localDate42.weekOfWeekyear();
        org.joda.time.LocalDate localDate47 = property45.setCopy((int) (byte) 1);
        boolean boolean48 = mutableDateTime36.equals((java.lang.Object) property45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (short) 0, chronology53);
        boolean boolean55 = localDate51.isEqual((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDate51.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime60 = dateTime57.toDateTimeISO();
        org.joda.time.DateTime.Property property61 = dateTime57.weekyear();
        org.joda.time.DateTime dateTime62 = property61.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime64 = dateTime62.minusMillis(3);
        int int65 = dateTime62.getYearOfCentury();
        org.joda.time.DateTime dateTime67 = dateTime62.minusMonths(20);
        mutableDateTime36.setMillis((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime69 = dateTime62.toDateTimeISO();
        org.joda.time.DateTime dateTime72 = dateTime62.withDurationAdded(3121273L, 3939);
        org.joda.time.DateTime dateTime74 = dateTime62.plusDays(35602255);
        org.joda.time.DateTime dateTime75 = dateTime74.withEarlierOffsetAtOverlap();
        boolean boolean76 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) dateTime74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime29", (mutableDateTime8.compareTo(mutableDateTime29) == 0) == mutableDateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = mutableDateTime1.toString(dateTimeFormatter2);
        long long4 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.Chronology chronology9 = null;
        mutableDateTime8.setChronology(chronology9);
        mutableDateTime8.addDays(0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime8.add(readablePeriod13);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        int int22 = dateTimeField20.getMaximumTextLength(locale21);
        int int24 = dateTimeField20.get((long) 6);
        boolean boolean25 = dateTimeField20.isSupported();
        mutableDateTime1.setRounding(dateTimeField20, 3);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime1.add(readablePeriod28, 42);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.getMutableDateTime();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        boolean boolean41 = localDate37.isEqual((org.joda.time.ReadablePartial) localDate40);
        int int42 = localDate40.getDayOfWeek();
        org.joda.time.LocalDate.Property property43 = localDate40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval46 = localDate40.toInterval(dateTimeZone45);
        long long48 = dateTimeZone45.convertUTCToLocal((long) 0);
        mutableDateTime34.setZone(dateTimeZone45);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime34.weekyear();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime34", (mutableDateTime6.compareTo(mutableDateTime34) == 0) == mutableDateTime6.equals(mutableDateTime34));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField2 = chronology1.era();
        org.joda.time.DurationField durationField3 = chronology1.weeks();
        org.joda.time.DateTimeField dateTimeField4 = chronology1.year();
        org.joda.time.DurationField durationField5 = chronology1.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology1.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField5", Math.signum(durationField3.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField3)));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        int int16 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 0, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        boolean boolean23 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = property29.addToCopy((long) (byte) -1);
        int int32 = dateTime31.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight33 = dateTime31.toDateMidnight();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime15.toMutableDateTime();
        org.joda.time.Instant instant36 = mutableDateTime15.toInstant();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        boolean boolean43 = localDate39.isEqual((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate.Property property44 = localDate42.centuryOfEra();
        int int45 = localDate42.getCenturyOfEra();
        java.lang.String str46 = localDate42.toString();
        org.joda.time.LocalDate.Property property47 = localDate42.era();
        org.joda.time.LocalDate.Property property48 = localDate42.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.dayOfYear();
        boolean boolean52 = mutableDateTime50.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime50.setZone(dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableDateTime50.add(readablePeriod56, 4);
        mutableDateTime50.setTime((long) (short) 10);
        int int61 = mutableDateTime50.getEra();
        org.joda.time.DateTime dateTime62 = mutableDateTime50.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime50.dayOfMonth();
        long long64 = property48.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime50.add(readableDuration65, (int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getRangeDurationType();
        mutableDateTime50.add(durationFieldType69, 35557);
        mutableDateTime15.add(durationFieldType69, 200);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight33 and instant36", (dateMidnight33.compareTo(instant36) == 0) == dateMidnight33.equals(instant36));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime3.add(readableDuration20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime3.add(readableDuration22, 2922789);
        int int25 = mutableDateTime3.getMonthOfYear();
        java.lang.Object obj26 = mutableDateTime3.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone23);
        int int25 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime11.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        boolean boolean36 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime34.setZone(dateTimeZone38);
        long long41 = dateTimeZone38.nextTransition((long) '4');
        java.lang.String str43 = dateTimeZone38.getShortName(35L);
        boolean boolean44 = dateTimeZone38.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter29.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime46 = mutableDateTime11.toDateTime(dateTimeZone38);
        long long49 = dateTimeZone38.convertLocalToUTC(3577967159L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime24", (mutableDateTime11.compareTo(dateTime24) == 0) == mutableDateTime11.equals(dateTime24));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        int int4 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plus(readableDuration23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        long long27 = chronology15.set((org.joda.time.ReadablePartial) localDateTime24, (long) 22);
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket40.saveField(dateTimeFieldType41, "1970-01-01T00:00:00.000Z", locale43);
        dateTimeParserBucket33.saveField(dateTimeFieldType34, "1970-01-01T00:00:00.000Z", locale43);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket50.saveField(dateTimeFieldType51, "1970-01-01T00:00:00.000Z", locale53);
        java.lang.String str55 = locale43.getDisplayCountry(locale53);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket67.saveField(dateTimeFieldType68, "1970-01-01T00:00:00.000Z", locale70);
        dateTimeParserBucket60.saveField(dateTimeFieldType61, "1970-01-01T00:00:00.000Z", locale70);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket77.saveField(dateTimeFieldType78, "1970-01-01T00:00:00.000Z", locale80);
        java.lang.String str82 = locale70.getDisplayCountry(locale80);
        java.lang.String str83 = locale53.getDisplayVariant(locale70);
        java.util.Locale.setDefault(category28, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale53, (java.lang.Integer) 7);
        org.joda.time.DurationField durationField87 = chronology15.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter2.withChronology(chronology15);
        org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField90 = chronology15.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime89", (dateTime14.compareTo(dateTime89) == 0) == dateTime14.equals(dateTime89));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime3.add(readableDuration20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime3.add(readableDuration22, 2922789);
        int int25 = mutableDateTime3.getMonthOfYear();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime3.copy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        int int10 = localDate9.size();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        boolean boolean16 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime14.setZone(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) '4');
        org.joda.time.DateTime dateTime22 = localDate12.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.LocalDate localDate32 = property31.roundFloorCopy();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) 100);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket46.saveField(dateTimeFieldType47, "1970-01-01T00:00:00.000Z", locale49);
        dateTimeParserBucket39.saveField(dateTimeFieldType40, "1970-01-01T00:00:00.000Z", locale49);
        org.joda.time.LocalDate.Property property52 = localDate34.property(dateTimeFieldType40);
        int int53 = localDate34.size();
        boolean boolean54 = localDate12.isAfter((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate56 = localDate12.withYear(20);
        int int57 = localDate12.size();
        int int58 = localDate12.getYear();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 0, chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) (short) 0, chronology63);
        boolean boolean65 = localDate61.isEqual((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        org.joda.time.LocalDate.Property property70 = localDate64.property(dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType69.getRangeDurationType();
        java.lang.String str72 = dateTimeFieldType69.toString();
        boolean boolean73 = localDate12.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDate.Property property74 = localDate12.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime67", (mutableDateTime14.compareTo(mutableDateTime67) == 0) == mutableDateTime14.equals(mutableDateTime67));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        int int20 = mutableDateTime19.getEra();
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime19.setChronology(chronology21);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.secondOfMinute();
        boolean boolean27 = dateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateTime dateTime29 = dateTime12.plus(719L);
        org.joda.time.DateTime dateTime31 = dateTime12.withWeekyear(2022);
        org.joda.time.DateTime.Property property32 = dateTime12.minuteOfDay();
        org.joda.time.DateTime.Property property33 = dateTime12.secondOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        boolean boolean40 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate39);
        int int41 = localDate39.getDayOfWeek();
        int int42 = localDate39.getMonthOfYear();
        int[] intArray43 = localDate39.getValues();
        int int44 = localDate39.getDayOfYear();
        org.joda.time.LocalDate localDate46 = localDate39.minusWeeks(3522);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.dayOfYear();
        boolean boolean50 = mutableDateTime48.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime48.setZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime.Property property56 = dateTime54.monthOfYear();
        org.joda.time.DateTime dateTime57 = localDate39.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property58 = dateTime57.millisOfSecond();
        org.joda.time.DateTime dateTime60 = dateTime57.plusDays(6814);
        boolean boolean61 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and mutableDateTime48", (mutableDateTime19.compareTo(mutableDateTime48) == 0) == mutableDateTime19.equals(mutableDateTime48));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundHalfEven();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 0);
        long long12 = dateTimeParserBucket10.computeMillis(true);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        boolean boolean19 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getDayOfWeek();
        org.joda.time.LocalDate.Property property21 = localDate18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval24 = localDate18.toInterval(dateTimeZone23);
        long long26 = dateTimeZone23.convertUTCToLocal((long) 0);
        dateTimeParserBucket10.setZone(dateTimeZone23);
        long long30 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime4.toMutableDateTime(dateTimeZone23);
        boolean boolean33 = mutableDateTime4.isBefore(1644573282043L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime31", (mutableDateTime4.compareTo(mutableDateTime31) == 0) == mutableDateTime4.equals(mutableDateTime31));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        int int4 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        boolean boolean15 = mutableDateTime13.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime13.setZone(dateTimeZone17);
        long long20 = dateTimeZone17.nextTransition((long) '4');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone17);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime21.minus((long) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears(0);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime24.toMutableDateTime(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withZone(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and mutableDateTime29", (dateTime24.compareTo(mutableDateTime29) == 0) == dateTime24.equals(mutableDateTime29));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(100L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addYears(69);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket16.saveField(dateTimeFieldType17, "1970-01-01T00:00:00.000Z", locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology10, locale19);
        java.lang.String str22 = chronology10.toString();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology10.add(readablePeriod24, 345600050L, (int) (short) 0);
        mutableDateTime6.setChronology(chronology10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime6);
        int int30 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.secondOfMinute();
        int int32 = property31.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime6", (mutableDateTime1.compareTo(mutableDateTime6) == 0) == mutableDateTime1.equals(mutableDateTime6));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.DateTime.Property property18 = dateTime12.centuryOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime27.weekyear();
        org.joda.time.DateTime dateTime32 = property31.roundHalfFloorCopy();
        boolean boolean33 = dateTime32.isEqualNow();
        org.joda.time.DateTime dateTime34 = dateTime32.withLaterOffsetAtOverlap();
        boolean boolean35 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Instant instant36 = dateTime12.toInstant();
        org.joda.time.DateTime dateTime38 = dateTime12.plus(1644573313003L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant36", (dateTime12.compareTo(instant36) == 0) == dateTime12.equals(instant36));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 0, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        boolean boolean7 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate6);
        int int8 = localDate6.getDayOfWeek();
        org.joda.time.LocalDate.Property property9 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        boolean boolean19 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        org.joda.time.LocalDate.Property property24 = localDate18.property(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        boolean boolean26 = localDate10.isSupported(durationFieldType25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 0, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        boolean boolean33 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.plus(readableDuration38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withChronology(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekOfWeekyear(4);
        org.joda.time.DateTime.Property property44 = dateTime41.monthOfYear();
        org.joda.time.DateTime.Property property45 = dateTime41.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int50 = dateTimeZone48.getOffset((long) '4');
        long long52 = dateTimeZone48.nextTransition((long) 70);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = mutableDateTime54.toString(dateTimeFormatter55);
        mutableDateTime54.addMonths((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.dayOfYear();
        boolean boolean63 = mutableDateTime61.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime61.setZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(6048000000L, dateTimeZone65);
        mutableDateTime54.setZone(dateTimeZone65);
        long long70 = dateTimeZone48.getMillisKeepLocal(dateTimeZone65, (long) 'u');
        int int72 = dateTimeZone65.getStandardOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime41.toMutableDateTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight74 = localDate10.toDateMidnight(dateTimeZone65);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(315507540000L, dateTimeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and mutableDateTime61", (mutableDateTime21.compareTo(mutableDateTime61) == 0) == mutableDateTime21.equals(mutableDateTime61));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket11.saveField(dateTimeFieldType12, "1970-01-01T00:00:00.000Z", locale14);
        dateTimeParserBucket4.saveField(dateTimeFieldType5, "1970-01-01T00:00:00.000Z", locale14);
        java.lang.Integer int17 = dateTimeParserBucket4.getPivotYear();
        java.util.Locale locale18 = dateTimeParserBucket4.getLocale();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket35.saveField(dateTimeFieldType36, "1970-01-01T00:00:00.000Z", locale38);
        dateTimeParserBucket28.saveField(dateTimeFieldType29, "1970-01-01T00:00:00.000Z", locale38);
        dateTimeParserBucket4.saveField(dateTimeFieldType22, "", locale38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate44.toDateTimeAtStartOfDay(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime.Property property54 = dateTime53.hourOfDay();
        org.joda.time.DateTime dateTime56 = dateTime53.minusSeconds(0);
        org.joda.time.DateTime dateTime58 = dateTime56.plusDays(1);
        boolean boolean59 = dateTime56.isAfterNow();
        org.joda.time.DateTime dateTime60 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime62 = dateTime60.withSecondOfMinute(9);
        org.joda.time.DateTime.Property property63 = dateTime60.secondOfDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) (short) 0, chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) (short) 0, chronology68);
        boolean boolean70 = localDate66.isEqual((org.joda.time.ReadablePartial) localDate69);
        int int71 = localDate69.getDayOfWeek();
        org.joda.time.LocalDate.Property property72 = localDate69.weekOfWeekyear();
        org.joda.time.LocalDate localDate73 = property72.roundFloorCopy();
        int int74 = localDate73.size();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDate localDate76 = localDate73.minus(readablePeriod75);
        org.joda.time.DateTime dateTime77 = localDate73.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate79 = localDate73.minusYears(1);
        int int80 = localDate73.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight81 = localDate73.toDateMidnight();
        org.joda.time.Chronology chronology82 = localDate73.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.weekyear();
        org.joda.time.DateTime dateTime86 = dateTime60.toDateTime(chronology82);
        boolean boolean87 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime86", (dateTime50.compareTo(dateTime86) == 0) == dateTime50.equals(dateTime86));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        long long3 = property2.remainder();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime5.copy();
        org.joda.time.DateTime dateTime7 = mutableDateTime5.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.LocalDateTime localDateTime13 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = property11.addWrapFieldToCopy(1970);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plus(readableDuration22);
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths((int) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime24.withMillis((long) 238);
        int int29 = dateTime24.getSecondOfDay();
        long long30 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime32 = dateTime24.plusMonths(3548000);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        boolean boolean36 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime34.setZone(dateTimeZone38);
        java.lang.String str40 = mutableDateTime34.toString();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime34.add(readablePeriod41);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfYear();
        boolean boolean54 = mutableDateTime52.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime52.setZone(dateTimeZone56);
        long long59 = dateTimeZone56.nextTransition((long) '4');
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone56);
        java.lang.String str62 = dateTimeZone56.getNameKey((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(0L, dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minus(readablePeriod66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusDays((int) 'a');
        int int70 = localDateTime67.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.withMillisOfDay(2022);
        boolean boolean73 = dateTimeZone56.isLocalDateTimeGap(localDateTime67);
        mutableDateTime34.setZoneRetainFields(dateTimeZone56);
        long long76 = dateTimeZone56.nextTransition(1644573094923L);
        org.joda.time.DateTime dateTime77 = dateTime24.withZoneRetainFields(dateTimeZone56);
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime34", (mutableDateTime6.compareTo(mutableDateTime34) == 0) == mutableDateTime6.equals(mutableDateTime34));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        int int20 = localDate16.getDayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDate16.getFieldTypes();
        org.joda.time.LocalDate localDate23 = localDate16.plusMonths((int) ' ');
        org.joda.time.DateTime dateTime24 = localDate16.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate25 = dateTime24.toLocalDate();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime34.weekyear();
        org.joda.time.DateTime dateTime39 = dateTime34.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfDay();
        org.joda.time.DateTime.Property property41 = dateTime39.yearOfCentury();
        org.joda.time.DateTime dateTime42 = property41.roundCeilingCopy();
        org.joda.time.Instant instant43 = dateTime42.toInstant();
        boolean boolean44 = dateTime24.isEqual((org.joda.time.ReadableInstant) instant43);
        boolean boolean45 = dateTime10.equals((java.lang.Object) instant43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        boolean boolean52 = localDate48.isEqual((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate48.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime.Property property58 = dateTime54.weekyear();
        org.joda.time.DateTime dateTime59 = dateTime54.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTime.Property property61 = dateTime59.weekyear();
        org.joda.time.DateTime.Property property62 = dateTime59.minuteOfDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 0, chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (short) 0, chronology67);
        boolean boolean69 = localDate65.isEqual((org.joda.time.ReadablePartial) localDate68);
        int int70 = localDate68.getDayOfWeek();
        org.joda.time.LocalDate.Property property71 = localDate68.weekOfWeekyear();
        int int72 = localDate68.getDayOfWeek();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (short) 0, chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) (short) 0, chronology77);
        boolean boolean79 = localDate75.isEqual((org.joda.time.ReadablePartial) localDate78);
        int int80 = localDate78.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean82 = localDate78.isSupported(dateTimeFieldType81);
        int int83 = localDate68.get(dateTimeFieldType81);
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType81.getRangeDurationType();
        int int85 = dateTime59.get(dateTimeFieldType81);
        boolean boolean86 = dateTime10.isSupported(dateTimeFieldType81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and instant43", (dateTime34.compareTo(instant43) == 0) == dateTime34.equals(instant43));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket10.saveField(dateTimeFieldType11, "1970-01-01T00:00:00.000Z", locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology4, locale13);
        java.lang.String str16 = chronology4.toString();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.weekyear();
        org.joda.time.Chronology chronology19 = chronology4.withUTC();
        org.joda.time.DurationField durationField20 = chronology4.minutes();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfHalfday();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket31.saveField(dateTimeFieldType32, "1970-01-01T00:00:00.000Z", locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology25, locale34);
        java.lang.String str37 = locale34.getISO3Country();
        java.lang.String str38 = locale34.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale34, (java.lang.Integer) 3);
        java.lang.String str41 = locale34.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale34);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(69L, chronology4);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 0);
        int int46 = mutableDateTime45.getEra();
        org.joda.time.Chronology chronology47 = null;
        mutableDateTime45.setChronology(chronology47);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property51.getFieldType();
        mutableDateTime45.set(dateTimeFieldType52, (int) '4');
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfHalfday();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket63.saveField(dateTimeFieldType64, "1970-01-01T00:00:00.000Z", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology57, locale66);
        java.lang.String str69 = chronology57.toString();
        org.joda.time.DurationField durationField70 = chronology57.eras();
        boolean boolean71 = dateTimeFieldType52.isSupported(chronology57);
        mutableDateTime43.set(dateTimeFieldType52, 141);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField20 and durationField70", Math.signum(durationField20.compareTo(durationField70)) == -Math.signum(durationField70.compareTo(durationField20)));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTimeISO();
        java.lang.Object obj12 = mutableDateTime1.clone();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13);
        mutableDateTime1.setWeekyear(2039);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        boolean boolean24 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withChronology(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekOfWeekyear(4);
        org.joda.time.DateTime.Property property35 = dateTime32.monthOfYear();
        org.joda.time.DateTime.Property property36 = dateTime32.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int41 = dateTimeZone39.getOffset((long) '4');
        long long43 = dateTimeZone39.nextTransition((long) 70);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = mutableDateTime45.toString(dateTimeFormatter46);
        mutableDateTime45.addMonths((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfYear();
        boolean boolean54 = mutableDateTime52.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime52.setZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(6048000000L, dateTimeZone56);
        mutableDateTime45.setZone(dateTimeZone56);
        long long61 = dateTimeZone39.getMillisKeepLocal(dateTimeZone56, (long) 'u');
        int int63 = dateTimeZone56.getStandardOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime32.toMutableDateTime(dateTimeZone56);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and mutableDateTime64", (dateTime32.compareTo(mutableDateTime64) == 0) == dateTime32.equals(mutableDateTime64));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        boolean boolean17 = dateTime14.isAfterNow();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(10);
        org.joda.time.DateTime dateTime23 = dateTime19.withYear(32000);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 35);
        org.joda.time.DateTime dateTime27 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        boolean boolean34 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate30.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.minusSeconds(0);
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(1);
        org.joda.time.DateTime.Property property45 = dateTime44.millisOfSecond();
        int int46 = dateTime44.getHourOfDay();
        boolean boolean47 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime27", (dateTime19.compareTo(dateTime27) == 0) == dateTime19.equals(dateTime27));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(6048000000L, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        long long12 = dateTimeZone7.convertUTCToLocal((long) 0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, dateTimeZone7);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        boolean boolean19 = mutableDateTime17.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime17.setZone(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime17.add(readablePeriod23, 4);
        mutableDateTime17.setTime((long) (short) 10);
        int int28 = mutableDateTime17.getEra();
        org.joda.time.DateTime dateTime29 = mutableDateTime17.toDateTimeISO();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfHalfday();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket39.saveField(dateTimeFieldType40, "1970-01-01T00:00:00.000Z", locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology33, locale42);
        java.lang.String str45 = chronology33.toString();
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField47 = chronology33.weekyear();
        org.joda.time.Chronology chronology48 = chronology33.withUTC();
        org.joda.time.DurationField durationField49 = chronology33.minutes();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology54 = localTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfHalfday();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket60.saveField(dateTimeFieldType61, "1970-01-01T00:00:00.000Z", locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology54, locale63);
        java.lang.String str66 = locale63.getISO3Country();
        java.lang.String str67 = locale63.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale63, (java.lang.Integer) 3);
        java.lang.String str70 = locale63.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale63);
        java.lang.String str72 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology33.yearOfCentury();
        mutableDateTime17.setChronology(chronology33);
        int int76 = dateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime46", (dateTime10.compareTo(mutableDateTime46) == 0) == dateTime10.equals(mutableDateTime46));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.withSecondOfMinute((int) (short) 10);
        int int4 = localTime0.getValue((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = mutableDateTime6.toString(dateTimeFormatter7);
        mutableDateTime6.addMonths((int) (byte) 1);
        org.joda.time.Instant instant11 = mutableDateTime6.toInstant();
        org.joda.time.DateTime dateTime12 = localTime0.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime0.plus(readablePeriod13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant11", (mutableDateTime6.compareTo(instant11) == 0) == mutableDateTime6.equals(instant11));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate5.plus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate9.withCenturyOfEra((int) 'a');
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfSecond(100);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        mutableDateTime15.addWeekyears((int) (byte) 100);
        org.joda.time.Instant instant18 = mutableDateTime15.toInstant();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfDay();
        int int30 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime27.minusSeconds((int) (short) 0);
        boolean boolean33 = mutableDateTime15.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        boolean boolean40 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime dateTime48 = property46.addToCopy((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfDay();
        org.joda.time.DateTime dateTime51 = property50.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property52 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime53 = property52.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime54 = property52.roundHalfFloorCopy();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 0, chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 0, chronology59);
        boolean boolean61 = localDate57.isEqual((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime63.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property64.getFieldType();
        org.joda.time.LocalDate.Property property66 = localDate60.property(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType65.getRangeDurationType();
        java.lang.String str68 = dateTimeFieldType65.toString();
        int int69 = dateTime54.get(dateTimeFieldType65);
        int int70 = dateTime27.get(dateTimeFieldType65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and instant18", (mutableDateTime15.compareTo(instant18) == 0) == mutableDateTime15.equals(instant18));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear((int) (byte) 10);
        boolean boolean7 = dateTimeFormatter4.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withDefaultYear((int) (short) 0);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket18.saveField(dateTimeFieldType19, "1970-01-01T00:00:00.000Z", locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology12, locale21);
        java.lang.String str24 = chronology12.toString();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.weekyear();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime29.getZone();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime29.add(readableDuration31, 3);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime29.getZone();
        int int36 = dateTimeZone34.getOffset((long) (byte) 1);
        org.joda.time.Chronology chronology37 = chronology12.withZone(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter4.withChronology(chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime25 and mutableDateTime38", (mutableDateTime25.compareTo(mutableDateTime38) == 0) == mutableDateTime25.equals(mutableDateTime38));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.LocalDate localDate10 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(0);
        org.joda.time.DurationField durationField13 = property8.getLeapDurationField();
        java.lang.String str14 = property8.toString();
        org.joda.time.LocalDate localDate16 = property8.addWrapFieldToCopy(99);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime20.setChronology(chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.year();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime20.add(readablePeriod24);
        mutableDateTime20.setMillisOfDay(35);
        int int28 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        boolean boolean39 = mutableDateTime37.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime37.setZone(dateTimeZone41);
        long long44 = dateTimeZone41.nextTransition((long) '4');
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone41);
        java.lang.String str47 = dateTimeZone41.getNameKey((long) (byte) 100);
        long long50 = dateTimeZone41.adjustOffset(25260020L, true);
        mutableDateTime20.setZone(dateTimeZone41);
        mutableDateTime20.addYears(117);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 0, chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 0, chronology58);
        boolean boolean60 = localDate56.isEqual((org.joda.time.ReadablePartial) localDate59);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property63.getFieldType();
        org.joda.time.LocalDate.Property property65 = localDate59.property(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType64.getRangeDurationType();
        java.lang.String str67 = dateTimeFieldType64.getName();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime20.property(dateTimeFieldType64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime37 and mutableDateTime62", (mutableDateTime37.compareTo(mutableDateTime62) == 0) == mutableDateTime37.equals(mutableDateTime62));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(381044902L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfYear();
        boolean boolean6 = mutableDateTime4.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime4.setZoneRetainFields(dateTimeZone7);
        mutableDateTime4.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime4.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        int int26 = localDate24.getDayOfWeek();
        org.joda.time.LocalDate.Property property27 = localDate24.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval30 = localDate24.toInterval(dateTimeZone29);
        long long32 = dateTimeZone29.convertUTCToLocal((long) 0);
        mutableDateTime18.setZone(dateTimeZone29);
        mutableDateTime4.setZone(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone29);
        mutableDateTime1.setZoneRetainFields(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime1.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and dateTime14", (mutableDateTime4.compareTo(dateTime14) == 0) == mutableDateTime4.equals(dateTime14));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes((int) 'x');
        int int16 = localDateTime15.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMillis(2022);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.getMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar23 = mutableDateTime22.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean25 = mutableDateTime22.isSupported(dateTimeFieldType24);
        int int26 = localDateTime15.indexOf(dateTimeFieldType24);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime0.property(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType24.getDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime9", (mutableDateTime0.compareTo(dateTime9) == 0) == mutableDateTime0.equals(dateTime9));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfHalfday();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket23.saveField(dateTimeFieldType24, "1970-01-01T00:00:00.000Z", locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology17, locale26);
        java.lang.String str29 = chronology17.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField31 = chronology17.weekyear();
        org.joda.time.Chronology chronology32 = chronology17.withUTC();
        org.joda.time.DurationField durationField33 = chronology17.minutes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfHalfday();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket44.saveField(dateTimeFieldType45, "1970-01-01T00:00:00.000Z", locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology38, locale47);
        java.lang.String str50 = locale47.getISO3Country();
        java.lang.String str51 = locale47.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale47, (java.lang.Integer) 3);
        java.lang.String str54 = locale47.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale47);
        java.lang.String str56 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology17.yearOfCentury();
        mutableDateTime1.setChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField60 = chronology17.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        mutableDateTime3.add(durationFieldType21, 35750048);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        boolean boolean17 = dateTime14.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime18.withSecondOfMinute(9);
        org.joda.time.DateTime.Property property21 = dateTime18.secondOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        boolean boolean28 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate27);
        int int29 = localDate27.getDayOfWeek();
        org.joda.time.LocalDate.Property property30 = localDate27.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = property30.roundFloorCopy();
        int int32 = localDate31.size();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate34 = localDate31.minus(readablePeriod33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate37 = localDate31.minusYears(1);
        int int38 = localDate31.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight39 = localDate31.toDateMidnight();
        org.joda.time.Chronology chronology40 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekyear();
        org.joda.time.DateTime dateTime44 = dateTime18.toDateTime(chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime44", (dateTime8.compareTo(dateTime44) == 0) == dateTime8.equals(dateTime44));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.util.GregorianCalendar gregorianCalendar1 = mutableDateTime0.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withMillis((long) 366);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        boolean boolean8 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime4", (mutableDateTime0.compareTo(dateTime4) == 0) == mutableDateTime0.equals(dateTime4));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillis((long) 366);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime5.minus(9223371988012800771L);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear(2022);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone20);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.Chronology chronology25 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter13.withChronology(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime5.withChronology(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime22", (dateTime2.compareTo(dateTime22) == 0) == dateTime2.equals(dateTime22));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        int int4 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plus(readableDuration23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        long long27 = chronology15.set((org.joda.time.ReadablePartial) localDateTime24, (long) 22);
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket40.saveField(dateTimeFieldType41, "1970-01-01T00:00:00.000Z", locale43);
        dateTimeParserBucket33.saveField(dateTimeFieldType34, "1970-01-01T00:00:00.000Z", locale43);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket50.saveField(dateTimeFieldType51, "1970-01-01T00:00:00.000Z", locale53);
        java.lang.String str55 = locale43.getDisplayCountry(locale53);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket67.saveField(dateTimeFieldType68, "1970-01-01T00:00:00.000Z", locale70);
        dateTimeParserBucket60.saveField(dateTimeFieldType61, "1970-01-01T00:00:00.000Z", locale70);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket77.saveField(dateTimeFieldType78, "1970-01-01T00:00:00.000Z", locale80);
        java.lang.String str82 = locale70.getDisplayCountry(locale80);
        java.lang.String str83 = locale53.getDisplayVariant(locale70);
        java.util.Locale.setDefault(category28, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale53, (java.lang.Integer) 7);
        org.joda.time.DurationField durationField87 = chronology15.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter2.withChronology(chronology15);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField90 = chronology15.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime89", (dateTime14.compareTo(dateTime89) == 0) == dateTime14.equals(dateTime89));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.DateTime.Property property18 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfSecond(31);
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours(19);
        org.joda.time.DateTime dateTime25 = dateTime19.plusYears(198970);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime25.withWeekyear(22);
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(2071);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        boolean boolean40 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate39);
        int int41 = localDate39.getDayOfWeek();
        org.joda.time.LocalDate.Property property42 = localDate39.weekOfWeekyear();
        org.joda.time.LocalDate localDate43 = property42.roundFloorCopy();
        org.joda.time.LocalDate localDate44 = property42.roundCeilingCopy();
        org.joda.time.LocalDate localDate45 = property42.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval48 = localDate45.toInterval(dateTimeZone47);
        mutableDateTime32.setZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str52 = dateTimeZone47.getName((long) 2051);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime28.toMutableDateTime(dateTimeZone47);
        long long57 = dateTimeZone47.convertLocalToUTC((long) 69, false, (long) 210001970);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and mutableDateTime53", (dateTime28.compareTo(mutableDateTime53) == 0) == dateTime28.equals(mutableDateTime53));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        mutableDateTime1.addWeekyears(69);
        mutableDateTime1.setSecondOfDay(3);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.addWrapField(2000);
        org.joda.time.MutableDateTime mutableDateTime20 = property17.roundHalfCeiling();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        boolean boolean27 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        boolean boolean40 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property43.getFieldType();
        org.joda.time.LocalDate.Property property45 = localDate39.property(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.DateTime dateTime48 = dateTime32.withFieldAdded(durationFieldType46, 5);
        org.joda.time.DateTime dateTime50 = dateTime32.minusMillis(235);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime32.getZone();
        org.joda.time.DateTime dateTime53 = dateTime32.plusYears(2100000);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra(183);
        long long56 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime42", (instant10.compareTo(mutableDateTime42) == 0) == instant10.equals(mutableDateTime42));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.millis();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime11", (mutableDateTime1.compareTo(mutableDateTime11) == 0) == mutableDateTime1.equals(mutableDateTime11));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.months();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology8);
        long long14 = chronology8.add((-36000024L), 1644573278861L, 235);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime10", (dateTime7.compareTo(mutableDateTime10) == 0) == dateTime7.equals(mutableDateTime10));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter23.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(238, (int) (byte) 10);
        long long30 = dateTimeZone27.adjustOffset((long) 97, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter23.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime12.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime34 = dateTime12.withMillis(381316050L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime32", (dateTime12.compareTo(dateTime32) == 0) == dateTime12.equals(dateTime32));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 0);
        int int10 = mutableDateTime9.getEra();
        org.joda.time.Chronology chronology11 = null;
        mutableDateTime9.setChronology(chronology11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        mutableDateTime9.set(dateTimeFieldType16, (int) '4');
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket27.saveField(dateTimeFieldType28, "1970-01-01T00:00:00.000Z", locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology21, locale30);
        java.lang.String str33 = chronology21.toString();
        org.joda.time.DurationField durationField34 = chronology21.eras();
        boolean boolean35 = dateTimeFieldType16.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField36 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology21.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter7.withChronology(chronology21);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime42 = localTime39.withPeriodAdded(readablePeriod40, (int) (short) 0);
        org.joda.time.LocalTime.Property property43 = localTime39.secondOfMinute();
        org.joda.time.LocalTime localTime44 = property43.roundFloorCopy();
        org.joda.time.Chronology chronology45 = localTime44.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter7.withChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfHour();
        org.joda.time.DurationField durationField48 = chronology45.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField34, durationField48, and durationField34", !(durationField34.compareTo(durationField48) == 0) || (Math.signum(durationField34.compareTo(durationField34)) == Math.signum(durationField48.compareTo(durationField34))));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear((int) (byte) 1);
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears((int) ' ');
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology42, locale51);
        org.joda.time.DateTimeField dateTimeField54 = chronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology42.weekyear();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) ' ', chronology42);
        long long61 = chronology42.add(0L, 32L, 22);
        org.joda.time.DateTimeField dateTimeField62 = chronology42.dayOfWeek();
        int int63 = dateTime34.get(dateTimeField62);
        int int64 = dateTimeField62.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        boolean boolean4 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime2.setZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(6048000000L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) '4', chronology19);
        org.joda.time.DurationField durationField22 = chronology19.years();
        org.joda.time.DurationField durationField23 = chronology19.halfdays();
        org.joda.time.DateTime dateTime24 = dateTime9.withChronology(chronology19);
        org.joda.time.DurationField durationField25 = chronology19.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime24", (dateTime9.compareTo(dateTime24) == 0) == dateTime9.equals(dateTime24));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        mutableDateTime1.addWeekyears(69);
        mutableDateTime1.setSecondOfDay(3);
        mutableDateTime1.setDayOfYear((int) (byte) 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        boolean boolean38 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.LocalDate.Property property43 = localDate37.property(dateTimeFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType42.getRangeDurationType();
        org.joda.time.DateTime dateTime46 = dateTime30.withFieldAdded(durationFieldType44, 5);
        mutableDateTime1.add(durationFieldType44, 119);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime40", (instant10.compareTo(mutableDateTime40) == 0) == instant10.equals(mutableDateTime40));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfHalfday();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket23.saveField(dateTimeFieldType24, "1970-01-01T00:00:00.000Z", locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology17, locale26);
        java.lang.String str29 = chronology17.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField31 = chronology17.weekyear();
        org.joda.time.Chronology chronology32 = chronology17.withUTC();
        org.joda.time.DurationField durationField33 = chronology17.minutes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfHalfday();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket44.saveField(dateTimeFieldType45, "1970-01-01T00:00:00.000Z", locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology38, locale47);
        java.lang.String str50 = locale47.getISO3Country();
        java.lang.String str51 = locale47.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale47, (java.lang.Integer) 3);
        java.lang.String str54 = locale47.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale47);
        java.lang.String str56 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology17.yearOfCentury();
        mutableDateTime1.setChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField60 = chronology17.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        mutableDateTime1.setDayOfMonth(1);
        int int14 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        boolean boolean20 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime18.setZone(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime18.add(readablePeriod24, 4);
        mutableDateTime18.setTime((long) (short) 10);
        int int29 = mutableDateTime18.getEra();
        org.joda.time.DateTime dateTime30 = mutableDateTime18.toDateTimeISO();
        boolean boolean31 = mutableDateTime16.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = dateTime30.withLaterOffsetAtOverlap();
        boolean boolean33 = mutableDateTime1.equals((java.lang.Object) dateTime30);
        int int34 = mutableDateTime1.getRoundingMode();
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 0, chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 0, chronology40);
        boolean boolean42 = localDate38.isEqual((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.plus(readableDuration47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.withChronology(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime48.withChronology(chronology51);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property55.getFieldType();
        org.joda.time.DateTime.Property property57 = dateTime52.property(dateTimeFieldType56);
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 0, chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) (short) 0, chronology63);
        boolean boolean65 = localDate61.isEqual((org.joda.time.ReadablePartial) localDate64);
        int int66 = localDate64.getDayOfWeek();
        org.joda.time.LocalDate.Property property67 = localDate64.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval70 = localDate64.toInterval(dateTimeZone69);
        int[] intArray72 = new int[] { 'a' };
        int int73 = dateTimeField58.getMaximumValue((org.joda.time.ReadablePartial) localDate64, intArray72);
        org.joda.time.Interval interval74 = localDate64.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = localDate64.getFieldType(2);
        org.joda.time.LocalDate.Property property77 = localDate64.weekyear();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) (short) 0, chronology79);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) (short) 0, chronology82);
        boolean boolean84 = localDate80.isEqual((org.joda.time.ReadablePartial) localDate83);
        int int85 = localDate83.getDayOfWeek();
        org.joda.time.LocalDate.Property property86 = localDate83.weekOfWeekyear();
        org.joda.time.LocalDate localDate87 = property86.roundFloorCopy();
        org.joda.time.LocalDate localDate88 = property86.roundCeilingCopy();
        org.joda.time.LocalDate localDate89 = property86.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval92 = localDate89.toInterval(dateTimeZone91);
        org.joda.time.DateTime dateTime93 = localDate64.toDateTimeAtStartOfDay(dateTimeZone91);
        org.joda.time.MutableDateTime mutableDateTime94 = new org.joda.time.MutableDateTime(dateTimeZone91);
        java.lang.String str95 = dateTimeZone91.toString();
        org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime(obj35, dateTimeZone91);
        mutableDateTime1.setZoneRetainFields(dateTimeZone91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime54", (instant10.compareTo(mutableDateTime54) == 0) == instant10.equals(mutableDateTime54));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        int int10 = localDate9.size();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate15 = localDate9.minusYears(1);
        int int16 = localDate9.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight17 = localDate9.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add(69);
        org.joda.time.MutableDateTime mutableDateTime24 = property20.set(10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 0, chronology29);
        boolean boolean31 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate27.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withChronology(chronology38);
        org.joda.time.DateTime.Property property40 = dateTime37.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime37.minus(readableDuration41);
        org.joda.time.DateTime.Property property43 = dateTime37.centuryOfEra();
        org.joda.time.DateTime dateTime44 = property43.roundCeilingCopy();
        org.joda.time.DateTime dateTime46 = dateTime44.withMillisOfSecond(31);
        org.joda.time.DateTime dateTime48 = dateTime44.plusHours(19);
        org.joda.time.DateTime dateTime50 = dateTime44.plusYears(198970);
        boolean boolean51 = mutableDateTime24.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime24.getZone();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.era();
        org.joda.time.Instant instant56 = mutableDateTime54.toInstant();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 0, chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 0, chronology61);
        boolean boolean63 = localDate59.isEqual((org.joda.time.ReadablePartial) localDate62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate59.toDateTimeAtStartOfDay(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.plus(readableDuration68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.withChronology(chronology70);
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime75 = dateTime71.minusMillis(2022);
        org.joda.time.DateTime dateTime77 = dateTime75.withMillisOfSecond((int) '#');
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime79 = dateTime75.plus(readablePeriod78);
        boolean boolean80 = mutableDateTime54.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime54.yearOfEra();
        mutableDateTime24.setDate((org.joda.time.ReadableInstant) mutableDateTime54);
        java.util.Date date83 = mutableDateTime24.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime54 and instant56", (mutableDateTime54.compareTo(instant56) == 0) == mutableDateTime54.equals(instant56));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test417");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withField(dateTimeFieldType15, (int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded((long) 238, 35);
        org.joda.time.Instant instant21 = dateTime17.toInstant();
        org.joda.time.LocalDate localDate22 = dateTime17.toLocalDate();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = mutableDateTime24.toString(dateTimeFormatter25);
        mutableDateTime24.addMonths((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.year();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundHalfFloor();
        mutableDateTime30.setTime((long) 31);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 0);
        long long40 = dateTimeParserBucket38.computeMillis(true);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 0, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 0, chronology45);
        boolean boolean47 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate46);
        int int48 = localDate46.getDayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval52 = localDate46.toInterval(dateTimeZone51);
        long long54 = dateTimeZone51.convertUTCToLocal((long) 0);
        dateTimeParserBucket38.setZone(dateTimeZone51);
        java.lang.String str57 = dateTimeZone51.getName((long) ' ');
        boolean boolean59 = dateTimeZone51.isStandardOffset((long) 6);
        org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.now(dateTimeZone51);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 784, dateTimeZone51);
        mutableDateTime30.setZoneRetainFields(dateTimeZone51);
        long long65 = dateTimeZone51.adjustOffset((long) 35599288, true);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime67 = localDate22.toDateTimeAtMidnight(dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant21", (dateTime17.compareTo(instant21) == 0) == dateTime17.equals(instant21));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test418");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 0);
        java.util.Locale locale5 = dateTimeParserBucket4.getLocale();
        java.lang.Integer int6 = dateTimeParserBucket4.getOffsetInteger();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        boolean boolean14 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.plus(readableDuration19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withChronology(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withChronology(chronology23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        org.joda.time.DateTime.Property property29 = dateTime24.property(dateTimeFieldType28);
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 0, chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        boolean boolean37 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate36);
        int int38 = localDate36.getDayOfWeek();
        org.joda.time.LocalDate.Property property39 = localDate36.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval42 = localDate36.toInterval(dateTimeZone41);
        int[] intArray44 = new int[] { 'a' };
        int int45 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDate36, intArray44);
        org.joda.time.Interval interval46 = localDate36.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDate36.getFieldType(2);
        org.joda.time.LocalDate.Property property49 = localDate36.weekyear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (short) 0, chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 0, chronology54);
        boolean boolean56 = localDate52.isEqual((org.joda.time.ReadablePartial) localDate55);
        int int57 = localDate55.getDayOfWeek();
        org.joda.time.LocalDate.Property property58 = localDate55.weekOfWeekyear();
        org.joda.time.LocalDate localDate59 = property58.roundFloorCopy();
        org.joda.time.LocalDate localDate60 = property58.roundCeilingCopy();
        org.joda.time.LocalDate localDate61 = property58.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval64 = localDate61.toInterval(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate36.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(dateTimeZone63);
        dateTimeParserBucket4.setZone(dateTimeZone63);
        org.joda.time.Chronology chronology68 = dateTimeParserBucket4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime66 and mutableDateTime69", (mutableDateTime66.compareTo(mutableDateTime69) == 0) == mutableDateTime66.equals(mutableDateTime69));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test419");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 53);
        mutableDateTime15.setZone(dateTimeZone18);
        org.joda.time.Chronology chronology22 = mutableDateTime15.getChronology();
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(90000004L, chronology22, locale23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime15", (dateTime8.compareTo(mutableDateTime15) == 0) == dateTime8.equals(mutableDateTime15));
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test420");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        mutableDateTime1.setMillis((long) 35);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        boolean boolean9 = mutableDateTime7.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime7.setZone(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime7.add(readablePeriod13, 4);
        org.joda.time.Instant instant16 = mutableDateTime7.toInstant();
        boolean boolean18 = mutableDateTime7.isAfter((long) (byte) 1);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        boolean boolean26 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate25);
        int int27 = localDate25.getDayOfWeek();
        org.joda.time.LocalDate.Property property28 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        int int30 = localDate29.size();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate29.minus(readablePeriod31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate35 = localDate29.minusYears(1);
        int int36 = localDate29.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight37 = localDate29.toDateMidnight();
        org.joda.time.Chronology chronology38 = localDate29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        mutableDateTime7.setChronology(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant16", (mutableDateTime1.compareTo(instant16) == 0) == mutableDateTime1.equals(instant16));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test421");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = dateTime13.toCalendar(locale15);
        java.util.Date date17 = dateTime13.toDate();
        org.joda.time.Instant instant18 = dateTime13.toInstant();
        org.joda.time.DateTime dateTime20 = dateTime13.plusYears(3600000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant18", (dateTime13.compareTo(instant18) == 0) == dateTime13.equals(instant18));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((long) (byte) -1);
        int int15 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight16 = dateTime14.toDateMidnight();
        org.joda.time.DateTime dateTime18 = dateTime14.plusYears(42);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime30.minusSeconds(0);
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays(1);
        boolean boolean36 = dateTime33.isAfterNow();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.plus(readablePeriod37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours(10);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(32000);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 35);
        org.joda.time.DateTime dateTime46 = dateTime38.toDateTime(dateTimeZone45);
        boolean boolean47 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime.Property property48 = dateTime14.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime46", (dateTime8.compareTo(dateTime46) == 0) == dateTime8.equals(dateTime46));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test423");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.LocalDate localDate18 = dateTime16.toLocalDate();
        int int19 = localDate18.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant17", (dateTime8.compareTo(instant17) == 0) == dateTime8.equals(instant17));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.LocalDate.Property property9 = localDate2.dayOfMonth();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        boolean boolean18 = mutableDateTime16.isAfterNow();
        boolean boolean19 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime14.add(readableDuration20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.era();
        java.util.GregorianCalendar gregorianCalendar23 = mutableDateTime14.toGregorianCalendar();
        int int24 = mutableDateTime14.getYearOfCentury();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "1970-01-01T00:00:00.000Z", locale39);
        dateTimeParserBucket29.saveField(dateTimeFieldType30, "1970-01-01T00:00:00.000Z", locale39);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket46.saveField(dateTimeFieldType47, "1970-01-01T00:00:00.000Z", locale49);
        java.lang.String str51 = locale39.getDisplayCountry(locale49);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale49.getDisplayScript(locale52);
        java.util.Calendar calendar54 = mutableDateTime14.toCalendar(locale49);
        java.lang.String str55 = locale12.getDisplayScript(locale49);
        int int56 = property9.getMaximumShortTextLength(locale49);
        org.joda.time.LocalDate localDate57 = property9.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar23 and calendar54", (gregorianCalendar23.compareTo(calendar54) == 0) == gregorianCalendar23.equals(calendar54));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test425");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.setTime(0, (int) (byte) 0, (int) (short) 1, (int) (short) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTimeISO();
        java.lang.Object obj12 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.hourOfDay();
        mutableDateTime1.addMonths(35);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.addWrapField(35449917);
        mutableDateTime18.setHourOfDay(0);
        mutableDateTime18.add((long) 51);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.plus(readableDuration34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withChronology(chronology36);
        org.joda.time.DateTime.Property property38 = dateTime35.secondOfMinute();
        org.joda.time.DateTime dateTime40 = dateTime35.withMinuteOfHour((int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime40.toGregorianCalendar();
        org.joda.time.DateTime dateTime43 = dateTime40.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 2039, true, (long) (byte) 100);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTime(dateTimeZone45);
        int int51 = dateTime43.getYearOfEra();
        mutableDateTime18.setDate((org.joda.time.ReadableInstant) dateTime43);
        int int53 = mutableDateTime18.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime50", (dateTime43.compareTo(dateTime50) == 0) == dateTime43.equals(dateTime50));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test426");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.era();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket14.saveField(dateTimeFieldType15, "1970-01-01T00:00:00.000Z", locale17);
        int int19 = mutableDateTime1.get(dateTimeFieldType15);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.centuryOfEra();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfHalfday();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket31.saveField(dateTimeFieldType32, "1970-01-01T00:00:00.000Z", locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology25, locale34);
        java.lang.String str37 = chronology25.toString();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField39 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology25.yearOfCentury();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 69, chronology25);
        org.joda.time.DateTimeField dateTimeField42 = chronology25.hourOfDay();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.fromMillisOfDay(2100000L, chronology25);
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DurationField durationField45 = chronology25.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test427");
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket10.saveField(dateTimeFieldType11, "1970-01-01T00:00:00.000Z", locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology4, locale13);
        java.lang.String str16 = chronology4.toString();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField18 = chronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology4.yearOfCentury();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 69, chronology4);
        org.joda.time.DateTimeField dateTimeField21 = chronology4.hourOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 70, chronology4);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology4);
        int int24 = mutableDateTime23.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.minuteOfHour();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfYear();
        int int30 = property29.getMinimumValueOverall();
        org.joda.time.DurationField durationField31 = property29.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime33 = property29.add(0);
        mutableDateTime33.setMillis((-36000000L));
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        boolean boolean39 = mutableDateTime37.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime37.setZone(dateTimeZone41);
        long long44 = dateTimeZone41.nextTransition((long) '4');
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime45.add(readableDuration46);
        boolean boolean48 = mutableDateTime33.equals((java.lang.Object) readableDuration46);
        boolean boolean49 = mutableDateTime23.isAfter((org.joda.time.ReadableInstant) mutableDateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and mutableDateTime45", (mutableDateTime17.compareTo(mutableDateTime45) == 0) == mutableDateTime17.equals(mutableDateTime45));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test428");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField(4);
        org.joda.time.MutableDateTime mutableDateTime7 = property2.addWrapField((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, (int) (byte) 100);
        org.joda.time.Instant instant11 = mutableDateTime7.toInstant();
        int int12 = mutableDateTime7.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and instant11", (mutableDateTime7.compareTo(instant11) == 0) == mutableDateTime7.equals(instant11));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test429");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        boolean boolean4 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime2.setZone(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(6048000000L, dateTimeZone6);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        boolean boolean16 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate12.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property22 = dateTime18.weekyear();
        org.joda.time.DateTime dateTime23 = dateTime18.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfCentury();
        org.joda.time.DateTime dateTime26 = property25.roundCeilingCopy();
        org.joda.time.Instant instant27 = dateTime26.toInstant();
        int int28 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant27", (dateTime26.compareTo(instant27) == 0) == dateTime26.equals(instant27));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test430");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.era();
        java.util.GregorianCalendar gregorianCalendar10 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        boolean boolean19 = mutableDateTime17.isAfterNow();
        boolean boolean20 = mutableDateTime15.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime17.add(readableDuration22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDateTime27.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology33 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) '4', chronology33);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket47.saveField(dateTimeFieldType48, "1970-01-01T00:00:00.000Z", locale50);
        dateTimeParserBucket40.saveField(dateTimeFieldType41, "1970-01-01T00:00:00.000Z", locale50);
        java.lang.Integer int53 = dateTimeParserBucket40.getPivotYear();
        java.lang.Integer int54 = dateTimeParserBucket40.getPivotYear();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime35.toMutableDateTime(chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime56.getZone();
        mutableDateTime17.setZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDateTime11.toDateTime(dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime17", (mutableDateTime1.compareTo(mutableDateTime17) == 0) == mutableDateTime1.equals(mutableDateTime17));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test431");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withField(dateTimeFieldType15, (int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded((long) 238, 35);
        org.joda.time.Instant instant21 = dateTime17.toInstant();
        org.joda.time.LocalDate localDate22 = dateTime17.toLocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant21", (dateTime17.compareTo(instant21) == 0) == dateTime17.equals(instant21));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test432");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfHalfday();
        long long27 = dateTimeField25.roundCeiling(35L);
        mutableDateTime1.setRounding(dateTimeField25);
        org.joda.time.DurationField durationField29 = dateTimeField25.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test433");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        mutableDateTime3.add((long) 59);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableDateTime3.add(readablePeriod22, 1970);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime3.add(readableDuration25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test434");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime3.add(readableDuration7, (int) (short) 1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime3.add(readableDuration10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime3.hourOfDay();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime16 = localTime13.withPeriodAdded(readablePeriod14, (int) (short) 0);
        org.joda.time.LocalTime.Property property17 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime18 = property17.withMaximumValue();
        org.joda.time.LocalTime localTime20 = localTime18.plusSeconds(22);
        java.lang.String str22 = localTime20.toString("6");
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.addWrapField(4);
        java.lang.String str29 = mutableDateTime28.toString();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime28.millisOfDay();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.minuteOfDay();
        int int32 = mutableDateTime28.getEra();
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime28.getZone();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        boolean boolean38 = mutableDateTime36.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime36.setZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(6048000000L, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone40);
        long long45 = dateTimeZone40.convertUTCToLocal((long) 0);
        long long49 = dateTimeZone40.convertLocalToUTC((long) 2000, true, 345600050L);
        mutableDateTime28.setZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime52 = localTime20.toDateTimeToday(dateTimeZone40);
        mutableDateTime3.setZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime36", (mutableDateTime1.compareTo(mutableDateTime36) == 0) == mutableDateTime1.equals(mutableDateTime36));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test435");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        int int11 = localDate9.getDayOfWeek();
        org.joda.time.LocalDate.Property property12 = localDate9.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval15 = localDate9.toInterval(dateTimeZone14);
        long long17 = dateTimeZone14.convertUTCToLocal((long) 0);
        mutableDateTime3.setZone(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.weekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 0, chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        boolean boolean26 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.LocalDate.Property property31 = localDate25.property(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = localDate25.toDateTimeAtCurrentTime();
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime dateTime36 = dateTime32.withField(dateTimeFieldType34, 69);
        org.joda.time.DateTime dateTime38 = dateTime32.minusMinutes(235);
        int int39 = property19.getDifference((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime28", (mutableDateTime1.compareTo(mutableDateTime28) == 0) == mutableDateTime1.equals(mutableDateTime28));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test436");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        java.util.GregorianCalendar gregorianCalendar15 = mutableDateTime14.toGregorianCalendar();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket28.saveField(dateTimeFieldType29, "1970-01-01T00:00:00.000Z", locale31);
        dateTimeParserBucket21.saveField(dateTimeFieldType22, "1970-01-01T00:00:00.000Z", locale31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        boolean boolean40 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.plus(readableDuration45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.withChronology(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.withChronology(chronology49);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property53.getFieldType();
        org.joda.time.DateTime.Property property55 = dateTime50.property(dateTimeFieldType54);
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 0, chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 0, chronology61);
        boolean boolean63 = localDate59.isEqual((org.joda.time.ReadablePartial) localDate62);
        int int64 = localDate62.getDayOfWeek();
        org.joda.time.LocalDate.Property property65 = localDate62.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval68 = localDate62.toInterval(dateTimeZone67);
        int[] intArray70 = new int[] { 'a' };
        int int71 = dateTimeField56.getMaximumValue((org.joda.time.ReadablePartial) localDate62, intArray70);
        dateTimeParserBucket21.saveField(dateTimeField56, 0);
        int int76 = dateTimeField56.getDifference(315507540000L, 1644573073018L);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) (short) 0, chronology78);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) (short) 0, chronology81);
        boolean boolean83 = localDate79.isEqual((org.joda.time.ReadablePartial) localDate82);
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime85.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property86.getFieldType();
        org.joda.time.LocalDate.Property property88 = localDate82.property(dateTimeFieldType87);
        int int89 = dateTimeField56.getMaximumValue((org.joda.time.ReadablePartial) localDate82);
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(7, (int) (byte) 1);
        boolean boolean94 = dateTimeZone92.isStandardOffset((long) 29);
        org.joda.time.DateTime dateTime95 = localDate82.toDateTimeAtMidnight(dateTimeZone92);
        mutableDateTime14.setZoneRetainFields(dateTimeZone92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime52", (instant10.compareTo(mutableDateTime52) == 0) == instant10.equals(mutableDateTime52));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test437");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        boolean boolean10 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.plus(readableDuration15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withChronology(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime22 = dateTime18.minusMillis(2022);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfSecond((int) '#');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readablePeriod25);
        boolean boolean27 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime22.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant3", (mutableDateTime1.compareTo(instant3) == 0) == mutableDateTime1.equals(instant3));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test438");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        long long24 = dateTimeZone20.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(dateTimeZone20);
        java.util.Date date26 = dateTime25.toDate();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test439");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.weekOfWeekyear();
        boolean boolean15 = dateTimeZone1.equals((java.lang.Object) property14);
        org.joda.time.DateTime dateTime16 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime17 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime19 = property14.addWrapFieldToCopy(35449917);
        org.joda.time.DateTime dateTime20 = property14.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfYear();
        boolean boolean26 = mutableDateTime24.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime24.setZone(dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime24.add(readablePeriod30, 4);
        mutableDateTime24.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime24.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = mutableDateTime24.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks(771);
        int int40 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime24 and dateTime37", (mutableDateTime24.compareTo(dateTime37) == 0) == mutableDateTime24.equals(dateTime37));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime14.withWeekyear(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.plus(readableDuration30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withChronology(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.DateTime.Property property40 = dateTime35.property(dateTimeFieldType39);
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        int int49 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate47.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval53 = localDate47.toInterval(dateTimeZone52);
        int[] intArray55 = new int[] { 'a' };
        int int56 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localDate47, intArray55);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket62.saveField(dateTimeFieldType63, "1970-01-01T00:00:00.000Z", locale65);
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str68 = localDate47.toString("1", locale65);
        org.joda.time.LocalDate localDate70 = localDate47.withMonthOfYear(5);
        org.joda.time.Chronology chronology71 = localDate70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfEra();
        org.joda.time.DateTime dateTime73 = dateTime18.withChronology(chronology71);
        org.joda.time.DateTimeField dateTimeField74 = chronology71.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime73", (dateTime18.compareTo(dateTime73) == 0) == dateTime18.equals(dateTime73));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test441");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj0, chronology9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime13", (dateTime8.compareTo(mutableDateTime13) == 0) == dateTime8.equals(mutableDateTime13));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test442");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, 35);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone25);
        boolean boolean30 = dateTimeZone22.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 9, dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime18.toMutableDateTime(dateTimeZone22);
        mutableDateTime32.setDate((long) 42841140);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.dayOfWeek();
        java.lang.String str36 = property35.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime32", (mutableDateTime1.compareTo(mutableDateTime32) == 0) == mutableDateTime1.equals(mutableDateTime32));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test443");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundHalfEven();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 0);
        long long12 = dateTimeParserBucket10.computeMillis(true);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 0, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        boolean boolean19 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getDayOfWeek();
        org.joda.time.LocalDate.Property property21 = localDate18.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval24 = localDate18.toInterval(dateTimeZone23);
        long long26 = dateTimeZone23.convertUTCToLocal((long) 0);
        dateTimeParserBucket10.setZone(dateTimeZone23);
        long long30 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime4.toMutableDateTime(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfYear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 0, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 0, chronology39);
        boolean boolean41 = localDate37.isEqual((org.joda.time.ReadablePartial) localDate40);
        int int42 = localDate40.getDayOfWeek();
        org.joda.time.LocalDate.Property property43 = localDate40.weekOfWeekyear();
        org.joda.time.LocalDate localDate44 = property43.roundFloorCopy();
        org.joda.time.LocalDate localDate45 = property43.roundCeilingCopy();
        org.joda.time.LocalDate localDate46 = property43.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval49 = localDate46.toInterval(dateTimeZone48);
        mutableDateTime33.setZoneRetainFields(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime33.copy();
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime51.getZone();
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime31.toMutableDateTime(dateTimeZone52);
        mutableDateTime53.add(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime31", (mutableDateTime1.compareTo(mutableDateTime31) == 0) == mutableDateTime1.equals(mutableDateTime31));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMillis(2022);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfSecond((int) '#');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.plus(readableDuration34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withChronology(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.withChronology(chronology38);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        org.joda.time.DateTime.Property property44 = dateTime39.property(dateTimeFieldType43);
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 0, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 0, chronology50);
        boolean boolean52 = localDate48.isEqual((org.joda.time.ReadablePartial) localDate51);
        int int53 = localDate51.getDayOfWeek();
        org.joda.time.LocalDate.Property property54 = localDate51.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval57 = localDate51.toInterval(dateTimeZone56);
        int[] intArray59 = new int[] { 'a' };
        int int60 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localDate51, intArray59);
        org.joda.time.Interval interval61 = localDate51.toInterval();
        java.util.Date date62 = localDate51.toDate();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 0, chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (short) 0, chronology67);
        boolean boolean69 = localDate65.isEqual((org.joda.time.ReadablePartial) localDate68);
        int int70 = localDate68.getDayOfWeek();
        org.joda.time.LocalDate.Property property71 = localDate68.weekOfWeekyear();
        org.joda.time.LocalDate localDate72 = property71.roundFloorCopy();
        org.joda.time.LocalDate localDate73 = property71.roundCeilingCopy();
        org.joda.time.LocalDate localDate74 = property71.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval77 = localDate74.toInterval(dateTimeZone76);
        int int78 = localDate51.compareTo((org.joda.time.ReadablePartial) localDate74);
        org.joda.time.LocalDate localDate80 = localDate51.plusMonths(5);
        org.joda.time.Chronology chronology81 = localDate51.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime18.toMutableDateTime(chronology81);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime83.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property84.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime83", (dateTime18.compareTo(mutableDateTime83) == 0) == dateTime18.equals(mutableDateTime83));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test445");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int22 = dateTimeZone20.getOffset((long) '4');
        int int24 = dateTimeZone20.getOffset(174L);
        org.joda.time.DateTime dateTime25 = dateTime16.withZone(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test446");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear(4);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMillis(2022);
        org.joda.time.DateTime.Property property19 = dateTime18.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(11);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        long long27 = dateTimeZone25.convertUTCToLocal(2100000L);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, dateTimeZone25);
        int int30 = dateTimeZone25.getOffsetFromLocal(1644573051593L);
        java.lang.String str32 = dateTimeZone25.getNameKey((long) 20);
        org.joda.time.DateTime dateTime33 = dateTime20.withZone(dateTimeZone25);
        int int35 = dateTimeZone25.getStandardOffset((long) 1270);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime33", (dateTime20.compareTo(dateTime33) == 0) == dateTime20.equals(dateTime33));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test447");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval22 = localDate16.toInterval(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime10.minusHours(771);
        org.joda.time.DateTime dateTime27 = dateTime10.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property28 = dateTime27.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime23", (dateTime10.compareTo(dateTime23) == 0) == dateTime10.equals(dateTime23));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test448");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withField(dateTimeFieldType15, (int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded((long) 238, 35);
        org.joda.time.Instant instant21 = dateTime17.toInstant();
        org.joda.time.DateTime dateTime22 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime23 = dateTime17.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime17", (instant21.compareTo(dateTime17) == 0) == instant21.equals(dateTime17));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test449");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 53);
        mutableDateTime14.setZone(dateTimeZone17);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime14", (dateTime7.compareTo(mutableDateTime14) == 0) == dateTime7.equals(mutableDateTime14));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test450");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.months();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime10", (dateTime7.compareTo(mutableDateTime10) == 0) == dateTime7.equals(mutableDateTime10));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test451");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.plusYears(29);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateMidnight dateMidnight20 = localDate17.toDateMidnight(dateTimeZone19);
        boolean boolean21 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 0, chronology26);
        boolean boolean28 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate27);
        int int29 = localDate27.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate31 = localDate27.plus(readablePeriod30);
        org.joda.time.LocalDate localDate33 = localDate31.withCenturyOfEra((int) 'a');
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime36 = dateTime34.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 0, chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        boolean boolean45 = localDate41.isEqual((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate41.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTimeISO();
        org.joda.time.DateTime.Property property51 = dateTime50.weekOfWeekyear();
        boolean boolean52 = dateTimeZone38.equals((java.lang.Object) property51);
        org.joda.time.DateTime dateTime53 = property51.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime54 = property51.roundFloorCopy();
        org.joda.time.DateTime dateTime56 = property51.addWrapFieldToCopy(35449917);
        org.joda.time.DateTime dateTime57 = property51.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra(4);
        boolean boolean60 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = dateMidnight20.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test452");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 0, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        boolean boolean7 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.plus(readableDuration12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withChronology(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime13.withMinuteOfHour((int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        org.joda.time.DateTime dateTime21 = dateTime18.withCenturyOfEra(4);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 2039, true, (long) (byte) 100);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTime(dateTimeZone23);
        java.util.Date date29 = dateTime21.toDate();
        org.joda.time.Chronology chronology30 = dateTime21.getChronology();
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 623, chronology30, locale31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime28", (dateTime21.compareTo(dateTime28) == 0) == dateTime21.equals(dateTime28));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test453");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.LocalDate.Property property11 = localDate5.property(dateTimeFieldType10);
        org.joda.time.LocalDate localDate13 = property11.addToCopy((int) (byte) 10);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDate13.getFieldTypes();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 0, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        boolean boolean22 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate18.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.plus(readableDuration27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withChronology(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withChronology(chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        org.joda.time.DateTime.Property property37 = dateTime32.property(dateTimeFieldType36);
        org.joda.time.DateTime.Property property38 = dateTime32.minuteOfDay();
        long long39 = property38.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property38.getFieldType();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        boolean boolean42 = localDate13.isSupported(durationFieldType41);
        org.joda.time.LocalDate localDate44 = localDate13.plusYears(2039);
        int int45 = localDate13.getEra();
        org.joda.time.DateTime dateTime46 = localDate13.toDateTimeAtMidnight();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.dayOfYear();
        boolean boolean51 = mutableDateTime49.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime49.setZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(6048000000L, dateTimeZone53);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone53);
        java.lang.String str58 = dateTimeZone53.getShortName(1965L);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(dateTimeZone53);
        org.joda.time.DateTime dateTime60 = dateTime46.toDateTime(dateTimeZone53);
        java.util.GregorianCalendar gregorianCalendar61 = dateTime60.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime49", (mutableDateTime8.compareTo(mutableDateTime49) == 0) == mutableDateTime8.equals(mutableDateTime49));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test454");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        dateTimeParserBucket18.saveField(dateTimeFieldType19, "1970-01-01T00:00:00.000Z", locale28);
        mutableDateTime1.set(dateTimeFieldType19, (int) ' ');
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 0, chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 0, chronology38);
        boolean boolean40 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime dateTime48 = dateTime45.minusSeconds(0);
        org.joda.time.DateTime dateTime50 = dateTime48.plusDays(1);
        boolean boolean51 = dateTime48.isAfterNow();
        org.joda.time.DateTime dateTime52 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfMonth();
        org.joda.time.DurationField durationField54 = property53.getDurationField();
        int int55 = property53.get();
        org.joda.time.DateTime dateTime56 = property53.roundFloorCopy();
        org.joda.time.DateTime dateTime58 = dateTime56.plusWeeks((int) (byte) -1);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime1.toMutableDateTime();
        java.util.Date date61 = mutableDateTime60.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime58", (mutableDateTime1.compareTo(dateTime58) == 0) == mutableDateTime1.equals(dateTime58));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test455");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        boolean boolean12 = mutableDateTime1.isAfter((long) (byte) 1);
        mutableDateTime1.addWeekyears(69);
        int int15 = mutableDateTime1.getYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.yearOfCentury();
        int int19 = mutableDateTime1.getMillisOfSecond();
        int int20 = mutableDateTime1.getYearOfCentury();
        int int21 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.getMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar26 = mutableDateTime25.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean28 = mutableDateTime25.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 0, chronology33);
        boolean boolean35 = localDate31.isEqual((org.joda.time.ReadablePartial) localDate34);
        int int36 = localDate34.getDayOfWeek();
        org.joda.time.LocalDate.Property property37 = localDate34.weekOfWeekyear();
        org.joda.time.LocalDate localDate38 = property37.roundFloorCopy();
        int int39 = localDate38.size();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate41 = localDate38.minus(readablePeriod40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate44 = localDate38.withMonthOfYear(10);
        org.joda.time.LocalDate localDate46 = localDate44.withYear((int) '4');
        org.joda.time.LocalDate localDate48 = localDate44.withEra((int) (short) 1);
        org.joda.time.LocalDate.Property property49 = localDate44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        long long53 = dateTimeZone51.convertUTCToLocal(2100000L);
        org.joda.time.DateTime dateTime54 = localDate44.toDateTimeAtMidnight(dateTimeZone51);
        mutableDateTime25.setZone(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime1, dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime23", (instant10.compareTo(mutableDateTime23) == 0) == instant10.equals(mutableDateTime23));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test456");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        long long20 = property19.remainder();
        org.joda.time.MutableDateTime mutableDateTime22 = property19.set((int) (short) 1);
        mutableDateTime22.addHours((int) (byte) 1);
        mutableDateTime22.setMillis(11550157878993L);
        mutableDateTime22.setWeekyear(3600000);
        int int29 = dateTime16.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDateTime32.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology38 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property39 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusMinutes((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = localDateTime43.toDateTime(dateTimeZone45);
        java.util.Locale locale49 = new java.util.Locale("22");
        java.lang.String str50 = dateTimeZone45.getName((long) 35573488, locale49);
        long long53 = dateTimeZone45.adjustOffset((long) 11, false);
        org.joda.time.DateTime dateTime54 = dateTime16.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime54", (dateTime16.compareTo(dateTime54) == 0) == dateTime16.equals(dateTime54));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test457");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = localDateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) '4', chronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plus(readableDuration19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.era();
        long long23 = chronology11.set((org.joda.time.ReadablePartial) localDateTime20, (long) 22);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "1970-01-01T00:00:00.000Z", locale39);
        dateTimeParserBucket29.saveField(dateTimeFieldType30, "1970-01-01T00:00:00.000Z", locale39);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket46.saveField(dateTimeFieldType47, "1970-01-01T00:00:00.000Z", locale49);
        java.lang.String str51 = locale39.getDisplayCountry(locale49);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale54, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket63.saveField(dateTimeFieldType64, "1970-01-01T00:00:00.000Z", locale66);
        dateTimeParserBucket56.saveField(dateTimeFieldType57, "1970-01-01T00:00:00.000Z", locale66);
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(0L, chronology70, locale71, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale76 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket73.saveField(dateTimeFieldType74, "1970-01-01T00:00:00.000Z", locale76);
        java.lang.String str78 = locale66.getDisplayCountry(locale76);
        java.lang.String str79 = locale49.getDisplayVariant(locale66);
        java.util.Locale.setDefault(category24, locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale49, (java.lang.Integer) 7);
        org.joda.time.DateTimeField dateTimeField83 = chronology11.millisOfSecond();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology11);
        java.util.Locale locale86 = java.util.Locale.forLanguageTag("en_CA");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket(3577929161L, chronology11, locale86, (java.lang.Integer) 817, 35615085);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime84", (dateTime10.compareTo(dateTime84) == 0) == dateTime10.equals(dateTime84));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test458");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime14.withWeekyear(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.plus(readableDuration30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withChronology(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.DateTime.Property property40 = dateTime35.property(dateTimeFieldType39);
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        int int49 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate47.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval53 = localDate47.toInterval(dateTimeZone52);
        int[] intArray55 = new int[] { 'a' };
        int int56 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localDate47, intArray55);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket62.saveField(dateTimeFieldType63, "1970-01-01T00:00:00.000Z", locale65);
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str68 = localDate47.toString("1", locale65);
        org.joda.time.LocalDate localDate70 = localDate47.withMonthOfYear(5);
        org.joda.time.Chronology chronology71 = localDate70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfEra();
        org.joda.time.DateTime dateTime73 = dateTime18.withChronology(chronology71);
        int int74 = dateTime18.getHourOfDay();
        org.joda.time.DateTime dateTime77 = dateTime18.withDurationAdded((long) 49, 14701);
        org.joda.time.DateTime.Property property78 = dateTime77.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime73", (dateTime18.compareTo(dateTime73) == 0) == dateTime18.equals(dateTime73));
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test459");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readableDuration11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.plusYears(29);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = localDate15.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime10.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 0, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 0, chronology25);
        boolean boolean27 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate26);
        int int28 = localDate26.getDayOfWeek();
        org.joda.time.LocalDate.Property property29 = localDate26.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.LocalDate localDate31 = property29.withMinimumValue();
        org.joda.time.LocalDate localDate33 = property29.addWrapFieldToCopy(0);
        int int34 = localDate33.size();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.dayOfYear();
        boolean boolean40 = mutableDateTime38.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime38.setZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(6048000000L, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone42);
        long long47 = dateTimeZone42.convertUTCToLocal((long) 0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight49 = localDate33.toDateMidnight(dateTimeZone42);
        org.joda.time.DateTime dateTime50 = dateTime20.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime52 = dateTime20.plusSeconds(669);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime20.getZone();
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime45", (dateTime20.compareTo(dateTime45) == 0) == dateTime20.equals(dateTime45));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test460");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addYears((int) (short) 10);
        java.lang.Object obj13 = mutableDateTime1.clone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int18 = dateTimeZone16.getOffset((long) '4');
        long long20 = dateTimeZone16.previousTransition((long) ' ');
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone16);
        int int23 = dateTimeZone16.getStandardOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        long long27 = property26.remainder();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.set((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime29.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime29.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.copy();
        int int33 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime1.setZoneRetainFields(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime25", (instant10.compareTo(mutableDateTime25) == 0) == instant10.equals(mutableDateTime25));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.DateTime dateTime19 = dateTime16.withMinuteOfHour(11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant17", (dateTime16.compareTo(instant17) == 0) == dateTime16.equals(instant17));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test462");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        int int20 = mutableDateTime19.getEra();
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime19.setChronology(chronology21);
        boolean boolean23 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTime dateTime25 = dateTime12.minusYears(3600000);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        int int33 = localDate31.getDayOfWeek();
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate36 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate37 = property34.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Interval interval40 = localDate37.toInterval(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime25.toMutableDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket53.saveField(dateTimeFieldType54, "1970-01-01T00:00:00.000Z", locale56);
        dateTimeParserBucket46.saveField(dateTimeFieldType47, "1970-01-01T00:00:00.000Z", locale56);
        java.lang.String str59 = dateTimeFieldType47.toString();
        org.joda.time.DateTime dateTime61 = dateTime25.withField(dateTimeFieldType47, 52);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType47.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime41", (dateTime25.compareTo(mutableDateTime41) == 0) == dateTime25.equals(mutableDateTime41));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test463");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.LocalDate localDate10 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfWeek();
        org.joda.time.LocalDate localDate15 = localDate12.minusYears(15);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        boolean boolean21 = mutableDateTime19.isAfterNow();
        boolean boolean22 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 0, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        boolean boolean29 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate28);
        int int30 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate.Property property31 = localDate28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval34 = localDate28.toInterval(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime19.toMutableDateTime(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        boolean boolean39 = mutableDateTime37.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime37.setZone(dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableDateTime37.add(readablePeriod43, 4);
        org.joda.time.Instant instant46 = mutableDateTime37.toInstant();
        int int47 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateMidnight dateMidnight48 = localDate15.toDateMidnight(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and instant46", (mutableDateTime17.compareTo(instant46) == 0) == mutableDateTime17.equals(instant46));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test464");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime14.withWeekyear(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 0, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 0, chronology23);
        boolean boolean25 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.plus(readableDuration30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withChronology(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.DateTime.Property property40 = dateTime35.property(dateTimeFieldType39);
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 0, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 0, chronology46);
        boolean boolean48 = localDate44.isEqual((org.joda.time.ReadablePartial) localDate47);
        int int49 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property50 = localDate47.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval53 = localDate47.toInterval(dateTimeZone52);
        int[] intArray55 = new int[] { 'a' };
        int int56 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localDate47, intArray55);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket62.saveField(dateTimeFieldType63, "1970-01-01T00:00:00.000Z", locale65);
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str68 = localDate47.toString("1", locale65);
        org.joda.time.LocalDate localDate70 = localDate47.withMonthOfYear(5);
        org.joda.time.Chronology chronology71 = localDate70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfEra();
        org.joda.time.DateTime dateTime73 = dateTime18.withChronology(chronology71);
        org.joda.time.DurationField durationField74 = chronology71.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime73", (dateTime18.compareTo(dateTime73) == 0) == dateTime18.equals(dateTime73));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test465");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = localDateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 'a', chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfDay();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        boolean boolean16 = locale15.hasExtensions();
        java.util.Locale locale18 = new java.util.Locale("DateTimeField[weekyear]");
        java.lang.String str19 = locale15.getDisplayCountry(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(69L, chronology11, locale15, (java.lang.Integer) 35557);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology11);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 82062432, chronology11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime22", (dateTime10.compareTo(dateTime22) == 0) == dateTime10.equals(dateTime22));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test466");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(1);
        boolean boolean17 = dateTime14.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime14.withTimeAtStartOfDay();
        int int19 = dateTime18.getMillisOfDay();
        org.joda.time.DateTime.Property property20 = dateTime18.year();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.withPeriodAdded(readablePeriod21, (int) 'x');
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfMinute();
        org.joda.time.DateTime dateTime26 = dateTime23.plusSeconds(35493088);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(25, 0);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.getNameKey(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and mutableDateTime30", (dateTime26.compareTo(mutableDateTime30) == 0) == dateTime26.equals(mutableDateTime30));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test467");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket8.saveField(dateTimeFieldType9, "1970-01-01T00:00:00.000Z", locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology2, locale11);
        org.joda.time.DateTimeField dateTimeField14 = chronology2.millisOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology2);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket24.saveField(dateTimeFieldType25, "1970-01-01T00:00:00.000Z", locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale27);
        java.lang.String str30 = chronology18.toString();
        org.joda.time.DurationField durationField31 = chronology18.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology18);
        int[] intArray34 = chronology2.get((org.joda.time.ReadablePartial) localTime32, (long) 35449917);
        org.joda.time.DateTimeField dateTimeField35 = chronology2.yearOfEra();
        org.joda.time.Chronology chronology36 = chronology2.withUTC();
        org.joda.time.DurationField durationField37 = chronology2.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField31, durationField37, and durationField31", !(durationField31.compareTo(durationField37) == 0) || (Math.signum(durationField31.compareTo(durationField31)) == Math.signum(durationField37.compareTo(durationField31))));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test468");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour((int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.DateTime dateTime20 = dateTime17.minusMillis(4);
        org.joda.time.Chronology chronology21 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 31);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear(25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.nextTransition(25260000L);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfYear();
        int int35 = dateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTime.Property property36 = dateTime27.dayOfYear();
        org.joda.time.DateTime dateTime37 = property36.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and mutableDateTime31", (dateTime27.compareTo(mutableDateTime31) == 0) == dateTime27.equals(mutableDateTime31));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test469");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) '#');
        mutableDateTime1.setDate(62135633400000L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDateTime6.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology12.getZone();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.monthOfYear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plus(readablePeriod24);
        int int26 = localDateTime25.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plus(readableDuration36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusMinutes(3);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.plusSeconds(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean43 = localDateTime37.isSupported(dateTimeFieldType42);
        java.lang.String str44 = dateTimeFieldType42.getName();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime30.withField(dateTimeFieldType42, 99);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plus(readableDuration52);
        org.joda.time.DateTime dateTime54 = localDateTime49.toDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.withYearOfEra((int) (short) 1);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.minus(readableDuration58);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.weekyears();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.monthOfYear();
        boolean boolean63 = dateTimeFieldType42.isSupported(chronology60);
        org.joda.time.DateTime dateTime64 = dateTime18.toDateTime(chronology60);
        mutableDateTime1.setChronology(chronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime18", (dateTime11.compareTo(dateTime18) == 0) == dateTime11.equals(dateTime18));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test470");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        mutableDateTime1.setDayOfMonth(1);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        boolean boolean21 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.plus(readableDuration26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withChronology(chronology28);
        org.joda.time.DateTime.Property property30 = dateTime27.secondOfMinute();
        org.joda.time.DateTime dateTime32 = dateTime27.withMinuteOfHour((int) (byte) 10);
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        org.joda.time.DateTime dateTime35 = dateTime32.withCenturyOfEra(4);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "1970-01-01T00:00:00.000Z", locale51);
        dateTimeParserBucket41.saveField(dateTimeFieldType42, "1970-01-01T00:00:00.000Z", locale51);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket41.getZone();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime57.getZone();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime57.add(readableDuration59, 3);
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime57.getZone();
        org.joda.time.DateTime dateTime63 = localDateTime55.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.hours();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime35, chronology64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime57", (instant10.compareTo(mutableDateTime57) == 0) == instant10.equals(mutableDateTime57));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test471");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        dateTimeParserBucket18.saveField(dateTimeFieldType19, "1970-01-01T00:00:00.000Z", locale28);
        mutableDateTime1.set(dateTimeFieldType19, (int) ' ');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Calendar calendar34 = mutableDateTime1.toCalendar(locale33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDateTime38.toDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone41);
        long long47 = dateTimeZone41.adjustOffset((-1L), false);
        boolean boolean49 = dateTimeZone41.isStandardOffset((long) 23);
        java.lang.String str50 = dateTimeZone41.getID();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) calendar34, dateTimeZone41);
        java.lang.String str53 = dateTimeZone41.getNameKey((long) 35854148);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime51", (mutableDateTime1.compareTo(dateTime51) == 0) == mutableDateTime1.equals(dateTime51));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test472");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) '4', chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plus(readableDuration23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        long long27 = chronology15.set((org.joda.time.ReadablePartial) localDateTime24, (long) 22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField29 = chronology15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField31 = chronology15.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime30", (dateTime14.compareTo(mutableDateTime30) == 0) == dateTime14.equals(mutableDateTime30));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test473");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 0, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 0, chronology11);
        boolean boolean13 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        int int14 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval18 = localDate12.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime3.toMutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime3.add(readableDuration20);
        int int22 = mutableDateTime3.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime19", (mutableDateTime1.compareTo(mutableDateTime19) == 0) == mutableDateTime1.equals(mutableDateTime19));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test474");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone23);
        int int25 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime11.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        boolean boolean36 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime34.setZone(dateTimeZone38);
        long long41 = dateTimeZone38.nextTransition((long) '4');
        java.lang.String str43 = dateTimeZone38.getShortName(35L);
        boolean boolean44 = dateTimeZone38.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter29.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime46 = mutableDateTime11.toDateTime(dateTimeZone38);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime24", (mutableDateTime11.compareTo(dateTime24) == 0) == mutableDateTime11.equals(dateTime24));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test475");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter3.getPrinter();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 0);
        long long14 = dateTimeParserBucket12.computeMillis(true);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 0, chronology19);
        boolean boolean21 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate20);
        int int22 = localDate20.getDayOfWeek();
        org.joda.time.LocalDate.Property property23 = localDate20.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval26 = localDate20.toInterval(dateTimeZone25);
        long long28 = dateTimeZone25.convertUTCToLocal((long) 0);
        dateTimeParserBucket12.setZone(dateTimeZone25);
        java.lang.String str31 = dateTimeZone25.getName((long) ' ');
        boolean boolean33 = dateTimeZone25.isStandardOffset((long) 6);
        java.lang.String str35 = dateTimeZone25.getShortName((-259200000L));
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone25);
        java.util.TimeZone timeZone37 = dateTimeZone25.toTimeZone();
        java.lang.String str39 = dateTimeZone25.getShortName((long) 3522);
        long long41 = dateTimeZone25.previousTransition(940L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter3.withZone(dateTimeZone25);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter42.withZone(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime36 and dateTime45", (mutableDateTime36.compareTo(dateTime45) == 0) == mutableDateTime36.equals(dateTime45));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test476");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDateTime37.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime.Property property44 = localDateTime37.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((long) 4);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusMinutes((int) 'x');
        int int49 = localDateTime48.getWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withMonthOfYear(10);
        long long53 = chronology19.set((org.joda.time.ReadablePartial) localDateTime48, 6084000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test477");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDateTime8.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter5.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter5.withDefaultYear(1969);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        boolean boolean22 = mutableDateTime20.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime20.setZone(dateTimeZone24);
        long long27 = dateTimeZone24.nextTransition((long) '4');
        java.lang.String str29 = dateTimeZone24.getShortName((long) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter5.withZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        boolean boolean34 = mutableDateTime32.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime32.setZone(dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableDateTime32.add(readablePeriod38, 4);
        org.joda.time.Instant instant41 = mutableDateTime32.toInstant();
        boolean boolean43 = mutableDateTime32.isAfter((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime32.yearOfCentury();
        org.joda.time.Chronology chronology45 = null;
        mutableDateTime32.setChronology(chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime32.add(readableDuration47, 25);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime32.weekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology59 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfHalfday();
        org.joda.time.DurationField durationField61 = chronology59.seconds();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.hourOfHalfday();
        org.joda.time.Chronology chronology63 = chronology59.withUTC();
        org.joda.time.DurationField durationField64 = chronology59.millis();
        mutableDateTime32.setChronology(chronology59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter30.withChronology(chronology59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime20 and mutableDateTime32", (mutableDateTime20.compareTo(mutableDateTime32) == 0) == mutableDateTime20.equals(mutableDateTime32));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test478");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '4', chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay(100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plus(readableDuration17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.era();
        long long21 = chronology9.set((org.joda.time.ReadablePartial) localDateTime18, (long) 22);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withDayOfMonth(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDateTime27.toDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone30);
        long long36 = dateTimeZone30.adjustOffset((-1L), false);
        java.util.TimeZone timeZone37 = dateTimeZone30.toTimeZone();
        int int39 = dateTimeZone30.getOffsetFromLocal((long) 1969);
        org.joda.time.DateTime dateTime40 = localDateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDateTime43.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.DurationField durationField51 = chronology49.seconds();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.era();
        org.joda.time.DateTime dateTime55 = dateTime40.toDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime55", (dateTime40.compareTo(dateTime55) == 0) == dateTime40.equals(dateTime55));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test479");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        boolean boolean8 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate7);
        int int9 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property10 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy((int) (byte) 1);
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone26);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(35503088L);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalTime localTime38 = localTime35.withPeriodAdded(readablePeriod36, (int) (short) 0);
        org.joda.time.LocalTime.Property property39 = localTime35.secondOfMinute();
        org.joda.time.LocalTime localTime40 = property39.withMaximumValue();
        org.joda.time.LocalTime localTime41 = property39.getLocalTime();
        org.joda.time.LocalTime localTime42 = property39.withMaximumValue();
        org.joda.time.LocalTime localTime43 = property39.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime44 = property39.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime46 = property39.addCopy(3577836916L);
        org.joda.time.LocalTime localTime47 = property39.withMaximumValue();
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.LocalTime localTime49 = localTime34.withFields((org.joda.time.ReadablePartial) localTime47);
        int[] intArray51 = chronology31.get((org.joda.time.ReadablePartial) localTime47, 223200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime22", (mutableDateTime1.compareTo(mutableDateTime22) == 0) == mutableDateTime1.equals(mutableDateTime22));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test480");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter2.getParser();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology9);
        org.joda.time.DurationField durationField13 = chronology9.eras();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology9.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField13", Math.signum(durationField10.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField10)));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test481");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DurationField durationField13 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField13", Math.signum(durationField10.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField10)));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test482");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate2.withYearOfCentury(14);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 0, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 0, chronology15);
        boolean boolean17 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate16);
        int int18 = localDate16.getDayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate16.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = property19.roundFloorCopy();
        int int21 = localDate20.size();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate20.minus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate26 = localDate20.minusYears(1);
        int int27 = localDate20.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight28 = localDate20.toDateMidnight();
        org.joda.time.LocalDate.Property property29 = localDate20.weekOfWeekyear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 0, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 0, chronology34);
        boolean boolean36 = localDate32.isEqual((org.joda.time.ReadablePartial) localDate35);
        int int37 = localDate35.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean39 = localDate35.isSupported(dateTimeFieldType38);
        org.joda.time.LocalDate.Property property40 = localDate20.property(dateTimeFieldType38);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime43.getZone();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate20.toDateTimeAtStartOfDay(dateTimeZone44);
        boolean boolean48 = dateTimeZone44.isStandardOffset(1644573054796L);
        int int50 = dateTimeZone44.getOffset(10L);
        org.joda.time.DateTime dateTime51 = localDate2.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.dayOfYear();
        boolean boolean62 = mutableDateTime60.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime60.setZone(dateTimeZone64);
        long long67 = dateTimeZone64.nextTransition((long) '4');
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone64);
        int int70 = dateTimeZone64.getOffset((long) 35677);
        long long72 = dateTimeZone44.getMillisKeepLocal(dateTimeZone64, 25260000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime43 and mutableDateTime60", (mutableDateTime43.compareTo(mutableDateTime60) == 0) == mutableDateTime43.equals(mutableDateTime60));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test483");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime20.withPeriodAdded(readablePeriod21, (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        boolean boolean28 = localTime23.isSupported(dateTimeFieldType27);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime32 = localTime29.withPeriodAdded(readablePeriod30, (int) (short) 0);
        org.joda.time.LocalTime.Property property33 = localTime29.secondOfMinute();
        org.joda.time.LocalTime localTime34 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime35 = property33.getLocalTime();
        org.joda.time.LocalTime localTime36 = property33.withMaximumValue();
        org.joda.time.LocalTime localTime37 = property33.roundHalfCeilingCopy();
        int int38 = localTime23.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.LocalTime.Property property39 = localTime23.millisOfDay();
        org.joda.time.LocalTime localTime40 = property39.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime41 = property39.getLocalTime();
        org.joda.time.LocalTime localTime43 = property39.addWrapFieldToCopy((-292275054));
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalTime localTime47 = localTime44.withPeriodAdded(readablePeriod45, (int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalTime localTime50 = localTime44.withPeriodAdded(readablePeriod48, 366);
        org.joda.time.LocalTime localTime52 = localTime50.plusMillis(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfHalfday();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket63.saveField(dateTimeFieldType64, "1970-01-01T00:00:00.000Z", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology57, locale66);
        java.lang.String str69 = chronology57.toString();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField71 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology57.yearOfCentury();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 69, chronology57);
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType53.getField(chronology57);
        boolean boolean75 = localTime52.isSupported(dateTimeFieldType53);
        boolean boolean76 = localTime43.isSupported(dateTimeFieldType53);
        int int77 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.Chronology chronology78 = localTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime25", (mutableDateTime8.compareTo(mutableDateTime25) == 0) == mutableDateTime8.equals(mutableDateTime25));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test484");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Chronology chronology4 = null;
        mutableDateTime3.setChronology(chronology4);
        mutableDateTime3.addDays(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime3.add(readablePeriod8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime3.yearOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.secondOfDay();
        org.joda.time.DateTime dateTime12 = mutableDateTime3.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(600);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfHalfday();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket23.saveField(dateTimeFieldType24, "1970-01-01T00:00:00.000Z", locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology17, locale26);
        org.joda.time.DateTimeField dateTimeField29 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology17.weekyear();
        org.joda.time.Chronology chronology32 = chronology17.withUTC();
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(chronology17);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime12.minus(readablePeriod34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime33", (mutableDateTime1.compareTo(dateTime33) == 0) == mutableDateTime1.equals(dateTime33));
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test485");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfYear();
        boolean boolean10 = mutableDateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime8.setZone(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) '4');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((int) (byte) -1, 2, 5, 4, (int) (short) 0, 0, 100, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) (byte) 100);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime21 = localTime19.plusHours(3);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTime dateTime24 = localTime19.toDateTimeToday(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket40.saveField(dateTimeFieldType41, "1970-01-01T00:00:00.000Z", locale43);
        dateTimeParserBucket33.saveField(dateTimeFieldType34, "1970-01-01T00:00:00.000Z", locale43);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket50.saveField(dateTimeFieldType51, "1970-01-01T00:00:00.000Z", locale53);
        java.lang.String str55 = locale43.getDisplayCountry(locale53);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket67.saveField(dateTimeFieldType68, "1970-01-01T00:00:00.000Z", locale70);
        dateTimeParserBucket60.saveField(dateTimeFieldType61, "1970-01-01T00:00:00.000Z", locale70);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket77.saveField(dateTimeFieldType78, "1970-01-01T00:00:00.000Z", locale80);
        java.lang.String str82 = locale70.getDisplayCountry(locale80);
        java.lang.String str83 = locale53.getDisplayVariant(locale70);
        java.lang.String str84 = dateTimeZone27.getName((long) 'x', locale53);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(35503088L, dateTimeZone27);
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime.Property property87 = dateTime86.weekyear();
        boolean boolean88 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime86);
        java.util.Date date89 = dateTime24.toDate();
        org.joda.time.LocalTime localTime90 = org.joda.time.LocalTime.fromDateFields(date89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime86", (dateTime24.compareTo(dateTime86) == 0) == dateTime24.equals(dateTime86));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test486");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.plus(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withChronology(chronology13);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime12.toYearMonthDay();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        boolean boolean19 = mutableDateTime17.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime17.setZone(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime17.add(readablePeriod23, 4);
        mutableDateTime17.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = property30.getMutableDateTime();
        int int32 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        int int33 = mutableDateTime31.getRoundingMode();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableDateTime31.add(readablePeriod34);
        mutableDateTime31.addMillis(31);
        org.joda.time.Instant instant38 = mutableDateTime31.toInstant();
        boolean boolean39 = dateTime12.isEqual((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (short) 0, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 0, chronology44);
        boolean boolean46 = localDate42.isEqual((org.joda.time.ReadablePartial) localDate45);
        int int47 = localDate45.getDayOfWeek();
        int int48 = localDate45.getMonthOfYear();
        int int49 = localDate45.getCenturyOfEra();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 0);
        long long56 = dateTimeParserBucket54.computeMillis(true);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 0, chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 0, chronology61);
        boolean boolean63 = localDate59.isEqual((org.joda.time.ReadablePartial) localDate62);
        int int64 = localDate62.getDayOfWeek();
        org.joda.time.LocalDate.Property property65 = localDate62.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval68 = localDate62.toInterval(dateTimeZone67);
        long long70 = dateTimeZone67.convertUTCToLocal((long) 0);
        dateTimeParserBucket54.setZone(dateTimeZone67);
        java.lang.String str73 = dateTimeZone67.getName((long) ' ');
        boolean boolean75 = dateTimeZone67.isStandardOffset((long) 6);
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.now(dateTimeZone67);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) (short) 0, chronology78);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) (short) 0, chronology81);
        boolean boolean83 = localDate79.isEqual((org.joda.time.ReadablePartial) localDate82);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = localDate79.toDateTimeAtStartOfDay(dateTimeZone84);
        org.joda.time.DateTime dateTime87 = dateTime85.minusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.DateTime dateTime89 = dateTime85.plus(readableDuration88);
        int int90 = dateTimeZone67.getOffset((org.joda.time.ReadableInstant) dateTime85);
        java.lang.String str92 = dateTimeZone67.getNameKey((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight93 = localDate45.toDateMidnight(dateTimeZone67);
        int int95 = dateTimeZone67.getStandardOffset((long) 235);
        org.joda.time.DateTime dateTime96 = dateTime12.toDateTime(dateTimeZone67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and instant38", (mutableDateTime29.compareTo(instant38) == 0) == mutableDateTime29.equals(instant38));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test487");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int12 = dateTimeZone10.getOffset((long) '4');
        mutableDateTime1.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("1969-12-29T00:00:00.000Z");
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        long long17 = mutableDateTime1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) 53);
        mutableDateTime1.setZone(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime15", (mutableDateTime1.compareTo(mutableDateTime15) == 0) == mutableDateTime1.equals(mutableDateTime15));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test488");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        int int11 = mutableDateTime1.getWeekyear();
        mutableDateTime1.setDayOfMonth(1);
        int int14 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        boolean boolean20 = mutableDateTime18.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime18.setZone(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime18.add(readablePeriod24, 4);
        mutableDateTime18.setTime((long) (short) 10);
        int int29 = mutableDateTime18.getEra();
        org.joda.time.DateTime dateTime30 = mutableDateTime18.toDateTimeISO();
        boolean boolean31 = mutableDateTime16.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = dateTime30.withLaterOffsetAtOverlap();
        boolean boolean33 = mutableDateTime1.equals((java.lang.Object) dateTime30);
        org.joda.time.DateTime dateTime35 = dateTime30.plusMinutes(35782572);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant10", (mutableDateTime1.compareTo(instant10) == 0) == mutableDateTime1.equals(instant10));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test489");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, (int) (short) 10, (int) (short) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.addCopy(0);
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.getLocalTime();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        boolean boolean13 = mutableDateTime11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime11.setZone(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime11.add(readablePeriod17, 4);
        mutableDateTime11.setTime((long) (short) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone23);
        int int25 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str26 = property4.getAsText();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(35732418);
        boolean boolean29 = property4.equals((java.lang.Object) 35732418);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime24", (mutableDateTime11.compareTo(dateTime24) == 0) == mutableDateTime11.equals(dateTime24));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test490");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone6);
        long long12 = dateTimeZone6.adjustOffset((-1L), false);
        java.util.TimeZone timeZone13 = dateTimeZone6.toTimeZone();
        int int15 = dateTimeZone6.getOffsetFromLocal((long) 1969);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = localDateTime22.getChronology();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket40.saveField(dateTimeFieldType41, "1970-01-01T00:00:00.000Z", locale43);
        dateTimeParserBucket33.saveField(dateTimeFieldType34, "1970-01-01T00:00:00.000Z", locale43);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket50.saveField(dateTimeFieldType51, "1970-01-01T00:00:00.000Z", locale53);
        java.lang.String str55 = locale43.getDisplayCountry(locale53);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket67.saveField(dateTimeFieldType68, "1970-01-01T00:00:00.000Z", locale70);
        dateTimeParserBucket60.saveField(dateTimeFieldType61, "1970-01-01T00:00:00.000Z", locale70);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket77.saveField(dateTimeFieldType78, "1970-01-01T00:00:00.000Z", locale80);
        java.lang.String str82 = locale70.getDisplayCountry(locale80);
        java.lang.String str83 = locale53.getDisplayVariant(locale70);
        java.lang.String str84 = locale70.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology28, locale70);
        org.joda.time.Chronology chronology86 = chronology28.withUTC();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(1L, chronology86);
        org.joda.time.DateTimeField dateTimeField88 = chronology86.year();
        org.joda.time.Chronology chronology89 = chronology86.withUTC();
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime((long) 2039, chronology86);
        org.joda.time.MutableDateTime mutableDateTime91 = mutableDateTime16.toMutableDateTime(chronology86);
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime16.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime91", (dateTime8.compareTo(mutableDateTime91) == 0) == dateTime8.equals(mutableDateTime91));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test491");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(31);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime5.getZone();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        boolean boolean12 = dateTimeZone9.isStandardOffset((long) 3);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone9);
        boolean boolean14 = dateTimeZone6.equals((java.lang.Object) dateTimeZone9);
        long long16 = dateTimeZone2.getMillisKeepLocal(dateTimeZone9, (-32L));
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone9.getShortName((long) 363, locale18);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 31, dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime22.setZone(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime22.add(readablePeriod28, 4);
        mutableDateTime22.setMillisOfSecond(0);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.getMutableDateTime();
        int int37 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime36.setDate(45L);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.minuteOfHour();
        int int41 = mutableDateTime36.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusMillis((int) 'u');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.plus(readableDuration47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minus(readablePeriod49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime44.plus(readableDuration51);
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = localDateTime52.getFields();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.millisOfSecond();
        org.joda.time.Chronology chronology55 = localDateTime52.getChronology();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.DurationField durationField57 = chronology55.years();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime36, chronology55);
        int int60 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) mutableDateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime59", (mutableDateTime5.compareTo(mutableDateTime59) == 0) == mutableDateTime5.equals(mutableDateTime59));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test492");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone3 = mutableDateTime2.getZone();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone3);
        boolean boolean6 = dateTime4.isBefore((long) 53);
        org.joda.time.DateTime dateTime8 = dateTime4.withWeekyear(365);
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded((long) ' ', 17);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        boolean boolean17 = mutableDateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime15.setZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(6048000000L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone19);
        long long24 = dateTimeZone19.convertUTCToLocal((long) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime11.withZoneRetainFields(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime15", (mutableDateTime2.compareTo(mutableDateTime15) == 0) == mutableDateTime2.equals(mutableDateTime15));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test493");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 0, chronology4);
        boolean boolean6 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int7 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        int int10 = localDate9.size();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        boolean boolean16 = mutableDateTime14.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime14.setZone(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) '4');
        org.joda.time.DateTime dateTime22 = localDate12.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate24 = localDate12.plusYears((-1));
        org.joda.time.DateTime dateTime25 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 0, chronology30);
        boolean boolean32 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        org.joda.time.LocalDate.Property property37 = localDate31.property(dateTimeFieldType36);
        org.joda.time.LocalDate localDate39 = property37.addToCopy((int) (byte) 10);
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfWeek();
        org.joda.time.LocalDate localDate41 = property40.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate42 = property40.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate44 = localDate42.plusWeeks(5);
        org.joda.time.LocalDate localDate45 = localDate12.withFields((org.joda.time.ReadablePartial) localDate44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime34", (mutableDateTime14.compareTo(mutableDateTime34) == 0) == mutableDateTime14.equals(mutableDateTime34));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test494");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone6);
        long long12 = dateTimeZone6.adjustOffset((-1L), false);
        java.util.TimeZone timeZone13 = dateTimeZone6.toTimeZone();
        int int15 = dateTimeZone6.getOffsetFromLocal((long) 1969);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = localDateTime22.getChronology();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket40.saveField(dateTimeFieldType41, "1970-01-01T00:00:00.000Z", locale43);
        dateTimeParserBucket33.saveField(dateTimeFieldType34, "1970-01-01T00:00:00.000Z", locale43);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket50.saveField(dateTimeFieldType51, "1970-01-01T00:00:00.000Z", locale53);
        java.lang.String str55 = locale43.getDisplayCountry(locale53);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket67.saveField(dateTimeFieldType68, "1970-01-01T00:00:00.000Z", locale70);
        dateTimeParserBucket60.saveField(dateTimeFieldType61, "1970-01-01T00:00:00.000Z", locale70);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket77.saveField(dateTimeFieldType78, "1970-01-01T00:00:00.000Z", locale80);
        java.lang.String str82 = locale70.getDisplayCountry(locale80);
        java.lang.String str83 = locale53.getDisplayVariant(locale70);
        java.lang.String str84 = locale70.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology28, locale70);
        org.joda.time.Chronology chronology86 = chronology28.withUTC();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(1L, chronology86);
        org.joda.time.DateTimeField dateTimeField88 = chronology86.year();
        org.joda.time.Chronology chronology89 = chronology86.withUTC();
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime((long) 2039, chronology86);
        org.joda.time.MutableDateTime mutableDateTime91 = mutableDateTime16.toMutableDateTime(chronology86);
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime16.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime91", (dateTime8.compareTo(mutableDateTime91) == 0) == dateTime8.equals(mutableDateTime91));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test495");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-05T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.dayOfYear();
        boolean boolean5 = mutableDateTime3.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime3.setZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, 4);
        mutableDateTime3.setTime((long) (short) 10);
        int int14 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime3.toDateTimeISO();
        boolean boolean16 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "1970-01-01T00:00:00.000Z", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale28);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime(chronology19);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear((int) (byte) 1);
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime34", (mutableDateTime3.compareTo(dateTime34) == 0) == mutableDateTime3.equals(dateTime34));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test496");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime1.add(readablePeriod14, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfHalfday();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket28.saveField(dateTimeFieldType29, "1970-01-01T00:00:00.000Z", locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology22, locale31);
        java.lang.String str34 = chronology22.toString();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField36 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology22.yearOfCentury();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 69, chronology22);
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType18.getField(chronology22);
        java.util.Locale locale40 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology22, locale40);
        org.joda.time.DateTime dateTime42 = mutableDateTime1.toDateTime(chronology22);
        mutableDateTime1.addSeconds((-456825));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime42", (dateTime13.compareTo(dateTime42) == 0) == dateTime13.equals(dateTime42));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test497");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = localDateTime4.getChronology();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket22.saveField(dateTimeFieldType23, "1970-01-01T00:00:00.000Z", locale25);
        dateTimeParserBucket15.saveField(dateTimeFieldType16, "1970-01-01T00:00:00.000Z", locale25);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket32.saveField(dateTimeFieldType33, "1970-01-01T00:00:00.000Z", locale35);
        java.lang.String str37 = locale25.getDisplayCountry(locale35);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale47, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket49.saveField(dateTimeFieldType50, "1970-01-01T00:00:00.000Z", locale52);
        dateTimeParserBucket42.saveField(dateTimeFieldType43, "1970-01-01T00:00:00.000Z", locale52);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology56, locale57, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket59.saveField(dateTimeFieldType60, "1970-01-01T00:00:00.000Z", locale62);
        java.lang.String str64 = locale52.getDisplayCountry(locale62);
        java.lang.String str65 = locale35.getDisplayVariant(locale52);
        java.lang.String str66 = locale52.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology10, locale52);
        org.joda.time.Chronology chronology68 = chronology10.withUTC();
        java.util.Locale locale69 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str71 = locale69.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology68, locale69, (java.lang.Integer) 2022);
        dateTimeParserBucket73.setOffset((java.lang.Integer) 10);
        org.joda.time.Chronology chronology76 = dateTimeParserBucket73.getChronology();
        org.joda.time.Chronology chronology77 = dateTimeParserBucket73.getChronology();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(chronology77);
        org.joda.time.DateTime dateTime80 = dateTime78.minusYears(403);
        long long81 = dateTime80.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime78", (dateTime9.compareTo(dateTime78) == 0) == dateTime9.equals(dateTime78));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test498");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        boolean boolean4 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime2.setZone(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime2.add(readablePeriod8, 4);
        mutableDateTime2.setTime((long) (short) 10);
        int int13 = mutableDateTime2.getEra();
        org.joda.time.DateTime dateTime14 = mutableDateTime2.toDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime2.add(readablePeriod15, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket29.saveField(dateTimeFieldType30, "1970-01-01T00:00:00.000Z", locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology23, locale32);
        java.lang.String str35 = chronology23.toString();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField37 = chronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology23.yearOfCentury();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 69, chronology23);
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType19.getField(chronology23);
        java.util.Locale locale41 = java.util.Locale.UK;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology23, locale41);
        org.joda.time.DateTime dateTime43 = mutableDateTime2.toDateTime(chronology23);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(1644573348215L, chronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and dateTime43", (mutableDateTime2.compareTo(dateTime43) == 0) == mutableDateTime2.equals(dateTime43));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test499");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        boolean boolean3 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        mutableDateTime1.setZone(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, 4);
        mutableDateTime1.setTime((long) (short) 10);
        int int12 = mutableDateTime1.getEra();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTimeISO();
        int int14 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.addWrapField((int) (short) 10);
        org.joda.time.Instant instant19 = mutableDateTime18.toInstant();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        int int24 = dateTimeZone22.getOffset((long) '4');
        long long26 = dateTimeZone22.previousTransition((long) ' ');
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfHalfday();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "1970-01-01T00:00:00.000Z", locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology30, locale39);
        java.lang.String str42 = locale39.getISO3Country();
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale39.getDisplayLanguage(locale43);
        java.lang.String str45 = locale43.getISO3Country();
        java.lang.String str46 = locale43.getVariant();
        java.lang.String str47 = dateTimeZone22.getName((long) 35449917, locale43);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now(dateTimeZone22);
        mutableDateTime18.setZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone56);
        long long62 = dateTimeZone56.adjustOffset((-1L), false);
        long long66 = dateTimeZone56.convertLocalToUTC((-32L), true, 3592236916L);
        mutableDateTime18.setZoneRetainFields(dateTimeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and instant19", (mutableDateTime18.compareTo(instant19) == 0) == mutableDateTime18.equals(instant19));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test500");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 0, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        boolean boolean7 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 0, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        boolean boolean18 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate17);
        int int19 = localDate17.getDayOfWeek();
        org.joda.time.LocalDate.Property property20 = localDate17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Interval interval23 = localDate17.toInterval(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime11.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime11.minusHours(771);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(3577923926L, dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime24", (dateTime11.compareTo(dateTime24) == 0) == dateTime11.equals(dateTime24));
    }
}


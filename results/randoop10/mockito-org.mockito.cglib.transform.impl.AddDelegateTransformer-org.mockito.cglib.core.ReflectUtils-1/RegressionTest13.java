import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor3.setDisplayName("()I");
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        boolean boolean16 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setWriteMethod(method19);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("(Z)C", method22, method23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type31 = classInfo30.getType();
        java.beans.PropertyEditor propertyEditor32 = propertyDescriptor24.createPropertyEditor((java.lang.Object) type31);
        java.lang.reflect.Method method33 = null;
        propertyDescriptor24.setWriteMethod(method33);
        java.lang.reflect.Method method35 = propertyDescriptor24.getReadMethod();
        propertyDescriptor24.setExpert(true);
        java.lang.Object obj39 = propertyDescriptor24.getValue("Ljava/lang/Object;()D");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass42 = type41.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type46 = classInfo45.getSuperType();
        org.mockito.asm.Type type47 = classInfo45.getSuperType();
        org.mockito.asm.Type[] typeArray48 = classInfo45.getInterfaces();
        org.mockito.asm.Type[] typeArray49 = classInfo45.getInterfaces();
        org.mockito.asm.Type type50 = classInfo45.getType();
        java.lang.String str51 = classInfo45.toString();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("(Z)C", method53, method54);
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor55.setValue("org/mockito/asm/Type", (java.lang.Object) signature59);
        java.lang.String str61 = propertyDescriptor55.getDisplayName();
        boolean boolean62 = propertyDescriptor55.isHidden();
        propertyDescriptor55.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor55.setConstrained(true);
        boolean boolean67 = classInfo45.equals((java.lang.Object) propertyDescriptor55);
        propertyDescriptor24.setValue("java.beans.PropertyDescriptor[name=(Z)C; hidden; bound]", (java.lang.Object) propertyDescriptor55);
        boolean boolean69 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor24);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/asm/Type" + "'", str28, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNull(propertyEditor32);
        org.junit.Assert.assertNull(method35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org/mockito/asm/Type" + "'", str44, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.Type" + "'", str51, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(Z)C" + "'", str61, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]; shortDescription=J; values={org/mockito/asm/Type=char}]");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("char");
        int int17 = type16.getSize();
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type16);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(propertyEditor18);
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("org/mockito/asm/TypeD()Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray6 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray6);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray6);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray13);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        boolean boolean22 = signature19.equals((java.lang.Object) wildcardClass21);
        java.lang.String str23 = signature19.getName();
        boolean boolean24 = type16.equals((java.lang.Object) str23);
        java.lang.String str25 = type16.getDescriptor();
        int int27 = type16.getOpcode((int) (byte) 0);
        java.lang.Class<?> wildcardClass28 = type16.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer29 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray14, (java.lang.Class) wildcardClass28);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "F" + "'", str25, "F");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("boolean");
        boolean boolean9 = propertyDescriptor3.isExpert();
        boolean boolean10 = propertyDescriptor3.isPreferred();
        boolean boolean11 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setHidden(false);
        boolean boolean16 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type[] typeArray7 = classInfo6.getInterfaces();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str9 = type8.getDescriptor();
        boolean boolean10 = classInfo6.equals((java.lang.Object) type8);
        org.mockito.asm.Type type11 = classInfo6.getSuperType();
        int int12 = type11.getDimensions();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        int int16 = type14.getOpcode(0);
        int int18 = type14.getOpcode(130);
        java.lang.String str19 = type14.getDescriptor();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("(Z)C", method21, method22);
        propertyDescriptor23.setBound(true);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        java.lang.Object obj28 = propertyDescriptor23.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method29 = null;
        propertyDescriptor23.setWriteMethod(method29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type[] typeArray37 = classInfo36.getInterfaces();
        boolean boolean39 = classInfo36.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray40 = classInfo36.getInterfaces();
        org.mockito.asm.Type type41 = classInfo36.getSuperType();
        propertyDescriptor23.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo36);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("(Z)C", method44, method45);
        propertyDescriptor46.setBound(true);
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Object obj51 = propertyDescriptor46.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method52 = null;
        propertyDescriptor46.setWriteMethod(method52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass56 = type55.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass56);
        java.lang.String str58 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type[] typeArray60 = classInfo59.getInterfaces();
        boolean boolean62 = classInfo59.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray63 = classInfo59.getInterfaces();
        org.mockito.asm.Type type64 = classInfo59.getSuperType();
        propertyDescriptor46.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo59);
        boolean boolean66 = classInfo36.equals((java.lang.Object) propertyDescriptor46);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType("B");
        boolean boolean69 = classInfo36.equals((java.lang.Object) type68);
        java.lang.String str70 = classInfo36.toString();
        org.mockito.asm.Type type71 = classInfo36.getSuperType();
        org.mockito.asm.Type[] typeArray72 = classInfo36.getInterfaces();
        org.mockito.cglib.core.Signature signature73 = new org.mockito.cglib.core.Signature("org/mockito/asm/TypeD", type14, typeArray72);
        org.mockito.asm.Type type74 = signature73.getReturnType();
        org.mockito.asm.Type[] typeArray75 = signature73.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature76 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(Z)C; expert]", type11, typeArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(Z)C; expert]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "D" + "'", str9, "D");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 130 + "'", int18 == 130);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "C" + "'", str19, "C");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/Type" + "'", str35, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org/mockito/asm/Type" + "'", str58, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.Type" + "'", str70, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(typeArray75);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        boolean boolean15 = propertyDescriptor3.isExpert();
        boolean boolean16 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=org/mockito/asm/Type; values={()Lg/mockito/asm/Type;=org.mockito.asm.Type}; bound]");
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=S]");
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; shortDescription=org/mockito/asm/Type; values={()Lg/mockito/asm/Type;=org.mockito.asm.Type}; bound]" + "'", str19, "java.beans.PropertyDescriptor[name=(Z)C; shortDescription=org/mockito/asm/Type; values={()Lg/mockito/asm/Type;=org.mockito.asm.Type}; bound]");
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method21 = propertyDescriptor3.getReadMethod();
        java.util.Enumeration<java.lang.String> strEnumeration22 = propertyDescriptor3.attributeNames();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str24 = type23.getClassName();
        int int25 = type23.getSort();
        java.lang.Class<?> wildcardClass26 = type23.getClass();
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type23);
        java.lang.reflect.Method method28 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method29 = null;
        propertyDescriptor3.setWriteMethod(method29);
        propertyDescriptor3.setDisplayName("Lorg/mockito/asm/Type;");
        propertyDescriptor3.setConstrained(true);
        boolean boolean35 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(strEnumeration22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "boolean" + "'", str24, "boolean");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(propertyEditor27);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("short", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        boolean boolean7 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        boolean boolean15 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setDisplayName("ava.beans.PropertyDescriptor[name=(Z)C");
        java.lang.String str20 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; displayName=ava.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str20, "java.beans.PropertyDescriptor[name=(Z)C; displayName=ava.beans.PropertyDescriptor[name=(Z)C; constrained]");
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("(Z)C", method7, method8);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor9.attributeNames();
        boolean boolean11 = propertyDescriptor9.isPreferred();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyType();
        java.beans.PropertyEditor propertyEditor13 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor9);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        boolean boolean15 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(propertyEditor13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]" + "'", str14, "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Z)Lorg.mockito.asm.Type");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(true);
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setName("org/mockito/asm/TypeD");
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(Z)C" + "'", str10, "(Z)C");
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.Class[] classArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass1, "Ljava.lang.Object;", classArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: Ljava.lang.Object;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.util.List list12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list13 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass9, list12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str10, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isHidden();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("(Z)C", method11, method12);
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor13.attributeNames();
        boolean boolean15 = propertyDescriptor13.isPreferred();
        java.lang.String str16 = propertyDescriptor13.getName();
        boolean boolean17 = propertyDescriptor13.isExpert();
        propertyDescriptor13.setBound(true);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor13.setWriteMethod(method20);
        java.lang.Class<?> wildcardClass22 = propertyDescriptor13.getPropertyEditorClass();
        propertyDescriptor13.setExpert(false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor13.createPropertyEditor((java.lang.Object) wildcardClass26);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor13.getPropertyEditorClass();
        propertyDescriptor13.setExpert(true);
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass37 = type36.getClass();
        boolean boolean38 = signature35.equals((java.lang.Object) wildcardClass37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = type39.getElementType();
        int int41 = type40.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        int int45 = type43.getOpcode(0);
        int int46 = type43.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass48 = type47.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.lang.String str50 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass48);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type[] typeArray53 = classInfo52.getInterfaces();
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("", type43, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray53);
        int int57 = type40.getOpcode(112);
        java.lang.String str58 = type40.getInternalName();
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("", "");
        java.lang.String str62 = signature61.getDescriptor();
        boolean boolean63 = type40.equals((java.lang.Object) signature61);
        java.lang.String str64 = type40.toString();
        java.lang.String str65 = type40.getInternalName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getObjectType("char");
        org.mockito.asm.Type type68 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass69 = type68.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass69);
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass69);
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass69);
        org.mockito.cglib.core.ClassInfo classInfo73 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        int int78 = type76.getOpcode(0);
        int int79 = type76.getSort();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass81 = type80.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray82 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.ClassInfo classInfo85 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type[] typeArray86 = classInfo85.getInterfaces();
        org.mockito.cglib.core.Signature signature87 = new org.mockito.cglib.core.Signature("", type76, typeArray86);
        boolean boolean88 = type74.equals((java.lang.Object) typeArray86);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray86);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.Type type91 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean93 = type91.equals((java.lang.Object) (byte) 0);
        org.mockito.asm.Type[] typeArray94 = new org.mockito.asm.Type[] { type91 };
        java.lang.String str95 = org.mockito.asm.Type.getMethodDescriptor(type90, typeArray94);
        java.lang.String str96 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray94);
        org.mockito.cglib.core.Signature signature97 = new org.mockito.cglib.core.Signature("mockito/asm/Type", type40, typeArray94);
        java.beans.PropertyEditor propertyEditor98 = propertyDescriptor13.createPropertyEditor((java.lang.Object) signature97);
        java.beans.PropertyEditor propertyEditor99 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature97);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(Z)C" + "'", str16, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/Type" + "'", str50, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str55, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 116 + "'", int57 == 116);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "g/mockito/asm/Type" + "'", str58, "g/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lg/mockito/asm/Type;" + "'", str64, "Lg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "g/mockito/asm/Type" + "'", str65, "g/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org/mockito/asm/Type" + "'", str71, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertNotNull(classInfo73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(propertyDescriptorArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/Type" + "'", str83, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(classInfo85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "()Lchar;" + "'", str89, "()Lchar;");
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeArray94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(Z)C" + "'", str95, "(Z)C");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(Z)Lchar;" + "'", str96, "(Z)Lchar;");
        org.junit.Assert.assertNull(propertyEditor98);
        org.junit.Assert.assertNull(propertyEditor99);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 0, (byte) 1, (byte) 100 };
        java.lang.ClassLoader classLoader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class9 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(Z)C; values={Lmockito/asm/Type;=java.beans.PropertyDescriptor[name=(Z)C; displayName=()I; values={org/mockito/asm/Type=char}]}; bound]", byteArray7, classLoader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 1, 100, 0, 1, 100]");
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray9 = classInfo4.getInterfaces();
        org.mockito.asm.Type type10 = classInfo4.getType();
        org.mockito.asm.Type type11 = type10.getElementType();
        org.mockito.asm.Type type12 = type10.getElementType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type11 = classInfo10.getType();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("(Z)C", method13, method14);
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor15.attributeNames();
        propertyDescriptor15.setDisplayName("org/mockito/asm/Type");
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        int int20 = type19.getSort();
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor15.createPropertyEditor((java.lang.Object) int20);
        java.lang.Object obj23 = propertyDescriptor15.getValue("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z]");
        boolean boolean24 = classInfo10.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z]");
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(strEnumeration16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type[] typeArray17 = classInfo16.getInterfaces();
        boolean boolean19 = classInfo16.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        propertyDescriptor3.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo16);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("(Z)C", method24, method25);
        propertyDescriptor26.setBound(true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        java.lang.Object obj31 = propertyDescriptor26.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method32 = null;
        propertyDescriptor26.setWriteMethod(method32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass36 = type35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type[] typeArray40 = classInfo39.getInterfaces();
        boolean boolean42 = classInfo39.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray43 = classInfo39.getInterfaces();
        org.mockito.asm.Type type44 = classInfo39.getSuperType();
        propertyDescriptor26.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo39);
        boolean boolean46 = classInfo16.equals((java.lang.Object) propertyDescriptor26);
        java.lang.Class<?> wildcardClass47 = propertyDescriptor26.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/Type" + "'", str38, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(wildcardClass47);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setConstrained(true);
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        java.lang.String str17 = propertyDescriptor3.getShortDescription();
        java.lang.String str18 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("L()Lrg/mockito/asm/TypeLorg/mockito/asm/Type;;");
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(Z)C" + "'", str16, "(Z)C");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(Z)C" + "'", str17, "(Z)C");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(Z)C" + "'", str18, "(Z)C");
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type[] typeArray19 = classInfo18.getInterfaces();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        boolean boolean22 = classInfo18.equals((java.lang.Object) type20);
        propertyDescriptor3.setValue("()Z", (java.lang.Object) type20);
        java.lang.reflect.Method method24 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("Z", method29, method30);
        propertyDescriptor3.setValue("F()Lg/mockito/asm/Type;", (java.lang.Object) "Z");
        java.util.Enumeration<java.lang.String> strEnumeration33 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "D" + "'", str21, "D");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNotNull(strEnumeration33);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method6 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str2, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(false);
        boolean boolean16 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(true);
        boolean boolean23 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("B");
        propertyDescriptor3.setExpert(true);
        boolean boolean14 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass4 = type1.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray7);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray18, true, true);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray21);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray21);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass27 = type26.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray33);
        java.lang.Class[] classArray35 = new java.lang.Class[] {};
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass38 = type37.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass38);
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray41, true, true);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray44);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) methodArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str28, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str39, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; values={org/mockito/asm/Type=char}]java/beans/PropertyDescriptor", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char; F=Ljava/lang/Object;; org/mockito/asm/TypeLorg/mockito/asm/Type;=double}]", "Ljava/lang/Object");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char; F=Ljava/lang/Object;; org/mockito/asm/TypeLorg/mockito/asm/Type;=double}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        boolean boolean18 = classInfo5.equals((java.lang.Object) wildcardClass10);
        org.mockito.asm.Type type19 = classInfo5.getType();
        org.mockito.asm.Type type20 = type19.getElementType();
        java.lang.String str21 = type20.toString();
        org.mockito.asm.Type type22 = type20.getElementType();
        int int23 = type20.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lg/mockito/asm/Type;" + "'", str21, "Lg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        java.lang.reflect.Member member0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.MethodInfo methodInfo2 = org.mockito.cglib.core.ReflectUtils.getMethodInfo(member0, 66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot get signature of a field");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("B()D", "java.beans.PropertyDescriptor[name=org.mockito.asm.Type]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'B()D' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type[] typeArray17 = classInfo16.getInterfaces();
        boolean boolean19 = classInfo16.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        propertyDescriptor3.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo16);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("(Z)C", method24, method25);
        propertyDescriptor26.setBound(true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        java.lang.Object obj31 = propertyDescriptor26.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method32 = null;
        propertyDescriptor26.setWriteMethod(method32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass36 = type35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type[] typeArray40 = classInfo39.getInterfaces();
        boolean boolean42 = classInfo39.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray43 = classInfo39.getInterfaces();
        org.mockito.asm.Type type44 = classInfo39.getSuperType();
        propertyDescriptor26.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo39);
        boolean boolean46 = classInfo16.equals((java.lang.Object) propertyDescriptor26);
        propertyDescriptor26.setBound(false);
        boolean boolean49 = propertyDescriptor26.isHidden();
        java.lang.String str50 = propertyDescriptor26.getName();
        java.lang.reflect.Method method51 = propertyDescriptor26.getWriteMethod();
        java.lang.String str52 = propertyDescriptor26.getDisplayName();
        java.lang.reflect.Method method53 = null;
        propertyDescriptor26.setWriteMethod(method53);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/Type" + "'", str38, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Z)C" + "'", str50, "(Z)C");
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(Z)C" + "'", str52, "(Z)C");
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; values={org/mockito/asm/Type=char}]", "java/beans/PropertyDescriptor");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.String str4 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java/beans/PropertyDescriptor" + "'", str3, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; values={org/mockito/asm/Type=char}]java/beans/PropertyDescriptor" + "'", str4, "java.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; values={org/mockito/asm/Type=char}]java/beans/PropertyDescriptor");
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org/mockito/asm/TypeLorg/mockito/asm/Type;", method1, method2);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=boolean; bound]");
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        boolean boolean9 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 0);
        int int4 = type0.getOpcode(100);
        int int5 = type0.getSize();
        int int7 = type0.getOpcode(4);
        int int9 = type0.getOpcode((int) ' ');
        org.mockito.asm.Type type10 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str11 = type10.getDescriptor();
        boolean boolean13 = type10.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass14 = type10.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        boolean boolean17 = type0.equals((java.lang.Object) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, false, true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "D" + "'", str11, "D");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str2, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str2, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str3, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass14 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        java.lang.Object[] objArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4, classArray22, objArray24);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = type6.getElementType();
        int int8 = type7.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        int int12 = type10.getOpcode(0);
        int int13 = type10.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type[] typeArray20 = classInfo19.getInterfaces();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("", type10, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray20);
        int int24 = type7.getOpcode(112);
        java.lang.String str25 = type7.getInternalName();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("", "");
        java.lang.String str29 = signature28.getDescriptor();
        boolean boolean30 = type7.equals((java.lang.Object) signature28);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("(Z)C", method32, method33);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor34.setValue("org/mockito/asm/Type", (java.lang.Object) signature38);
        java.lang.String str40 = propertyDescriptor34.getDisplayName();
        propertyDescriptor34.setHidden(false);
        propertyDescriptor34.setHidden(false);
        propertyDescriptor34.setName("org/mockito/asm/Type");
        boolean boolean47 = signature28.equals((java.lang.Object) propertyDescriptor34);
        boolean boolean48 = propertyDescriptor34.isExpert();
        java.lang.reflect.Method method49 = null;
        propertyDescriptor34.setWriteMethod(method49);
        propertyDescriptor34.setPreferred(false);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass54 = type53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass54);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass54);
        org.mockito.cglib.core.ClassInfo classInfo57 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass54);
        java.lang.String str58 = classInfo57.toString();
        org.mockito.asm.Type type59 = classInfo57.getSuperType();
        int int60 = type59.getSize();
        java.beans.PropertyEditor propertyEditor61 = propertyDescriptor34.createPropertyEditor((java.lang.Object) int60);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str22, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 116 + "'", int24 == 116);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "g/mockito/asm/Type" + "'", str25, "g/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Z)C" + "'", str40, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.mockito.asm.Type" + "'", str58, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(propertyEditor61);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; bound]()Lorg/mockito/asm/Type;", "Ljava/lang/Object");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=boolean; bound]()Lorg/mockito/asm/Type;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, false, false);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(methodArray13);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=java/lang/Object; displayName=java.beans.PropertyDescriptor[name=(Z)C; bound]; preferred]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setName("()Lg/mockito/asm/Type;");
        propertyDescriptor3.setName("Ljava/lang/Object;");
        java.lang.String str23 = propertyDescriptor3.getName();
        java.lang.String str24 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Ljava/lang/Object;" + "'", str23, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str24, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        propertyDescriptor3.setPreferred(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]" + "'", str6, "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        java.lang.String str15 = propertyDescriptor3.getName();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        java.lang.String str17 = propertyDescriptor3.getShortDescription();
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(Z)C" + "'", str14, "(Z)C");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(Z)C" + "'", str15, "(Z)C");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Z" + "'", str18, "Z");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type[] typeArray13 = classInfo12.getInterfaces();
        int int14 = classInfo12.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1041 + "'", int14 == 1041);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("S()Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->S");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.getDescriptor();
        org.mockito.asm.Type type6 = signature2.getReturnType();
        java.lang.String str7 = signature2.toString();
        java.lang.String str8 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ljava/lang/Object;()D" + "'", str4, "Ljava/lang/Object;()D");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "()D" + "'", str5, "()D");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/lang/Object;()D" + "'", str7, "Ljava/lang/Object;()D");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "()D" + "'", str8, "()D");
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type[] typeArray10 = classInfo9.getInterfaces();
        java.lang.String str11 = classInfo9.toString();
        org.mockito.asm.Type[] typeArray12 = classInfo9.getInterfaces();
        int int13 = classInfo9.getModifiers();
        int int14 = classInfo9.getModifiers();
        int int15 = classInfo9.getModifiers();
        org.mockito.asm.Type[] typeArray16 = classInfo9.getInterfaces();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("java/lang/Object", type1, typeArray16);
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        org.mockito.asm.Type[] typeArray21 = signature20.getArgumentTypes();
        org.mockito.asm.Type[] typeArray22 = signature20.getArgumentTypes();
        boolean boolean23 = type1.equals((java.lang.Object) typeArray22);
        int int25 = type1.getOpcode(46);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 49 + "'", int25 == 49);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]; displayName=()Lg/mockito/asm/Type;]");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char; ()D=1}]");
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method11, method12);
        propertyDescriptor13.setPreferred(false);
        java.lang.String str16 = propertyDescriptor13.getName();
        propertyDescriptor13.setBound(true);
        propertyDescriptor13.setBound(false);
        java.lang.reflect.Method method21 = propertyDescriptor13.getReadMethod();
        boolean boolean22 = propertyDescriptor13.isHidden();
        propertyDescriptor3.setValue("()Lorg/mockito/asm/Type;", (java.lang.Object) propertyDescriptor13);
        java.lang.Object obj25 = propertyDescriptor13.getValue("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]; shortDescription=J; values={org/mockito/asm/Type=char}]");
        propertyDescriptor13.setBound(true);
        java.lang.Object obj28 = null;
        boolean boolean29 = propertyDescriptor13.equals(obj28);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]" + "'", str16, "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]");
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        int int5 = type4.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str17 = type16.getDescriptor();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] {};
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray18);
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("long", type15, typeArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(Z)C; displayName=D; values={org/mockito/asm/Type=char}]", type4, typeArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(Z)C; displayName=D; values={org/mockito/asm/Type=char}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "D" + "'", str17, "D");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "()D" + "'", str19, "()D");
        org.junit.Assert.assertNotNull(classArray21);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        int int9 = classInfo5.getModifiers();
        int int10 = classInfo5.getModifiers();
        java.lang.String str11 = classInfo5.toString();
        org.mockito.asm.Type type12 = classInfo5.getType();
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("()Z");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray14);
        java.lang.String str16 = type12.getDescriptor();
        java.lang.String str17 = type12.getDescriptor();
        int int19 = type12.getOpcode(0);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("(Z)C", method21, method22);
        propertyDescriptor23.setBound(true);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        boolean boolean27 = propertyDescriptor23.isExpert();
        propertyDescriptor23.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method31 = null;
        propertyDescriptor23.setWriteMethod(method31);
        java.lang.Object obj34 = propertyDescriptor23.getValue("");
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray38 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray38);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray42 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray42);
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray42);
        java.lang.Class[] classArray45 = new java.lang.Class[] {};
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.reflect.Method[] methodArray47 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray46, methodArray47);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray52 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray52);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray56 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray56);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray56);
        java.lang.Class[] classArray59 = new java.lang.Class[] {};
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        java.lang.reflect.Method[] methodArray61 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray60, methodArray61);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray61);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray61);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass68 = type65.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass68);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, true, true);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, false, true);
        java.lang.Class[] classArray76 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray75);
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray75);
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray80 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray79, methodArray80);
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray84 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray83, methodArray84);
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray79, methodArray84);
        java.lang.String[] strArray88 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray89 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray88, methodArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray90);
        java.lang.reflect.Method[] methodArray92 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray79, methodArray90);
        java.lang.reflect.Method[] methodArray93 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray90);
        propertyDescriptor23.setValue("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred; expert; bound]", (java.lang.Object) methodArray93);
        propertyDescriptor23.setDisplayName("Z");
        boolean boolean97 = type12.equals((java.lang.Object) propertyDescriptor23);
        int int98 = type12.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str15, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str17, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodArray84);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(methodArray86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(methodArray92);
        org.junit.Assert.assertNotNull(methodArray93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        boolean boolean18 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("(Z)C", method24, method25);
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor26.attributeNames();
        boolean boolean28 = propertyDescriptor26.isPreferred();
        java.lang.String str29 = propertyDescriptor26.getName();
        boolean boolean30 = propertyDescriptor26.isExpert();
        propertyDescriptor26.setBound(true);
        propertyDescriptor26.setShortDescription("Z");
        propertyDescriptor26.setShortDescription("C");
        java.lang.reflect.Method method37 = propertyDescriptor26.getWriteMethod();
        java.beans.PropertyEditor propertyEditor38 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor26);
        java.lang.reflect.Method method39 = null;
        propertyDescriptor26.setReadMethod(method39);
        java.lang.String str41 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor26.getReadMethod();
        java.lang.String str43 = propertyDescriptor26.getName();
        java.lang.reflect.Method method44 = propertyDescriptor26.getReadMethod();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str17, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(Z)C" + "'", str29, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(method37);
        org.junit.Assert.assertNull(propertyEditor38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "C" + "'", str41, "C");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(Z)C" + "'", str43, "(Z)C");
        org.junit.Assert.assertNull(method44);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        boolean boolean12 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str18 = type17.toString();
        java.beans.PropertyEditor propertyEditor19 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type17);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setReadMethod(method20);
        propertyDescriptor3.setExpert(false);
        boolean boolean24 = propertyDescriptor3.isHidden();
        java.lang.Object obj26 = propertyDescriptor3.getValue("Z");
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("(Z)C", method2, method3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type11 = classInfo10.getType();
        java.beans.PropertyEditor propertyEditor12 = propertyDescriptor4.createPropertyEditor((java.lang.Object) type11);
        java.lang.String str13 = type11.toString();
        org.mockito.asm.Type type14 = type11.getElementType();
        org.mockito.asm.Type type15 = type14.getElementType();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 0);
        int int20 = type16.getOpcode(100);
        int int21 = type16.getSize();
        int int23 = type16.getOpcode(4);
        int int25 = type16.getOpcode((int) ' ');
        org.mockito.asm.Type type26 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] {};
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray28);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray28);
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("F", type14, typeArray28);
        java.lang.String str32 = signature31.toString();
        java.lang.String str33 = signature31.toString();
        java.lang.String str34 = signature31.getName();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNull(propertyEditor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "D" + "'", str27, "D");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "()D" + "'", str29, "()D");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()Z" + "'", str30, "()Z");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "F()Lg/mockito/asm/Type;" + "'", str32, "F()Lg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "F()Lg/mockito/asm/Type;" + "'", str33, "F()Lg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "F" + "'", str34, "F");
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray2, true, true);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray2);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer16 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray9, (java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(methodArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lava.beans.PropertyDescriptor[name=(Z)C;", method1, method2);
        propertyDescriptor3.setShortDescription("(Z)Lchar;");
        propertyDescriptor3.setHidden(false);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setReadMethod(method22);
        java.lang.String str24 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred]" + "'", str24, "java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred]");
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray6 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray6);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray6);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass22 = type19.getClass();
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray18, methodArray32);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/Type" + "'", str23, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] {};
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray6);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("double", type3, typeArray6);
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        java.lang.String str11 = signature8.getDescriptor();
        java.lang.String str12 = signature8.getDescriptor();
        org.mockito.asm.Type[] typeArray13 = signature8.getArgumentTypes();
        org.mockito.asm.Type type14 = signature8.getReturnType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "D" + "'", str5, "D");
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "()D" + "'", str7, "()D");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "double" + "'", str9, "double");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str11, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str12, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.beans.PropertyEditor propertyEditor8 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 104);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.String str10 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("D");
        java.lang.String str13 = propertyDescriptor3.getName();
        boolean boolean14 = propertyDescriptor3.isPreferred();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type20 = classInfo19.getSuperType();
        org.mockito.asm.Type type21 = classInfo19.getSuperType();
        org.mockito.asm.Type type22 = classInfo19.getSuperType();
        org.mockito.asm.Type[] typeArray23 = classInfo19.getInterfaces();
        org.mockito.asm.Type[] typeArray24 = classInfo19.getInterfaces();
        org.mockito.asm.Type type25 = classInfo19.getSuperType();
        java.lang.String str26 = type25.toString();
        int int27 = type25.getDimensions();
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type25);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(propertyEditor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(Z)C" + "'", str10, "(Z)C");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Ljava/lang/Object;" + "'", str26, "Ljava/lang/Object;");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(propertyEditor28);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        propertyDescriptor3.setPreferred(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]" + "'", str6, "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]");
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str8 = type7.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("char");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        int int12 = type10.getOpcode(0);
        int int13 = type10.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type[] typeArray20 = classInfo19.getInterfaces();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("", type10, typeArray20);
        boolean boolean22 = type8.equals((java.lang.Object) typeArray20);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray20);
        java.lang.String str24 = type1.toString();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type30 = classInfo29.getSuperType();
        org.mockito.asm.Type type31 = classInfo29.getSuperType();
        org.mockito.asm.Type[] typeArray32 = classInfo29.getInterfaces();
        org.mockito.asm.Type[] typeArray33 = classInfo29.getInterfaces();
        org.mockito.asm.Type type34 = classInfo29.getType();
        int int35 = type34.getSort();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass37 = type36.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        org.mockito.cglib.core.ClassInfo classInfo40 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type41 = classInfo40.getSuperType();
        org.mockito.asm.Type type42 = classInfo40.getSuperType();
        org.mockito.asm.Type[] typeArray43 = classInfo40.getInterfaces();
        org.mockito.asm.Type[] typeArray44 = classInfo40.getInterfaces();
        org.mockito.asm.Type type45 = classInfo40.getType();
        java.lang.String str46 = classInfo40.toString();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("(Z)C", method48, method49);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor50.setValue("org/mockito/asm/Type", (java.lang.Object) signature54);
        java.lang.String str56 = propertyDescriptor50.getDisplayName();
        boolean boolean57 = propertyDescriptor50.isHidden();
        propertyDescriptor50.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor50.setConstrained(true);
        boolean boolean62 = classInfo40.equals((java.lang.Object) propertyDescriptor50);
        org.mockito.asm.Type[] typeArray63 = classInfo40.getInterfaces();
        org.mockito.asm.Type[] typeArray64 = classInfo40.getInterfaces();
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray64);
        org.mockito.asm.Type type66 = type34.getElementType();
        java.lang.String str67 = type34.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.cglib.core.Signature signature72 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        org.mockito.asm.Type[] typeArray73 = signature72.getArgumentTypes();
        org.mockito.cglib.core.Signature signature74 = new org.mockito.cglib.core.Signature("mockito/asm/Type", type69, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray73);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray73);
        int int77 = type1.getSort();
        java.lang.String str78 = type1.getInternalName();
        int int79 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()Lchar;" + "'", str23, "()Lchar;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lchar;" + "'", str24, "Lchar;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/asm/Type" + "'", str28, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/Type" + "'", str39, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.mockito.asm.Type" + "'", str46, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(Z)C" + "'", str56, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str65, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.asm.Type" + "'", str67, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str75, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "()Lchar;" + "'", str76, "()Lchar;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "char" + "'", str78, "char");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        boolean boolean8 = classInfo5.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray9 = classInfo5.getInterfaces();
        org.mockito.asm.Type type10 = classInfo5.getSuperType();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.getDescriptor();
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] {};
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray14);
        java.lang.String str16 = type12.toString();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass18 = type17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type[] typeArray23 = classInfo22.getInterfaces();
        java.lang.String str24 = classInfo22.toString();
        org.mockito.asm.Type[] typeArray25 = classInfo22.getInterfaces();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("B", type12, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass29 = type28.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type34 = classInfo33.getType();
        int int35 = classInfo33.getModifiers();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("(Z)C", method37, method38);
        java.util.Enumeration<java.lang.String> strEnumeration40 = propertyDescriptor39.attributeNames();
        propertyDescriptor39.setHidden(true);
        propertyDescriptor39.setExpert(false);
        boolean boolean45 = classInfo33.equals((java.lang.Object) propertyDescriptor39);
        org.mockito.asm.Type[] typeArray46 = classInfo33.getInterfaces();
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("rg.mockito.asm.TypeLorg.mockito.asm.Type", type10, typeArray46);
        java.lang.String str48 = signature47.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "()D" + "'", str15, "()D");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "D" + "'", str16, "D");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/Type" + "'", str20, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.asm.Type" + "'", str24, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "()Ljava/lang/Object;" + "'", str27, "()Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(strEnumeration40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "rg.mockito.asm.TypeLorg.mockito.asm.Type()Ljava/lang/Object;" + "'", str48, "rg.mockito.asm.TypeLorg.mockito.asm.Type()Ljava/lang/Object;");
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass1, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str2, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setDisplayName("long");
        boolean boolean17 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strEnumeration18);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.getName();
        java.lang.String str6 = signature2.getDescriptor();
        org.mockito.asm.Type[] typeArray7 = signature2.getArgumentTypes();
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer23 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray10, (java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ljava/lang/Object;" + "'", str3, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ljava/lang/Object;" + "'", str4, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ljava/lang/Object;" + "'", str5, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "()D" + "'", str6, "()D");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        propertyDescriptor3.setPreferred(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setConstrained(false);
        java.lang.Object obj16 = propertyDescriptor3.getValue("Lava.beans.PropertyDescriptor[name=boolean;");
        boolean boolean17 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]" + "'", str6, "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.beans.PropertyEditor propertyEditor8 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 104);
        java.lang.String str9 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setPreferred(true);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(propertyEditor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("()Z");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass9);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        boolean boolean13 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        boolean boolean6 = classInfo4.equals((java.lang.Object) "boolean");
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("(Z)C", method9, method10);
        propertyDescriptor11.setBound(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getPropertyType();
        boolean boolean15 = classInfo4.equals((java.lang.Object) wildcardClass14);
        org.mockito.asm.Type type16 = classInfo4.getSuperType();
        int int17 = classInfo4.getModifiers();
        java.lang.String str18 = classInfo4.toString();
        org.mockito.asm.Type type19 = classInfo4.getSuperType();
        int int20 = classInfo4.getModifiers();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.mockito.asm.Type" + "'", str18, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        boolean boolean12 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("long");
        boolean boolean18 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("org/mockito/asm/TypeLorg/mockito/asm/Type;");
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        boolean boolean22 = propertyDescriptor3.isPreferred();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type28 = classInfo27.getSuperType();
        org.mockito.asm.Type type29 = classInfo27.getSuperType();
        java.lang.Class<?> wildcardClass30 = type29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.beans.PropertyEditor propertyEditor34 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass30);
        java.lang.reflect.Method method35 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/Type" + "'", str33, "org/mockito/asm/Type");
        org.junit.Assert.assertNull(propertyEditor34);
        org.junit.Assert.assertNull(method35);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred; expert; bound]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        boolean boolean7 = signature2.equals((java.lang.Object) (short) 1);
        java.lang.String str8 = signature2.getDescriptor();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 0);
        int int13 = type9.getOpcode(100);
        int int14 = type9.getSize();
        int int16 = type9.getOpcode(4);
        int int18 = type9.getOpcode((int) ' ');
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] {};
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray21);
        java.lang.String str24 = type9.toString();
        boolean boolean25 = signature2.equals((java.lang.Object) str24);
        java.lang.String str26 = signature2.toString();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass28);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass28);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        org.mockito.asm.Type type33 = classInfo31.getSuperType();
        org.mockito.asm.Type[] typeArray34 = classInfo31.getInterfaces();
        org.mockito.asm.Type type35 = classInfo31.getType();
        boolean boolean36 = signature2.equals((java.lang.Object) classInfo31);
        org.mockito.asm.Type type37 = classInfo31.getSuperType();
        java.lang.Object obj38 = null;
        boolean boolean39 = classInfo31.equals(obj38);
        org.mockito.asm.Type[] typeArray40 = classInfo31.getInterfaces();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()D" + "'", str22, "()D");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()Z" + "'", str23, "()Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/Type" + "'", str30, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(typeArray40);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        boolean boolean6 = classInfo4.equals((java.lang.Object) "boolean");
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("(Z)C", method9, method10);
        propertyDescriptor11.setBound(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getPropertyType();
        boolean boolean15 = classInfo4.equals((java.lang.Object) wildcardClass14);
        org.mockito.asm.Type type16 = classInfo4.getSuperType();
        java.lang.String str17 = classInfo4.toString();
        java.lang.Class<?> wildcardClass18 = classInfo4.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method19 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.ReflectUtils$4 is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.reflect.Method method14 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.Object obj18 = propertyDescriptor3.getValue("Ljava/lang/Object;()D");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type25 = classInfo24.getSuperType();
        org.mockito.asm.Type type26 = classInfo24.getSuperType();
        org.mockito.asm.Type[] typeArray27 = classInfo24.getInterfaces();
        org.mockito.asm.Type[] typeArray28 = classInfo24.getInterfaces();
        org.mockito.asm.Type type29 = classInfo24.getType();
        java.lang.String str30 = classInfo24.toString();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("(Z)C", method32, method33);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor34.setValue("org/mockito/asm/Type", (java.lang.Object) signature38);
        java.lang.String str40 = propertyDescriptor34.getDisplayName();
        boolean boolean41 = propertyDescriptor34.isHidden();
        propertyDescriptor34.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor34.setConstrained(true);
        boolean boolean46 = classInfo24.equals((java.lang.Object) propertyDescriptor34);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(Z)C; hidden; bound]", (java.lang.Object) propertyDescriptor34);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass50 = type49.getClass();
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass50);
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        propertyDescriptor34.setValue("LLjava.lang.Object;;", (java.lang.Object) wildcardClass50);
        org.mockito.cglib.core.ClassInfo classInfo58 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type59 = classInfo58.getSuperType();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/Type" + "'", str23, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Z)C" + "'", str40, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str51, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str56, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo58);
        org.junit.Assert.assertNotNull(type59);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass20 = type17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, false, true);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4, classArray12, (java.lang.Object[]) methodArray30);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.String;.<init>(java.lang.Byte, java.lang.Short, java.lang.Character, java.lang.Integer, java.lang.Float)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray30);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("S");
        boolean boolean11 = propertyDescriptor3.isExpert();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char; ()D=1}]");
        boolean boolean15 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "S" + "'", str12, "S");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSort();
        propertyDescriptor3.setValue("org/mockito/asm/TypeD", (java.lang.Object) int17);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setBound(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        java.lang.String str24 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(Z)C" + "'", str24, "(Z)C");
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.cglib.core.Signature");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = type6.getElementType();
        int int8 = type7.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        int int12 = type10.getOpcode(0);
        int int13 = type10.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type[] typeArray20 = classInfo19.getInterfaces();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("", type10, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray20);
        int int24 = type7.getOpcode(112);
        java.lang.String str25 = type7.getInternalName();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("", "");
        java.lang.String str29 = signature28.getDescriptor();
        boolean boolean30 = type7.equals((java.lang.Object) signature28);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("(Z)C", method32, method33);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor34.setValue("org/mockito/asm/Type", (java.lang.Object) signature38);
        java.lang.String str40 = propertyDescriptor34.getDisplayName();
        propertyDescriptor34.setHidden(false);
        propertyDescriptor34.setHidden(false);
        propertyDescriptor34.setName("org/mockito/asm/Type");
        boolean boolean47 = signature28.equals((java.lang.Object) propertyDescriptor34);
        boolean boolean48 = propertyDescriptor34.isExpert();
        java.lang.reflect.Method method49 = propertyDescriptor34.getReadMethod();
        java.lang.String str50 = propertyDescriptor34.getName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str22, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 116 + "'", int24 == 116);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "g/mockito/asm/Type" + "'", str25, "g/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Z)C" + "'", str40, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/Type" + "'", str50, "org/mockito/asm/Type");
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = classInfo12.getSuperType();
        java.lang.String str14 = type13.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Ljava/lang/Object;" + "'", str14, "Ljava/lang/Object;");
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("Lorg/mockito/asm/Type;");
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("(Z)C", method11, method12);
        propertyDescriptor13.setBound(true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor13.getPropertyType();
        java.lang.Object obj18 = propertyDescriptor13.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor13.setWriteMethod(method19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray27 = classInfo26.getInterfaces();
        boolean boolean29 = classInfo26.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray30 = classInfo26.getInterfaces();
        org.mockito.asm.Type type31 = classInfo26.getSuperType();
        propertyDescriptor13.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo26);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str34 = type33.getDescriptor();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] {};
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray35);
        boolean boolean37 = classInfo26.equals((java.lang.Object) type33);
        propertyDescriptor3.setValue("F", (java.lang.Object) classInfo26);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "D" + "'", str34, "D");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "()D" + "'", str36, "()D");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("char", "");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("(Z)C", method4, method5);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor6.setValue("org/mockito/asm/Type", (java.lang.Object) signature10);
        java.lang.String str12 = propertyDescriptor6.getDisplayName();
        boolean boolean13 = propertyDescriptor6.isHidden();
        propertyDescriptor6.setShortDescription("Z");
        java.lang.Object obj17 = propertyDescriptor6.getValue("org.mockito.asm.Type");
        boolean boolean18 = signature2.equals((java.lang.Object) propertyDescriptor6);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("(Z)C", method20, method21);
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor22.attributeNames();
        boolean boolean24 = propertyDescriptor22.isPreferred();
        java.lang.String str25 = propertyDescriptor22.getName();
        boolean boolean26 = propertyDescriptor22.isExpert();
        propertyDescriptor22.setBound(true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor22.getPropertyType();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor22.getPropertyType();
        java.beans.PropertyEditor propertyEditor31 = propertyDescriptor6.createPropertyEditor((java.lang.Object) propertyDescriptor22);
        boolean boolean32 = propertyDescriptor6.isPreferred();
        propertyDescriptor6.setName("(Z)Lchar;");
        propertyDescriptor6.setHidden(false);
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass41 = type40.getClass();
        boolean boolean42 = signature39.equals((java.lang.Object) wildcardClass41);
        boolean boolean44 = signature39.equals((java.lang.Object) (short) 1);
        java.lang.String str45 = signature39.getDescriptor();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 0);
        int int50 = type46.getOpcode(100);
        int int51 = type46.getSize();
        int int53 = type46.getOpcode(4);
        int int55 = type46.getOpcode((int) ' ');
        org.mockito.asm.Type type56 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str57 = type56.getDescriptor();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] {};
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray58);
        java.lang.String str61 = type46.toString();
        boolean boolean62 = signature39.equals((java.lang.Object) str61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass64 = type63.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo68 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.Class<?> wildcardClass70 = type69.getClass();
        java.lang.String str71 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass70);
        java.lang.String str72 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass70);
        boolean boolean73 = signature39.equals((java.lang.Object) wildcardClass70);
        org.mockito.cglib.core.ClassInfo classInfo74 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass70);
        boolean boolean75 = propertyDescriptor6.equals((java.lang.Object) classInfo74);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(Z)C" + "'", str25, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(propertyEditor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "D" + "'", str57, "D");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "()D" + "'", str59, "()D");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "()Z" + "'", str60, "()Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Z" + "'", str61, "Z");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/Type" + "'", str66, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(classInfo68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str71, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str72, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classInfo74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getDescriptor();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        boolean boolean11 = signature8.equals((java.lang.Object) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = type12.getElementType();
        int int14 = type13.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        int int18 = type16.getOpcode(0);
        int int19 = type16.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type[] typeArray26 = classInfo25.getInterfaces();
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("", type16, typeArray26);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray26);
        int int30 = type13.getOpcode(112);
        boolean boolean31 = signature2.equals((java.lang.Object) type13);
        java.lang.String str32 = signature2.toString();
        org.mockito.asm.Type type33 = signature2.getReturnType();
        int int34 = type33.getSort();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/Type" + "'", str23, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str28, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 116 + "'", int30 == 116);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str32, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        int int9 = classInfo4.getModifiers();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("(Z)C", method11, method12);
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor13.setValue("org/mockito/asm/Type", (java.lang.Object) signature17);
        java.lang.String str19 = propertyDescriptor13.getDisplayName();
        propertyDescriptor13.setHidden(false);
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str26 = signature25.getName();
        propertyDescriptor13.setValue("F", (java.lang.Object) str26);
        boolean boolean28 = propertyDescriptor13.isExpert();
        boolean boolean29 = classInfo4.equals((java.lang.Object) boolean28);
        int int30 = classInfo4.getModifiers();
        org.mockito.asm.Type type31 = classInfo4.getSuperType();
        int int32 = type31.getSize();
        int int34 = type31.getOpcode((int) (short) -1);
        int int35 = type31.getSort();
        int int36 = type31.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Ljava/lang/Object;" + "'", str26, "Ljava/lang/Object;");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type[] typeArray19 = classInfo18.getInterfaces();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        boolean boolean22 = classInfo18.equals((java.lang.Object) type20);
        propertyDescriptor3.setValue("()Z", (java.lang.Object) type20);
        java.util.Enumeration<java.lang.String> strEnumeration24 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("(Z)C", method28, method29);
        java.util.Enumeration<java.lang.String> strEnumeration31 = propertyDescriptor30.attributeNames();
        boolean boolean32 = propertyDescriptor30.isPreferred();
        java.lang.String str33 = propertyDescriptor30.getName();
        boolean boolean34 = propertyDescriptor30.isExpert();
        propertyDescriptor30.setBound(true);
        java.lang.reflect.Method method37 = null;
        propertyDescriptor30.setWriteMethod(method37);
        java.lang.Class<?> wildcardClass39 = propertyDescriptor30.getPropertyEditorClass();
        propertyDescriptor30.setExpert(false);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        java.beans.PropertyEditor propertyEditor45 = propertyDescriptor30.createPropertyEditor((java.lang.Object) wildcardClass43);
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor30);
        boolean boolean47 = propertyDescriptor30.isExpert();
        propertyDescriptor30.setShortDescription("java.beans.PropertyDescriptor[name=boolean; bound; propertyEditorClass=class [Ljava.lang.Class;]");
        propertyDescriptor30.setConstrained(false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "D" + "'", str21, "D");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strEnumeration24);
        org.junit.Assert.assertNotNull(strEnumeration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(Z)C" + "'", str33, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNull(propertyEditor45);
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method20 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("F()Lg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()Lckito/asm/Type;", "Lva/lang/Object;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()Lckito/asm/Type;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor3.attributeNames();
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.junit.Assert.assertNotNull(strEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("L()D;", "Ljava/beans/FeatureDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'L()D;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertNull(method6);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 0);
        int int4 = type0.getOpcode(100);
        int int5 = type0.getSize();
        int int7 = type0.getOpcode(4);
        int int9 = type0.getOpcode((int) ' ');
        org.mockito.asm.Type type10 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str11 = type10.getDescriptor();
        boolean boolean13 = type10.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass14 = type10.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        boolean boolean17 = type0.equals((java.lang.Object) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.util.List list19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list20 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass14, list19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "D" + "'", str11, "D");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]; displayName=()Lg/mockito/asm/Type;]");
        boolean boolean25 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=; values={org/mockito/asm/TypeLorg/mockito/asm/Type;=10.0}]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(false);
        boolean boolean14 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()LZ)Lorg/mockito/asm/Type;", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray9 = new java.lang.Class[] { wildcardClass1, wildcardClass3, wildcardClass7 };
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.reflect.Method[] methodArray16 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray16);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray21 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray21);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray25);
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray39 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray39);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray39);
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray44);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass51 = type48.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass51);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, true, true);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, false, true);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray58);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray63 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray62, methodArray63);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray67 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray66, methodArray67);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray62, methodArray67);
        java.lang.String[] strArray71 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray72 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray71, methodArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray73);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray62, methodArray73);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray20, methodArray73);
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray76);
        java.lang.String[] strArray79 = org.mockito.cglib.core.ReflectUtils.getNames(classArray78);
        int int80 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray78);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass82 = type81.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass82);
        org.mockito.cglib.core.ClassInfo classInfo86 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.lang.Class<?> wildcardClass88 = type87.getClass();
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray90 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray91 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass88);
        java.beans.PropertyDescriptor[] propertyDescriptorArray92 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass88);
        org.mockito.cglib.core.ClassInfo classInfo93 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer94 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray78, (java.lang.Class) wildcardClass88);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/Type" + "'", str84, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(classInfo86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str89, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray90);
        org.junit.Assert.assertNotNull(propertyDescriptorArray91);
        org.junit.Assert.assertNotNull(propertyDescriptorArray92);
        org.junit.Assert.assertNotNull(classInfo93);
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setWriteMethod(method7);
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type16 = classInfo15.getSuperType();
        java.lang.String str17 = classInfo15.toString();
        int int18 = classInfo15.getModifiers();
        org.mockito.asm.Type type19 = classInfo15.getSuperType();
        java.lang.String str20 = classInfo15.toString();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str24 = signature23.toString();
        java.lang.String str25 = signature23.getName();
        java.lang.String str26 = signature23.getName();
        java.lang.String str27 = signature23.getName();
        java.lang.String str28 = signature23.toString();
        java.lang.String str29 = signature23.getDescriptor();
        java.lang.String str30 = signature23.getDescriptor();
        org.mockito.asm.Type type31 = signature23.getReturnType();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, false);
        boolean boolean39 = type31.equals((java.lang.Object) propertyDescriptorArray35);
        boolean boolean40 = classInfo15.equals((java.lang.Object) type31);
        int int41 = type31.getSort();
        boolean boolean42 = propertyDescriptor3.equals((java.lang.Object) type31);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.mockito.asm.Type" + "'", str20, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str24, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/Type" + "'", str27, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str28, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str29, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str30, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = classInfo5.getType();
        int int7 = classInfo5.getModifiers();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        java.lang.Class<?> wildcardClass9 = classInfo5.getClass();
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list12 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass9, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/cglib/core/ReflectUtils$4" + "'", str10, "org/mockito/cglib/core/ReflectUtils$4");
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        int int6 = type4.getOpcode(0);
        int int7 = type4.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type[] typeArray14 = classInfo13.getInterfaces();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", type4, typeArray14);
        int int16 = type4.getSort();
        java.lang.String str17 = type4.getDescriptor();
        java.lang.String str18 = type4.toString();
        boolean boolean19 = type0.equals((java.lang.Object) str18);
        java.lang.String str20 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "C" + "'", str17, "C");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "C" + "'", str18, "C");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "double" + "'", str20, "double");
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("LJ;()Ljava/lang/Object;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("va.lang.Object", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] {};
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray7);
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("double", type4, typeArray7);
        org.mockito.asm.Type type10 = signature9.getReturnType();
        org.mockito.asm.Type[] typeArray11 = signature9.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) typeArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "D" + "'", str6, "D");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "()D" + "'", str8, "()D");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()Lg.mockito.asm.Type;");
        int int3 = type1.getOpcode(30);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 34 + "'", int3 == 34);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        int int7 = classInfo4.getModifiers();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        int int9 = type8.getSize();
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.reflect.Method[] methodArray12 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, true);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray23);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray11);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray26);
        boolean boolean28 = type8.equals((java.lang.Object) classArray26);
        java.lang.String str29 = type8.toString();
        java.lang.String str30 = type8.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.Type" + "'", str6, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Ljava/lang/Object;" + "'", str29, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Ljava/lang/Object;" + "'", str30, "Ljava/lang/Object;");
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("LLjava.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char; ()D=1}];;", "java.beans.PropertyDescriptor[name=int; displayName=java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; propertyEditorClass=class java.beans.PropertyDescriptor]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'LLjava.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char; ()D=1}];;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        boolean boolean10 = propertyDescriptor3.isPreferred();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.Object obj13 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor");
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]" + "'", str11, "java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]");
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = signature7.getName();
        java.lang.String str10 = signature7.getDescriptor();
        java.lang.String str11 = signature7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray12 = signature7.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "char" + "'", str9, "char");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "char" + "'", str11, "char");
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(Z)C; bound]");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getClassName();
        int int4 = type1.getSize();
        java.lang.String str5 = type1.toString();
        int int6 = type1.getDimensions();
        java.lang.String str7 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ava.beans.PropertyDescriptor[name=(Z)C" + "'", str3, "ava.beans.PropertyDescriptor[name=(Z)C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lava.beans.PropertyDescriptor[name=(Z)C;" + "'", str5, "Lava.beans.PropertyDescriptor[name=(Z)C;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lava.beans.PropertyDescriptor[name=(Z)C;" + "'", str7, "Lava.beans.PropertyDescriptor[name=(Z)C;");
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass1, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] {};
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray6);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("double", type3, typeArray6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type[] typeArray15 = classInfo14.getInterfaces();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str17 = type16.getDescriptor();
        boolean boolean18 = classInfo14.equals((java.lang.Object) type16);
        boolean boolean19 = type3.equals((java.lang.Object) classInfo14);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type25 = classInfo24.getSuperType();
        org.mockito.asm.Type type26 = classInfo24.getSuperType();
        org.mockito.asm.Type[] typeArray27 = classInfo24.getInterfaces();
        org.mockito.asm.Type[] typeArray28 = classInfo24.getInterfaces();
        org.mockito.asm.Type type29 = classInfo24.getType();
        java.lang.String str30 = classInfo24.toString();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("(Z)C", method32, method33);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor34.setValue("org/mockito/asm/Type", (java.lang.Object) signature38);
        java.lang.String str40 = propertyDescriptor34.getDisplayName();
        boolean boolean41 = propertyDescriptor34.isHidden();
        propertyDescriptor34.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor34.setConstrained(true);
        boolean boolean46 = classInfo24.equals((java.lang.Object) propertyDescriptor34);
        org.mockito.asm.Type[] typeArray47 = classInfo24.getInterfaces();
        boolean boolean48 = classInfo14.equals((java.lang.Object) classInfo24);
        org.mockito.asm.Type type49 = classInfo24.getSuperType();
        int int50 = type49.getSort();
        org.mockito.asm.Type type51 = type49.getElementType();
        org.mockito.asm.Type type52 = type49.getElementType();
        int int54 = type49.getOpcode(116);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "D" + "'", str5, "D");
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "()D" + "'", str7, "()D");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "D" + "'", str17, "D");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/Type" + "'", str23, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Z)C" + "'", str40, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 120 + "'", int54 == 120);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray6);
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass13 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray14, true, true);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray14, false, true);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray14, true, false);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass28 = type25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass28);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, false, true);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray35);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray39 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray39);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray43);
        java.lang.Class[] classArray46 = new java.lang.Class[] {};
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.reflect.Method[] methodArray48 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray47, methodArray48);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray48);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray53 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray53);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray57 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray56, methodArray57);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray57);
        java.lang.Class[] classArray60 = new java.lang.Class[] {};
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        java.lang.reflect.Method[] methodArray62 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray62);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray62);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass69 = type66.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass69);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, false, true);
        java.lang.Class[] classArray77 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray76);
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray76);
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray81 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray82 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray80, methodArray81);
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray85 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray84, methodArray85);
        java.lang.reflect.Method[] methodArray87 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray80, methodArray85);
        java.lang.String[] strArray89 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray90 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray91 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray89, methodArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray91);
        java.lang.reflect.Method[] methodArray93 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray80, methodArray91);
        java.lang.reflect.Method[] methodArray94 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray91);
        java.lang.reflect.Method[] methodArray95 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) methodArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(methodArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(methodArray86);
        org.junit.Assert.assertNotNull(methodArray87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertNotNull(methodArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(methodArray93);
        org.junit.Assert.assertNotNull(methodArray94);
        org.junit.Assert.assertNotNull(methodArray95);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("Lmockito/asm/Type;");
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        int int9 = classInfo5.getModifiers();
        org.mockito.asm.Type type10 = classInfo5.getSuperType();
        int int12 = type10.getOpcode(3);
        int int14 = type10.getOpcode(1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(false);
        boolean boolean16 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("va/lang/Object");
        java.lang.String str21 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "va/lang/Object" + "'", str21, "va/lang/Object");
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray6);
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray7);
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) classArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method8 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        propertyDescriptor3.setExpert(false);
        boolean boolean15 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.lang.Object obj14 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        boolean boolean15 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=C; values={org/mockito/asm/Type=char; ()D=1}]");
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        propertyDescriptor3.setShortDescription("Lrg/mockito/asm/TypeLorg/mockito/asm/Type;");
        boolean boolean19 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray2, true, true);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray2);
        java.lang.Class<?> wildcardClass7 = propertyDescriptorArray2.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(methodArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        java.lang.String str7 = type6.getClassName();
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Object" + "'", str7, "java.lang.Object");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("F", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lava.beans.PropertyDescriptor[name=(Z)C;", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("[Ljava/beans/PropertyDescriptor;", "java.beans.PropertyDescriptor[name=[Lorg/mockito/asm/Type;; shortDescription=Lchar;; bound]");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getSuperType();
        org.mockito.asm.Type type9 = classInfo7.getSuperType();
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        boolean boolean15 = signature2.equals((java.lang.Object) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type17 = classInfo16.getType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass19 = type18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = classInfo22.getSuperType();
        org.mockito.asm.Type type24 = classInfo22.getSuperType();
        java.lang.Class<?> wildcardClass25 = type24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        boolean boolean28 = classInfo16.equals((java.lang.Object) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org/mockito/asm/Type" + "'", str21, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str26, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray5 = classInfo4.getInterfaces();
        boolean boolean7 = classInfo4.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        org.mockito.asm.Type type10 = classInfo4.getType();
        int int11 = classInfo4.getModifiers();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type17 = classInfo16.getSuperType();
        org.mockito.asm.Type type18 = classInfo16.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo16.getInterfaces();
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        boolean boolean24 = classInfo4.equals((java.lang.Object) wildcardClass21);
        org.mockito.asm.Type type25 = classInfo4.getType();
        int int26 = type25.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setDisplayName("org/mockito/asm/Type");
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.String str14 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; displayName=org/mockito/asm/Type; bound]" + "'", str14, "java.beans.PropertyDescriptor[name=(Z)C; displayName=org/mockito/asm/Type; bound]");
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=int; displayName=java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; propertyEditorClass=class java.beans.PropertyDescriptor]]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=int; displayName=java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        boolean boolean7 = signature2.equals((java.lang.Object) (short) 1);
        java.lang.String str8 = signature2.getDescriptor();
        java.lang.Class<?> wildcardClass9 = signature2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass9);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        boolean boolean7 = signature2.equals((java.lang.Object) (short) 1);
        java.lang.String str8 = signature2.getDescriptor();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 0);
        int int13 = type9.getOpcode(100);
        int int14 = type9.getSize();
        int int16 = type9.getOpcode(4);
        int int18 = type9.getOpcode((int) ' ');
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] {};
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray21);
        java.lang.String str24 = type9.toString();
        boolean boolean25 = signature2.equals((java.lang.Object) str24);
        java.lang.String str26 = signature2.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type27 = signature2.getReturnType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()D" + "'", str22, "()D");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()Z" + "'", str23, "()Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray11 = classInfo10.getInterfaces();
        java.lang.String str12 = classInfo10.toString();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        java.lang.String str14 = classInfo10.toString();
        java.lang.Class<?> wildcardClass15 = classInfo10.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method16 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.ReflectUtils$4 is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.Type" + "'", str12, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.mockito.asm.Type" + "'", str14, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("g/mockito/asm/Type", method1, method2);
        propertyDescriptor3.setShortDescription("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;");
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("(Z)C", method7, method8);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor9.attributeNames();
        boolean boolean11 = propertyDescriptor9.isPreferred();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyType();
        java.beans.PropertyEditor propertyEditor13 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor9);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass18 = type17.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray24);
        java.lang.Class[] classArray26 = new java.lang.Class[] {};
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass29 = type28.getClass();
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass29);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray35);
        propertyDescriptor9.setValue("Ljava/lang/Object;", (java.lang.Object) strArray16);
        propertyDescriptor9.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        java.lang.reflect.Method method41 = propertyDescriptor9.getReadMethod();
        propertyDescriptor9.setHidden(false);
        boolean boolean44 = propertyDescriptor9.isHidden();
        java.lang.String str45 = propertyDescriptor9.getShortDescription();
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str50 = signature49.getName();
        java.lang.String str51 = signature49.getName();
        java.lang.String str52 = signature49.toString();
        org.mockito.cglib.core.Signature signature55 = new org.mockito.cglib.core.Signature("java.lang.Object", "");
        boolean boolean56 = signature49.equals((java.lang.Object) signature55);
        java.lang.String str57 = signature49.getDescriptor();
        propertyDescriptor9.setValue("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", (java.lang.Object) str57);
        java.lang.Class<?> wildcardClass59 = propertyDescriptor9.getPropertyType();
        propertyDescriptor9.setConstrained(false);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(propertyEditor13);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str30, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNull(method41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]" + "'", str45, "java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Ljava/lang/Object;" + "'", str50, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Ljava/lang/Object;" + "'", str51, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Ljava/lang/Object;()D" + "'", str52, "Ljava/lang/Object;()D");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "()D" + "'", str57, "()D");
        org.junit.Assert.assertNull(wildcardClass59);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("()Z");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass9);
        java.lang.Object obj13 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; values={org/mockito/asm/Type=char}]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        boolean boolean15 = propertyDescriptor3.isPreferred();
        boolean boolean16 = propertyDescriptor3.isExpert();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str19 = type18.getDescriptor();
        boolean boolean21 = type18.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass22 = type18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        propertyDescriptor3.setValue("", (java.lang.Object) wildcardClass22);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass22);
        java.util.List list26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list27 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass22, list26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "D" + "'", str19, "D");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()Lchar;");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "L)Lchar;" + "'", str3, "L)Lchar;");
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("g/mockito/asm/Type", "()Lrg/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        org.junit.Assert.assertNotNull(typeArray3);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray6 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray6);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray6);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray16 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray16);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray20);
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.reflect.Method[] methodArray25 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray24, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray25);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray25);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass30 = type29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass30);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray35);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        boolean boolean44 = signature41.equals((java.lang.Object) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass43);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray49);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray49);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray58);
        int int60 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray59);
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass65 = type62.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass65);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray66, true, true);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray66, false, true);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray66, true, false);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray75);
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray75);
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray80 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray79, methodArray80);
        java.lang.reflect.Method[] methodArray82 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray80);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str45, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(methodArray82);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("(Z)C", method4, method5);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor6.attributeNames();
        boolean boolean8 = propertyDescriptor6.isPreferred();
        java.lang.String str9 = propertyDescriptor6.getName();
        boolean boolean10 = propertyDescriptor6.isExpert();
        propertyDescriptor6.setBound(true);
        propertyDescriptor6.setPreferred(true);
        boolean boolean15 = signature2.equals((java.lang.Object) propertyDescriptor6);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("(Z)C", method17, method18);
        java.util.Enumeration<java.lang.String> strEnumeration20 = propertyDescriptor19.attributeNames();
        boolean boolean21 = propertyDescriptor19.isPreferred();
        java.lang.String str22 = propertyDescriptor19.getName();
        boolean boolean23 = propertyDescriptor19.isExpert();
        propertyDescriptor19.setBound(true);
        propertyDescriptor19.setPreferred(true);
        java.lang.String str28 = propertyDescriptor19.getDisplayName();
        java.lang.reflect.Method method29 = null;
        propertyDescriptor19.setReadMethod(method29);
        propertyDescriptor19.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str33 = propertyDescriptor19.getDisplayName();
        boolean boolean34 = propertyDescriptor19.isExpert();
        propertyDescriptor19.setExpert(true);
        java.beans.PropertyEditor propertyEditor37 = propertyDescriptor6.createPropertyEditor((java.lang.Object) true);
        java.lang.Object obj39 = propertyDescriptor6.getValue("long");
        java.lang.reflect.Method method40 = null;
        propertyDescriptor6.setReadMethod(method40);
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(Z)C" + "'", str22, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(Z)C" + "'", str28, "(Z)C");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str33, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(propertyEditor37);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        boolean boolean12 = propertyDescriptor3.isHidden();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray16);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean22 = propertyDescriptor3.equals((java.lang.Object) classArray17);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(Z)C" + "'", str11, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = classInfo4.getType();
        java.lang.String str10 = classInfo4.toString();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("(Z)C", method12, method13);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor14.setValue("org/mockito/asm/Type", (java.lang.Object) signature18);
        java.lang.String str20 = propertyDescriptor14.getDisplayName();
        boolean boolean21 = propertyDescriptor14.isHidden();
        propertyDescriptor14.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor14.setConstrained(true);
        boolean boolean26 = classInfo4.equals((java.lang.Object) propertyDescriptor14);
        java.lang.Object obj28 = propertyDescriptor14.getValue("java.beans.PropertyDescriptor[name=(Z)C; bound]");
        boolean boolean29 = propertyDescriptor14.isPreferred();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass32 = type31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        propertyDescriptor14.setValue("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]", (java.lang.Object) type35);
        java.lang.String str37 = propertyDescriptor14.getShortDescription();
        propertyDescriptor14.setExpert(false);
        propertyDescriptor14.setPreferred(false);
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("org.mockito.asm.Type[]", "java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]");
        propertyDescriptor14.setValue("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Lchar;; hidden; bound]", (java.lang.Object) "org.mockito.asm.Type[]");
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(Z)C" + "'", str20, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/Type" + "'", str34, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.mockito.asm.Type" + "'", str37, "org.mockito.asm.Type");
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        byte[] byteArray1 = new byte[] {};
        java.lang.ClassLoader classLoader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class3 = org.mockito.cglib.core.ReflectUtils.defineClass("org.mockito.asm.Type[]", byteArray1, classLoader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(true);
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass19 = type18.getClass();
        boolean boolean20 = signature17.equals((java.lang.Object) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        propertyDescriptor3.setValue("LI;", (java.lang.Object) wildcardClass19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method27 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = classInfo4.getType();
        java.lang.String str10 = classInfo4.toString();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("(Z)C", method12, method13);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor14.setValue("org/mockito/asm/Type", (java.lang.Object) signature18);
        java.lang.String str20 = propertyDescriptor14.getDisplayName();
        boolean boolean21 = propertyDescriptor14.isHidden();
        propertyDescriptor14.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor14.setConstrained(true);
        boolean boolean26 = classInfo4.equals((java.lang.Object) propertyDescriptor14);
        int int27 = classInfo4.getModifiers();
        int int28 = classInfo4.getModifiers();
        org.mockito.asm.Type type29 = classInfo4.getSuperType();
        org.mockito.asm.Type type30 = classInfo4.getType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(Z)C" + "'", str20, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        boolean boolean13 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Ljava.beans.PropertyDescriptor[name=java/lang/Object; displayName=java.beans.PropertyDescriptor[name=(Z)C; bound]; preferred];");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=mockito/asm/Type; bound]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("Lorg/mockito/asm/Type;");
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("(Z)C", method11, method12);
        propertyDescriptor13.setBound(true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor13.getPropertyType();
        java.lang.Object obj18 = propertyDescriptor13.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor13.setWriteMethod(method19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray27 = classInfo26.getInterfaces();
        boolean boolean29 = classInfo26.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray30 = classInfo26.getInterfaces();
        org.mockito.asm.Type type31 = classInfo26.getSuperType();
        propertyDescriptor13.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo26);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str34 = type33.getDescriptor();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] {};
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray35);
        boolean boolean37 = classInfo26.equals((java.lang.Object) type33);
        propertyDescriptor3.setValue("F", (java.lang.Object) classInfo26);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(false);
        java.lang.String str43 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "D" + "'", str34, "D");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "()D" + "'", str36, "()D");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.beans.PropertyDescriptor[name=Lorg/mockito/asm/Type;; values={F=org.mockito.asm.Type}; bound]" + "'", str43, "java.beans.PropertyDescriptor[name=Lorg/mockito/asm/Type;; values={F=org.mockito.asm.Type}; bound]");
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str16 = signature15.getName();
        propertyDescriptor3.setValue("F", (java.lang.Object) str16);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("double", "");
        java.lang.String str22 = signature21.toString();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) signature21);
        java.util.Enumeration<java.lang.String> strEnumeration24 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method25 = null;
        propertyDescriptor3.setWriteMethod(method25);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; bound]");
        java.lang.String str29 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Ljava/lang/Object;" + "'", str16, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "double" + "'", str22, "double");
        org.junit.Assert.assertNotNull(strEnumeration24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; displayName=java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; bound]; values={org/mockito/asm/Type=char; F=Ljava/lang/Object;; org/mockito/asm/TypeLorg/mockito/asm/Type;=double}]" + "'", str29, "java.beans.PropertyDescriptor[name=(Z)C; displayName=java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; bound]; values={org/mockito/asm/Type=char; F=Ljava/lang/Object;; org/mockito/asm/TypeLorg/mockito/asm/Type;=double}]");
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("org/mockito/asm/Type");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass18 = type17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        propertyDescriptor3.setValue("Ljava/lang/Object;()D", (java.lang.Object) true);
        java.lang.reflect.Method method24 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; displayName=; shortDescription=D; bound]");
        java.lang.Class<?> wildcardClass28 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass28);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.asm.Type", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setShortDescription("()D");
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setShortDescription("Lrg/mockito/asm/TypeLorg/mockito/asm/Type;");
        boolean boolean12 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.toString();
        org.mockito.asm.Type type6 = signature2.getReturnType();
        java.lang.String str7 = signature2.toString();
        java.lang.String str8 = signature2.getDescriptor();
        java.lang.String str9 = signature2.getDescriptor();
        org.mockito.asm.Type type10 = signature2.getReturnType();
        int int12 = type10.getOpcode(11);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str5, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str7, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 15 + "'", int12 == 15);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.lang.Class[] classArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor24 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray23);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("char");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        boolean boolean8 = type1.equals((java.lang.Object) wildcardClass3);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str12 = type11.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        int int16 = type14.getOpcode(0);
        int int17 = type14.getSort();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass19 = type18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type[] typeArray24 = classInfo23.getInterfaces();
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("", type14, typeArray24);
        java.lang.String str26 = signature25.getName();
        java.lang.String str27 = signature25.getName();
        org.mockito.asm.Type[] typeArray28 = signature25.getArgumentTypes();
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("boolean", type11, typeArray28);
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.String str31 = signature29.getDescriptor();
        java.lang.String str32 = signature29.getDescriptor();
        java.lang.String str33 = signature29.toString();
        java.lang.String str34 = signature29.getDescriptor();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass38 = type35.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass38);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray41);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray42);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        boolean boolean46 = signature29.equals((java.lang.Object) classArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method47 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass3, "LLorg/mockito/asm/Type;;", classArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: LLorg/mockito/asm/Type;;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "short" + "'", str12, "short");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org/mockito/asm/Type" + "'", str21, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "()S" + "'", str31, "()S");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "()S" + "'", str32, "()S");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean()S" + "'", str33, "boolean()S");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()S" + "'", str34, "()S");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/Type" + "'", str39, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str10 = classInfo9.toString();
        int int11 = classInfo9.getModifiers();
        java.lang.String str12 = classInfo9.toString();
        int int13 = classInfo9.getModifiers();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.Type" + "'", str12, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Ljava/lang/Object;()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type[] typeArray17 = classInfo16.getInterfaces();
        boolean boolean19 = classInfo16.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        propertyDescriptor3.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo16);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=org/mockito/asm/Type; values={org/mockito/asm/Type=char}; bound]");
        java.lang.Class<?> wildcardClass25 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] {};
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray6);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("double", type3, typeArray6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type[] typeArray15 = classInfo14.getInterfaces();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str17 = type16.getDescriptor();
        boolean boolean18 = classInfo14.equals((java.lang.Object) type16);
        boolean boolean19 = type3.equals((java.lang.Object) classInfo14);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type25 = classInfo24.getSuperType();
        org.mockito.asm.Type type26 = classInfo24.getSuperType();
        org.mockito.asm.Type[] typeArray27 = classInfo24.getInterfaces();
        org.mockito.asm.Type[] typeArray28 = classInfo24.getInterfaces();
        org.mockito.asm.Type type29 = classInfo24.getType();
        java.lang.String str30 = classInfo24.toString();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("(Z)C", method32, method33);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor34.setValue("org/mockito/asm/Type", (java.lang.Object) signature38);
        java.lang.String str40 = propertyDescriptor34.getDisplayName();
        boolean boolean41 = propertyDescriptor34.isHidden();
        propertyDescriptor34.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor34.setConstrained(true);
        boolean boolean46 = classInfo24.equals((java.lang.Object) propertyDescriptor34);
        org.mockito.asm.Type[] typeArray47 = classInfo24.getInterfaces();
        boolean boolean48 = classInfo14.equals((java.lang.Object) classInfo24);
        org.mockito.cglib.core.Signature signature51 = new org.mockito.cglib.core.Signature("[Ljava/beans/PropertyDescriptor;", "java.beans.PropertyDescriptor[name=[Lorg/mockito/asm/Type;; shortDescription=Lchar;; bound]");
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass53 = type52.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass53);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        org.mockito.cglib.core.ClassInfo classInfo56 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type57 = classInfo56.getSuperType();
        org.mockito.asm.Type type58 = classInfo56.getSuperType();
        java.lang.Class<?> wildcardClass59 = type58.getClass();
        java.lang.String str60 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass59);
        java.lang.String str63 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass59);
        boolean boolean64 = signature51.equals((java.lang.Object) wildcardClass59);
        boolean boolean65 = classInfo14.equals((java.lang.Object) signature51);
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("(Z)C", method67, method68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass71 = type70.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass71);
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass71);
        java.beans.PropertyDescriptor[] propertyDescriptorArray74 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass71);
        org.mockito.cglib.core.ClassInfo classInfo75 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type76 = classInfo75.getType();
        java.beans.PropertyEditor propertyEditor77 = propertyDescriptor69.createPropertyEditor((java.lang.Object) type76);
        java.lang.Class<?> wildcardClass78 = propertyDescriptor69.getPropertyEditorClass();
        propertyDescriptor69.setPreferred(true);
        propertyDescriptor69.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        propertyDescriptor69.setConstrained(true);
        propertyDescriptor69.setDisplayName("J");
        java.lang.reflect.Method method87 = null;
        propertyDescriptor69.setReadMethod(method87);
        boolean boolean89 = signature51.equals((java.lang.Object) propertyDescriptor69);
        java.lang.String str90 = signature51.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "D" + "'", str5, "D");
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "()D" + "'", str7, "()D");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "D" + "'", str17, "D");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/Type" + "'", str23, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Z)C" + "'", str40, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/asm/Type" + "'", str55, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str60, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str63, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/Type" + "'", str73, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray74);
        org.junit.Assert.assertNotNull(classInfo75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNull(propertyEditor77);
        org.junit.Assert.assertNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.beans.PropertyDescriptor[name=[Lorg/mockito/asm/Type;; shortDescription=Lchar;; bound]" + "'", str90, "java.beans.PropertyDescriptor[name=[Lorg/mockito/asm/Type;; shortDescription=Lchar;; bound]");
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=org/mockito/asm/Type; values={org/mockito/asm/Type=char}; bound]");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.getClassName();
        int int4 = type1.getSort();
        java.lang.String str5 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=org/mockito/asm/Type;" + "'", str2, "Lava.beans.PropertyDescriptor[name=org/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ava.beans.PropertyDescriptor[name=org.mockito.asm.Type" + "'", str3, "ava.beans.PropertyDescriptor[name=org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lava.beans.PropertyDescriptor[name=org/mockito/asm/Type;" + "'", str5, "Lava.beans.PropertyDescriptor[name=org/mockito/asm/Type;");
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        boolean boolean11 = signature8.equals((java.lang.Object) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = type12.getElementType();
        boolean boolean15 = type12.equals((java.lang.Object) 128);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        boolean boolean21 = signature18.equals((java.lang.Object) wildcardClass20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type23 = type22.getElementType();
        int int24 = type23.getSort();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        int int28 = type26.getOpcode(0);
        int int29 = type26.getSort();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type[] typeArray36 = classInfo35.getInterfaces();
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("", type26, typeArray36);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray36);
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("", type12, typeArray36);
        propertyDescriptor3.setValue("Lg/mockito/asm/Type;", (java.lang.Object) signature39);
        java.lang.Class<?> wildcardClass41 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean42 = propertyDescriptor3.isPreferred();
        boolean boolean43 = propertyDescriptor3.isHidden();
        java.lang.String str44 = propertyDescriptor3.getName();
        boolean boolean45 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/Type" + "'", str33, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str38, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(Z)C" + "'", str44, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setDisplayName("long");
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj23 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]; displayName=()Lg/mockito/asm/Type;]");
        propertyDescriptor3.setDisplayName("ava.beans.PropertyDescriptor[name=[Lorg/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        int int6 = type4.getOpcode(0);
        int int7 = type4.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type[] typeArray14 = classInfo13.getInterfaces();
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", type4, typeArray14);
        java.lang.String str16 = signature15.getName();
        java.lang.String str17 = signature15.getName();
        org.mockito.asm.Type[] typeArray18 = signature15.getArgumentTypes();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("boolean", type1, typeArray18);
        org.mockito.asm.Type type20 = signature19.getReturnType();
        org.mockito.asm.Type type21 = signature19.getReturnType();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = classInfo26.getSuperType();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        org.mockito.asm.Type type29 = classInfo26.getSuperType();
        java.lang.String str30 = classInfo26.toString();
        org.mockito.asm.Type type31 = classInfo26.getSuperType();
        boolean boolean32 = signature19.equals((java.lang.Object) type31);
        org.mockito.asm.Type[] typeArray33 = signature19.getArgumentTypes();
        java.lang.String str34 = signature19.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "short" + "'", str2, "short");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()S" + "'", str34, "()S");
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = classInfo5.getType();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type type8 = classInfo5.getSuperType();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = classInfo13.getSuperType();
        org.mockito.asm.Type type15 = classInfo13.getSuperType();
        org.mockito.asm.Type[] typeArray16 = classInfo13.getInterfaces();
        org.mockito.asm.Type[] typeArray17 = classInfo13.getInterfaces();
        org.mockito.asm.Type type18 = classInfo13.getType();
        int int19 = type18.getSort();
        int int21 = type18.getOpcode(6);
        int int22 = type18.getSort();
        boolean boolean23 = type8.equals((java.lang.Object) type18);
        int int24 = type18.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj15 = propertyDescriptor3.getValue("()D");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        propertyDescriptor3.setName("C");
        boolean boolean20 = propertyDescriptor3.isExpert();
        boolean boolean21 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type28 = classInfo27.getSuperType();
        org.mockito.asm.Type type29 = classInfo27.getSuperType();
        org.mockito.asm.Type type30 = classInfo27.getSuperType();
        org.mockito.asm.Type[] typeArray31 = classInfo27.getInterfaces();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("(Z)C", method33, method34);
        java.util.Enumeration<java.lang.String> strEnumeration36 = propertyDescriptor35.attributeNames();
        boolean boolean37 = propertyDescriptor35.isPreferred();
        java.lang.String str38 = propertyDescriptor35.getName();
        boolean boolean39 = propertyDescriptor35.isExpert();
        propertyDescriptor35.setBound(true);
        java.lang.Class<?> wildcardClass42 = propertyDescriptor35.getPropertyEditorClass();
        propertyDescriptor35.setConstrained(true);
        propertyDescriptor35.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration47 = propertyDescriptor35.attributeNames();
        boolean boolean48 = classInfo27.equals((java.lang.Object) strEnumeration47);
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean48);
        java.lang.reflect.Method method50 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(strEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(Z)C" + "'", str38, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strEnumeration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertNull(method50);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isExpert();
        boolean boolean12 = propertyDescriptor3.isPreferred();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("[Ljava/beans/PropertyDescriptor;", method17, method18);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method17);
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNotNull(strEnumeration21);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        int int14 = type12.getOpcode(0);
        int int15 = type12.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type[] typeArray22 = classInfo21.getInterfaces();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("", type12, typeArray22);
        java.lang.String str24 = signature23.getName();
        org.mockito.asm.Type[] typeArray25 = signature23.getArgumentTypes();
        boolean boolean26 = classInfo10.equals((java.lang.Object) signature23);
        org.mockito.asm.Type[] typeArray27 = classInfo10.getInterfaces();
        org.mockito.asm.Type type28 = classInfo10.getType();
        java.lang.String str29 = type28.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/Type" + "'", str19, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.mockito.asm.Type" + "'", str29, "org.mockito.asm.Type");
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("()LZ)Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("L()Lchar;;", method1, method2);
        java.lang.Object obj5 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyDescriptor3.setValue("Ljava.beans.PropertyDescriptor;", obj5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = type6.getElementType();
        int int9 = type6.getOpcode(116);
        int int10 = type6.getSize();
        int int12 = type6.getOpcode(0);
        java.lang.String str13 = type6.getClassName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120 + "'", int9 == 120);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type" + "'", str13, "org.mockito.asm.Type");
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; bound]", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; bound]" + "'", str4, "java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; bound]");
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        int int1 = type0.getSort();
        java.lang.String str2 = type0.toString();
        java.lang.String str3 = type0.getDescriptor();
        java.lang.String str4 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "S" + "'", str2, "S");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "S" + "'", str3, "S");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "S" + "'", str4, "S");
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/asm/TypeLorg/mockito/asm/Type;", "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        propertyDescriptor3.setShortDescription("C");
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("(Z)C", method15, method16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass19 = type18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type24 = classInfo23.getType();
        java.beans.PropertyEditor propertyEditor25 = propertyDescriptor17.createPropertyEditor((java.lang.Object) type24);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor17.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor17.attributeNames();
        propertyDescriptor17.setConstrained(true);
        java.lang.Class<?> wildcardClass30 = propertyDescriptor17.getPropertyType();
        java.lang.String str31 = propertyDescriptor17.getShortDescription();
        boolean boolean32 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor17);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org/mockito/asm/Type" + "'", str21, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(propertyEditor25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(strEnumeration27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(Z)C" + "'", str31, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getClass();
        java.util.List list16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list17 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass15, list16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; bound; constrained]");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type[] typeArray7 = classInfo6.getInterfaces();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        boolean boolean11 = classInfo6.equals((java.lang.Object) wildcardClass9);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) propertyDescriptorArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("()LZ)Lchar;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type20 = classInfo19.getSuperType();
        org.mockito.asm.Type type21 = classInfo19.getSuperType();
        org.mockito.asm.Type[] typeArray22 = classInfo19.getInterfaces();
        org.mockito.asm.Type[] typeArray23 = classInfo19.getInterfaces();
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass24);
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor32 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass9, classArray30);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Lorg.mockito.asm.Type;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str14, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str27, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass16);
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setWriteMethod(method22);
        java.lang.reflect.Method method24 = null;
        propertyDescriptor3.setWriteMethod(method24);
        propertyDescriptor3.setHidden(false);
        boolean boolean28 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("hi!()Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        int int9 = classInfo5.getModifiers();
        int int10 = classInfo5.getModifiers();
        java.lang.String str11 = classInfo5.toString();
        org.mockito.asm.Type type12 = classInfo5.getType();
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("()Z");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray14);
        java.lang.Class<?> wildcardClass16 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str15, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        java.lang.Object[] objArray5 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray5);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type18 = classInfo17.getSuperType();
        org.mockito.asm.Type type19 = classInfo17.getSuperType();
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, false, false);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray26);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        boolean boolean15 = propertyDescriptor3.isExpert();
        boolean boolean16 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("(Z)C", method18, method19);
        propertyDescriptor20.setBound(true);
        java.lang.Object obj24 = propertyDescriptor20.getValue("(Z)C");
        java.beans.PropertyEditor propertyEditor25 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setBound(true);
        propertyDescriptor20.setHidden(false);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(propertyEditor25);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass16);
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        boolean boolean20 = propertyDescriptor3.isPreferred();
        java.lang.Object obj22 = propertyDescriptor3.getValue("Ljava/lang/Object;");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; preferred; values={org/mockito/asm/Type=char}; constrained]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("L()Lg/mockito/asm/Type;;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("(Z)C", method2, method3);
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor4.attributeNames();
        boolean boolean6 = propertyDescriptor4.isPreferred();
        java.lang.String str7 = propertyDescriptor4.getName();
        boolean boolean8 = propertyDescriptor4.isExpert();
        propertyDescriptor4.setBound(true);
        propertyDescriptor4.setShortDescription("Z");
        boolean boolean13 = propertyDescriptor4.isHidden();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor4.getPropertyEditorClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.lang.String str19 = type18.toString();
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor4.createPropertyEditor((java.lang.Object) type18);
        int int21 = type18.getSort();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getReturnType("S");
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.Type[] typeArray26 = org.mockito.asm.Type.getArgumentTypes("()L()Lchar;;");
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray26);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        int int31 = type29.getOpcode(0);
        java.lang.String str32 = type29.getClassName();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("(Z)C", method34, method35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass38 = type37.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass38);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass38);
        org.mockito.cglib.core.ClassInfo classInfo42 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type43 = classInfo42.getType();
        java.beans.PropertyEditor propertyEditor44 = propertyDescriptor36.createPropertyEditor((java.lang.Object) type43);
        java.lang.String str45 = type43.toString();
        org.mockito.asm.Type type46 = type43.getElementType();
        int int47 = type43.getSize();
        org.mockito.asm.Type[] typeArray49 = org.mockito.asm.Type.getArgumentTypes("(Z)C");
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray49);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred; bound]", type18, typeArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred; bound]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(Z)C" + "'", str7, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str17, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "S" + "'", str24, "S");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "()S" + "'", str27, "()S");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str28, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "char" + "'", str32, "char");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/Type" + "'", str40, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNull(propertyEditor44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str45, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Z)Lorg/mockito/asm/Type;" + "'", str50, "(Z)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(Z)C" + "'", str51, "(Z)C");
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        propertyDescriptor3.setValue("Lchar;", (java.lang.Object) wildcardClass13);
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("(Z)C", method21, method22);
        propertyDescriptor23.setBound(true);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        java.lang.Object obj28 = propertyDescriptor23.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method29 = null;
        propertyDescriptor23.setWriteMethod(method29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type[] typeArray37 = classInfo36.getInterfaces();
        boolean boolean39 = classInfo36.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray40 = classInfo36.getInterfaces();
        org.mockito.asm.Type type41 = classInfo36.getSuperType();
        propertyDescriptor23.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo36);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("(Z)C", method44, method45);
        propertyDescriptor46.setBound(true);
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Object obj51 = propertyDescriptor46.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method52 = null;
        propertyDescriptor46.setWriteMethod(method52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass56 = type55.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass56);
        java.lang.String str58 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type[] typeArray60 = classInfo59.getInterfaces();
        boolean boolean62 = classInfo59.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray63 = classInfo59.getInterfaces();
        org.mockito.asm.Type type64 = classInfo59.getSuperType();
        propertyDescriptor46.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo59);
        boolean boolean66 = classInfo36.equals((java.lang.Object) propertyDescriptor46);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType("B");
        boolean boolean69 = classInfo36.equals((java.lang.Object) type68);
        org.mockito.asm.Type type70 = classInfo36.getType();
        boolean boolean71 = signature19.equals((java.lang.Object) type70);
        propertyDescriptor3.setValue("Lava.beans.PropertyDescriptor[name=(Z)C;", (java.lang.Object) type70);
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/Type" + "'", str35, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org/mockito/asm/Type" + "'", str58, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        boolean boolean12 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type6 = classInfo5.getSuperType();
        org.mockito.asm.Type type7 = classInfo5.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        org.mockito.asm.Type[] typeArray9 = classInfo5.getInterfaces();
        org.mockito.asm.Type type10 = classInfo5.getType();
        java.lang.String str11 = classInfo5.toString();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("(Z)C", method13, method14);
        boolean boolean16 = propertyDescriptor15.isPreferred();
        java.lang.reflect.Method method17 = propertyDescriptor15.getWriteMethod();
        boolean boolean18 = classInfo5.equals((java.lang.Object) method17);
        boolean boolean20 = classInfo5.equals((java.lang.Object) 0.0d);
        org.mockito.asm.Type type21 = classInfo5.getType();
        org.mockito.asm.Type type22 = classInfo5.getSuperType();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type[] typeArray34 = classInfo33.getInterfaces();
        java.lang.String str35 = classInfo33.toString();
        org.mockito.asm.Type[] typeArray36 = classInfo33.getInterfaces();
        java.lang.String str37 = classInfo33.toString();
        org.mockito.asm.Type[] typeArray38 = classInfo33.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("()Ljava/beans/PropertyDescriptor;", type22, typeArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()Ljava/beans/PropertyDescriptor;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str30, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str31, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.mockito.asm.Type" + "'", str35, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.mockito.asm.Type" + "'", str37, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray38);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.TypeLorg.mockito.asm.Type;");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = signature3.equals((java.lang.Object) wildcardClass5);
        java.lang.String str7 = signature3.getName();
        boolean boolean8 = type0.equals((java.lang.Object) str7);
        java.lang.String str9 = type0.getDescriptor();
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "F" + "'", str9, "F");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        org.mockito.asm.Type type7 = classInfo5.getType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type13 = classInfo12.getSuperType();
        org.mockito.asm.Type type14 = classInfo12.getSuperType();
        org.mockito.asm.Type[] typeArray15 = classInfo12.getInterfaces();
        org.mockito.asm.Type[] typeArray16 = classInfo12.getInterfaces();
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        boolean boolean23 = classInfo5.equals((java.lang.Object) strArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) strArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classArray24);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char; ()D=1}]");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "C" + "'", str2, "C");
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("C");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type4 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LC;" + "'", str3, "LC;");
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("boolean");
        boolean boolean9 = propertyDescriptor3.isExpert();
        boolean boolean10 = propertyDescriptor3.isPreferred();
        boolean boolean11 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("(Z)C", method14, method15);
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor16.attributeNames();
        boolean boolean18 = propertyDescriptor16.isPreferred();
        java.lang.String str19 = propertyDescriptor16.getName();
        boolean boolean20 = propertyDescriptor16.isExpert();
        propertyDescriptor16.setBound(true);
        propertyDescriptor16.setShortDescription("Z");
        boolean boolean25 = propertyDescriptor16.isHidden();
        java.lang.Class<?> wildcardClass26 = propertyDescriptor16.getPropertyEditorClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        java.lang.String str31 = type30.toString();
        java.beans.PropertyEditor propertyEditor32 = propertyDescriptor16.createPropertyEditor((java.lang.Object) type30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass34 = type33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        int int43 = type41.getOpcode(0);
        int int44 = type41.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass46 = type45.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass46);
        java.lang.String str48 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass46);
        org.mockito.cglib.core.ClassInfo classInfo50 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type[] typeArray51 = classInfo50.getInterfaces();
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("", type41, typeArray51);
        boolean boolean53 = type39.equals((java.lang.Object) typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray51);
        propertyDescriptor3.setValue("Lmockito/asm/Type;", (java.lang.Object) typeArray51);
        java.lang.String str56 = propertyDescriptor3.getDisplayName();
        boolean boolean57 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method58 = null;
        propertyDescriptor3.setReadMethod(method58);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str29, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str31, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org/mockito/asm/Type" + "'", str36, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org/mockito/asm/Type" + "'", str48, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str54, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lg/mockito/asm/Type;", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        java.lang.String str5 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("(Z)C", method11, method12);
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor13.attributeNames();
        boolean boolean15 = propertyDescriptor13.isPreferred();
        java.lang.reflect.Method method16 = null;
        propertyDescriptor13.setWriteMethod(method16);
        propertyDescriptor13.setHidden(true);
        propertyDescriptor13.setExpert(false);
        propertyDescriptor13.setBound(true);
        propertyDescriptor13.setShortDescription("org/mockito/asm/TypeLorg/mockito/asm/Type;");
        propertyDescriptor13.setBound(false);
        java.lang.Object obj29 = propertyDescriptor13.getValue("LC;");
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor13.attributeNames();
        propertyDescriptor13.setExpert(false);
        propertyDescriptor3.setValue("()Lorg/mockito/asm/TypeLorg/mockito/asm/Type;org/mockito/asm/TypeLorg/mockito/asm/Type;;", (java.lang.Object) false);
        boolean boolean34 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lg/mockito/asm/Type;" + "'", str5, "Lg/mockito/asm/Type;");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("rg.mockito.asm.TypeLorg.mockito.asm.Type", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str10 = classInfo9.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        boolean boolean7 = signature2.equals((java.lang.Object) (short) 1);
        java.lang.String str8 = signature2.getDescriptor();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 0);
        int int13 = type9.getOpcode(100);
        int int14 = type9.getSize();
        int int16 = type9.getOpcode(4);
        int int18 = type9.getOpcode((int) ' ');
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] {};
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray21);
        java.lang.String str24 = type9.toString();
        boolean boolean25 = signature2.equals((java.lang.Object) str24);
        java.lang.String str26 = signature2.toString();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass28);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass28);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        org.mockito.asm.Type type33 = classInfo31.getSuperType();
        org.mockito.asm.Type[] typeArray34 = classInfo31.getInterfaces();
        org.mockito.asm.Type type35 = classInfo31.getType();
        boolean boolean36 = signature2.equals((java.lang.Object) classInfo31);
        int int37 = classInfo31.getModifiers();
        org.mockito.asm.Type type38 = classInfo31.getType();
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        boolean boolean47 = classInfo31.equals((java.lang.Object) int46);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()D" + "'", str22, "()D");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()Z" + "'", str23, "()Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/Type" + "'", str30, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = classInfo9.getSuperType();
        int int11 = type10.getDimensions();
        java.lang.String str12 = type10.getInternalName();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java/beans/FeatureDescriptor" + "'", str12, "java/beans/FeatureDescriptor");
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        int int9 = classInfo5.getModifiers();
        int int10 = classInfo5.getModifiers();
        java.lang.String str11 = classInfo5.toString();
        org.mockito.asm.Type type12 = classInfo5.getType();
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("()Z");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray14);
        java.lang.Class<?> wildcardClass16 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str15, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        propertyDescriptor3.setShortDescription("D");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]");
        boolean boolean13 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("L()D;");
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("(Z)C", method20, method21);
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor22.attributeNames();
        boolean boolean24 = propertyDescriptor22.isPreferred();
        java.lang.String str25 = propertyDescriptor22.getName();
        boolean boolean26 = propertyDescriptor22.isExpert();
        propertyDescriptor22.setBound(true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor22.getPropertyEditorClass();
        propertyDescriptor22.setConstrained(true);
        propertyDescriptor22.setPreferred(false);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", (java.lang.Object) propertyDescriptor22);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(Z)C" + "'", str25, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass29);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        int int3 = type1.getOpcode((int) (byte) 1);
        java.lang.String str4 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSort();
        propertyDescriptor3.setValue("org/mockito/asm/TypeD", (java.lang.Object) int17);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setBound(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setHidden(true);
        java.lang.Object obj27 = propertyDescriptor3.getValue("mockito/asm/Typejava.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred; constrained]");
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method30 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(method30);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        int int8 = classInfo4.getModifiers();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        boolean boolean16 = classInfo4.equals((java.lang.Object) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass10);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.Type" + "'", str6, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classInfo17);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type[] typeArray17 = classInfo16.getInterfaces();
        boolean boolean19 = classInfo16.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        propertyDescriptor3.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo16);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("(Z)C", method24, method25);
        propertyDescriptor26.setBound(true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        java.lang.Object obj31 = propertyDescriptor26.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method32 = null;
        propertyDescriptor26.setWriteMethod(method32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass36 = type35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type[] typeArray40 = classInfo39.getInterfaces();
        boolean boolean42 = classInfo39.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray43 = classInfo39.getInterfaces();
        org.mockito.asm.Type type44 = classInfo39.getSuperType();
        propertyDescriptor26.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo39);
        boolean boolean46 = classInfo16.equals((java.lang.Object) propertyDescriptor26);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType("B");
        boolean boolean49 = classInfo16.equals((java.lang.Object) type48);
        java.lang.String str50 = classInfo16.toString();
        int int51 = classInfo16.getModifiers();
        int int52 = classInfo16.getModifiers();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("(Z)C", method54, method55);
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor56.setValue("org/mockito/asm/Type", (java.lang.Object) signature60);
        java.lang.String str62 = propertyDescriptor56.getDisplayName();
        boolean boolean63 = propertyDescriptor56.isHidden();
        boolean boolean64 = propertyDescriptor56.isHidden();
        propertyDescriptor56.setDisplayName("D");
        java.lang.Class<?> wildcardClass67 = propertyDescriptor56.getPropertyType();
        boolean boolean68 = classInfo16.equals((java.lang.Object) wildcardClass67);
        org.mockito.asm.Type type69 = classInfo16.getSuperType();
        java.lang.String str70 = classInfo16.toString();
        org.mockito.asm.Type type71 = classInfo16.getType();
        int int72 = classInfo16.getModifiers();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/Type" + "'", str38, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.mockito.asm.Type" + "'", str50, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(Z)C" + "'", str62, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.Type" + "'", str70, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("LC;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, false, false);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray20);
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        boolean boolean27 = signature24.equals((java.lang.Object) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, false, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray32);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray32);
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str38 = signature37.toString();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 0);
        java.lang.String str42 = type39.toString();
        java.lang.String str43 = type39.toString();
        java.lang.String str44 = type39.getClassName();
        boolean boolean45 = signature37.equals((java.lang.Object) str44);
        org.mockito.asm.Type type46 = signature37.getReturnType();
        java.lang.Class<?> wildcardClass47 = signature37.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass47);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, false, true);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) strArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str38, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Z" + "'", str42, "Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Z" + "'", str43, "Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lg/mockito/asm/Type;", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        java.lang.String str5 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lg/mockito/asm/Type;" + "'", str5, "Lg/mockito/asm/Type;");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LLjava/lang/Object;;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type[] typeArray7 = classInfo6.getInterfaces();
        boolean boolean9 = classInfo6.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray10 = classInfo6.getInterfaces();
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray10);
        org.mockito.asm.Type[] typeArray13 = org.mockito.asm.Type.getArgumentTypes("()Lorg/mockito/asm/Type;");
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray13);
        java.lang.String str15 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "()LLjava/lang/Object;" + "'", str11, "()LLjava/lang/Object;");
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "()LLjava/lang/Object;" + "'", str14, "()LLjava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Ljava.lang.Object" + "'", str15, "Ljava.lang.Object");
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("long");
        boolean boolean18 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass22);
        java.lang.String str24 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setPreferred(true);
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred; expert; bound]");
        java.lang.String str30 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "long" + "'", str24, "long");
        org.junit.Assert.assertNotNull(strEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "long" + "'", str30, "long");
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = classInfo4.getType();
        java.lang.String str10 = classInfo4.toString();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("(Z)C", method12, method13);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor14.setValue("org/mockito/asm/Type", (java.lang.Object) signature18);
        java.lang.String str20 = propertyDescriptor14.getDisplayName();
        boolean boolean21 = propertyDescriptor14.isHidden();
        propertyDescriptor14.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor14.setConstrained(true);
        boolean boolean26 = classInfo4.equals((java.lang.Object) propertyDescriptor14);
        org.mockito.asm.Type[] typeArray27 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray28 = classInfo4.getInterfaces();
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        java.util.List list34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list35 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass33, list34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(Z)C" + "'", str20, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str30, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        java.lang.Object obj20 = propertyDescriptor3.getValue("(Z)C");
        boolean boolean21 = propertyDescriptor3.isHidden();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray24, true, false);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptorArray24);
        boolean boolean29 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("java/lang/Object");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("(Z)C", method16, method17);
        propertyDescriptor18.setBound(true);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor18.getPropertyType();
        boolean boolean22 = propertyDescriptor18.isExpert();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor18.getPropertyEditorClass();
        java.beans.PropertyEditor propertyEditor24 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass23);
        propertyDescriptor3.setBound(false);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass28);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass28);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        java.lang.String str33 = classInfo31.toString();
        org.mockito.asm.Type type34 = classInfo31.getSuperType();
        int int35 = classInfo31.getModifiers();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass37 = type36.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass37);
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        boolean boolean43 = classInfo31.equals((java.lang.Object) wildcardClass37);
        boolean boolean44 = propertyDescriptor3.equals((java.lang.Object) boolean43);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(propertyEditor24);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/Type" + "'", str30, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.mockito.asm.Type" + "'", str33, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/Type" + "'", str39, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str41, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        boolean boolean15 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("(Z)C", method16, method17);
        propertyDescriptor18.setBound(true);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor18.getPropertyType();
        boolean boolean22 = propertyDescriptor18.isExpert();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor18.getPropertyEditorClass();
        java.beans.PropertyEditor propertyEditor24 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass23);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(propertyEditor24);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(strEnumeration30);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type6 = classInfo5.getSuperType();
        org.mockito.asm.Type type7 = classInfo5.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        org.mockito.asm.Type[] typeArray9 = classInfo5.getInterfaces();
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) propertyDescriptorArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classArray13);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setValue("g.mockito.asm.Type", (java.lang.Object) 50);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        java.lang.String str7 = type6.getClassName();
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass8, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Object" + "'", str7, "java.lang.Object");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org.mockito.asm.Type[]", "java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.toString();
        java.lang.String str5 = signature2.getDescriptor();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.String str7 = signature2.getName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.Type[]java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]" + "'", str4, "org.mockito.asm.Type[]java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]" + "'", str5, "java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]" + "'", str6, "java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type[]" + "'", str7, "org.mockito.asm.Type[]");
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("B");
        propertyDescriptor3.setHidden(false);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type19 = classInfo18.getSuperType();
        org.mockito.asm.Type type20 = classInfo18.getSuperType();
        int int21 = type20.getDimensions();
        java.beans.PropertyEditor propertyEditor22 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type20);
        java.lang.String str23 = type20.getInternalName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(propertyEditor22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java/lang/Object" + "'", str23, "java/lang/Object");
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        boolean boolean13 = signature10.equals((java.lang.Object) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(Z)C; constrained]", (java.lang.Object) propertyDescriptorArray14);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getClass();
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        java.util.List list22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list23 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass20, list22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java/beans/PropertyDescriptor" + "'", str21, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        boolean boolean15 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setReadMethod(method17);
        propertyDescriptor3.setShortDescription("va.lang.Object");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = classInfo5.getType();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("(Z)C", method8, method9);
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor10.attributeNames();
        boolean boolean12 = propertyDescriptor10.isPreferred();
        java.lang.String str13 = propertyDescriptor10.getName();
        boolean boolean14 = propertyDescriptor10.isHidden();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor10.getClass();
        boolean boolean16 = classInfo5.equals((java.lang.Object) wildcardClass15);
        org.mockito.asm.Type[] typeArray17 = classInfo5.getInterfaces();
        org.mockito.asm.Type type18 = classInfo5.getType();
        org.mockito.asm.Type type19 = classInfo5.getType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.toString();
        java.lang.String str6 = signature2.toString();
        java.lang.String str7 = signature2.toString();
        java.lang.String str8 = signature2.toString();
        org.mockito.asm.Type type9 = signature2.getReturnType();
        java.lang.String str10 = signature2.getName();
        org.mockito.asm.Type type11 = signature2.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray12 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str5, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str6, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str7, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str8, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 100, (byte) -1 };
        java.lang.ClassLoader classLoader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class6 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg.mockito.asm.Type;}]", byteArray4, classLoader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 100, -1]");
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str3 = type2.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type[] typeArray10 = classInfo9.getInterfaces();
        java.lang.String str11 = classInfo9.toString();
        org.mockito.asm.Type[] typeArray12 = classInfo9.getInterfaces();
        org.mockito.asm.Type[] typeArray13 = classInfo9.getInterfaces();
        org.mockito.asm.Type type14 = classInfo9.getSuperType();
        org.mockito.asm.Type type15 = classInfo9.getType();
        int int16 = classInfo9.getModifiers();
        int int17 = classInfo9.getModifiers();
        org.mockito.asm.Type[] typeArray18 = classInfo9.getInterfaces();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("Lava.beans.PropertyDescriptor[name=org.mockito.asm.Type;", type2, typeArray18);
        java.lang.String str20 = signature19.getName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lava.beans.PropertyDescriptor[name=org.mockito.asm.Type;" + "'", str20, "Lava.beans.PropertyDescriptor[name=org.mockito.asm.Type;");
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("hi!()Lorg/mockito/asm/Type;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()Lchar;");
        java.lang.String str2 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "char" + "'", str2, "char");
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("Lava.beans.PropertyDescriptor[name=org.mockito.asm.Type;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        java.lang.Object obj6 = propertyDescriptor3.getValue("(Z)Lchar;");
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]]");
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(Z)C" + "'", str7, "(Z)C");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(Z)C" + "'", str8, "(Z)C");
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.beans.PropertyEditor propertyEditor8 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 104);
        java.lang.String str9 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("Z");
        boolean boolean12 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(propertyEditor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = classInfo11.getSuperType();
        org.mockito.asm.Type type13 = classInfo11.getSuperType();
        java.lang.String str14 = type13.getClassName();
        java.lang.Class<?> wildcardClass15 = type13.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass15);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.lang.Object" + "'", str14, "java.lang.Object");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
        java.beans.PropertyEditor propertyEditor7 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 128);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setDisplayName("(Z)Lorg/mockito/asm/Type;");
        propertyDescriptor3.setShortDescription("LLorg/mockito/asm/Type;;");
        org.junit.Assert.assertNull(propertyEditor7);
        org.junit.Assert.assertNull(method10);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        boolean boolean3 = type0.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "D" + "'", str1, "D");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("boolean()S", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->boolean.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type12 = type11.getElementType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Lmockito/asm/Type;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        java.lang.Object[] objArray5 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray5);
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("(Z)C", method12, method13);
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor14.attributeNames();
        boolean boolean16 = propertyDescriptor14.isPreferred();
        java.lang.String str17 = propertyDescriptor14.getName();
        boolean boolean18 = propertyDescriptor14.isExpert();
        propertyDescriptor14.setBound(true);
        propertyDescriptor14.setPreferred(true);
        java.lang.String str23 = propertyDescriptor14.getDisplayName();
        java.lang.reflect.Method method24 = null;
        propertyDescriptor14.setReadMethod(method24);
        propertyDescriptor14.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str28 = propertyDescriptor14.getDisplayName();
        boolean boolean29 = propertyDescriptor14.isExpert();
        java.lang.reflect.Method method30 = propertyDescriptor14.getReadMethod();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray35);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(Z)C" + "'", str17, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(Z)C" + "'", str23, "(Z)C");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str28, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        java.lang.String str4 = signature2.toString();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        boolean boolean7 = signature2.equals((java.lang.Object) "Lorg/mockito/asm/Type;");
        java.lang.String str8 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ljava/lang/Object;()D" + "'", str4, "Ljava/lang/Object;()D");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "()D" + "'", str8, "()D");
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        boolean boolean18 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str17, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration23);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        int int8 = type7.getSize();
        int int9 = type7.getSize();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type15 = classInfo14.getSuperType();
        java.lang.String str16 = classInfo14.toString();
        org.mockito.asm.Type type17 = classInfo14.getSuperType();
        int int18 = classInfo14.getModifiers();
        org.mockito.asm.Type type19 = classInfo14.getType();
        boolean boolean20 = type7.equals((java.lang.Object) type19);
        int int21 = type19.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.Type" + "'", str6, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.Type" + "'", str16, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type7 = classInfo6.getType();
        org.mockito.asm.Type type8 = type7.getElementType();
        java.lang.String str9 = type8.toString();
        java.lang.String str10 = type8.getClassName();
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str13 = type12.getDescriptor();
        boolean boolean15 = type12.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass16 = type12.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type[] typeArray22 = classInfo21.getInterfaces();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("double", type8, typeArray22);
        java.lang.String str24 = signature23.getDescriptor();
        java.lang.String str25 = signature23.getName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lg/mockito/asm/Type;" + "'", str9, "Lg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "g.mockito.asm.Type" + "'", str10, "g.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "g.mockito.asm.Type" + "'", str11, "g.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D" + "'", str13, "D");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str24, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "double" + "'", str25, "double");
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setName("java/lang/Object");
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str14 = signature13.getName();
        java.lang.String str15 = signature13.getName();
        java.lang.String str16 = signature13.toString();
        java.lang.String str17 = signature13.toString();
        java.lang.String str18 = signature13.toString();
        java.lang.String str19 = signature13.toString();
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str19);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(Z)C" + "'", str8, "(Z)C");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str16, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str17, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str18, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str19, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor20);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("(Z)C", method7, method8);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor9.attributeNames();
        boolean boolean11 = propertyDescriptor9.isPreferred();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyType();
        java.beans.PropertyEditor propertyEditor13 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor9);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass18 = type17.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray24);
        java.lang.Class[] classArray26 = new java.lang.Class[] {};
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass29 = type28.getClass();
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass29);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray35);
        propertyDescriptor9.setValue("Ljava/lang/Object;", (java.lang.Object) strArray16);
        propertyDescriptor9.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        java.lang.reflect.Method method41 = propertyDescriptor9.getReadMethod();
        propertyDescriptor9.setHidden(false);
        boolean boolean44 = propertyDescriptor9.isHidden();
        java.lang.String str45 = propertyDescriptor9.getShortDescription();
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str50 = signature49.getName();
        java.lang.String str51 = signature49.getName();
        java.lang.String str52 = signature49.toString();
        org.mockito.cglib.core.Signature signature55 = new org.mockito.cglib.core.Signature("java.lang.Object", "");
        boolean boolean56 = signature49.equals((java.lang.Object) signature55);
        java.lang.String str57 = signature49.getDescriptor();
        propertyDescriptor9.setValue("java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]", (java.lang.Object) str57);
        java.lang.Class<?> wildcardClass59 = propertyDescriptor9.getPropertyType();
        java.lang.reflect.Method method60 = null;
        propertyDescriptor9.setWriteMethod(method60);
        java.lang.String str62 = propertyDescriptor9.toString();
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(propertyEditor13);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str30, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNull(method41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]" + "'", str45, "java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Ljava/lang/Object;" + "'", str50, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Ljava/lang/Object;" + "'", str51, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Ljava/lang/Object;()D" + "'", str52, "Ljava/lang/Object;()D");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "()D" + "'", str57, "()D");
        org.junit.Assert.assertNull(wildcardClass59);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray6);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, false, true);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass17 = type14.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer22 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray11, (java.lang.Class) wildcardClass17);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/Type" + "'", str20, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org/mockito/asm/Type" + "'", str21, "org/mockito/asm/Type");
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(Z)C; values={org.mockito.asm.Type=char; ()D=1}]", "()D");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(Z)C; values={org.mockito.asm.Type=char; ()D=1}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.String str14 = propertyDescriptor3.getName();
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        boolean boolean17 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(Z)C" + "'", str14, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("(Z)C", method9, method10);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor11.attributeNames();
        boolean boolean13 = propertyDescriptor11.isPreferred();
        java.lang.String str14 = propertyDescriptor11.getName();
        boolean boolean15 = propertyDescriptor11.isExpert();
        propertyDescriptor11.setBound(true);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor11.setWriteMethod(method18);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor11.getPropertyEditorClass();
        propertyDescriptor11.setExpert(false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor11.createPropertyEditor((java.lang.Object) wildcardClass24);
        java.lang.String str27 = propertyDescriptor11.getDisplayName();
        propertyDescriptor11.setPreferred(false);
        java.lang.String str30 = propertyDescriptor11.getName();
        propertyDescriptor3.setValue("Lg/mockito/asm/Type;", (java.lang.Object) str30);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(Z)C" + "'", str14, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(Z)C" + "'", str27, "(Z)C");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(Z)C" + "'", str30, "(Z)C");
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        boolean boolean6 = classInfo4.equals((java.lang.Object) "boolean");
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("(Z)C", method9, method10);
        propertyDescriptor11.setBound(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getPropertyType();
        boolean boolean15 = classInfo4.equals((java.lang.Object) wildcardClass14);
        org.mockito.asm.Type type16 = classInfo4.getSuperType();
        java.lang.String str17 = classInfo4.toString();
        org.mockito.asm.Type type18 = classInfo4.getSuperType();
        java.lang.String str19 = classInfo4.toString();
        org.mockito.asm.Type type20 = classInfo4.getSuperType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.mockito.asm.Type" + "'", str19, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type20);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        int int23 = type21.getOpcode(0);
        int int24 = type21.getSort();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type[] typeArray31 = classInfo30.getInterfaces();
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("", type21, typeArray31);
        java.lang.String str33 = signature32.getName();
        java.lang.String str34 = signature32.getName();
        org.mockito.asm.Type[] typeArray35 = signature32.getArgumentTypes();
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("boolean", type18, typeArray35);
        org.mockito.asm.Type type37 = signature36.getReturnType();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("(Z)C", method39, method40);
        java.util.Enumeration<java.lang.String> strEnumeration42 = propertyDescriptor41.attributeNames();
        boolean boolean43 = propertyDescriptor41.isPreferred();
        java.lang.String str44 = propertyDescriptor41.getName();
        boolean boolean45 = propertyDescriptor41.isExpert();
        propertyDescriptor41.setBound(true);
        propertyDescriptor41.setPreferred(true);
        java.lang.String str50 = propertyDescriptor41.getDisplayName();
        java.lang.reflect.Method method51 = null;
        propertyDescriptor41.setReadMethod(method51);
        propertyDescriptor41.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str55 = propertyDescriptor41.getDisplayName();
        boolean boolean56 = propertyDescriptor41.isExpert();
        propertyDescriptor41.setExpert(true);
        propertyDescriptor41.setHidden(false);
        java.lang.String str61 = propertyDescriptor41.getName();
        propertyDescriptor41.setDisplayName("C");
        propertyDescriptor41.setPreferred(false);
        java.lang.Class<?> wildcardClass66 = propertyDescriptor41.getPropertyType();
        boolean boolean67 = signature36.equals((java.lang.Object) propertyDescriptor41);
        java.beans.PropertyEditor propertyEditor68 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature36);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=boolean; bound]; shortDescription=()Ljava/lang/Object;]");
        java.util.Enumeration<java.lang.String> strEnumeration71 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "short" + "'", str19, "short");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/asm/Type" + "'", str28, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(strEnumeration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(Z)C" + "'", str44, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Z)C" + "'", str50, "(Z)C");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str55, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str61, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(propertyEditor68);
        org.junit.Assert.assertNotNull(strEnumeration71);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray4, true, true);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray7);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray10);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        boolean boolean17 = signature14.equals((java.lang.Object) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.String str22 = classInfo21.toString();
        java.lang.Class<?> wildcardClass23 = classInfo21.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer24 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray11, (java.lang.Class) wildcardClass23);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.ReflectUtils$4.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str2, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.mockito.asm.Type" + "'", str22, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        boolean boolean9 = propertyDescriptor3.isHidden();
        java.lang.Object obj11 = propertyDescriptor3.getValue("Ljava.beans.PropertyDescriptor[name=(Z)C; shortDescription=D; expert; bound];");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str13 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C]" + "'", str13, "java.beans.PropertyDescriptor[name=(Z)C]");
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("short");
        boolean boolean15 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("()C");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str8 = signature7.getName();
        org.mockito.asm.Type[] typeArray9 = signature7.getArgumentTypes();
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(Z)C; bound; constrained]", type2, typeArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(Z)C; bound; constrained]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ljava/lang/Object;" + "'", str8, "Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str10, "()Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(0);
        int int4 = type1.getSort();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type[] typeArray11 = classInfo10.getInterfaces();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("", type1, typeArray11);
        java.lang.String str13 = signature12.getName();
        java.lang.String str14 = signature12.getName();
        java.lang.String str15 = signature12.getDescriptor();
        org.mockito.asm.Type type16 = signature12.getReturnType();
        int int18 = type16.getOpcode(136);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "()C" + "'", str15, "()C");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 136 + "'", int18 == 136);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("char", "");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("(Z)C", method4, method5);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor6.setValue("org/mockito/asm/Type", (java.lang.Object) signature10);
        java.lang.String str12 = propertyDescriptor6.getDisplayName();
        boolean boolean13 = propertyDescriptor6.isHidden();
        propertyDescriptor6.setShortDescription("Z");
        java.lang.Object obj17 = propertyDescriptor6.getValue("org.mockito.asm.Type");
        boolean boolean18 = signature2.equals((java.lang.Object) propertyDescriptor6);
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("(Z)C", method20, method21);
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor22.attributeNames();
        boolean boolean24 = propertyDescriptor22.isPreferred();
        java.lang.String str25 = propertyDescriptor22.getName();
        boolean boolean26 = propertyDescriptor22.isExpert();
        propertyDescriptor22.setBound(true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor22.getPropertyType();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor22.getPropertyType();
        java.beans.PropertyEditor propertyEditor31 = propertyDescriptor6.createPropertyEditor((java.lang.Object) propertyDescriptor22);
        boolean boolean32 = propertyDescriptor6.isPreferred();
        propertyDescriptor6.setName("(Z)Lchar;");
        java.lang.reflect.Method method35 = null;
        propertyDescriptor6.setWriteMethod(method35);
        propertyDescriptor6.setHidden(true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(Z)C" + "'", str25, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(propertyEditor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        int int7 = classInfo4.getModifiers();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        java.lang.String str9 = classInfo4.toString();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str13 = signature12.toString();
        java.lang.String str14 = signature12.getName();
        java.lang.String str15 = signature12.getName();
        java.lang.String str16 = signature12.getName();
        java.lang.String str17 = signature12.toString();
        java.lang.String str18 = signature12.getDescriptor();
        java.lang.String str19 = signature12.getDescriptor();
        org.mockito.asm.Type type20 = signature12.getReturnType();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray24, true, false);
        boolean boolean28 = type20.equals((java.lang.Object) propertyDescriptorArray24);
        boolean boolean29 = classInfo4.equals((java.lang.Object) type20);
        org.mockito.asm.Type type30 = classInfo4.getType();
        org.mockito.asm.Type type31 = classInfo4.getType();
        org.mockito.asm.Type type32 = type31.getElementType();
        int int33 = type32.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.Type" + "'", str6, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.mockito.asm.Type" + "'", str9, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str13, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str17, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str16 = signature15.getName();
        propertyDescriptor3.setValue("F", (java.lang.Object) str16);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("double", "");
        java.lang.String str22 = signature21.toString();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) signature21);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("(Z)C", method26, method27);
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor28.setValue("org/mockito/asm/Type", (java.lang.Object) signature32);
        java.lang.String str34 = propertyDescriptor28.getDisplayName();
        boolean boolean35 = propertyDescriptor28.isHidden();
        propertyDescriptor28.setShortDescription("Z");
        java.util.Enumeration<java.lang.String> strEnumeration38 = propertyDescriptor28.attributeNames();
        java.lang.String str39 = propertyDescriptor28.getDisplayName();
        propertyDescriptor3.setValue("org/mockito/asm/TypeD", (java.lang.Object) str39);
        java.lang.reflect.Method method41 = null;
        propertyDescriptor3.setWriteMethod(method41);
        propertyDescriptor3.setName("Lmockito/asm/Type;");
        java.lang.String str45 = propertyDescriptor3.getShortDescription();
        java.lang.String str46 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Ljava/lang/Object;" + "'", str16, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "double" + "'", str22, "double");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(Z)C" + "'", str34, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strEnumeration38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(Z)C" + "'", str39, "(Z)C");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lmockito/asm/Type;" + "'", str45, "Lmockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.beans.PropertyDescriptor[name=Lmockito/asm/Type;; values={org/mockito/asm/Type=char; org/mockito/asm/TypeD=(Z)C; F=Ljava/lang/Object;; org/mockito/asm/TypeLorg/mockito/asm/Type;=double}]" + "'", str46, "java.beans.PropertyDescriptor[name=Lmockito/asm/Type;; values={org/mockito/asm/Type=char; org/mockito/asm/TypeD=(Z)C; F=Ljava/lang/Object;; org/mockito/asm/TypeLorg/mockito/asm/Type;=double}]");
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.beans.PropertyEditor propertyEditor8 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 104);
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setName("S()Lorg/mockito/asm/Type;");
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, true, true);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray18, methodArray26);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray27);
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(propertyEditor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(Z)C" + "'", str11, "(Z)C");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(Z)C" + "'", str14, "(Z)C");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNull(propertyEditor28);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("()D");
        propertyDescriptor3.setExpert(true);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        boolean boolean14 = propertyDescriptor3.isPreferred();
        boolean boolean15 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(Z)C" + "'", str7, "(Z)C");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setWriteMethod(method7);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        java.lang.String str11 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C]" + "'", str11, "java.beans.PropertyDescriptor[name=(Z)C]");
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        boolean boolean18 = signature15.equals((java.lang.Object) wildcardClass17);
        boolean boolean20 = signature15.equals((java.lang.Object) (short) 1);
        java.lang.String str21 = signature15.getDescriptor();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 0);
        int int26 = type22.getOpcode(100);
        int int27 = type22.getSize();
        int int29 = type22.getOpcode(4);
        int int31 = type22.getOpcode((int) ' ');
        org.mockito.asm.Type type32 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str33 = type32.getDescriptor();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] {};
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray34);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray34);
        java.lang.String str37 = type22.toString();
        boolean boolean38 = signature15.equals((java.lang.Object) str37);
        java.lang.String str39 = signature15.toString();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass41 = type40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type45 = classInfo44.getSuperType();
        org.mockito.asm.Type type46 = classInfo44.getSuperType();
        org.mockito.asm.Type[] typeArray47 = classInfo44.getInterfaces();
        org.mockito.asm.Type type48 = classInfo44.getType();
        boolean boolean49 = signature15.equals((java.lang.Object) classInfo44);
        int int50 = classInfo44.getModifiers();
        org.mockito.asm.Type type51 = classInfo44.getType();
        org.mockito.asm.Type[] typeArray52 = classInfo44.getInterfaces();
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray52);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass1, classArray11, (java.lang.Object[]) strArray54);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str2, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "D" + "'", str33, "D");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "()D" + "'", str35, "()D");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "()Z" + "'", str36, "()Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Z" + "'", str37, "Z");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/Type" + "'", str43, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("ouble()Lg.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass16);
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        boolean boolean20 = propertyDescriptor3.isPreferred();
        java.lang.String str21 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyType();
        java.lang.String str23 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg.mockito.asm.Type;}]");
        java.lang.reflect.Method method26 = null;
        propertyDescriptor3.setWriteMethod(method26);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(Z)C" + "'", str21, "(Z)C");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(Z)C" + "'", str23, "(Z)C");
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.toString();
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        boolean boolean10 = signature7.equals((java.lang.Object) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        boolean boolean16 = signature2.equals((java.lang.Object) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, true, true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ljava/lang/Object;" + "'", str3, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ljava/lang/Object;()D" + "'", str4, "Ljava/lang/Object;()D");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type6 = classInfo5.getSuperType();
        org.mockito.asm.Type type7 = classInfo5.getSuperType();
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray11);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) classArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type18 = classInfo17.getSuperType();
        org.mockito.asm.Type type19 = classInfo17.getSuperType();
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptorArray25);
        java.beans.PropertyEditor propertyEditor28 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "Lg/mockito/asm/Type;");
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method31 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/Type" + "'", str24, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertNull(propertyEditor28);
        org.junit.Assert.assertNull(method31);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setDisplayName("Z");
        java.lang.Object obj12 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        propertyDescriptor3.setConstrained(true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, false);
        propertyDescriptor3.setValue("org/mockito/cglib/core/ReflectUtils$4", (java.lang.Object) methodArray23);
        java.lang.String str25 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/Type" + "'", str19, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("[Ljava/lang/String;", method1, method2);
        propertyDescriptor3.setBound(false);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        boolean boolean7 = signature2.equals((java.lang.Object) (short) 1);
        java.lang.String str8 = signature2.getDescriptor();
        java.lang.String str9 = signature2.getName();
        java.lang.String str10 = signature2.getName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type16 = classInfo15.getSuperType();
        java.lang.String str17 = classInfo15.toString();
        int int18 = classInfo15.getModifiers();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("(Z)C", method20, method21);
        propertyDescriptor22.setBound(true);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor22.getPropertyType();
        java.lang.Object obj27 = propertyDescriptor22.getValue("org.mockito.asm.Type");
        propertyDescriptor22.setShortDescription("D");
        propertyDescriptor22.setExpert(false);
        propertyDescriptor22.setDisplayName("Ljava/lang/Object;");
        boolean boolean34 = classInfo15.equals((java.lang.Object) "Ljava/lang/Object;");
        int int35 = classInfo15.getModifiers();
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass40 = type39.getClass();
        boolean boolean41 = signature38.equals((java.lang.Object) wildcardClass40);
        java.lang.String str42 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        boolean boolean46 = classInfo15.equals((java.lang.Object) wildcardClass40);
        boolean boolean47 = signature2.equals((java.lang.Object) wildcardClass40);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type48 = signature2.getReturnType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str42, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str44, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        int int9 = classInfo4.getModifiers();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("(Z)C", method11, method12);
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor13.setValue("org/mockito/asm/Type", (java.lang.Object) signature17);
        java.lang.String str19 = propertyDescriptor13.getDisplayName();
        propertyDescriptor13.setHidden(false);
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str26 = signature25.getName();
        propertyDescriptor13.setValue("F", (java.lang.Object) str26);
        boolean boolean28 = propertyDescriptor13.isExpert();
        boolean boolean29 = classInfo4.equals((java.lang.Object) boolean28);
        int int30 = classInfo4.getModifiers();
        org.mockito.asm.Type type31 = classInfo4.getSuperType();
        java.lang.String str32 = classInfo4.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Ljava/lang/Object;" + "'", str26, "Ljava/lang/Object;");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.mockito.asm.Type" + "'", str32, "org.mockito.asm.Type");
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray16, true, true);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray16);
        java.lang.Class[] classArray21 = new java.lang.Class[] {};
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass25 = type24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray26, true, true);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray30);
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass34 = type33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass34);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, false);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray40);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass1, classArray20, (java.lang.Object[]) methodArray40);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.IndexedPropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org/mockito/asm/Type" + "'", str36, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(Z)C; hidden]");
        propertyDescriptor3.setValue("()D", (java.lang.Object) "java.beans.PropertyDescriptor[name=(Z)C; hidden]");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int12 = type11.getSize();
        int int13 = type11.getSort();
        int int15 = type11.getOpcode(128);
        int int16 = type11.getSize();
        java.beans.PropertyEditor propertyEditor17 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int16);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]");
        boolean boolean20 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 131 + "'", int15 == 131);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNull(propertyEditor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        boolean boolean18 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setHidden(false);
        java.lang.String str23 = propertyDescriptor3.getName();
        boolean boolean24 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str17, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str23, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        java.lang.String str18 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(Z)C" + "'", str17, "(Z)C");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(Z)C" + "'", str18, "(Z)C");
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("org.mockito.cglib.core.ReflectUtils$4");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj15 = propertyDescriptor3.getValue("()D");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        propertyDescriptor3.setShortDescription("J");
        java.lang.Object obj21 = propertyDescriptor3.getValue("Ljava/lang/Object;()D");
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(method22);
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 0);
        int int5 = type1.getOpcode(100);
        int int6 = type1.getSize();
        int int8 = type1.getOpcode(4);
        int int10 = type1.getOpcode(9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type17 = classInfo16.getSuperType();
        org.mockito.asm.Type[] typeArray18 = classInfo16.getInterfaces();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("Ljava.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; hidden; values={org/mockito/asm/Type=char}];", type1, typeArray18);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(typeArray18);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        boolean boolean7 = classInfo5.equals((java.lang.Object) "boolean");
        org.mockito.asm.Type type8 = classInfo5.getSuperType();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("(Z)C", method10, method11);
        propertyDescriptor12.setBound(true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor12.getPropertyType();
        boolean boolean16 = classInfo5.equals((java.lang.Object) wildcardClass15);
        org.mockito.asm.Type type17 = classInfo5.getSuperType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] {};
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray21);
        java.lang.String str23 = type19.toString();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass25 = type24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type[] typeArray30 = classInfo29.getInterfaces();
        java.lang.String str31 = classInfo29.toString();
        org.mockito.asm.Type[] typeArray32 = classInfo29.getInterfaces();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("B", type19, typeArray32);
        org.mockito.asm.Type[] typeArray34 = signature33.getArgumentTypes();
        org.mockito.asm.Type[] typeArray35 = signature33.getArgumentTypes();
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("org.mockito.asm.Type", type17, typeArray35);
        org.mockito.asm.Type[] typeArray37 = signature36.getArgumentTypes();
        java.lang.String str38 = signature36.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()D" + "'", str22, "()D");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "D" + "'", str23, "D");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/Type" + "'", str27, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.mockito.asm.Type" + "'", str31, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.mockito.asm.Type()Ljava/lang/Object;" + "'", str38, "org.mockito.asm.Type()Ljava/lang/Object;");
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj15 = propertyDescriptor3.getValue("()D");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        propertyDescriptor3.setName("C");
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setReadMethod(method22);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=boolean; bound]()Lorg/mockito/asm/Type;");
        boolean boolean26 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("(Z)Lrg/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(0);
        int int4 = type1.getSort();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type[] typeArray11 = classInfo10.getInterfaces();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("", type1, typeArray11);
        int int13 = type1.getSort();
        java.lang.String str14 = type1.getDescriptor();
        java.lang.String str15 = type1.toString();
        int int16 = type1.getSort();
        java.lang.String str17 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "C" + "'", str14, "C");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C" + "'", str15, "C");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "char" + "'", str17, "char");
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type6 = classInfo5.getSuperType();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type type8 = classInfo5.getSuperType();
        int int9 = classInfo5.getModifiers();
        org.mockito.asm.Type[] typeArray10 = classInfo5.getInterfaces();
        org.mockito.asm.Type type11 = classInfo5.getType();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type[] typeArray17 = classInfo16.getInterfaces();
        org.mockito.asm.Type type18 = classInfo16.getSuperType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type24 = classInfo23.getSuperType();
        org.mockito.asm.Type type25 = classInfo23.getSuperType();
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type[] typeArray30 = classInfo29.getInterfaces();
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("boolean", type18, typeArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptorLorg/mockito/cglib/core/Signature;()D", type11, typeArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptorLorg/mockito/cglib/core/Signature;()D' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/Type" + "'", str22, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(typeArray30);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "hi!");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("org/mockito/asm/TypeLorg/mockito/asm/Type;", method4, method5);
        propertyDescriptor6.setDisplayName("java.beans.PropertyDescriptor[name=boolean; bound]");
        propertyDescriptor6.setBound(false);
        boolean boolean11 = signature2.equals((java.lang.Object) propertyDescriptor6);
        java.lang.String str12 = signature2.getDescriptor();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(Z)Lchar;");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Z)Lchar" + "'", str3, "Z)Lchar");
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("g/mockito/asm/Type");
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strEnumeration15);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()D", method1, method2);
        propertyDescriptor3.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str18 = type17.toString();
        boolean boolean19 = classInfo8.equals((java.lang.Object) type17);
        java.lang.String str20 = type17.getDescriptor();
        java.lang.String str21 = type17.getDescriptor();
        org.junit.Assert.assertNotNull(strEnumeration6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str18, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setDisplayName("J");
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setWriteMethod(method21);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setWriteMethod(method7);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strEnumeration11);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(Z)C; displayName=java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]; shortDescription=D; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj15 = propertyDescriptor3.getValue("()D");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setReadMethod(method18);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=D; expert; bound]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]; displayName=()Lg/mockito/asm/Type;]");
        propertyDescriptor3.setConstrained(false);
        boolean boolean27 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Object obj7 = propertyDescriptor3.getValue("(Z)C");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray20);
        boolean boolean22 = type12.equals((java.lang.Object) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor24 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass7, classArray21);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Byte, java.lang.Short, java.lang.Character, java.lang.Integer, java.lang.Float)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classArray23);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        int int11 = type9.getOpcode(0);
        int int12 = type9.getSort();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type[] typeArray19 = classInfo18.getInterfaces();
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("", type9, typeArray19);
        java.lang.String str21 = signature20.getName();
        java.lang.String str22 = signature20.getName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type28 = classInfo27.getSuperType();
        org.mockito.asm.Type type29 = classInfo27.getSuperType();
        org.mockito.asm.Type[] typeArray30 = classInfo27.getInterfaces();
        org.mockito.asm.Type[] typeArray31 = classInfo27.getInterfaces();
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray34);
        boolean boolean36 = signature20.equals((java.lang.Object) classArray35);
        java.lang.String str37 = signature20.toString();
        java.lang.String str38 = signature20.getName();
        java.lang.Class[] classArray39 = new java.lang.Class[] {};
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        java.lang.reflect.Method[] methodArray41 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray41);
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass46 = type45.getClass();
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass46);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray52);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray40);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray55);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray57);
        boolean boolean59 = signature20.equals((java.lang.Object) classArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass61 = type60.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type65 = classInfo64.getSuperType();
        org.mockito.asm.Type type66 = classInfo64.getSuperType();
        java.lang.Class<?> wildcardClass67 = type66.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.cglib.core.ClassInfo classInfo71 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass67);
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass1, classArray58, (java.lang.Object[]) propertyDescriptorArray72);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()C" + "'", str37, "()C");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str47, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org/mockito/asm/Type" + "'", str63, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(classInfo71);
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) -1 };
        java.lang.ClassLoader classLoader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class5 = org.mockito.cglib.core.ReflectUtils.defineClass("org.mockito.asm.Type[]java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]", byteArray3, classLoader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1]");
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; propertyEditorClass=class org.mockito.asm.Type]");
        java.lang.String str19 = propertyDescriptor3.getName();
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strEnumeration16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.reflect.Method method14 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj16 = propertyDescriptor3.getValue("double()Lorg/mockito/asm/Type;");
        propertyDescriptor3.setConstrained(true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        propertyDescriptor3.setValue("L()Lrg/mockito/asm/TypeLorg/mockito/asm/Type;;", (java.lang.Object) type24);
        java.lang.reflect.Method method26 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNotNull(strEnumeration27);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.util.List list4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list5 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass1, list4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        boolean boolean8 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("Jjava.beans.PropertyDescriptor[name=[Lorg/mockito/asm/Type;; shortDescription=Lchar;; bound]", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method4 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type[] typeArray7 = classInfo6.getInterfaces();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        boolean boolean11 = classInfo6.equals((java.lang.Object) wildcardClass9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        int int14 = type12.getOpcode(2);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type[] typeArray25 = classInfo24.getInterfaces();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("java.lang.Object", type12, typeArray25);
        int int27 = type12.getSize();
        org.mockito.asm.Type type28 = type12.getElementType();
        org.mockito.asm.Type type29 = type12.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/Type" + "'", str22, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) -1, (byte) -1, (byte) 100, (byte) -1, (byte) -1 };
        java.lang.ClassLoader classLoader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class9 = org.mockito.cglib.core.ReflectUtils.defineClass("Lchar;", byteArray7, classLoader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, -1, -1, 100, -1, -1]");
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("(Z)C", method7, method8);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor9.attributeNames();
        boolean boolean11 = propertyDescriptor9.isPreferred();
        java.lang.String str12 = propertyDescriptor9.getName();
        boolean boolean13 = propertyDescriptor9.isExpert();
        propertyDescriptor9.setBound(true);
        java.lang.reflect.Method method16 = null;
        propertyDescriptor9.setWriteMethod(method16);
        propertyDescriptor9.setHidden(true);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) true);
        java.lang.String str21 = propertyDescriptor3.getName();
        java.lang.reflect.Method method22 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; hidden]");
        propertyDescriptor3.setDisplayName("Ljava/lang/Object;");
        boolean boolean27 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(Z)C" + "'", str21, "(Z)C");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strEnumeration9);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava/lang/Object;", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        boolean boolean5 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.Object obj14 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setExpert(true);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        int int19 = type18.getDimensions();
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type18);
        int int21 = type18.getSize();
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()C");
        org.mockito.asm.Type[] typeArray25 = signature24.getArgumentTypes();
        org.mockito.asm.Type[] typeArray26 = signature24.getArgumentTypes();
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray26);
        int int28 = type18.getDimensions();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "()Lava.beans.PropertyDescriptor[name=(Z)C;" + "'", str27, "()Lava.beans.PropertyDescriptor[name=(Z)C;");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]; expert]");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(classInfo12);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        boolean boolean3 = type0.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, false, true);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "D" + "'", str1, "D");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray17);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("long");
        boolean boolean18 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        org.mockito.asm.Type type27 = classInfo26.getType();
        int int28 = classInfo26.getModifiers();
        org.mockito.asm.Type type29 = classInfo26.getSuperType();
        org.mockito.asm.Type type30 = classInfo26.getType();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str2 = type1.getClassName();
        int int3 = type1.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("D");
        int int6 = type5.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 0);
        int int11 = type7.getOpcode(100);
        int int12 = type7.getSize();
        int int14 = type7.getOpcode(4);
        int int16 = type7.getOpcode((int) ' ');
        org.mockito.asm.Type type17 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str18 = type17.getDescriptor();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] {};
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray19);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray19);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        org.mockito.asm.Type[] typeArray29 = signature28.getArgumentTypes();
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("mockito/asm/Type", type25, typeArray29);
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("", type1, typeArray29);
        java.lang.String str32 = signature31.getName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass34 = type33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass34);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass34);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass34);
        boolean boolean41 = signature31.equals((java.lang.Object) propertyDescriptorArray40);
        java.lang.String str42 = signature31.getName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "char" + "'", str2, "char");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "D" + "'", str18, "D");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "()D" + "'", str20, "()D");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "()Z" + "'", str21, "()Z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()D" + "'", str22, "()D");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()C" + "'", str23, "()C");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org/mockito/asm/Type" + "'", str36, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str38, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str39, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray5 = classInfo4.getInterfaces();
        boolean boolean7 = classInfo4.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("char");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass2);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.toString();
        java.lang.String str6 = signature2.getName();
        java.lang.String str7 = signature2.toString();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("(Z)C", method9, method10);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor11.setValue("org/mockito/asm/Type", (java.lang.Object) signature15);
        java.lang.String str17 = propertyDescriptor11.getDisplayName();
        propertyDescriptor11.setHidden(false);
        propertyDescriptor11.setHidden(false);
        java.lang.Object obj23 = propertyDescriptor11.getValue("()D");
        propertyDescriptor11.setName("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        propertyDescriptor11.setShortDescription("J");
        java.lang.Object obj29 = propertyDescriptor11.getValue("Ljava/lang/Object;()D");
        boolean boolean30 = propertyDescriptor11.isExpert();
        boolean boolean31 = signature2.equals((java.lang.Object) propertyDescriptor11);
        boolean boolean32 = propertyDescriptor11.isConstrained();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ljava/lang/Object;" + "'", str3, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ljava/lang/Object;" + "'", str4, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ljava/lang/Object;()D" + "'", str5, "Ljava/lang/Object;()D");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/lang/Object;" + "'", str6, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/lang/Object;()D" + "'", str7, "Ljava/lang/Object;()D");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(Z)C" + "'", str17, "(Z)C");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.beans.PropertyEditor propertyEditor8 = propertyDescriptor3.createPropertyEditor((java.lang.Object) 104);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setShortDescription("()L)Lchar;");
        boolean boolean14 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(propertyEditor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10 };
        java.lang.ClassLoader classLoader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class5 = org.mockito.cglib.core.ReflectUtils.defineClass("Ljava.lang.Object;", byteArray3, classLoader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10]");
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(0);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        java.lang.String[] strArray0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("(Z)C", method2, method3);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor4.setValue("org/mockito/asm/Type", (java.lang.Object) signature8);
        java.lang.String str10 = propertyDescriptor4.getDisplayName();
        propertyDescriptor4.setHidden(false);
        propertyDescriptor4.setHidden(false);
        propertyDescriptor4.setName("org/mockito/asm/Type");
        propertyDescriptor4.setDisplayName("long");
        boolean boolean19 = propertyDescriptor4.isPreferred();
        propertyDescriptor4.setName("org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyEditor propertyEditor24 = propertyDescriptor4.createPropertyEditor((java.lang.Object) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray27, false, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(Z)C" + "'", str10, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNull(propertyEditor24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str26, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(methodArray30);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type[] typeArray17 = classInfo16.getInterfaces();
        boolean boolean19 = classInfo16.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        propertyDescriptor3.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo16);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("(Z)C", method24, method25);
        propertyDescriptor26.setBound(true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        java.lang.Object obj31 = propertyDescriptor26.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method32 = null;
        propertyDescriptor26.setWriteMethod(method32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass36 = type35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type[] typeArray40 = classInfo39.getInterfaces();
        boolean boolean42 = classInfo39.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray43 = classInfo39.getInterfaces();
        org.mockito.asm.Type type44 = classInfo39.getSuperType();
        propertyDescriptor26.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo39);
        boolean boolean46 = classInfo16.equals((java.lang.Object) propertyDescriptor26);
        propertyDescriptor26.setExpert(false);
        propertyDescriptor26.setExpert(true);
        propertyDescriptor26.setDisplayName("Lrg/mockito/asm/TypeLorg/mockito/asm/Type;");
        java.util.Enumeration<java.lang.String> strEnumeration53 = propertyDescriptor26.attributeNames();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/Type" + "'", str38, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strEnumeration53);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Lava.beans.PropertyDescriptor[name=(Z)C;");
        int int2 = type1.getSort();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) -1, (byte) 100, (byte) -1 };
        java.lang.ClassLoader classLoader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class8 = org.mockito.cglib.core.ReflectUtils.defineClass("S", byteArray6, classLoader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, -1, 100, -1]");
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(Z)C; displayName=java.beans.PropertyDescriptor[name=(Z)C; shortDescription=D; expert; bound]; bound; propertyEditorClass=class org.mockito.asm.Type]", "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]; shortDescription=J; values={org/mockito/asm/Type=char}]; shortDescription=Z; bound]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(Z)C; displayName=java.beans.PropertyDescriptor[name=(Z)C; shortDescription=D; expert; bound]; bound; propertyEditorClass=class org.mockito.asm.Type]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 1, (byte) 1, (byte) 0 };
        java.lang.ClassLoader classLoader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class7 = org.mockito.cglib.core.ReflectUtils.defineClass("J", byteArray5, classLoader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 1, 1, 0]");
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        boolean boolean15 = propertyDescriptor3.isHidden();
        java.lang.String str16 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; values={org/mockito/asm/Type=char}]");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Lorg/mockito/asm/Type;; values={()Lg/mockito/asm/Type;=org.mockito.asm.Type}; bound]");
        java.lang.String str21 = propertyDescriptor3.getName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(Z)C" + "'", str16, "(Z)C");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(Z)C" + "'", str21, "(Z)C");
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = type6.getElementType();
        int int8 = type7.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        int int12 = type10.getOpcode(0);
        int int13 = type10.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type[] typeArray20 = classInfo19.getInterfaces();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("", type10, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray20);
        int int24 = type7.getOpcode(112);
        java.lang.String str25 = type7.getInternalName();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("", "");
        java.lang.String str29 = signature28.getDescriptor();
        boolean boolean30 = type7.equals((java.lang.Object) signature28);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("(Z)C", method32, method33);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor34.setValue("org/mockito/asm/Type", (java.lang.Object) signature38);
        java.lang.String str40 = propertyDescriptor34.getDisplayName();
        propertyDescriptor34.setHidden(false);
        propertyDescriptor34.setHidden(false);
        propertyDescriptor34.setName("org/mockito/asm/Type");
        boolean boolean47 = signature28.equals((java.lang.Object) propertyDescriptor34);
        boolean boolean48 = propertyDescriptor34.isExpert();
        java.lang.String str49 = propertyDescriptor34.getDisplayName();
        java.lang.String str50 = propertyDescriptor34.getShortDescription();
        boolean boolean51 = propertyDescriptor34.isConstrained();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str22, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 116 + "'", int24 == 116);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "g/mockito/asm/Type" + "'", str25, "g/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Z)C" + "'", str40, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org/mockito/asm/Type" + "'", str49, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/Type" + "'", str50, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(Z)C; values={java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]=java/beans/PropertyDescriptor}]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("C");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("char");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        boolean boolean8 = type1.equals((java.lang.Object) wildcardClass3);
        int int9 = type1.getDimensions();
        java.lang.String str10 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "char" + "'", str10, "char");
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.lang.Object obj14 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        boolean boolean15 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        boolean boolean22 = signature19.equals((java.lang.Object) wildcardClass21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type24 = type23.getElementType();
        int int25 = type24.getSort();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        int int29 = type27.getOpcode(0);
        int int30 = type27.getSort();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass32 = type31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass32);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type[] typeArray37 = classInfo36.getInterfaces();
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("", type27, typeArray37);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray37);
        int int41 = type24.getOpcode(112);
        java.lang.String str42 = type24.getInternalName();
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("", "");
        java.lang.String str46 = signature45.getDescriptor();
        boolean boolean47 = type24.equals((java.lang.Object) signature45);
        java.beans.PropertyEditor propertyEditor48 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean47);
        boolean boolean49 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration50 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(false);
        org.mockito.cglib.core.Signature signature55 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str56 = signature55.getName();
        java.lang.String str57 = signature55.getDescriptor();
        org.mockito.asm.Type type58 = signature55.getReturnType();
        java.lang.String str59 = signature55.getName();
        java.lang.String str60 = signature55.getDescriptor();
        org.mockito.asm.Type type61 = signature55.getReturnType();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("(Z)C", method63, method64);
        propertyDescriptor65.setBound(true);
        java.lang.Class<?> wildcardClass68 = propertyDescriptor65.getPropertyType();
        boolean boolean69 = propertyDescriptor65.isExpert();
        propertyDescriptor65.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method73 = null;
        propertyDescriptor65.setWriteMethod(method73);
        java.lang.Object obj76 = propertyDescriptor65.getValue("");
        java.util.Enumeration<java.lang.String> strEnumeration77 = propertyDescriptor65.attributeNames();
        boolean boolean78 = type61.equals((java.lang.Object) propertyDescriptor65);
        propertyDescriptor65.setShortDescription("");
        boolean boolean81 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor65);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/Type" + "'", str34, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str39, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 116 + "'", int41 == 116);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g/mockito/asm/Type" + "'", str42, "g/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(propertyEditor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strEnumeration50);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/Type" + "'", str59, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str60, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(strEnumeration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(Z)C; displayName=Z; shortDescription=java/beans/PropertyDescriptor; preferred; bound]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()Lava.beans.PropertyDescriptor[name=(Z)C;");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("(Z)C", method3, method4);
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor5.attributeNames();
        boolean boolean7 = propertyDescriptor5.isPreferred();
        java.lang.String str8 = propertyDescriptor5.getName();
        boolean boolean9 = propertyDescriptor5.isExpert();
        propertyDescriptor5.setBound(true);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor5.setWriteMethod(method12);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor5.getPropertyEditorClass();
        propertyDescriptor5.setExpert(false);
        boolean boolean17 = propertyDescriptor5.isExpert();
        propertyDescriptor5.setHidden(false);
        boolean boolean20 = type1.equals((java.lang.Object) false);
        java.lang.String str21 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(strEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(Z)C" + "'", str8, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ava.beans.PropertyDescriptor[name=(Z)C" + "'", str21, "ava.beans.PropertyDescriptor[name=(Z)C");
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("()Lva.beans.PropertyDescriptor[name=(Z)C;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(Z)C; displayName=java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]; shortDescription=D; bound]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        boolean boolean18 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method19 = propertyDescriptor3.getReadMethod();
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str23 = signature22.getName();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("(Z)C", method25, method26);
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor27.setValue("org/mockito/asm/Type", (java.lang.Object) signature31);
        java.lang.String str33 = propertyDescriptor27.getDisplayName();
        propertyDescriptor27.setHidden(false);
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str40 = signature39.getName();
        propertyDescriptor27.setValue("F", (java.lang.Object) str40);
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("double", "");
        java.lang.String str46 = signature45.toString();
        propertyDescriptor27.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) signature45);
        java.util.Enumeration<java.lang.String> strEnumeration48 = propertyDescriptor27.attributeNames();
        boolean boolean49 = signature22.equals((java.lang.Object) propertyDescriptor27);
        java.lang.reflect.Method method50 = propertyDescriptor27.getWriteMethod();
        java.beans.PropertyEditor propertyEditor51 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor27);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("ava.beans.PropertyDescriptor[name=boolean");
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type60 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass61 = type60.getClass();
        boolean boolean62 = signature59.equals((java.lang.Object) wildcardClass61);
        boolean boolean63 = type56.equals((java.lang.Object) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        int int68 = type67.getSort();
        int int69 = type67.getSort();
        java.lang.String str70 = type67.getClassName();
        java.beans.PropertyEditor propertyEditor71 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type67);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str17, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Ljava/lang/Object;" + "'", str23, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(Z)C" + "'", str33, "(Z)C");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Ljava/lang/Object;" + "'", str40, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "double" + "'", str46, "double");
        org.junit.Assert.assertNotNull(strEnumeration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(method50);
        org.junit.Assert.assertNull(propertyEditor51);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/Type" + "'", str66, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.Type" + "'", str70, "org.mockito.asm.Type");
        org.junit.Assert.assertNull(propertyEditor71);
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("boolean");
        boolean boolean9 = propertyDescriptor3.isExpert();
        boolean boolean10 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj13 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=C; values={org/mockito/asm/Type=char; ()D=1}]");
        propertyDescriptor3.setShortDescription("()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.Type[] typeArray6 = new org.mockito.asm.Type[] {};
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray6);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("double", type3, typeArray6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type[] typeArray15 = classInfo14.getInterfaces();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str17 = type16.getDescriptor();
        boolean boolean18 = classInfo14.equals((java.lang.Object) type16);
        boolean boolean19 = type3.equals((java.lang.Object) classInfo14);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type25 = classInfo24.getSuperType();
        org.mockito.asm.Type type26 = classInfo24.getSuperType();
        org.mockito.asm.Type[] typeArray27 = classInfo24.getInterfaces();
        org.mockito.asm.Type[] typeArray28 = classInfo24.getInterfaces();
        org.mockito.asm.Type type29 = classInfo24.getType();
        java.lang.String str30 = classInfo24.toString();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("(Z)C", method32, method33);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor34.setValue("org/mockito/asm/Type", (java.lang.Object) signature38);
        java.lang.String str40 = propertyDescriptor34.getDisplayName();
        boolean boolean41 = propertyDescriptor34.isHidden();
        propertyDescriptor34.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor34.setConstrained(true);
        boolean boolean46 = classInfo24.equals((java.lang.Object) propertyDescriptor34);
        org.mockito.asm.Type[] typeArray47 = classInfo24.getInterfaces();
        boolean boolean48 = classInfo14.equals((java.lang.Object) classInfo24);
        org.mockito.asm.Type type49 = classInfo24.getSuperType();
        int int50 = type49.getSort();
        org.mockito.asm.Type type51 = type49.getElementType();
        int int52 = type49.getSort();
        int int53 = type49.getSize();
        java.lang.String str54 = type49.toString();
        java.lang.String str55 = type49.getClassName();
        java.lang.String str56 = type49.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "D" + "'", str5, "D");
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "()D" + "'", str7, "()D");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "D" + "'", str17, "D");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/Type" + "'", str23, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Z)C" + "'", str40, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Ljava/lang/Object;" + "'", str54, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.lang.Object" + "'", str55, "java.lang.Object");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/lang/Object" + "'", str56, "java/lang/Object");
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lchar;org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava.beans.PropertyDescriptor[name=(Z)C; hidden];", "ava.beans.PropertyDescriptor[name=[Lorg.mockito.asm.Type");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'Ljava.beans.PropertyDescriptor[name=(Z)C; hidden];' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(Z)C; values={org.mockito.asm.Type=char; ()D=1}]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass16);
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        boolean boolean20 = propertyDescriptor3.isPreferred();
        java.lang.String str21 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method23 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method24 = null;
        propertyDescriptor3.setReadMethod(method24);
        java.lang.String str26 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(Z)C" + "'", str21, "(Z)C");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; bound]" + "'", str26, "java.beans.PropertyDescriptor[name=(Z)C; bound]");
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.util.List list12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list13 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass7, list12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(classInfo11);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        int int9 = classInfo5.getModifiers();
        int int10 = classInfo5.getModifiers();
        java.lang.String str11 = classInfo5.toString();
        org.mockito.asm.Type type12 = classInfo5.getType();
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("()Z");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray14);
        java.lang.Class<?> wildcardClass16 = type12.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("(Z)C", method19, method20);
        propertyDescriptor21.setBound(true);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor21.getPropertyType();
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor21.createPropertyEditor((java.lang.Object) 104);
        java.lang.String str27 = propertyDescriptor21.getShortDescription();
        propertyDescriptor21.setDisplayName("Z");
        propertyDescriptor21.setPreferred(false);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        java.beans.PropertyEditor propertyEditor37 = propertyDescriptor21.createPropertyEditor((java.lang.Object) propertyDescriptorArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass40 = type39.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass40);
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray41, true, true);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray41);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray45);
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass16, classArray38, (java.lang.Object[]) classArray46);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.IndexedPropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str15, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str17, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(Z)C" + "'", str27, "(Z)C");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNull(propertyEditor37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray48);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; hidden]]", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; hidden]]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; bound]", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setReadMethod(method5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = classInfo11.getSuperType();
        org.mockito.asm.Type type13 = classInfo11.getSuperType();
        org.mockito.asm.Type[] typeArray14 = classInfo11.getInterfaces();
        org.mockito.asm.Type[] typeArray15 = classInfo11.getInterfaces();
        org.mockito.asm.Type type16 = classInfo11.getType();
        java.lang.String str17 = classInfo11.toString();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("(Z)C", method19, method20);
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor21.setValue("org/mockito/asm/Type", (java.lang.Object) signature25);
        java.lang.String str27 = propertyDescriptor21.getDisplayName();
        boolean boolean28 = propertyDescriptor21.isHidden();
        propertyDescriptor21.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor21.setConstrained(true);
        boolean boolean33 = classInfo11.equals((java.lang.Object) propertyDescriptor21);
        java.lang.Object obj35 = propertyDescriptor21.getValue("java.beans.PropertyDescriptor[name=(Z)C; bound]");
        boolean boolean36 = propertyDescriptor21.isPreferred();
        java.lang.String str37 = propertyDescriptor21.getName();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("(Z)C", method40, method41);
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor42.setValue("org/mockito/asm/Type", (java.lang.Object) signature46);
        java.lang.String str48 = propertyDescriptor42.getDisplayName();
        propertyDescriptor42.setHidden(false);
        propertyDescriptor42.setHidden(false);
        propertyDescriptor42.setName("org/mockito/asm/Type");
        propertyDescriptor42.setDisplayName("long");
        boolean boolean57 = propertyDescriptor42.isPreferred();
        propertyDescriptor42.setName("org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass61 = type60.getClass();
        java.beans.PropertyEditor propertyEditor62 = propertyDescriptor42.createPropertyEditor((java.lang.Object) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.lang.String str64 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        java.lang.String str65 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        propertyDescriptor21.setValue("C", (java.lang.Object) wildcardClass61);
        java.lang.String str67 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        boolean boolean68 = propertyDescriptor3.equals((java.lang.Object) wildcardClass61);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.mockito.asm.Type" + "'", str17, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(Z)C" + "'", str27, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(Z)C" + "'", str37, "(Z)C");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Z)C" + "'", str48, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNull(propertyEditor62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org/mockito/asm/Type" + "'", str64, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str65, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str67, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        int int23 = type21.getOpcode(0);
        int int24 = type21.getSort();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type[] typeArray31 = classInfo30.getInterfaces();
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("", type21, typeArray31);
        java.lang.String str33 = signature32.getName();
        java.lang.String str34 = signature32.getName();
        org.mockito.asm.Type[] typeArray35 = signature32.getArgumentTypes();
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("boolean", type18, typeArray35);
        org.mockito.asm.Type type37 = signature36.getReturnType();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("(Z)C", method39, method40);
        java.util.Enumeration<java.lang.String> strEnumeration42 = propertyDescriptor41.attributeNames();
        boolean boolean43 = propertyDescriptor41.isPreferred();
        java.lang.String str44 = propertyDescriptor41.getName();
        boolean boolean45 = propertyDescriptor41.isExpert();
        propertyDescriptor41.setBound(true);
        propertyDescriptor41.setPreferred(true);
        java.lang.String str50 = propertyDescriptor41.getDisplayName();
        java.lang.reflect.Method method51 = null;
        propertyDescriptor41.setReadMethod(method51);
        propertyDescriptor41.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str55 = propertyDescriptor41.getDisplayName();
        boolean boolean56 = propertyDescriptor41.isExpert();
        propertyDescriptor41.setExpert(true);
        propertyDescriptor41.setHidden(false);
        java.lang.String str61 = propertyDescriptor41.getName();
        propertyDescriptor41.setDisplayName("C");
        propertyDescriptor41.setPreferred(false);
        java.lang.Class<?> wildcardClass66 = propertyDescriptor41.getPropertyType();
        boolean boolean67 = signature36.equals((java.lang.Object) propertyDescriptor41);
        java.beans.PropertyEditor propertyEditor68 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature36);
        java.lang.Class<?> wildcardClass69 = signature36.getClass();
        java.util.List list70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list71 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass69, list70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "short" + "'", str19, "short");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/asm/Type" + "'", str28, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(strEnumeration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(Z)C" + "'", str44, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Z)C" + "'", str50, "(Z)C");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str55, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str61, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(propertyEditor68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("long");
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "long" + "'", str18, "long");
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, false, true);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer17 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray11, (java.lang.Class) wildcardClass13);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.String str12 = type10.toString();
        int int13 = type10.getSort();
        java.lang.String str14 = type10.getClassName();
        int int15 = type10.getSize();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.mockito.asm.Type" + "'", str14, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray5 = classInfo4.getInterfaces();
        boolean boolean7 = classInfo4.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        org.mockito.asm.Type type10 = classInfo4.getType();
        int int11 = classInfo4.getModifiers();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type17 = classInfo16.getSuperType();
        org.mockito.asm.Type type18 = classInfo16.getSuperType();
        org.mockito.asm.Type[] typeArray19 = classInfo16.getInterfaces();
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        boolean boolean24 = classInfo4.equals((java.lang.Object) wildcardClass21);
        int int25 = classInfo4.getModifiers();
        java.lang.String str26 = classInfo4.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.Type" + "'", str26, "org.mockito.asm.Type");
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = signature3.equals((java.lang.Object) wildcardClass5);
        java.lang.String str7 = signature3.getName();
        boolean boolean8 = type0.equals((java.lang.Object) str7);
        java.lang.String str9 = type0.getDescriptor();
        int int11 = type0.getOpcode((int) (byte) 0);
        java.lang.Class<?> wildcardClass12 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        java.lang.Object obj14 = null;
        boolean boolean15 = classInfo13.equals(obj14);
        int int16 = classInfo13.getModifiers();
        int int17 = classInfo13.getModifiers();
        org.mockito.asm.Type type18 = classInfo13.getSuperType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "F" + "'", str9, "F");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type18);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyType();
        java.lang.String str17 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(Z)C" + "'", str17, "(Z)C");
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = signature2.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.Signature is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str9, "org/mockito/cglib/core/Signature");
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type6 = classInfo5.getSuperType();
        java.lang.String str7 = classInfo5.toString();
        int int8 = classInfo5.getModifiers();
        org.mockito.asm.Type type9 = classInfo5.getSuperType();
        org.mockito.asm.Type[] typeArray10 = classInfo5.getInterfaces();
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(classArray11);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("org/mockito/cglib/core/SignatureLorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.util.List list4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list5 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass1, list4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        int int9 = classInfo4.getModifiers();
        java.lang.String str10 = classInfo4.toString();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("(Z)C", method12, method13);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor14.setValue("org/mockito/asm/Type", (java.lang.Object) signature18);
        java.lang.String str20 = propertyDescriptor14.getDisplayName();
        propertyDescriptor14.setHidden(false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass25 = type24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type[] typeArray30 = classInfo29.getInterfaces();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str32 = type31.getDescriptor();
        boolean boolean33 = classInfo29.equals((java.lang.Object) type31);
        propertyDescriptor14.setValue("()Z", (java.lang.Object) type31);
        java.lang.reflect.Method method35 = propertyDescriptor14.getWriteMethod();
        propertyDescriptor14.setPreferred(true);
        java.lang.reflect.Method method38 = null;
        propertyDescriptor14.setReadMethod(method38);
        java.lang.Object obj41 = propertyDescriptor14.getValue("F");
        boolean boolean42 = classInfo4.equals((java.lang.Object) propertyDescriptor14);
        boolean boolean43 = propertyDescriptor14.isHidden();
        java.lang.String str44 = propertyDescriptor14.getName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(Z)C" + "'", str20, "(Z)C");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/Type" + "'", str27, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "D" + "'", str32, "D");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(method35);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(Z)C" + "'", str44, "(Z)C");
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        boolean boolean3 = type0.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list12 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "D" + "'", str1, "D");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setDisplayName("org/mockito/asm/Type");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSort();
        java.beans.PropertyEditor propertyEditor9 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int8);
        propertyDescriptor3.setBound(false);
        java.lang.String str12 = propertyDescriptor3.getName();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNull(propertyEditor9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        boolean boolean7 = signature2.equals((java.lang.Object) (short) 1);
        java.lang.String str8 = signature2.getDescriptor();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 0);
        int int13 = type9.getOpcode(100);
        int int14 = type9.getSize();
        int int16 = type9.getOpcode(4);
        int int18 = type9.getOpcode((int) ' ');
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] {};
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray21);
        java.lang.String str24 = type9.toString();
        boolean boolean25 = signature2.equals((java.lang.Object) str24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass27 = type26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        boolean boolean36 = signature2.equals((java.lang.Object) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type39 = classInfo38.getType();
        java.lang.Object obj40 = null;
        boolean boolean41 = classInfo38.equals(obj40);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()D" + "'", str22, "()D");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()Z" + "'", str23, "()Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/Type" + "'", str29, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str34, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str35, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        boolean boolean11 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("D");
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("(Z)C", method17, method18);
        java.util.Enumeration<java.lang.String> strEnumeration20 = propertyDescriptor19.attributeNames();
        boolean boolean21 = propertyDescriptor19.isPreferred();
        java.lang.String str22 = propertyDescriptor19.getName();
        boolean boolean23 = propertyDescriptor19.isExpert();
        propertyDescriptor19.setBound(true);
        propertyDescriptor19.setShortDescription("Z");
        boolean boolean28 = propertyDescriptor19.isHidden();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor19.getPropertyEditorClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str34 = type33.toString();
        java.beans.PropertyEditor propertyEditor35 = propertyDescriptor19.createPropertyEditor((java.lang.Object) type33);
        java.lang.reflect.Method method36 = null;
        propertyDescriptor19.setReadMethod(method36);
        java.util.Enumeration<java.lang.String> strEnumeration38 = propertyDescriptor19.attributeNames();
        java.beans.PropertyEditor propertyEditor39 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor19);
        boolean boolean40 = propertyDescriptor19.isExpert();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "D" + "'", str14, "D");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(Z)C" + "'", str22, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str32, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str34, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor35);
        org.junit.Assert.assertNotNull(strEnumeration38);
        org.junit.Assert.assertNull(propertyEditor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.Class[] classArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method7 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass1, "", classArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        boolean boolean13 = signature10.equals((java.lang.Object) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(Z)C; constrained]", (java.lang.Object) propertyDescriptorArray14);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.lang.Class[] classArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method24 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass20, "long", classArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: long");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        java.lang.reflect.Constructor constructor0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type6 = classInfo5.getSuperType();
        org.mockito.asm.Type type7 = classInfo5.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        org.mockito.asm.Type[] typeArray9 = classInfo5.getInterfaces();
        org.mockito.asm.Type type10 = classInfo5.getType();
        java.lang.String str11 = classInfo5.toString();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("(Z)C", method13, method14);
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor15.setValue("org/mockito/asm/Type", (java.lang.Object) signature19);
        java.lang.String str21 = propertyDescriptor15.getDisplayName();
        boolean boolean22 = propertyDescriptor15.isHidden();
        propertyDescriptor15.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor15.setConstrained(true);
        boolean boolean27 = classInfo5.equals((java.lang.Object) propertyDescriptor15);
        java.lang.Object obj29 = propertyDescriptor15.getValue("java.beans.PropertyDescriptor[name=(Z)C; bound]");
        boolean boolean30 = propertyDescriptor15.isPreferred();
        java.lang.reflect.Method method31 = propertyDescriptor15.getWriteMethod();
        java.lang.reflect.Method method32 = propertyDescriptor15.getReadMethod();
        propertyDescriptor15.setExpert(true);
        java.lang.Class<?> wildcardClass35 = propertyDescriptor15.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) methodArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(Z)C" + "'", str21, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(method31);
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java/beans/PropertyDescriptor" + "'", str36, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("java.lang.Object");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getPropertyType();
        boolean boolean25 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        boolean boolean13 = signature10.equals((java.lang.Object) wildcardClass12);
        java.lang.String str14 = signature10.toString();
        java.lang.String str15 = signature10.getName();
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature10);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("short");
        boolean boolean19 = signature10.equals((java.lang.Object) type18);
        java.lang.String str20 = type18.getClassName();
        java.lang.String str21 = type18.getClassName();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "short" + "'", str20, "short");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "short" + "'", str21, "short");
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type[] typeArray17 = classInfo16.getInterfaces();
        boolean boolean19 = classInfo16.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        propertyDescriptor3.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo16);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("(Z)C", method24, method25);
        propertyDescriptor26.setBound(true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        java.lang.Object obj31 = propertyDescriptor26.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method32 = null;
        propertyDescriptor26.setWriteMethod(method32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass36 = type35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type[] typeArray40 = classInfo39.getInterfaces();
        boolean boolean42 = classInfo39.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray43 = classInfo39.getInterfaces();
        org.mockito.asm.Type type44 = classInfo39.getSuperType();
        propertyDescriptor26.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo39);
        boolean boolean46 = classInfo16.equals((java.lang.Object) propertyDescriptor26);
        propertyDescriptor26.setShortDescription("g.mockito.asm.Type");
        propertyDescriptor26.setShortDescription("Lorg/mockito/asm/Type;");
        java.lang.String str51 = propertyDescriptor26.getName();
        propertyDescriptor26.setName("org.mockito.asm.Type");
        java.lang.reflect.Method method54 = null;
        propertyDescriptor26.setReadMethod(method54);
        propertyDescriptor26.setExpert(false);
        propertyDescriptor26.setShortDescription("()Lchar;");
        org.mockito.asm.Type type60 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass61 = type60.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray62, true, true);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray62);
        java.lang.String[] strArray67 = org.mockito.cglib.core.ReflectUtils.getNames(classArray66);
        boolean boolean68 = propertyDescriptor26.equals((java.lang.Object) strArray67);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/Type" + "'", str38, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(Z)C" + "'", str51, "(Z)C");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setHidden(true);
        boolean boolean7 = propertyDescriptor3.isExpert();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        boolean boolean14 = propertyDescriptor3.isPreferred();
        boolean boolean15 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSort();
        int int4 = type0.getOpcode(128);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray7 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray7);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray16 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray17);
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray6);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("(Z)C", method22, method23);
        propertyDescriptor24.setBound(true);
        boolean boolean27 = propertyDescriptor24.isExpert();
        propertyDescriptor24.setName("boolean");
        java.lang.Object obj31 = propertyDescriptor24.getValue("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass35 = type32.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass35);
        java.beans.PropertyEditor propertyEditor37 = propertyDescriptor24.createPropertyEditor((java.lang.Object) propertyDescriptorArray36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, false);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, false, true);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray47);
        boolean boolean49 = type0.equals((java.lang.Object) methodArray48);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 131 + "'", int4 == 131);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNull(propertyEditor37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lmockito/asm/Type;", "(Z)C");
        org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
        org.junit.Assert.assertNotNull(typeArray3);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("org.mockito.asm.Type");
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        propertyDescriptor3.setValue("", (java.lang.Object) wildcardClass16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method28 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str22, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str23, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str24, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(type26);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        propertyDescriptor3.setBound(true);
        java.lang.Object obj17 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(Z)C; displayName=org/mockito/asm/Type]");
        propertyDescriptor3.setName("J");
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("(Z)C", method24, method25);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor26.setValue("org/mockito/asm/Type", (java.lang.Object) signature30);
        boolean boolean32 = propertyDescriptor26.isPreferred();
        propertyDescriptor26.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=D; expert; bound]");
        propertyDescriptor26.setBound(false);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]", (java.lang.Object) false);
        java.lang.reflect.Method method38 = null;
        propertyDescriptor3.setWriteMethod(method38);
        java.lang.String str40 = propertyDescriptor3.getName();
        java.lang.String str41 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "J" + "'", str40, "J");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Z" + "'", str41, "Z");
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        boolean boolean12 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setName("Lava.beans.PropertyDescriptor[name=boolean;");
        boolean boolean17 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Object obj7 = propertyDescriptor3.getValue("(Z)C");
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("(Z)C", method9, method10);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor11.attributeNames();
        boolean boolean13 = propertyDescriptor11.isPreferred();
        java.lang.String str14 = propertyDescriptor11.getName();
        boolean boolean15 = propertyDescriptor11.isExpert();
        propertyDescriptor11.setBound(true);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor11.setWriteMethod(method18);
        propertyDescriptor11.setHidden(true);
        java.lang.String str22 = propertyDescriptor11.getShortDescription();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor11.getPropertyType();
        propertyDescriptor11.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; displayName=D; values={org/mockito/asm/Type=char}]");
        boolean boolean26 = propertyDescriptor11.isExpert();
        java.lang.reflect.Method method27 = null;
        propertyDescriptor11.setWriteMethod(method27);
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method27);
        java.lang.Object obj31 = propertyDescriptor3.getValue("Ljava.beans.PropertyDescriptor[name=(Z)C; shortDescription=D; expert; bound];");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=)Lchar]");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(Z)C" + "'", str14, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(Z)C" + "'", str22, "(Z)C");
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(propertyEditor29);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        java.lang.String str5 = signature2.getName();
        java.lang.String str6 = signature2.getName();
        java.lang.String str7 = signature2.toString();
        java.lang.String str8 = signature2.getDescriptor();
        java.lang.String str9 = signature2.getDescriptor();
        org.mockito.asm.Type type10 = signature2.getReturnType();
        java.lang.String str11 = signature2.toString();
        java.lang.String str12 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str3, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str7, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str11, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str12, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        boolean boolean3 = type0.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "D" + "'", str1, "D");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        boolean boolean7 = classInfo5.equals((java.lang.Object) "boolean");
        org.mockito.asm.Type type8 = classInfo5.getSuperType();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("(Z)C", method10, method11);
        propertyDescriptor12.setBound(true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor12.getPropertyType();
        boolean boolean16 = classInfo5.equals((java.lang.Object) wildcardClass15);
        org.mockito.asm.Type type17 = classInfo5.getSuperType();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] {};
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray21);
        java.lang.String str23 = type19.toString();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass25 = type24.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type[] typeArray30 = classInfo29.getInterfaces();
        java.lang.String str31 = classInfo29.toString();
        org.mockito.asm.Type[] typeArray32 = classInfo29.getInterfaces();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("B", type19, typeArray32);
        org.mockito.asm.Type[] typeArray34 = signature33.getArgumentTypes();
        org.mockito.asm.Type[] typeArray35 = signature33.getArgumentTypes();
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("org.mockito.asm.Type", type17, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass38 = type37.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass38);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass38);
        boolean boolean43 = classInfo41.equals((java.lang.Object) "boolean");
        org.mockito.asm.Type type44 = classInfo41.getSuperType();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("(Z)C", method46, method47);
        propertyDescriptor48.setBound(true);
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        boolean boolean52 = classInfo41.equals((java.lang.Object) wildcardClass51);
        org.mockito.asm.Type type53 = classInfo41.getSuperType();
        boolean boolean54 = signature36.equals((java.lang.Object) classInfo41);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        int int58 = type56.getOpcode(0);
        int int59 = type56.getSort();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass61 = type60.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo65 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type[] typeArray66 = classInfo65.getInterfaces();
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("", type56, typeArray66);
        java.lang.String str68 = signature67.getName();
        org.mockito.asm.Type[] typeArray69 = signature67.getArgumentTypes();
        java.lang.String str70 = signature67.getDescriptor();
        java.lang.String str71 = signature67.getName();
        org.mockito.asm.Type[] typeArray72 = signature67.getArgumentTypes();
        boolean boolean73 = classInfo41.equals((java.lang.Object) typeArray72);
        java.lang.String str74 = classInfo41.toString();
        int int75 = classInfo41.getModifiers();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()D" + "'", str22, "()D");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "D" + "'", str23, "D");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/Type" + "'", str27, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.mockito.asm.Type" + "'", str31, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/Type" + "'", str40, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org/mockito/asm/Type" + "'", str63, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(classInfo65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "()C" + "'", str70, "()C");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.mockito.asm.Type" + "'", str74, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str12 = signature11.getName();
        org.mockito.asm.Type[] typeArray13 = signature11.getArgumentTypes();
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray13);
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray13);
        int int17 = type8.getOpcode(35);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/lang/Object;" + "'", str12, "Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str15, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj15 = propertyDescriptor3.getValue("()D");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        propertyDescriptor3.setName("C");
        boolean boolean20 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        java.lang.String str23 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method26 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]" + "'", str23, "java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org/mockito/cglib/core/ReflectUtils$4");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("long");
        boolean boolean18 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass22);
        java.lang.String str24 = propertyDescriptor3.getDisplayName();
        java.lang.String str25 = propertyDescriptor3.getName();
        java.lang.reflect.Method method26 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj28 = propertyDescriptor3.getValue("java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "long" + "'", str24, "long");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str25, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj15 = propertyDescriptor3.getValue("()D");
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        propertyDescriptor3.setShortDescription("J");
        java.lang.Object obj21 = propertyDescriptor3.getValue("Ljava/lang/Object;()D");
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("LLjava/beans/PropertyDescriptor;;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 1, (byte) 1 };
        java.lang.ClassLoader classLoader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class6 = org.mockito.cglib.core.ReflectUtils.defineClass("Lmockito/asm/Type;", byteArray4, classLoader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 1, 1]");
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(false);
        boolean boolean16 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setBound(false);
        java.lang.String str21 = propertyDescriptor3.getDisplayName();
        boolean boolean22 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(Z)C" + "'", str21, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = signature3.equals((java.lang.Object) wildcardClass5);
        java.lang.String str7 = signature3.getName();
        boolean boolean8 = type0.equals((java.lang.Object) str7);
        java.lang.String str9 = type0.getDescriptor();
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass10, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "F" + "'", str9, "F");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(true);
        boolean boolean10 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("Z");
        java.lang.Object obj14 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        boolean boolean15 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method22 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(method22);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        byte[] byteArray2 = new byte[] { (byte) 1 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("[Ljava/lang/reflect/Method;", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("(Z)C", method10, method11);
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor12.attributeNames();
        boolean boolean14 = propertyDescriptor12.isPreferred();
        java.lang.String str15 = propertyDescriptor12.getName();
        boolean boolean16 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setBound(true);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setConstrained(true);
        propertyDescriptor12.setPreferred(false);
        java.util.Enumeration<java.lang.String> strEnumeration24 = propertyDescriptor12.attributeNames();
        boolean boolean25 = classInfo4.equals((java.lang.Object) strEnumeration24);
        org.mockito.asm.Type type26 = classInfo4.getType();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass28);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass28);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        org.mockito.asm.Type type33 = classInfo31.getSuperType();
        org.mockito.asm.Type[] typeArray34 = classInfo31.getInterfaces();
        org.mockito.asm.Type[] typeArray35 = classInfo31.getInterfaces();
        java.lang.Class<?> wildcardClass36 = typeArray35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        boolean boolean42 = type26.equals((java.lang.Object) wildcardClass36);
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, false);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, false, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(Z)C" + "'", str15, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/Type" + "'", str30, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str39, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str43, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(methodArray50);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj25 = propertyDescriptor3.getValue("Ljava/beans/PropertyDescriptor;");
        propertyDescriptor3.setName("va/lang/Object");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=org/mockito/asm/TypeLorg/mockito/asm/Type;; displayName=long; values={org/mockito/asm/Type=char}]()Lshort;");
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("Ljava.lang.Object");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        boolean boolean3 = type0.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list12 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "D" + "'", str1, "D");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(Z)C; bound]");
        int int2 = type1.getSort();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ava.beans.PropertyDescriptor[name=(Z)C" + "'", str4, "ava.beans.PropertyDescriptor[name=(Z)C");
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray5 = classInfo4.getInterfaces();
        boolean boolean7 = classInfo4.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass10);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str12, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str13, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        propertyDescriptor3.setValue("B", (java.lang.Object) propertyDescriptorArray11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.Object obj13 = null;
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor(obj13);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertNull(propertyEditor14);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        boolean boolean18 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setHidden(false);
        java.lang.String str23 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("C");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass28);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass28);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        org.mockito.asm.Type type33 = classInfo31.getSuperType();
        org.mockito.asm.Type[] typeArray34 = classInfo31.getInterfaces();
        org.mockito.asm.Type[] typeArray35 = classInfo31.getInterfaces();
        java.lang.Class<?> wildcardClass36 = typeArray35.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray38);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray39);
        org.mockito.cglib.core.Signature signature43 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass45 = type44.getClass();
        boolean boolean46 = signature43.equals((java.lang.Object) wildcardClass45);
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.Type type51 = type49.getElementType();
        int int52 = type49.getSort();
        int int53 = type49.getSort();
        java.lang.String str54 = type49.getInternalName();
        int int55 = type49.getDimensions();
        org.mockito.asm.Type type56 = type49.getElementType();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass58 = type57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass58);
        java.lang.String str60 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type63 = classInfo62.getType();
        int int64 = classInfo62.getModifiers();
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("(Z)C", method66, method67);
        java.util.Enumeration<java.lang.String> strEnumeration69 = propertyDescriptor68.attributeNames();
        propertyDescriptor68.setHidden(true);
        propertyDescriptor68.setExpert(false);
        boolean boolean74 = classInfo62.equals((java.lang.Object) propertyDescriptor68);
        org.mockito.asm.Type[] typeArray75 = classInfo62.getInterfaces();
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass26, classArray39, (java.lang.Object[]) typeArray75);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str17, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str23, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/Type" + "'", str30, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str47, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.mockito.asm.Type" + "'", str50, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org/mockito/asm/Type" + "'", str54, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/Type" + "'", str60, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(strEnumeration69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str76, "()Lg/mockito/asm/Type;");
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str8, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray9 = classInfo4.getInterfaces();
        org.mockito.asm.Type type10 = classInfo4.getSuperType();
        org.mockito.asm.Type type11 = classInfo4.getSuperType();
        java.lang.Object obj12 = null;
        boolean boolean13 = classInfo4.equals(obj12);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("(Z)C", method15, method16);
        propertyDescriptor17.setBound(true);
        boolean boolean20 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setName("boolean");
        boolean boolean23 = propertyDescriptor17.isExpert();
        boolean boolean24 = propertyDescriptor17.isPreferred();
        boolean boolean25 = propertyDescriptor17.isPreferred();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("(Z)C", method28, method29);
        java.util.Enumeration<java.lang.String> strEnumeration31 = propertyDescriptor30.attributeNames();
        boolean boolean32 = propertyDescriptor30.isPreferred();
        java.lang.String str33 = propertyDescriptor30.getName();
        boolean boolean34 = propertyDescriptor30.isExpert();
        propertyDescriptor30.setBound(true);
        propertyDescriptor30.setShortDescription("Z");
        boolean boolean39 = propertyDescriptor30.isHidden();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor30.getPropertyEditorClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass42 = type41.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.String str45 = type44.toString();
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor30.createPropertyEditor((java.lang.Object) type44);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass48 = type47.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.lang.String str50 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass48);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        int int57 = type55.getOpcode(0);
        int int58 = type55.getSort();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass60 = type59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass60);
        java.lang.String str62 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type[] typeArray65 = classInfo64.getInterfaces();
        org.mockito.cglib.core.Signature signature66 = new org.mockito.cglib.core.Signature("", type55, typeArray65);
        boolean boolean67 = type53.equals((java.lang.Object) typeArray65);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray65);
        propertyDescriptor17.setValue("Lmockito/asm/Type;", (java.lang.Object) typeArray65);
        boolean boolean70 = classInfo4.equals((java.lang.Object) propertyDescriptor17);
        java.lang.Object obj72 = null;
        // The following exception was thrown during execution in test generation
        try {
            propertyDescriptor17.setValue("java.beans.PropertyDescriptor[name=C; values={org/mockito/asm/Type=char; ()D=1}]", obj72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strEnumeration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(Z)C" + "'", str33, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str43, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str45, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/Type" + "'", str50, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org/mockito/asm/Type" + "'", str62, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str68, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Ljava.beans.PropertyDescriptor[name=(Z)C; displayName=; shortDescription=D; bound];");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->Ljava.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setDisplayName("J");
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setReadMethod(method21);
        java.lang.Object obj24 = propertyDescriptor3.getValue("Z)Lorg.mockito.asm.Type");
        java.lang.String str25 = propertyDescriptor3.getShortDescription();
        java.lang.String str26 = propertyDescriptor3.getDisplayName();
        boolean boolean27 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str25, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "J" + "'", str26, "J");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        boolean boolean12 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setReadMethod(method15);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        boolean boolean11 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("D");
        java.lang.Object obj15 = propertyDescriptor3.getValue("()Lchar;");
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass19 = type18.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray25);
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray31, methodArray39);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray39);
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass45 = type44.getClass();
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass45);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, true, true);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray51);
        java.lang.Class[] classArray53 = new java.lang.Class[] {};
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass56 = type55.getClass();
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass56);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, true);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray54, methodArray62);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray62);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray64);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray65);
        java.lang.Class[] classArray67 = new java.lang.Class[] {};
        java.lang.String[] strArray68 = org.mockito.cglib.core.ReflectUtils.getNames(classArray67);
        java.lang.reflect.Method[] methodArray69 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray68, methodArray69);
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray69);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray71);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str34, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str46, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        boolean boolean7 = signature2.equals((java.lang.Object) (short) 1);
        java.lang.String str8 = signature2.getDescriptor();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 0);
        int int13 = type9.getOpcode(100);
        int int14 = type9.getSize();
        int int16 = type9.getOpcode(4);
        int int18 = type9.getOpcode((int) ' ');
        org.mockito.asm.Type type19 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] {};
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray21);
        java.lang.String str24 = type9.toString();
        boolean boolean25 = signature2.equals((java.lang.Object) str24);
        java.lang.String str26 = signature2.toString();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass28);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass28);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        org.mockito.asm.Type type33 = classInfo31.getSuperType();
        org.mockito.asm.Type[] typeArray34 = classInfo31.getInterfaces();
        org.mockito.asm.Type type35 = classInfo31.getType();
        boolean boolean36 = signature2.equals((java.lang.Object) classInfo31);
        int int37 = classInfo31.getModifiers();
        org.mockito.asm.Type type38 = classInfo31.getType();
        org.mockito.asm.Type[] typeArray39 = classInfo31.getInterfaces();
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray39);
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray41);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D" + "'", str20, "D");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()D" + "'", str22, "()D");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()Z" + "'", str23, "()Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Z" + "'", str24, "Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/Type" + "'", str30, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(classArray42);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/Signature;");
        boolean boolean13 = propertyDescriptor3.isPreferred();
        boolean boolean14 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        propertyDescriptor3.setExpert(false);
        boolean boolean15 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("(Z)C", method8, method9);
        propertyDescriptor10.setBound(true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor10.getPropertyType();
        java.lang.Object obj15 = propertyDescriptor10.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method16 = null;
        propertyDescriptor10.setWriteMethod(method16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type[] typeArray24 = classInfo23.getInterfaces();
        boolean boolean26 = classInfo23.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray27 = classInfo23.getInterfaces();
        org.mockito.asm.Type type28 = classInfo23.getSuperType();
        propertyDescriptor10.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo23);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("(Z)C", method31, method32);
        propertyDescriptor33.setBound(true);
        java.lang.Class<?> wildcardClass36 = propertyDescriptor33.getPropertyType();
        java.lang.Object obj38 = propertyDescriptor33.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method39 = null;
        propertyDescriptor33.setWriteMethod(method39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type[] typeArray47 = classInfo46.getInterfaces();
        boolean boolean49 = classInfo46.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray50 = classInfo46.getInterfaces();
        org.mockito.asm.Type type51 = classInfo46.getSuperType();
        propertyDescriptor33.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo46);
        boolean boolean53 = classInfo23.equals((java.lang.Object) propertyDescriptor33);
        propertyDescriptor33.setShortDescription("g.mockito.asm.Type");
        java.lang.Class<?> wildcardClass56 = propertyDescriptor33.getClass();
        boolean boolean57 = type6.equals((java.lang.Object) wildcardClass56);
        int int58 = type6.getSort();
        java.lang.String str59 = type6.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/Type" + "'", str22, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/Type" + "'", str45, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str59, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = classInfo5.getType();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("(Z)C", method8, method9);
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor10.attributeNames();
        boolean boolean12 = propertyDescriptor10.isPreferred();
        java.lang.String str13 = propertyDescriptor10.getName();
        boolean boolean14 = propertyDescriptor10.isHidden();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor10.getClass();
        boolean boolean16 = classInfo5.equals((java.lang.Object) wildcardClass15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass18 = type17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type[] typeArray23 = classInfo22.getInterfaces();
        int int24 = classInfo22.getModifiers();
        java.lang.String str25 = classInfo22.toString();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str27 = type26.getClassName();
        int int28 = type26.getSort();
        java.lang.Class<?> wildcardClass29 = type26.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        boolean boolean32 = classInfo22.equals((java.lang.Object) propertyDescriptorArray31);
        boolean boolean33 = classInfo5.equals((java.lang.Object) propertyDescriptorArray31);
        org.mockito.asm.Type[] typeArray34 = classInfo5.getInterfaces();
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray34);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/Type" + "'", str20, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.Type" + "'", str25, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("boolean");
        java.lang.Object obj10 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass14 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptorArray15);
        java.lang.String str17 = propertyDescriptor3.getShortDescription();
        boolean boolean18 = propertyDescriptor3.isHidden();
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "()D");
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean22 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; constrained]; preferred; constrained]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("ckito.asm.Type", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("()Lava.beans.PropertyDescriptor[name=[Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = signature3.equals((java.lang.Object) wildcardClass5);
        boolean boolean7 = type0.equals((java.lang.Object) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type16 = classInfo15.getSuperType();
        org.mockito.asm.Type type17 = classInfo15.getSuperType();
        java.lang.Class<?> wildcardClass18 = type17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray21);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor28 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass5, classArray25);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.IndexedPropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("F", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.lang.String str5 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Lchar;; bound]");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "F" + "'", str5, "F");
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=java.beans.PropertyDescriptor[name=(Z)C; hidden]]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        boolean boolean12 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; propertyEditorClass=class java.beans.PropertyDescriptor]");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass18);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, false, true);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str19, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.beans.PropertyEditor propertyEditor18 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNull(propertyEditor18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/Type" + "'", str20, "org/mockito/asm/Type");
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray2, true, true);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray2);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass10);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer19 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray7, (java.lang.Class) wildcardClass10);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(methodArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(classInfo18);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        java.lang.String[] strArray0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, false, false);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray20);
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        boolean boolean27 = signature24.equals((java.lang.Object) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, false, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray32);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray13, methodArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(methodArray34);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setShortDescription("long");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getClass();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray21);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass30 = type29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass30);
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type35 = classInfo34.getSuperType();
        org.mockito.asm.Type type36 = classInfo34.getSuperType();
        org.mockito.asm.Type[] typeArray37 = classInfo34.getInterfaces();
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass17, classArray26, (java.lang.Object[]) typeArray37);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()Ljava.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}];" + "'", str38, "()Ljava.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}];");
        org.junit.Assert.assertNotNull(classArray39);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj8 = propertyDescriptor3.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type[] typeArray17 = classInfo16.getInterfaces();
        boolean boolean19 = classInfo16.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray20 = classInfo16.getInterfaces();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        propertyDescriptor3.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo16);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] {};
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray25);
        boolean boolean27 = classInfo16.equals((java.lang.Object) type23);
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        boolean boolean36 = classInfo16.equals((java.lang.Object) classArray30);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "D" + "'", str24, "D");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "()D" + "'", str26, "()D");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        java.lang.Object obj20 = propertyDescriptor3.getValue("(Z)C");
        boolean boolean21 = propertyDescriptor3.isHidden();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type[] typeArray28 = classInfo27.getInterfaces();
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo27);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; hidden]");
        java.lang.String str32 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNull(propertyEditor29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; hidden]; values={org/mockito/asm/Type=char; ()D=1}]" + "'", str32, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; hidden]; values={org/mockito/asm/Type=char; ()D=1}]");
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        java.lang.String str18 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(Z)C" + "'", str17, "(Z)C");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(Z)C" + "'", str18, "(Z)C");
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("Lmockito/asm/Type;", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setShortDescription("Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray6 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray6);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray11 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray11);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray15 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray14, methodArray15);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray15);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.reflect.Method[] methodArray20 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray20);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray20);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray26 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray26);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.lang.reflect.Method[] methodArray30 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray29, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray30);
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.reflect.Method[] methodArray35 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray25, methodArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray37);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass42 = type41.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type[] typeArray46 = classInfo45.getInterfaces();
        org.mockito.asm.Type type47 = classInfo45.getType();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass49 = type48.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = classInfo52.getSuperType();
        org.mockito.asm.Type type54 = classInfo52.getSuperType();
        org.mockito.asm.Type[] typeArray55 = classInfo52.getInterfaces();
        org.mockito.asm.Type[] typeArray56 = classInfo52.getInterfaces();
        java.lang.Class<?> wildcardClass57 = typeArray56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray59);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray60);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        boolean boolean63 = classInfo45.equals((java.lang.Object) strArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass65 = type64.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass67 = type66.getClass();
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass71 = type70.getClass();
        java.lang.String str72 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass71);
        java.lang.Class[] classArray73 = new java.lang.Class[] { wildcardClass65, wildcardClass67, wildcardClass71 };
        int int74 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray73);
        java.lang.String[] strArray75 = org.mockito.cglib.core.ReflectUtils.getNames(classArray73);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass77 = type76.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass77);
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray78, false, true);
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray81);
        java.lang.reflect.Method[] methodArray83 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray75, methodArray81);
        java.lang.reflect.Method[] methodArray84 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray62, methodArray81);
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray81);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org/mockito/asm/Type" + "'", str44, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org/mockito/asm/Type" + "'", str51, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str68, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str72, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(methodArray83);
        org.junit.Assert.assertNotNull(methodArray84);
        org.junit.Assert.assertNotNull(methodArray85);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=boolean; bound]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.String str5 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(Z)C; propertyEditorClass=class org.mockito.asm.Type]");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.beans.PropertyDescriptor[name=boolean; bound]" + "'", str5, "java.beans.PropertyDescriptor[name=boolean; bound]");
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setPreferred(true);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        boolean boolean18 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("(Z)C", method24, method25);
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor26.attributeNames();
        boolean boolean28 = propertyDescriptor26.isPreferred();
        java.lang.String str29 = propertyDescriptor26.getName();
        boolean boolean30 = propertyDescriptor26.isExpert();
        propertyDescriptor26.setBound(true);
        propertyDescriptor26.setShortDescription("Z");
        propertyDescriptor26.setShortDescription("C");
        java.lang.reflect.Method method37 = propertyDescriptor26.getWriteMethod();
        java.beans.PropertyEditor propertyEditor38 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor26);
        java.lang.reflect.Method method39 = null;
        propertyDescriptor26.setReadMethod(method39);
        java.lang.String str41 = propertyDescriptor26.getShortDescription();
        java.lang.reflect.Method method42 = propertyDescriptor26.getReadMethod();
        java.lang.String str43 = propertyDescriptor26.getName();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("(Z)C", method45, method46);
        org.mockito.cglib.core.Signature signature51 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor47.setValue("org/mockito/asm/Type", (java.lang.Object) signature51);
        java.lang.String str53 = propertyDescriptor47.getDisplayName();
        boolean boolean54 = propertyDescriptor47.isHidden();
        propertyDescriptor47.setShortDescription("Z");
        propertyDescriptor47.setConstrained(false);
        propertyDescriptor47.setDisplayName("long");
        java.lang.String str61 = propertyDescriptor47.getDisplayName();
        propertyDescriptor47.setExpert(false);
        java.lang.reflect.Method method64 = propertyDescriptor47.getWriteMethod();
        java.beans.PropertyEditor propertyEditor65 = propertyDescriptor26.createPropertyEditor((java.lang.Object) method64);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; constrained]" + "'", str17, "java.beans.PropertyDescriptor[name=(Z)C; constrained]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(Z)C" + "'", str29, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(method37);
        org.junit.Assert.assertNull(propertyEditor38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "C" + "'", str41, "C");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(Z)C" + "'", str43, "(Z)C");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(Z)C" + "'", str53, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "long" + "'", str61, "long");
        org.junit.Assert.assertNull(method64);
        org.junit.Assert.assertNull(propertyEditor65);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        boolean boolean11 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("D");
        java.lang.Object obj15 = propertyDescriptor3.getValue("()Lchar;");
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.String str17 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; displayName=D; values={org/mockito/asm/Type=char}]" + "'", str17, "java.beans.PropertyDescriptor[name=(Z)C; displayName=D; values={org/mockito/asm/Type=char}]");
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) 10.0d);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("");
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(Z)C" + "'", str13, "(Z)C");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(Z)C" + "'", str17, "(Z)C");
        org.junit.Assert.assertNotNull(strEnumeration18);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type7 = classInfo6.getSuperType();
        org.mockito.asm.Type type8 = classInfo6.getSuperType();
        org.mockito.asm.Type[] typeArray9 = classInfo6.getInterfaces();
        org.mockito.asm.Type[] typeArray10 = classInfo6.getInterfaces();
        org.mockito.asm.Type type11 = classInfo6.getType();
        int int12 = type11.getSort();
        int int14 = type11.getOpcode(6);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type20 = classInfo19.getSuperType();
        org.mockito.asm.Type type21 = classInfo19.getSuperType();
        org.mockito.asm.Type[] typeArray22 = classInfo19.getInterfaces();
        org.mockito.asm.Type[] typeArray23 = classInfo19.getInterfaces();
        org.mockito.asm.Type type24 = classInfo19.getType();
        int int25 = type24.getSort();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass27 = type26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type31 = classInfo30.getSuperType();
        org.mockito.asm.Type type32 = classInfo30.getSuperType();
        org.mockito.asm.Type[] typeArray33 = classInfo30.getInterfaces();
        org.mockito.asm.Type[] typeArray34 = classInfo30.getInterfaces();
        org.mockito.asm.Type type35 = classInfo30.getType();
        java.lang.String str36 = classInfo30.toString();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("(Z)C", method38, method39);
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor40.setValue("org/mockito/asm/Type", (java.lang.Object) signature44);
        java.lang.String str46 = propertyDescriptor40.getDisplayName();
        boolean boolean47 = propertyDescriptor40.isHidden();
        propertyDescriptor40.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor40.setConstrained(true);
        boolean boolean52 = classInfo30.equals((java.lang.Object) propertyDescriptor40);
        org.mockito.asm.Type[] typeArray53 = classInfo30.getInterfaces();
        org.mockito.asm.Type[] typeArray54 = classInfo30.getInterfaces();
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray54);
        org.mockito.cglib.core.Signature signature56 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=boolean; bound]", type11, typeArray54);
        int int58 = type11.getOpcode(104);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass60 = type59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass60);
        java.lang.String str62 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type65 = classInfo64.getSuperType();
        org.mockito.asm.Type[] typeArray66 = classInfo64.getInterfaces();
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor", type11, typeArray66);
        java.lang.String str68 = signature67.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/Type" + "'", str29, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.mockito.asm.Type" + "'", str36, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(Z)C" + "'", str46, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str55, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 108 + "'", int58 == 108);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org/mockito/asm/Type" + "'", str62, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str68, "()Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        boolean boolean3 = type0.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass4 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.util.List list7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list8 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "D" + "'", str1, "D");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=org/mockito/asm/TypeLorg/mockito/asm/Type;; displayName=long; values={org/mockito/asm/Type=char}]", "()D");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray11);
        boolean boolean13 = type3.equals((java.lang.Object) classArray12);
        java.lang.String str14 = type3.toString();
        boolean boolean15 = signature2.equals((java.lang.Object) str14);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Z" + "'", str14, "Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray9 = classInfo4.getInterfaces();
        org.mockito.asm.Type type10 = classInfo4.getSuperType();
        org.mockito.asm.Type type11 = classInfo4.getSuperType();
        java.lang.Object obj12 = null;
        boolean boolean13 = classInfo4.equals(obj12);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("(Z)C", method15, method16);
        propertyDescriptor17.setBound(true);
        boolean boolean20 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setName("boolean");
        boolean boolean23 = propertyDescriptor17.isExpert();
        boolean boolean24 = propertyDescriptor17.isPreferred();
        boolean boolean25 = propertyDescriptor17.isPreferred();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("(Z)C", method28, method29);
        java.util.Enumeration<java.lang.String> strEnumeration31 = propertyDescriptor30.attributeNames();
        boolean boolean32 = propertyDescriptor30.isPreferred();
        java.lang.String str33 = propertyDescriptor30.getName();
        boolean boolean34 = propertyDescriptor30.isExpert();
        propertyDescriptor30.setBound(true);
        propertyDescriptor30.setShortDescription("Z");
        boolean boolean39 = propertyDescriptor30.isHidden();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor30.getPropertyEditorClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass42 = type41.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.String str45 = type44.toString();
        java.beans.PropertyEditor propertyEditor46 = propertyDescriptor30.createPropertyEditor((java.lang.Object) type44);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass48 = type47.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.lang.String str50 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass48);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        int int57 = type55.getOpcode(0);
        int int58 = type55.getSort();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass60 = type59.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass60);
        java.lang.String str62 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type[] typeArray65 = classInfo64.getInterfaces();
        org.mockito.cglib.core.Signature signature66 = new org.mockito.cglib.core.Signature("", type55, typeArray65);
        boolean boolean67 = type53.equals((java.lang.Object) typeArray65);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray65);
        propertyDescriptor17.setValue("Lmockito/asm/Type;", (java.lang.Object) typeArray65);
        boolean boolean70 = classInfo4.equals((java.lang.Object) propertyDescriptor17);
        propertyDescriptor17.setBound(false);
        java.lang.Class<?> wildcardClass73 = propertyDescriptor17.getPropertyType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strEnumeration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(Z)C" + "'", str33, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str43, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str45, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(propertyEditor46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org/mockito/asm/Type" + "'", str50, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org/mockito/asm/Type" + "'", str62, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str68, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(wildcardClass73);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        propertyDescriptor3.setBound(true);
        boolean boolean6 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        boolean boolean13 = signature10.equals((java.lang.Object) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(Z)C; constrained]", (java.lang.Object) propertyDescriptorArray14);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str19 = propertyDescriptor3.getShortDescription();
        boolean boolean20 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]" + "'", str19, "java.beans.PropertyDescriptor[name=(Z)C; preferred; bound]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str11, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = type6.getElementType();
        int int8 = type7.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        int int12 = type10.getOpcode(0);
        int int13 = type10.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type[] typeArray20 = classInfo19.getInterfaces();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("", type10, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray20);
        int int24 = type7.getOpcode(112);
        java.lang.String str25 = type7.getInternalName();
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("", "");
        java.lang.String str29 = signature28.getDescriptor();
        boolean boolean30 = type7.equals((java.lang.Object) signature28);
        java.lang.String str31 = type7.toString();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("(Z)C", method33, method34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass37 = type36.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass37);
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type42 = classInfo41.getType();
        java.beans.PropertyEditor propertyEditor43 = propertyDescriptor35.createPropertyEditor((java.lang.Object) type42);
        java.lang.reflect.Method method44 = null;
        propertyDescriptor35.setWriteMethod(method44);
        java.lang.reflect.Method method46 = propertyDescriptor35.getReadMethod();
        boolean boolean47 = type7.equals((java.lang.Object) propertyDescriptor35);
        org.mockito.asm.Type type48 = type7.getElementType();
        java.lang.String str49 = type7.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str22, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 116 + "'", int24 == 116);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "g/mockito/asm/Type" + "'", str25, "g/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lg/mockito/asm/Type;" + "'", str31, "Lg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/Type" + "'", str39, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNull(propertyEditor43);
        org.junit.Assert.assertNull(method46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lg/mockito/asm/Type;" + "'", str49, "Lg/mockito/asm/Type;");
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str16 = signature15.getName();
        propertyDescriptor3.setValue("F", (java.lang.Object) str16);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("double", "");
        java.lang.String str22 = signature21.toString();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) signature21);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("(Z)C", method26, method27);
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor28.setValue("org/mockito/asm/Type", (java.lang.Object) signature32);
        java.lang.String str34 = propertyDescriptor28.getDisplayName();
        boolean boolean35 = propertyDescriptor28.isHidden();
        propertyDescriptor28.setShortDescription("Z");
        java.util.Enumeration<java.lang.String> strEnumeration38 = propertyDescriptor28.attributeNames();
        java.lang.String str39 = propertyDescriptor28.getDisplayName();
        propertyDescriptor3.setValue("org/mockito/asm/TypeD", (java.lang.Object) str39);
        java.lang.reflect.Method method41 = null;
        propertyDescriptor3.setWriteMethod(method41);
        propertyDescriptor3.setName("Lmockito/asm/Type;");
        java.lang.String str45 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj47 = propertyDescriptor3.getValue("Ljava.beans.PropertyDescriptor[];");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Ljava/lang/Object;" + "'", str16, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "double" + "'", str22, "double");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(Z)C" + "'", str34, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strEnumeration38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(Z)C" + "'", str39, "(Z)C");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lmockito/asm/Type;" + "'", str45, "Lmockito/asm/Type;");
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method6 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str4, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.mockito.asm.Type type1 = null;
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("hi!", "()Ljava/lang/Object;");
        org.mockito.asm.Type type5 = signature4.getReturnType();
        org.mockito.asm.Type[] typeArray6 = signature4.getArgumentTypes();
        java.lang.String str7 = signature4.toString();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("(Z)C", method9, method10);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor11.setValue("org/mockito/asm/Type", (java.lang.Object) signature15);
        java.lang.String str17 = propertyDescriptor11.getDisplayName();
        boolean boolean18 = propertyDescriptor11.isHidden();
        propertyDescriptor11.setShortDescription("Z");
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor11.attributeNames();
        boolean boolean22 = propertyDescriptor11.isPreferred();
        boolean boolean23 = signature4.equals((java.lang.Object) propertyDescriptor11);
        org.mockito.asm.Type[] typeArray24 = signature4.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("double", type1, typeArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!()Ljava/lang/Object;" + "'", str7, "hi!()Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(Z)C" + "'", str17, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(typeArray24);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list12 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass7, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/Type" + "'", str10, "org/mockito/asm/Type");
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        java.lang.Object[] objArray5 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray5);
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass12 = type9.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, false, false);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray20);
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray27);
        int int29 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray28);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass34 = type31.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        java.lang.String str38 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass34);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray39, false, false);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray42);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray49);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass56 = type53.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass56);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, true);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, false, true);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, false);
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray52, methodArray66);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray30, methodArray66);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray66);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray8);
        int int71 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray70);
        java.lang.Class<?> wildcardClass72 = classArray70.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray73 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray73);
        java.lang.Class class75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer76 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray74, class75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/Type" + "'", str35, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/Type" + "'", str38, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(propertyDescriptorArray73);
        org.junit.Assert.assertNotNull(classArray74);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(0);
        int int4 = type1.getSort();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type[] typeArray11 = classInfo10.getInterfaces();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("", type1, typeArray11);
        java.lang.String str13 = type1.getClassName();
        int int14 = type1.getSize();
        java.lang.String str15 = type1.toString();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("()Lg/mockito/asm/Type;");
        java.lang.String str21 = type20.getInternalName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type27 = classInfo26.getSuperType();
        org.mockito.asm.Type type28 = classInfo26.getSuperType();
        org.mockito.asm.Type type29 = classInfo26.getSuperType();
        org.mockito.asm.Type[] typeArray30 = classInfo26.getInterfaces();
        org.mockito.asm.Type[] typeArray31 = classInfo26.getInterfaces();
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", type20, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray31);
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray31);
        java.lang.String str35 = type1.toString();
        java.lang.Class<?> wildcardClass36 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C" + "'", str15, "C");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str21, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()Lava.beans.PropertyDescriptor[name=(Z)C;" + "'", str33, "()Lava.beans.PropertyDescriptor[name=(Z)C;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()C" + "'", str34, "()C");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("double", "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; values={org/mockito/asm/Type=char}]; bound]");
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str16 = signature15.getName();
        propertyDescriptor3.setValue("F", (java.lang.Object) str16);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("double", "");
        java.lang.String str22 = signature21.toString();
        propertyDescriptor3.setValue("org/mockito/asm/TypeLorg/mockito/asm/Type;", (java.lang.Object) signature21);
        java.lang.Object obj25 = propertyDescriptor3.getValue("J");
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass28 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Ljava/lang/Object;" + "'", str16, "Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "double" + "'", str22, "double");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass29);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(Z)C; displayName=java.beans.PropertyDescriptor[name=(Z)C; shortDescription=Z; bound]; values={org/mockito/asm/Type=char; F=Ljava/lang/Object;; org/mockito/asm/TypeLorg/mockito/asm/Type;=double}]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray13);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass19 = type16.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass19);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray24, false, false);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray27);
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray34);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray35);
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass41 = type38.getClass();
        java.lang.String str42 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass41);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, false, false);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray49);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray56);
        int int58 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray57);
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass63 = type60.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass63);
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, true);
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, false, true);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, false);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray59, methodArray73);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray73);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray15, methodArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray15);
        int int78 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray77);
        java.lang.Class<?> wildcardClass79 = classArray77.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray80 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass79);
        java.lang.Class[] classArray81 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray80);
        java.lang.String[] strArray82 = org.mockito.cglib.core.ReflectUtils.getNames(classArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor85 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass1, classArray83);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/Type" + "'", str20, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/Type" + "'", str23, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org/mockito/asm/Type" + "'", str42, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/Type" + "'", str45, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(propertyDescriptorArray80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray84);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = type6.getElementType();
        int int8 = type7.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        int int12 = type10.getOpcode(0);
        int int13 = type10.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass15 = type14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type[] typeArray20 = classInfo19.getInterfaces();
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("", type10, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray20);
        int int24 = type7.getOpcode(112);
        java.lang.String str25 = type7.getInternalName();
        java.lang.String str26 = type7.getInternalName();
        org.mockito.asm.Type type27 = type7.getElementType();
        int int28 = type27.getSize();
        java.lang.String str29 = type27.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/Type" + "'", str17, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str22, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 116 + "'", int24 == 116);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "g/mockito/asm/Type" + "'", str25, "g/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "g/mockito/asm/Type" + "'", str26, "g/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lmockito/asm/Type;" + "'", str29, "Lmockito/asm/Type;");
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("LZ)Lorg/mockito/asm/Type;");
        int int3 = type1.getOpcode(157);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 161 + "'", int3 == 161);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        boolean boolean16 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method18 = propertyDescriptor3.getReadMethod();
        boolean boolean19 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(Z)C" + "'", str15, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org/mockito/asm/TypeLorg/mockito/asm/Type;org/mockito/asm/TypeLorg/mockito/asm/Type;");
        int int2 = type1.getDimensions();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type[] typeArray8 = classInfo7.getInterfaces();
        boolean boolean10 = classInfo7.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray11 = classInfo7.getInterfaces();
        org.mockito.asm.Type type12 = classInfo7.getSuperType();
        java.lang.String str13 = classInfo7.toString();
        boolean boolean14 = type1.equals((java.lang.Object) str13);
        java.lang.String str15 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.Type" + "'", str13, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lrg/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str15, "Lrg/mockito/asm/TypeLorg/mockito/asm/Type;");
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("()Lorg/mockito/asm/Type;");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getDimensions();
        int int6 = type2.getOpcode(97);
        org.mockito.asm.Type type7 = type2.getElementType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        int int12 = classInfo11.getModifiers();
        org.mockito.asm.Type[] typeArray13 = classInfo11.getInterfaces();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("Lava.beans.PropertyDescriptor[name=org/mockito/asm/Type;", type7, typeArray13);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 101 + "'", int6 == 101);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(typeArray13);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray8);
        boolean boolean10 = type0.equals((java.lang.Object) classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org/mockito/asm/TypeLorg/mockito/asm/Type;org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = signature3.equals((java.lang.Object) wildcardClass5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = type7.getElementType();
        int int9 = type8.getSort();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        int int13 = type11.getOpcode(0);
        int int14 = type11.getSort();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type[] typeArray21 = classInfo20.getInterfaces();
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("", type11, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray21);
        int int25 = type8.getOpcode(112);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str31 = type30.getDescriptor();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] {};
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray32);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("double", type29, typeArray32);
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; values={org/mockito/asm/Type=char}]", type8, typeArray32);
        org.mockito.asm.Type[] typeArray36 = signature35.getArgumentTypes();
        org.mockito.asm.Type type37 = signature35.getReturnType();
        org.mockito.asm.Type type38 = type37.getElementType();
        org.mockito.asm.Type type39 = type38.getElementType();
        java.lang.String str40 = type39.getInternalName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/Type" + "'", str18, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "()Lg/mockito/asm/Type;" + "'", str23, "()Lg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 116 + "'", int25 == 116);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "D" + "'", str31, "D");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()D" + "'", str33, "()D");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ckito/asm/Type" + "'", str40, "ckito/asm/Type");
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(Z)C; expert]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        int int9 = classInfo4.getModifiers();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("(Z)C", method11, method12);
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor13.setValue("org/mockito/asm/Type", (java.lang.Object) signature17);
        java.lang.String str19 = propertyDescriptor13.getDisplayName();
        propertyDescriptor13.setHidden(false);
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("Ljava/lang/Object;", "()D");
        java.lang.String str26 = signature25.getName();
        propertyDescriptor13.setValue("F", (java.lang.Object) str26);
        boolean boolean28 = propertyDescriptor13.isExpert();
        boolean boolean29 = classInfo4.equals((java.lang.Object) boolean28);
        java.lang.String str30 = classInfo4.toString();
        org.mockito.asm.Type[] typeArray31 = classInfo4.getInterfaces();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(Z)C" + "'", str19, "(Z)C");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Ljava/lang/Object;" + "'", str26, "Ljava/lang/Object;");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.Type" + "'", str30, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray31);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass4 = type3.getClass();
        boolean boolean5 = signature2.equals((java.lang.Object) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = signature2.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method25 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass6, "java.beans.PropertyDescriptor[name=boolean; bound]()Lorg/mockito/asm/Type;", classArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=boolean; bound]()Lorg/mockito/asm/Type;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str9, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str21, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classArray24);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setWriteMethod(method6);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setExpert(true);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.asm.Type type6 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = classInfo4.getType();
        java.lang.String str10 = classInfo4.toString();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("(Z)C", method12, method13);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor14.setValue("org/mockito/asm/Type", (java.lang.Object) signature18);
        java.lang.String str20 = propertyDescriptor14.getDisplayName();
        boolean boolean21 = propertyDescriptor14.isHidden();
        propertyDescriptor14.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor14.setConstrained(true);
        boolean boolean26 = classInfo4.equals((java.lang.Object) propertyDescriptor14);
        java.lang.Object obj28 = propertyDescriptor14.getValue("java.beans.PropertyDescriptor[name=(Z)C; bound]");
        boolean boolean29 = propertyDescriptor14.isPreferred();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass32 = type31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        propertyDescriptor14.setValue("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]", (java.lang.Object) type35);
        java.lang.String str37 = propertyDescriptor14.getShortDescription();
        propertyDescriptor14.setExpert(false);
        java.lang.String str40 = propertyDescriptor14.getName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(Z)C; values={()D=Lorg/mockito/asm/Type;}]");
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        boolean boolean44 = propertyDescriptor14.equals((java.lang.Object) wildcardClass43);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.Type" + "'", str10, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(Z)C" + "'", str20, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/Type" + "'", str34, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.mockito.asm.Type" + "'", str37, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Z)C" + "'", str40, "(Z)C");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lmockito/asm/Type;", "(Z)C");
        java.lang.String str3 = signature2.getName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        boolean boolean10 = signature2.equals((java.lang.Object) typeArray9);
        java.lang.String str11 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lmockito/asm/Type;" + "'", str3, "Lmockito/asm/Type;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(Z)C" + "'", str11, "(Z)C");
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        boolean boolean13 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(Z)C" + "'", str12, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setConstrained(true);
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        boolean boolean17 = propertyDescriptor3.isPreferred();
        boolean boolean18 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(Z)C" + "'", str16, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method21 = propertyDescriptor3.getReadMethod();
        java.util.Enumeration<java.lang.String> strEnumeration22 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("[Lorg/mockito/asm/Type;");
        java.lang.reflect.Method method25 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(strEnumeration22);
        org.junit.Assert.assertNull(method25);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("Z");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        propertyDescriptor3.setShortDescription("Ljava/lang/Object;");
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type24 = classInfo23.getSuperType();
        org.mockito.asm.Type type25 = classInfo23.getSuperType();
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(Z)C; displayName=org.mockito.asm.Type; values={org/mockito/asm/Type=char}; constrained]; values={char=java.beans.PropertyDescriptor[name=(Z)C; bound]; org/mockito/asm/TypeLorg/mockito/asm/Type;=10.0}; bound]", (java.lang.Object) wildcardClass26);
        propertyDescriptor3.setShortDescription("()Z");
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(Z)C" + "'", str6, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/Type" + "'", str22, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("long");
        boolean boolean18 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass22);
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(propertyEditor23);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(0);
        int int5 = type1.getOpcode(130);
        java.lang.String str6 = type1.getDescriptor();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("(Z)C", method8, method9);
        propertyDescriptor10.setBound(true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor10.getPropertyType();
        java.lang.Object obj15 = propertyDescriptor10.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method16 = null;
        propertyDescriptor10.setWriteMethod(method16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass20 = type19.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type[] typeArray24 = classInfo23.getInterfaces();
        boolean boolean26 = classInfo23.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray27 = classInfo23.getInterfaces();
        org.mockito.asm.Type type28 = classInfo23.getSuperType();
        propertyDescriptor10.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo23);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("(Z)C", method31, method32);
        propertyDescriptor33.setBound(true);
        java.lang.Class<?> wildcardClass36 = propertyDescriptor33.getPropertyType();
        java.lang.Object obj38 = propertyDescriptor33.getValue("org.mockito.asm.Type");
        java.lang.reflect.Method method39 = null;
        propertyDescriptor33.setWriteMethod(method39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type[] typeArray47 = classInfo46.getInterfaces();
        boolean boolean49 = classInfo46.equals((java.lang.Object) 10L);
        org.mockito.asm.Type[] typeArray50 = classInfo46.getInterfaces();
        org.mockito.asm.Type type51 = classInfo46.getSuperType();
        propertyDescriptor33.setValue("()Lg/mockito/asm/Type;", (java.lang.Object) classInfo46);
        boolean boolean53 = classInfo23.equals((java.lang.Object) propertyDescriptor33);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType("B");
        boolean boolean56 = classInfo23.equals((java.lang.Object) type55);
        java.lang.String str57 = classInfo23.toString();
        org.mockito.asm.Type type58 = classInfo23.getSuperType();
        org.mockito.asm.Type[] typeArray59 = classInfo23.getInterfaces();
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("org/mockito/asm/TypeD", type1, typeArray59);
        java.lang.String str61 = type1.getDescriptor();
        java.lang.String str62 = type1.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass64 = type63.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, false, false);
        boolean boolean73 = type1.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 130 + "'", int5 == 130);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "C" + "'", str6, "C");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/Type" + "'", str22, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/Type" + "'", str45, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.mockito.asm.Type" + "'", str57, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "C" + "'", str61, "C");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "char" + "'", str62, "char");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str65, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list12 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass3, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        java.lang.Object[] objArray5 = new java.lang.Object[] { (byte) -1, (short) -1, '4', 10, 0.0f };
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses(objArray5);
        int int7 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        int int8 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray6);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray9);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("org/mockito/asm/Type", "Lorg/mockito/asm/Type;");
        java.lang.String str15 = signature14.toString();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 0);
        java.lang.String str19 = type16.toString();
        java.lang.String str20 = type16.toString();
        java.lang.String str21 = type16.getClassName();
        boolean boolean22 = signature14.equals((java.lang.Object) str21);
        org.mockito.asm.Type type23 = signature14.getReturnType();
        java.lang.Class<?> wildcardClass24 = signature14.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass24);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.transform.impl.AddDelegateTransformer addDelegateTransformer28 = new org.mockito.cglib.transform.impl.AddDelegateTransformer(classArray10, (java.lang.Class) wildcardClass24);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.Signature.<init>(java.lang.Object)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-1, -1, 4, 10, 0.0]");
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/TypeLorg/mockito/asm/Type;" + "'", str15, "org/mockito/asm/TypeLorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Z" + "'", str20, "Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("long");
        propertyDescriptor3.setHidden(true);
        java.lang.String str20 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; hidden; values={org/mockito/asm/Type=char}]" + "'", str20, "java.beans.PropertyDescriptor[name=org/mockito/asm/Type; displayName=long; hidden; values={org/mockito/asm/Type=char}]");
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/Type");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        boolean boolean10 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("org.mockito.asm.Type");
        propertyDescriptor3.setDisplayName("()I");
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        boolean boolean16 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(false);
        java.lang.String str19 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(Z)C" + "'", str9, "(Z)C");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "()I" + "'", str19, "()I");
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = classInfo9.getType();
        java.beans.PropertyEditor propertyEditor11 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type10);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int16 = type15.getSize();
        int int17 = type15.getSort();
        propertyDescriptor3.setValue("org/mockito/asm/TypeD", (java.lang.Object) int17);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setBound(false);
        boolean boolean23 = propertyDescriptor3.isExpert();
        boolean boolean24 = propertyDescriptor3.isPreferred();
        java.lang.String str25 = propertyDescriptor3.getName();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(propertyEditor11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(Z)C" + "'", str25, "(Z)C");
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        int int5 = type4.getDimensions();
        int int6 = type4.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Z)C", method1, method2);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("char", "");
        propertyDescriptor3.setValue("org/mockito/asm/Type", (java.lang.Object) signature7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type[] typeArray16 = classInfo15.getInterfaces();
        int int17 = classInfo15.getModifiers();
        propertyDescriptor3.setValue("()D", (java.lang.Object) int17);
        java.lang.Object obj20 = propertyDescriptor3.getValue("(Z)C");
        java.lang.Object obj22 = propertyDescriptor3.getValue("()Ljava/lang/Object;");
        java.lang.reflect.Method method23 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/Type" + "'", str13, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("[Lorg/mockito/asm/Type;");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type[] typeArray6 = classInfo5.getInterfaces();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo5.getInterfaces();
        int int9 = classInfo5.getModifiers();
        int int10 = classInfo5.getModifiers();
        java.lang.String str11 = classInfo5.toString();
        org.mockito.asm.Type type12 = classInfo5.getType();
        org.mockito.asm.Type[] typeArray14 = org.mockito.asm.Type.getArgumentTypes("()Z");
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray14);
        java.lang.Class<?> wildcardClass16 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        java.util.List list19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list20 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass16, list19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.Type" + "'", str11, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "()Lorg/mockito/asm/Type;" + "'", str15, "()Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
    }
}


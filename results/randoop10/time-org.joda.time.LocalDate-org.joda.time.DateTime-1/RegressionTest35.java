import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest35 {

    public static boolean debug = false;

    @Test
    public void test17501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
        java.lang.String str9 = property5.getName();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay14.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay14.plusYears(588);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.monthOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DurationField durationField27 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        java.util.Locale locale33 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        java.lang.String str34 = dateTimeField28.getAsText(185L, locale33);
        java.lang.String str35 = property20.getAsShortText(locale33);
        java.lang.String str36 = property5.getAsText(locale33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTime(timeOfDay39, dateTimeZone40);
        boolean boolean42 = dateTime41.isBeforeNow();
        org.joda.time.DateTime dateTime44 = dateTime41.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime46 = dateTime44.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusHours((int) (byte) 100);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.lang.String str50 = locale49.getLanguage();
        java.util.Calendar calendar51 = dateTime48.toCalendar(locale49);
        int int52 = property5.getMaximumTextLength(locale49);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "monthOfYear" + "'", str7, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1657879057240,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale33.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "185" + "'", str34, "185");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Jul" + "'", str35, "Jul");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "February" + "'", str36, "February");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh" + "'", str50, "zh");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1641531637240,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=7,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=37,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
    }

    @Test
    public void test17502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17502");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.property(dateTimeFieldType1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.minus((long) 708);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((long) 35337);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.TimeOfDay timeOfDay12 = property10.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusHours(9);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight6.withFields((org.joda.time.ReadablePartial) timeOfDay14);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test17503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17503");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay10.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType18.getField(chronology21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(chronology21);
        java.util.Locale locale27 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        boolean boolean28 = localDate23.equals((java.lang.Object) "Deutsch");
        org.joda.time.LocalDate localDate30 = localDate23.withWeekyear(371);
        org.joda.time.LocalDate.Property property31 = localDate23.era();
        org.joda.time.LocalDate localDate32 = property31.roundHalfCeilingCopy();
        int int33 = localDate32.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals(locale27.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test17504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17504");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getActualMaximum(10);
        calendar0.set((-1), (-292275054), 0);
        java.lang.String str11 = calendar0.getCalendarType();
        calendar0.setMinimalDaysInFirstWeek(35463);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=35463,ERA=1,YEAR=-1,MONTH=-292275054,WEEK_OF_YEAR=26,WEEK_OF_MONTH=5,DAY_OF_MONTH=0,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=297,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
    }

    @Test
    public void test17505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17505");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDayOfMonth(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withField(dateTimeFieldType11, 4);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(2698);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 35271, chronology23);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        boolean boolean27 = localDateTime25.isSupported(durationFieldType26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withYear(871);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withEra(0);
        int int33 = localDateTime32.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.dayOfWeek();
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy(1657878536070L);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime37);
        int int39 = localDateTime15.size();
        java.lang.String str40 = localDateTime15.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1901-04-09T00:00:00.003" + "'", str40, "1901-04-09T00:00:00.003");
    }

    @Test
    public void test17506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17506");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.plusYears((int) '4');
        int[] intArray5 = localDate4.getValues();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[2062, 2, 11]");
    }

    @Test
    public void test17507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17507");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime.Property property3 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime5 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573457334,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=334,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17508");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.LocalDate localDate3 = yearMonthDay1.toLocalDate();
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate6 = localDate3.withCenturyOfEra(475);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay13.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime27.getZone();
        int int32 = dateTimeZone30.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime33 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter9.withZone(dateTimeZone30);
        boolean boolean35 = dateTimeFormatter34.isOffsetParsed();
        java.util.Locale locale36 = dateTimeFormatter34.getLocale();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTime(timeOfDay39, dateTimeZone40);
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay44.monthOfYear();
        org.joda.time.DateTime dateTime49 = yearMonthDay44.toDateTimeAtCurrentTime();
        int int50 = property42.compareTo((org.joda.time.ReadablePartial) yearMonthDay44);
        org.joda.time.Chronology chronology51 = yearMonthDay44.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay44.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean55 = yearMonthDay44.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone56);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTime(timeOfDay58, dateTimeZone59);
        boolean boolean61 = dateTime60.isBeforeNow();
        org.joda.time.DateTime dateTime63 = dateTime60.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime65 = dateTime63.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime63.getZone();
        int int68 = dateTimeZone66.getStandardOffset((long) 13);
        long long72 = dateTimeZone66.convertLocalToUTC(229L, false, (long) 49);
        long long74 = dateTimeZone66.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime75 = yearMonthDay44.toDateTimeAtCurrentTime(dateTimeZone66);
        java.lang.String str76 = dateTimeZone66.getID();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(dateTimeZone66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter34.withZone(dateTimeZone66);
        java.util.TimeZone timeZone79 = dateTimeZone66.toTimeZone();
        long long81 = dateTimeZone66.previousTransition((long) 7);
        org.joda.time.DateTime dateTime82 = localDate6.toDateTimeAtCurrentTime(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 229L + "'", long72 == 229L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 49L + "'", long74 == 49L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Etc/UTC" + "'", str76, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 7L + "'", long81 == 7L);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test17509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        int int12 = dateTime4.getYear();
        org.joda.time.DateTime dateTime14 = dateTime4.withSecondOfMinute(8);
        org.joda.time.DateTime dateTime16 = dateTime14.minus((long) 122);
        org.joda.time.DateTime.Property property17 = dateTime14.yearOfEra();
        int int18 = dateTime14.getDayOfMonth();
        int int19 = dateTime14.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test17510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17510");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test17511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17511");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekOfWeekyear(19);
        int int9 = dateTime6.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay11.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 16, chronology23);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str41 = interval40.toString();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval52 = interval44.overlap((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        boolean boolean58 = dateTime57.isBeforeNow();
        org.joda.time.DateTime dateTime60 = dateTime57.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime62 = dateTime60.withMinuteOfHour((int) (short) 0);
        boolean boolean63 = interval52.contains((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean64 = interval40.contains((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Interval interval66 = interval40.withPeriodBeforeEnd(readablePeriod65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = interval40.toPeriod(periodType67);
        org.joda.time.Interval interval69 = interval37.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        long long72 = chronology23.add((org.joda.time.ReadablePeriod) period68, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod73 = period68.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay11.minus((org.joda.time.ReadablePeriod) mutablePeriod73);
        int int75 = yearMonthDay11.getMonthOfYear();
        org.joda.time.Chronology chronology76 = yearMonthDay11.getChronology();
        org.joda.time.Interval interval77 = yearMonthDay11.toInterval();
        org.joda.time.Duration duration78 = interval77.toDuration();
        org.joda.time.Duration duration79 = duration78.toDuration();
        org.joda.time.DateTime dateTime81 = dateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration78, 215);
        int int82 = dateTime6.getEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str41, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1163943L + "'", long72 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test17512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17512");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        int int22 = property14.compareTo((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.Chronology chronology23 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay16.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean27 = yearMonthDay16.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        int int40 = dateTimeZone38.getStandardOffset((long) 13);
        long long44 = dateTimeZone38.convertLocalToUTC(229L, false, (long) 49);
        long long46 = dateTimeZone38.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime47 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone38);
        java.lang.String str48 = dateTimeZone38.toString();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime4.toMutableDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology50 = dateTime4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime4.withDate(29, 900, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 900 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 229L + "'", long44 == 229L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 49L + "'", long46 == 49L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test17513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17513");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder4.setDate(22, 1970, 120003);
        java.util.Calendar.Builder builder39 = builder4.setLenient(true);
        java.util.Calendar.Builder builder43 = builder4.setWeekDate(35326, 785, 35306128);
        java.util.Calendar.Builder builder47 = builder43.setDate(7, 13, 29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder49 = builder47.setCalendarType("\u5357\u97d3");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: ??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879057491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573457491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573457491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test17514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17514");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        java.lang.String str10 = dateTimeField5.getName();
        boolean boolean11 = dateTimeField5.isSupported();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfCentury(10);
        int int15 = localDate14.getDayOfYear();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay19.dayOfMonth();
        java.lang.String str22 = property21.toString();
        java.util.Locale locale24 = new java.util.Locale("");
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = property21.getAsShortText(locale24);
        java.lang.String str27 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDate14, locale24);
        org.joda.time.DateTime dateTime28 = localDate14.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "year" + "'", str10, "year");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 42 + "'", int15 == 42);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[dayOfMonth]" + "'", str22, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "11" + "'", str26, "11");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010" + "'", str27, "2010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test17515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17515");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.toLanguageTag();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.lang.String str12 = locale10.getDisplayCountry();
        int int13 = dateTimeField9.getMaximumTextLength(locale10);
        java.lang.String str14 = locale10.getDisplayScript();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale10);
        java.lang.String str16 = locale10.getScript();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.lang.String str25 = locale23.getDisplayCountry();
        int int26 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str27 = locale23.getDisplayScript();
        java.lang.String str28 = locale23.getDisplayName();
        java.lang.String str29 = locale10.getDisplayVariant(locale23);
        java.lang.String str30 = locale0.getDisplayVariant(locale10);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale10);
        java.time.Instant instant32 = calendar31.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-TW" + "'", str3, "zh-TW");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u53f0\u7063" + "'", str12, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573457524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=524,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u53f0\u7063" + "'", str25, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str28, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644573457524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=524,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant32);
    }

    @Test
    public void test17516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17516");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((-62100742287078L));
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 16, chronology8);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval22 = interval14.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str26 = interval25.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime45.withMinuteOfHour((int) (short) 0);
        boolean boolean48 = interval37.contains((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = interval25.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Interval interval51 = interval25.withPeriodBeforeEnd(readablePeriod50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval25.toPeriod(periodType52);
        org.joda.time.Interval interval54 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        long long57 = chronology8.add((org.joda.time.ReadablePeriod) period53, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod58 = period53.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period53, (org.joda.time.ReadableInstant) dateMidnight60);
        int int62 = period53.size();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) period53);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str26, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1163943L + "'", long57 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay63);
    }

    @Test
    public void test17517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17517");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime9 = localTime6.plusHours(35281);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime9.withSecondOfMinute(35747);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35747 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573457583,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=583,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test17518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17518");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTime dateTime27 = interval14.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMillis((int) '#');
        int int30 = dateTime29.getWeekOfWeekyear();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        java.lang.String str34 = dateTimeFieldType32.getName();
        int int35 = dateTime29.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime38 = dateTime29.withDurationAdded((long) 35782326, 35684251);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "dayOfMonth" + "'", str34, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test17519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17519");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime4.withWeekyear((int) 'u');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfCentury(10);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property19 = localDate18.weekyear();
        org.joda.time.LocalDate.Property property20 = localDate18.centuryOfEra();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        calendar21.setFirstDayOfWeek(2022);
        int int29 = calendar21.getMinimum(2);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale37.getDisplayCountry();
        int int40 = dateTimeField36.getMaximumTextLength(locale37);
        java.lang.String str41 = locale37.getDisplayScript();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale37);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone30, locale37);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long46 = dateTimeZone44.previousTransition((long) 8);
        org.joda.time.Interval interval47 = localDate18.toInterval(dateTimeZone44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval(0L, (long) 3);
        boolean boolean51 = interval47.isBefore((org.joda.time.ReadableInterval) interval50);
        boolean boolean52 = interval47.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay54.monthOfYear();
        org.joda.time.DateTime dateTime59 = yearMonthDay54.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone60);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = yearMonthDay61.toDateTime(timeOfDay62, dateTimeZone63);
        boolean boolean65 = dateTime64.isBeforeNow();
        org.joda.time.DateTime dateTime67 = dateTime64.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean69 = dateTime67.isSupported(dateTimeFieldType68);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType68.getRangeDurationType();
        org.joda.time.DateTime.Property property71 = dateTime59.property(dateTimeFieldType68);
        org.joda.time.DateTime dateTime72 = property71.getDateTime();
        boolean boolean74 = dateTime72.isAfter((long) 6);
        org.joda.time.DateMidnight dateMidnight75 = dateTime72.toDateMidnight();
        org.joda.time.DateTime dateTime76 = dateMidnight75.toDateTime();
        boolean boolean77 = interval47.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration78 = interval47.toDuration();
        org.joda.time.DateTime dateTime80 = dateTime4.withDurationAdded((org.joda.time.ReadableDuration) duration78, 358);
        org.joda.time.DateTime.Property property81 = dateTime80.dayOfMonth();
        org.joda.time.DateTime dateTime82 = property81.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1657879057615,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=615,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u53f0\u7063" + "'", str39, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573457615,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=615,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573457615,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=615,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 8L + "'", long46 == 8L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test17520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17520");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.String str3 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ko-KR" + "'", str1, "ko-KR");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KR" + "'", str3, "KR");
    }

    @Test
    public void test17521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17521");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        org.joda.time.LocalDate localDate3 = property2.withMinimumValue();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(chronology21);
        boolean boolean23 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = dateTime22.toLocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate28 = localDate26.minusYears(587);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.monthOfYear();
        org.joda.time.DateTime dateTime35 = yearMonthDay30.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay37.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay37.property(dateTimeFieldType42);
        int int44 = dateTime35.get(dateTimeFieldType42);
        org.joda.time.LocalDate.Property property45 = localDate28.property(dateTimeFieldType42);
        org.joda.time.LocalDate.Property property46 = localDate3.property(dateTimeFieldType42);
        java.lang.String str47 = property46.getName();
        org.joda.time.LocalDate localDate48 = property46.withMinimumValue();
        java.lang.String str49 = property46.getAsString();
        org.joda.time.LocalDate localDate50 = property46.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "monthOfYear" + "'", str47, "monthOfYear");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2" + "'", str49, "2");
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test17522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17522");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusMillis(2022);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.hourOfDay();
        java.lang.String str4 = property3.getAsText();
        int int5 = property3.getMinimumValueOverall();
        int int6 = property3.get();
        int int7 = property3.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property3.setCopy(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property3.getFieldType();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9" + "'", str4, "9");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test17523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17523");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        long long6 = dateMidnight5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 16, chronology20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval34 = interval26.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str38 = interval37.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval49 = interval41.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay51.toDateTime(timeOfDay52, dateTimeZone53);
        boolean boolean55 = dateTime54.isBeforeNow();
        org.joda.time.DateTime dateTime57 = dateTime54.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour((int) (short) 0);
        boolean boolean60 = interval49.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = interval37.contains((org.joda.time.ReadableInterval) interval49);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Interval interval63 = interval37.withPeriodBeforeEnd(readablePeriod62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval37.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        long long69 = chronology20.add((org.joda.time.ReadablePeriod) period65, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod70 = period65.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight5.withFields((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay8.minusYears(35543);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay8.withYear(366);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1265846400000L + "'", long6 == 1265846400000L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str38, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1163943L + "'", long69 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
    }

    @Test
    public void test17524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17524");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale10.getExtension('a');
        java.lang.String str13 = dateTimeField8.getAsText(4, locale10);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay14.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.withField(dateTimeFieldType19, 4);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("de");
        java.lang.String str25 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) timeOfDay21, 35277, locale24);
        long long28 = dateTimeField8.addWrapField((long) '#', 35);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.lang.String str31 = locale29.getISO3Language();
        int int32 = dateTimeField8.getMaximumTextLength(locale29);
        long long35 = dateTimeField8.addWrapField(981849600000L, 35308793);
        int int37 = dateTimeField8.getLeapAmount((long) '4');
        int int40 = dateTimeField8.getDifference(1644573374627L, (-60753485279325L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "4" + "'", str13, "4");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "35277" + "'", str25, "35277");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2100035L + "'", long28 == 2100035L);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 981935580000L + "'", long35 == 981935580000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1039967644 + "'", int40 == 1039967644);
    }

    @Test
    public void test17525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17525");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy(1594684800022L);
        org.joda.time.LocalDateTime localDateTime15 = property10.setCopy(743);
        java.lang.String str16 = property10.getAsText();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
    }

    @Test
    public void test17526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17526");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        boolean boolean7 = dateMidnight3.isAfter((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusWeeks(4);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        org.joda.time.DateTime dateTime22 = yearMonthDay17.toDateTimeAtCurrentTime();
        int int23 = property15.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.Chronology chronology24 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight9.withChronology(chronology24);
        org.joda.time.DateMidnight.Property property27 = dateMidnight9.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test17527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17527");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology4.getZone();
        java.lang.String str8 = chronology4.toString();
        org.joda.time.DurationField durationField9 = chronology4.halfdays();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfCentury(10);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight15 = localDate12.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime24.getZone();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        calendar28.setFirstDayOfWeek(2022);
        int int36 = calendar28.getMinimum(2);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getDisplayCountry();
        int int47 = dateTimeField43.getMaximumTextLength(locale44);
        java.lang.String str48 = locale44.getDisplayScript();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale44);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone37, locale44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long53 = dateTimeZone51.previousTransition((long) 8);
        long long55 = dateTimeZone27.getMillisKeepLocal(dateTimeZone51, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay16.toDateMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime57 = localDate12.toDateTimeAtStartOfDay(dateTimeZone27);
        int int59 = dateTimeZone27.getOffsetFromLocal(16977599999641L);
        int int61 = dateTimeZone27.getStandardOffset(1657878512644L);
        org.joda.time.Chronology chronology62 = chronology4.withZone(dateTimeZone27);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str8, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1657879057843,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=843,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u53f0\u7063" + "'", str46, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644573457843,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=843,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573457843,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=843,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 8L + "'", long53 == 8L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str64, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test17528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17528");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 992, (long) 35397, chronology2);
        org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.now();
        int int6 = dateMidnight5.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withPeriodAdded(readablePeriod9, 22);
        int int12 = dateMidnight11.getHourOfDay();
        int int13 = dateMidnight11.getWeekOfWeekyear();
        int int14 = dateMidnight11.getHourOfDay();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.minutes();
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight11.withChronology(chronology19);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(104256554375000L, chronology19);
        org.joda.time.Interval interval28 = interval3.withChronology(chronology19);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 1, (long) 6);
        org.joda.time.DateTime dateTime32 = interval31.getStart();
        org.joda.time.Duration duration33 = interval31.toDuration();
        org.joda.time.Interval interval34 = interval3.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(interval34);
    }

    @Test
    public void test17529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        boolean boolean7 = dateMidnight3.isAfter((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withDayOfWeek(3);
        org.joda.time.Interval interval12 = dateMidnight9.toInterval();
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(35778);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.DateTime dateTime26 = dateTime23.plusMillis((int) (byte) 0);
        int int27 = dateTime23.getHourOfDay();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Calendar calendar29 = dateTime23.toCalendar(locale28);
        java.util.Locale locale33 = new java.util.Locale("zh_CN", "\u82f1\u6587\u7f8e\u56fd)", "2022-02-25T09:48:06.134Z");
        java.lang.String str34 = locale28.getDisplayName(locale33);
        java.lang.String str35 = locale28.getVariant();
        int int36 = property16.getMaximumShortTextLength(locale28);
        org.joda.time.LocalDate localDate37 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644573457895,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=895,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "\u82f1\u6587\u7f8e\u56fd)_2022-02-25T09:48:06.134Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japanese (Japan)" + "'", str34, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test17530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17530");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(292278994);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusWeeks(371);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now();
        long long20 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.plusWeeks(35297);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plusWeeks(716);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withFieldAdded(durationFieldType25, 16);
        boolean boolean28 = localDateTime11.isSupported(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test17531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17531");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology14);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        int int25 = dateTime21.getWeekyear();
        int int26 = dateTime21.getEra();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime36.toDateTime(chronology44);
        boolean boolean46 = interval29.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay49.toDateTime(timeOfDay50, dateTimeZone51);
        boolean boolean53 = dateTime52.isBeforeNow();
        org.joda.time.DateTime dateTime55 = dateTime52.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTime dateTime61 = dateTime52.toDateTime(chronology60);
        boolean boolean62 = durationFieldType47.isSupported(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime45.toDateTime(chronology60);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str67 = interval66.toString();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime71 = interval70.getEnd();
        org.joda.time.Chronology chronology72 = interval70.getChronology();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime76 = interval75.getEnd();
        org.joda.time.Chronology chronology77 = interval75.getChronology();
        org.joda.time.Interval interval78 = interval70.overlap((org.joda.time.ReadableInterval) interval75);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay(dateTimeZone79);
        org.joda.time.TimeOfDay timeOfDay81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = yearMonthDay80.toDateTime(timeOfDay81, dateTimeZone82);
        boolean boolean84 = dateTime83.isBeforeNow();
        org.joda.time.DateTime dateTime86 = dateTime83.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime88 = dateTime86.withMinuteOfHour((int) (short) 0);
        boolean boolean89 = interval78.contains((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean90 = interval66.contains((org.joda.time.ReadableInterval) interval78);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Interval interval92 = interval66.withPeriodBeforeEnd(readablePeriod91);
        org.joda.time.PeriodType periodType93 = null;
        org.joda.time.Period period94 = interval66.toPeriod(periodType93);
        org.joda.time.DateTime dateTime95 = dateTime45.minus((org.joda.time.ReadablePeriod) period94);
        org.joda.time.Interval interval96 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadablePeriod) period94);
        org.joda.time.LocalDate localDate97 = localDate15.plus((org.joda.time.ReadablePeriod) period94);
        org.joda.time.PeriodType periodType98 = period94.getPeriodType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str67, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(localDate97);
        org.junit.Assert.assertNotNull(periodType98);
    }

    @Test
    public void test17532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17532");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now();
        long long12 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        boolean boolean15 = dateMidnight11.isAfter((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight11.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withDayOfWeek(3);
        org.joda.time.Interval interval20 = dateMidnight17.toInterval();
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(chronology21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(274L, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(812, 860, 381, 871, 334, 37, 1439, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 871 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test17533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17533");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(22);
        int int9 = localTime8.getHourOfDay();
        int int10 = localTime8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573457997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=37,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
    }

    @Test
    public void test17534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        calendar4.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        calendar4.setFirstDayOfWeek(2022);
        int int12 = calendar4.getMinimum(2);
        java.util.TimeZone timeZone13 = calendar4.getTimeZone();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.year();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.lang.String str22 = locale20.getDisplayCountry();
        int int23 = dateTimeField19.getMaximumTextLength(locale20);
        java.lang.String str24 = locale20.getDisplayScript();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale20);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone13, locale20);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        long long29 = dateTimeZone27.previousTransition((long) 8);
        java.lang.String str30 = dateTimeZone27.toString();
        org.joda.time.Interval interval31 = yearMonthDay1.toInterval(dateTimeZone27);
        boolean boolean32 = interval31.isAfterNow();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1657879058011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u53f0\u7063" + "'", str22, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644573458011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573458011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 8L + "'", long29 == 8L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test17535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17535");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone14);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusDays(2);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury((int) (byte) 1);
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDayOfMonth(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withField(dateTimeFieldType24, 4);
        org.joda.time.LocalDateTime.Property property27 = localDateTime12.property(dateTimeFieldType24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime12.centuryOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test17536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17536");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        java.lang.String str14 = property12.getName();
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.LocalTime localTime17 = property12.addWrapFieldToCopy(784);
        org.joda.time.DateTime dateTime18 = localTime17.toDateTimeToday();
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundCeilingCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573458042,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=42,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:57:38.042" + "'", str4, "09:57:38.042");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573458042,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=42,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test17537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17537");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.LocalDate localDate6 = localDate4.plusDays(1970);
        org.joda.time.LocalDate localDate8 = localDate6.plusYears(3);
        org.joda.time.Interval interval9 = localDate6.toInterval();
        org.joda.time.LocalDate localDate11 = localDate6.withWeekyear(434);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime21.toDateTime(chronology29);
        boolean boolean31 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDate localDate32 = dateTime30.toLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate36 = localDate34.minusYears(587);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTime(timeOfDay39, dateTimeZone40);
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay38.monthOfYear();
        org.joda.time.DateTime dateTime43 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone44);
        org.joda.time.TimeOfDay timeOfDay46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay45.toDateTime(timeOfDay46, dateTimeZone47);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay45.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay45.property(dateTimeFieldType50);
        int int52 = dateTime43.get(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property53 = localDate36.property(dateTimeFieldType50);
        int int54 = localDate11.get(dateTimeFieldType50);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType50.getDurationType();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7 + "'", int54 == 7);
        org.junit.Assert.assertNotNull(durationFieldType55);
    }

    @Test
    public void test17538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17538");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMillis((int) (byte) 0);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay12.property(dateTimeFieldType17);
        org.joda.time.DateTime.Property property19 = dateTime9.property(dateTimeFieldType17);
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType17.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DurationField durationField24 = durationFieldType20.getField(chronology23);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((-62100742311688L), chronology23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        int int33 = dateTime32.getCenturyOfEra();
        org.joda.time.DateTime dateTime35 = dateTime32.plusMillis((int) (byte) 0);
        int int36 = dateTime35.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTime(timeOfDay39, dateTimeZone40);
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay38.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay38.property(dateTimeFieldType43);
        org.joda.time.DateTime.Property property45 = dateTime35.property(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType43.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.Chronology chronology49 = yearMonthDay48.getChronology();
        org.joda.time.DurationField durationField50 = durationFieldType46.getField(chronology49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay55 = org.joda.time.YearMonthDay.fromCalendarFields(calendar51);
        calendar51.setFirstDayOfWeek(2022);
        int int59 = calendar51.getMinimum(2);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime64 = interval63.getEnd();
        org.joda.time.Chronology chronology65 = interval63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.year();
        java.util.Locale locale67 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleKeys();
        java.lang.String str69 = locale67.getDisplayCountry();
        int int70 = dateTimeField66.getMaximumTextLength(locale67);
        java.lang.String str71 = locale67.getDisplayScript();
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(locale67);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone60, locale67);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        long long76 = dateTimeZone74.previousTransition((long) 8);
        java.lang.String str77 = dateTimeZone74.toString();
        java.util.TimeZone timeZone78 = dateTimeZone74.toTimeZone();
        org.joda.time.Chronology chronology79 = chronology49.withZone(dateTimeZone74);
        org.joda.time.Chronology chronology80 = chronology23.withZone(dateTimeZone74);
        org.joda.time.DurationField durationField81 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField82 = chronology23.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 11 + "'", int36 == 11);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1657879058089,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=89,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u53f0\u7063" + "'", str69, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1644573458089,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=89,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644573458089,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=89,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 8L + "'", long76 == 8L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Etc/UTC" + "'", str77, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test17539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17539");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime4.weekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime4.toYearMonthDay();
        org.joda.time.DateTime dateTime15 = dateTime4.plusMillis(901);
        int int16 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime4.getZone();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
    }

    @Test
    public void test17540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17540");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Interval interval4 = interval2.withDurationBeforeEnd(readableDuration3);
        org.joda.time.Interval interval5 = interval4.toInterval();
        org.joda.time.DateTime dateTime6 = interval4.getEnd();
        int int7 = dateTime6.getWeekyear();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
    }

    @Test
    public void test17541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17541");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.TimeOfDay timeOfDay8 = property6.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property6.addNoWrapToCopy(708);
        java.util.Locale locale13 = new java.util.Locale("2022-02-09T22:48:08.395Z", "09:48:11.954");
        java.lang.String str14 = property6.getAsShortText(locale13);
        org.joda.time.TimeOfDay timeOfDay15 = property6.withMinimumValue();
        java.lang.String str16 = property6.getAsText();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals(locale13.toString(), "2022-02-09t22:48:08.395z_09:48:11.954");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "59" + "'", str14, "59");
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "59" + "'", str16, "59");
    }

    @Test
    public void test17542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17542");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekyear();
        org.joda.time.LocalDate.Property property6 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate7 = property6.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.LocalDate localDate9 = property6.roundHalfFloorCopy();
        java.lang.String str10 = property6.toString();
        org.joda.time.DurationField durationField11 = property6.getRangeDurationField();
        org.joda.time.LocalDate localDate12 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[centuryOfEra]" + "'", str10, "Property[centuryOfEra]");
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test17543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17543");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getVariant();
        java.lang.String str17 = dateTimeField13.getAsShortText(3, locale15);
        int int18 = dateTimeField13.getMaximumValue();
        long long21 = dateTimeField13.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) long21, dateTimeZone22);
        boolean boolean24 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getCenturyOfEra();
        org.joda.time.Chronology chronology26 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime23.withCenturyOfEra(36);
        boolean boolean30 = dateTime23.isAfter((long) 268);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test17544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17544");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        int int4 = dateMidnight1.getYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withDayOfYear((int) 'u');
        java.util.GregorianCalendar gregorianCalendar7 = dateMidnight6.toGregorianCalendar();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        int int14 = dateTimeField13.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.withYear(22);
        int int21 = yearMonthDay16.size();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromCalendarFields(calendar22);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay26.year();
        int[] intArray30 = yearMonthDay26.getValues();
        int int31 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay16, intArray30);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfCentury(10);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTime(timeOfDay39, dateTimeZone40);
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay44.monthOfYear();
        org.joda.time.DateTime dateTime49 = yearMonthDay44.toDateTimeAtCurrentTime();
        int int50 = property42.compareTo((org.joda.time.ReadablePartial) yearMonthDay44);
        org.joda.time.Chronology chronology51 = yearMonthDay44.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay44.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean55 = yearMonthDay44.isSupported(dateTimeFieldType54);
        boolean boolean56 = localDate36.isSupported(dateTimeFieldType54);
        java.util.Locale locale58 = java.util.Locale.UK;
        java.lang.String str59 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDate36, 9, locale58);
        int int60 = localDate36.getDayOfWeek();
        java.util.Locale locale63 = new java.util.Locale("");
        java.lang.String str64 = locale63.getDisplayScript();
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = localDate36.toString("35279414", locale63);
        int int67 = localDate36.getWeekyear();
        int int68 = localDate36.getWeekyear();
        int int69 = localDate36.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight6.withFields((org.joda.time.ReadablePartial) localDate36);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1657879058219,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=219,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[2022, 7, 15]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9" + "'", str59, "9");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "35279414" + "'", str66, "35279414");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2010 + "'", int67 == 2010);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2010 + "'", int68 == 2010);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 42 + "'", int69 == 42);
        org.junit.Assert.assertNotNull(dateMidnight70);
    }

    @Test
    public void test17545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17545");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(20);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfSecond(47);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        java.lang.String str16 = localDateTime11.toString("09:49:34.770");
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withMillisOfDay(967);
        int int19 = localDateTime18.getHourOfDay();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        boolean boolean21 = localDateTime18.isSupported(durationFieldType20);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "09:49:34.770" + "'", str16, "09:49:34.770");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test17546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17546");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now();
        long long5 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        boolean boolean8 = dateMidnight4.isAfter((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfWeek(3);
        org.joda.time.Interval interval13 = dateMidnight10.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.withYear(22);
        int int25 = yearMonthDay20.size();
        int int26 = yearMonthDay20.size();
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay20.year();
        org.joda.time.YearMonthDay yearMonthDay29 = property27.addWrapFieldToCopy(35279414);
        org.joda.time.YearMonthDay yearMonthDay31 = property27.setCopy(93);
        org.joda.time.YearMonthDay yearMonthDay32 = property27.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.Chronology chronology35 = yearMonthDay34.getChronology();
        org.joda.time.LocalDate localDate36 = yearMonthDay34.toLocalDate();
        org.joda.time.DateTime dateTime37 = localDate36.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.Interval interval41 = yearMonthDay32.toInterval(dateTimeZone39);
        boolean boolean42 = interval18.contains((org.joda.time.ReadableInterval) interval41);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test17547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17547");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int8 = calendar0.getMinimum(2);
        calendar0.clear();
        int int10 = calendar0.getMinimalDaysInFirstWeek();
        boolean boolean11 = calendar0.isWeekDateSupported();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar16);
        boolean boolean19 = localTime17.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withFields((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.monthOfYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minusWeeks((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getName((long) 16);
        long long30 = dateTimeZone26.previousTransition(1644572896626L);
        org.joda.time.DateTime dateTime31 = dateMidnight22.toDateTime(dateTimeZone26);
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.lang.String str33 = locale32.getDisplayLanguage();
        boolean boolean34 = locale32.hasExtensions();
        java.util.Calendar calendar35 = dateTime31.toCalendar(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = calendar0.getDisplayName(354, 373, locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644573458316,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=316,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572896626L + "'", long30 == 1644572896626L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u6587" + "'", str33, "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1643673600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test17548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17548");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 799);
    }

    @Test
    public void test17549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17549");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.TimeOfDay timeOfDay8 = property6.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay9 = property6.withMaximumValue();
        int int10 = property6.get();
        org.joda.time.TimeOfDay timeOfDay12 = property6.addToCopy(715);
        org.joda.time.TimeOfDay timeOfDay14 = property6.addToCopy(0);
        org.joda.time.LocalTime localTime15 = timeOfDay14.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.withMillisOfSecond(1900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test17550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17550");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(2);
        org.joda.time.LocalDate localDate13 = dateTime12.toLocalDate();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        java.lang.String str16 = property14.getName();
        org.joda.time.DateTime dateTime17 = property14.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfWeek" + "'", str16, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test17551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17551");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 516);
    }

    @Test
    public void test17552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17552");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withMillis(0L);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.withMillis(0L);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573458371,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=371,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test17553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17553");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(292278994);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusWeeks(371);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        int int17 = localDateTime15.getCenturyOfEra();
        int int18 = localDateTime15.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test17554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17554");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsText(locale8);
        org.joda.time.LocalTime localTime10 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = localTime10.withMillisOfDay(623);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573458394,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=394,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 394 + "'", int4 == 394);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "35858394" + "'", str9, "35858394");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test17555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17555");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean20 = localDateTime18.isSupported(dateTimeFieldType19);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.Interval interval31 = interval23.overlap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration32 = interval31.toDuration();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plus((org.joda.time.ReadableDuration) duration32);
        java.lang.String str34 = duration32.toString();
        org.joda.time.Period period35 = duration32.toPeriod();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.Interval interval46 = interval38.overlap((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration47 = interval46.toDuration();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.year();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getVariant();
        java.lang.String str57 = dateTimeField53.getAsShortText(3, locale55);
        long long59 = dateTimeField53.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.monthOfYear();
        int int64 = dateTimeField53.getMaximumValue((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean68 = localDateTime66.isSupported(dateTimeFieldType67);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime77 = interval76.getEnd();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.Interval interval79 = interval71.overlap((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Duration duration80 = interval79.toDuration();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime66.plus((org.joda.time.ReadableDuration) duration80);
        boolean boolean82 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration80);
        int int83 = duration32.compareTo((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration84 = duration80.toDuration();
        org.joda.time.Period period85 = duration84.toPeriod();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.033S" + "'", str34, "PT0.033S");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "3" + "'", str57, "3");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278993 + "'", int64 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test17556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17556");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 0);
        boolean boolean21 = interval10.contains((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean23 = interval10.isAfter((long) (byte) 10);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfCentury(10);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate30 = localDate26.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) (short) 0);
        boolean boolean34 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.LocalDate localDate38 = yearMonthDay36.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = yearMonthDay36.getFieldType(0);
        boolean boolean41 = dateTime31.isSupported(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        int int48 = dateTime47.getCenturyOfEra();
        org.joda.time.DateTime dateTime50 = dateTime47.plusMillis((int) (byte) 0);
        int int51 = dateTime50.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone52);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTime(timeOfDay54, dateTimeZone55);
        org.joda.time.YearMonthDay.Property property57 = yearMonthDay53.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay53.property(dateTimeFieldType58);
        org.joda.time.DateTime.Property property60 = dateTime50.property(dateTimeFieldType58);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType58.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.Chronology chronology64 = yearMonthDay63.getChronology();
        org.joda.time.DurationField durationField65 = durationFieldType61.getField(chronology64);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(33L, chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.year();
        boolean boolean68 = dateTimeFieldType40.isSupported(chronology64);
        org.joda.time.DateTimeField dateTimeField69 = chronology64.clockhourOfDay();
        int int70 = dateTimeField69.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 24 + "'", int70 == 24);
    }

    @Test
    public void test17557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17557");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight6 = property4.setCopy("4");
        java.lang.String str7 = property4.getName();
        int int8 = property4.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "dayOfMonth" + "'", str7, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
    }

    @Test
    public void test17558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17558");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate4 = localDate0.plusYears(35359);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay6.dayOfMonth();
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay6.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay6.plusMonths(186);
        java.lang.String str12 = yearMonthDay11.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.Interval interval23 = interval15.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration24 = interval23.toDuration();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        boolean boolean30 = dateTime29.isBeforeNow();
        org.joda.time.DateTime dateTime32 = dateTime29.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime36 = dateTime34.minusHours((int) (byte) 100);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime34);
        long long38 = duration24.getMillis();
        org.joda.time.Period period39 = duration24.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod40 = period39.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod40, (-1477041));
        java.lang.String str43 = mutablePeriod40.toString();
        org.joda.time.LocalDate localDate44 = localDate0.minus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2037-08-11" + "'", str12, "2037-08-11");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 33L + "'", long38 == 33L);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.033S" + "'", str43, "PT0.033S");
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test17559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17559");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfFloorCopy();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.centuryOfEra();
        int int7 = dateMidnight5.getMonthOfYear();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.Interval interval18 = interval10.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Duration duration19 = interval18.toDuration();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (byte) 100);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration33 = duration19.toDuration();
        long long34 = duration19.getMillis();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = dateMidnight5.withDayOfMonth(587);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 587 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 33L + "'", long34 == 33L);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test17560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17560");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusWeeks(86399);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withDayOfYear((int) '#');
        int int11 = dateMidnight8.getWeekOfWeekyear();
        boolean boolean12 = dateMidnight3.isEqual((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 18008);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        boolean boolean21 = dateTime20.isBeforeNow();
        org.joda.time.DateTime dateTime23 = dateTime20.withMonthOfYear((int) (byte) 1);
        int int24 = dateTime20.getYear();
        org.joda.time.DateTime.Property property25 = dateTime20.weekyear();
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property25.roundHalfCeilingCopy();
        java.util.Date date28 = dateTime27.toDate();
        int int29 = date28.getDate();
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromDateFields(date28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight15.withFields((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfCentury(10);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property37 = localDate36.weekyear();
        org.joda.time.LocalDate.Property property38 = localDate36.centuryOfEra();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance();
        calendar39.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay43 = org.joda.time.YearMonthDay.fromCalendarFields(calendar39);
        calendar39.setFirstDayOfWeek(2022);
        int int47 = calendar39.getMinimum(2);
        java.util.TimeZone timeZone48 = calendar39.getTimeZone();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.year();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str57 = locale55.getDisplayCountry();
        int int58 = dateTimeField54.getMaximumTextLength(locale55);
        java.lang.String str59 = locale55.getDisplayScript();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale55);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone48, locale55);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        long long64 = dateTimeZone62.previousTransition((long) 8);
        org.joda.time.Interval interval65 = localDate36.toInterval(dateTimeZone62);
        long long68 = dateTimeZone62.convertLocalToUTC((-525628200000L), false);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight15.withZoneRetainFields(dateTimeZone62);
        org.joda.time.DateTime dateTime70 = dateMidnight8.toDateTime(dateTimeZone62);
        java.lang.String str72 = dateTimeZone62.getName((-25251620486400000L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1657879058540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u53f0\u7063" + "'", str57, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644573458540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1644573458540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 8L + "'", long64 == 8L);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-525628200000L) + "'", long68 == (-525628200000L));
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
    }

    @Test
    public void test17561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17561");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str4 = interval3.toString();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Interval interval15 = interval7.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        boolean boolean21 = dateTime20.isBeforeNow();
        org.joda.time.DateTime dateTime23 = dateTime20.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour((int) (short) 0);
        boolean boolean26 = interval15.contains((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = interval3.contains((org.joda.time.ReadableInterval) interval15);
        boolean boolean28 = interval3.containsNow();
        org.joda.time.Chronology chronology29 = interval3.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.minutes();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 35382000, chronology29);
        org.joda.time.LocalDate.Property property32 = localDate31.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean34 = localDate31.isSupported(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((java.lang.Object) boolean34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str4, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test17562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17562");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withDayOfYear((int) '#');
        java.lang.String str6 = dateMidnight5.toString();
        org.joda.time.LocalDate localDate7 = dateMidnight5.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = localDate7.indexOf(dateTimeFieldType8);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.era();
        boolean boolean16 = localDate7.equals((java.lang.Object) chronology14);
        java.lang.String str17 = chronology14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 581, (long) 487, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-04T00:00:00.000Z" + "'", str6, "2022-02-04T00:00:00.000Z");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str17, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test17563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17563");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay9.monthOfYear();
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        int int15 = property7.compareTo((org.joda.time.ReadablePartial) yearMonthDay9);
        org.joda.time.Chronology chronology16 = yearMonthDay9.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        boolean boolean18 = dateTimeFieldType1.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 99, chronology16);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test17564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17564");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.withField(dateTimeFieldType5, 4);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay4.plusMinutes(871);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        int int14 = localDateTime12.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFieldAdded(durationFieldType17, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = property21.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone24);
        int int26 = localDateTime25.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusDays(2);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYearOfCentury((int) (byte) 1);
        int int31 = localDateTime30.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withDayOfMonth(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withField(dateTimeFieldType34, 4);
        org.joda.time.LocalDateTime.Property property37 = localDateTime22.property(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property38 = timeOfDay9.property(dateTimeFieldType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test17565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17565");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(967L);
        java.lang.String str2 = yearMonthDay1.toString();
        int[] intArray3 = yearMonthDay1.getValues();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        boolean boolean16 = interval6.isBefore((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        int int25 = dateTime21.getYear();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime21.withDurationAdded(readableDuration26, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, readablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        int int39 = dateTime35.getYear();
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        boolean boolean41 = interval30.equals((java.lang.Object) dateTime35);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval52 = interval44.overlap((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str56 = interval55.toString();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime60 = interval59.getEnd();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.Interval interval67 = interval59.overlap((org.joda.time.ReadableInterval) interval64);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(dateTimeZone68);
        org.joda.time.TimeOfDay timeOfDay70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = yearMonthDay69.toDateTime(timeOfDay70, dateTimeZone71);
        boolean boolean73 = dateTime72.isBeforeNow();
        org.joda.time.DateTime dateTime75 = dateTime72.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime77 = dateTime75.withMinuteOfHour((int) (short) 0);
        boolean boolean78 = interval67.contains((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean79 = interval55.contains((org.joda.time.ReadableInterval) interval67);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Interval interval81 = interval55.withPeriodBeforeEnd(readablePeriod80);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = interval55.toPeriod(periodType82);
        org.joda.time.Interval interval84 = interval52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period83);
        org.joda.time.MutablePeriod mutablePeriod85 = period83.toMutablePeriod();
        org.joda.time.Interval interval86 = interval30.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period83);
        org.joda.time.Interval interval87 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period83);
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.Period period89 = interval87.toPeriod(periodType88);
        org.joda.time.MutablePeriod mutablePeriod90 = period89.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay1.withPeriodAdded((org.joda.time.ReadablePeriod) period89, 415);
        org.joda.time.Period period93 = period89.toPeriod();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str56, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(mutablePeriod85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(mutablePeriod90);
        org.junit.Assert.assertNotNull(yearMonthDay92);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test17566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17566");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusDays(0);
        org.joda.time.DateTime.Property property4 = dateTime1.minuteOfDay();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
    }

    @Test
    public void test17567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17567");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusMonths(59);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.withYear(22);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromCalendarFields(calendar13);
        calendar13.setFirstDayOfWeek(2022);
        int int21 = calendar13.getMinimum(2);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.lang.String str31 = locale29.getDisplayCountry();
        int int32 = dateTimeField28.getMaximumTextLength(locale29);
        java.lang.String str33 = locale29.getDisplayScript();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale29);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone22, locale29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long38 = dateTimeZone36.previousTransition((long) 8);
        java.lang.String str39 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime40 = yearMonthDay12.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone36);
        java.lang.String str42 = dateTimeZone36.toString();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 985, dateTimeZone36);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfWeek();
        org.joda.time.LocalDate localDate46 = property44.addWrapFieldToCopy((-17250206));
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1657879058707,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=707,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u53f0\u7063" + "'", str31, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573458707,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=707,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644573458707,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=707,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 8L + "'", long38 == 8L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test17568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17568");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTime dateTime15 = dateTime6.toDateTime(chronology14);
        boolean boolean16 = durationFieldType1.isSupported(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(1657878671339L, chronology14);
        java.lang.String str21 = yearMonthDay19.toString("09:55:03.544");
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "09:55:03.544" + "'", str21, "09:55:03.544");
    }

    @Test
    public void test17569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17569");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (byte) 100);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getLanguage();
        java.util.Calendar calendar14 = dateTime11.toCalendar(locale12);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        java.util.Date date16 = calendar15.getTime();
        calendar15.setFirstDayOfWeek(32770);
        int int19 = calendar15.getFirstDayOfWeek();
        java.util.Date date20 = calendar15.getTime();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.add(3, 22);
        java.util.Date date25 = calendar21.getTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        int int34 = dateTime30.getYear();
        org.joda.time.DateTime.Property property35 = dateTime30.weekyear();
        org.joda.time.DateTime dateTime36 = property35.withMaximumValue();
        org.joda.time.DateTime dateTime37 = property35.roundHalfCeilingCopy();
        java.util.Date date38 = dateTime37.toDate();
        int int39 = date38.getDate();
        org.joda.time.YearMonthDay yearMonthDay40 = org.joda.time.YearMonthDay.fromDateFields(date38);
        boolean boolean41 = date25.before(date38);
        date38.setSeconds(1970);
        boolean boolean44 = date20.before(date38);
        calendar14.setTime(date38);
        java.time.Instant instant46 = date38.toInstant();
        java.lang.Object obj47 = date38.clone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh" + "'", str13, "zh");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1641169970000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=32,SECOND=50,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573458749,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=32770,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=749,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 09:57:38 UTC 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32770 + "'", int19 == 32770);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Fri Feb 11 09:57:38 UTC 2022");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1657879058749,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=749,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Fri Jul 15 09:57:38 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 03 00:32:50 UTC 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "Mon Jan 03 00:32:50 UTC 2022");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "Mon Jan 03 00:32:50 UTC 2022");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "Mon Jan 03 00:32:50 UTC 2022");
    }

    @Test
    public void test17570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17570");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        java.lang.String str14 = property12.getName();
        org.joda.time.LocalTime localTime15 = property12.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property12.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime17 = property12.roundCeilingCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573458800,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=800,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:57:38.800" + "'", str4, "09:57:38.800");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573458800,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=800,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test17571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17571");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(2);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        int int14 = dateTime12.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime12.withYearOfEra(26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime12.withDayOfWeek(35370);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35370 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test17572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17572");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.Interval interval18 = interval10.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Duration duration19 = interval18.toDuration();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (byte) 100);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime29);
        long long33 = duration19.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime7.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTime(timeOfDay42, dateTimeZone43);
        boolean boolean45 = dateTime44.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime44.withMonthOfYear((int) (byte) 1);
        int int48 = dateTime44.getYear();
        org.joda.time.DateMidnight dateMidnight49 = dateTime44.toDateMidnight();
        org.joda.time.DateTime dateTime50 = yearMonthDay36.toDateTime((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight49.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight52 = property51.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.withYearOfCentury((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.minusWeeks(789);
        int int57 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.minutes();
        org.joda.time.DurationField durationField66 = chronology64.weekyears();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DateTimeField dateTimeField68 = chronology64.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(chronology64);
        org.joda.time.DateTimeField dateTimeField70 = chronology64.clockhourOfHalfday();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-62100742311688L), chronology64);
        org.joda.time.DateTimeField dateTimeField72 = chronology64.monthOfYear();
        org.joda.time.LocalDate localDate73 = org.joda.time.LocalDate.now(chronology64);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(35380953L, chronology64);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight52.withChronology(chronology64);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 33L + "'", long33 == 33L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateMidnight75);
    }

    @Test
    public void test17573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17573");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withPeriodAdded(readablePeriod4, 22);
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        java.lang.Object obj8 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfHour();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfCentury(10);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate23.centuryOfEra();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromCalendarFields(calendar26);
        calendar26.setFirstDayOfWeek(2022);
        int int34 = calendar26.getMinimum(2);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale42.getDisplayCountry();
        int int45 = dateTimeField41.getMaximumTextLength(locale42);
        java.lang.String str46 = locale42.getDisplayScript();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale42);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone35, locale42);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long51 = dateTimeZone49.previousTransition((long) 8);
        org.joda.time.Interval interval52 = localDate23.toInterval(dateTimeZone49);
        org.joda.time.Chronology chronology53 = chronology13.withZone(dateTimeZone49);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(obj8, dateTimeZone49);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) localDate7, dateTimeZone49);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance();
        calendar56.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay60 = org.joda.time.YearMonthDay.fromCalendarFields(calendar56);
        calendar56.setFirstDayOfWeek(2022);
        int int64 = calendar56.getMinimum(2);
        java.util.TimeZone timeZone65 = calendar56.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.DateTime dateTime68 = localDate55.toDateTimeAtMidnight(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusSeconds(35333459);
        int int71 = dateTime70.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1657879058910,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=910,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u53f0\u7063" + "'", str44, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644573458910,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=910,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573458910,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=910,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 8L + "'", long51 == 8L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1657879058910,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=38,MILLISECOND=910,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test17574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17574");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(43);
        long long3 = dateTimeZone1.convertUTCToLocal((long) 665);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getVariant();
        java.lang.String str21 = dateTimeField17.getAsShortText(3, locale19);
        int int22 = dateTimeField17.getMaximumValue();
        long long25 = dateTimeField17.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) long25, dateTimeZone26);
        boolean boolean28 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getCenturyOfEra();
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        int int31 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime33 = dateTime27.plusYears(260);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 154800665L + "'", long3 == 154800665L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "3" + "'", str21, "3");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19 + "'", int29 == 19);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 154800000 + "'", int31 == 154800000);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test17575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17575");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        int int22 = property14.compareTo((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.Chronology chronology23 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay16.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean27 = yearMonthDay16.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        int int40 = dateTimeZone38.getStandardOffset((long) 13);
        long long44 = dateTimeZone38.convertLocalToUTC(229L, false, (long) 49);
        long long46 = dateTimeZone38.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime47 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime48 = dateTime4.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay50.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay(dateTimeZone55);
        org.joda.time.TimeOfDay timeOfDay57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = yearMonthDay56.toDateTime(timeOfDay57, dateTimeZone58);
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay56.monthOfYear();
        org.joda.time.DateTime dateTime61 = yearMonthDay56.toDateTimeAtCurrentTime();
        int int62 = property54.compareTo((org.joda.time.ReadablePartial) yearMonthDay56);
        org.joda.time.YearMonthDay yearMonthDay63 = property54.withMinimumValue();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime67 = interval66.getEnd();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.Interval interval74 = interval66.overlap((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Duration duration75 = interval74.toDuration();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(dateTimeZone76);
        org.joda.time.TimeOfDay timeOfDay78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = yearMonthDay77.toDateTime(timeOfDay78, dateTimeZone79);
        boolean boolean81 = dateTime80.isBeforeNow();
        org.joda.time.DateTime dateTime83 = dateTime80.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime85 = dateTime83.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime87 = dateTime85.minusHours((int) (byte) 100);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) dateTime85);
        int int89 = property54.compareTo((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Chronology chronology90 = dateTime85.getChronology();
        int int91 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime85);
        java.lang.String str92 = dateTimeZone38.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 229L + "'", long44 == 229L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 49L + "'", long46 == 49L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Etc/UTC" + "'", str92, "Etc/UTC");
    }

    @Test
    public void test17576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17576");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.LocalDate.Property property28 = localDate26.dayOfMonth();
        org.joda.time.LocalDate.Property property29 = localDate26.yearOfEra();
        org.joda.time.LocalDate localDate30 = property29.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate30.withDayOfWeek(807);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 807 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010-02-25" + "'", str27, "2010-02-25");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test17577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17577");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate4.plus(readablePeriod5);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(20);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(42);
        int int17 = dateTime16.getHourOfDay();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        boolean boolean29 = dateTime28.isBeforeNow();
        org.joda.time.DateTime dateTime31 = dateTime28.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime28.toDateTime(chronology36);
        boolean boolean38 = interval21.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTime(timeOfDay42, dateTimeZone43);
        boolean boolean45 = dateTime44.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime44.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime44.toDateTime(chronology52);
        boolean boolean54 = durationFieldType39.isSupported(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime37.toDateTime(chronology52);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str59 = interval58.toString();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.Interval interval70 = interval62.overlap((org.joda.time.ReadableInterval) interval67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        boolean boolean76 = dateTime75.isBeforeNow();
        org.joda.time.DateTime dateTime78 = dateTime75.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime78.withMinuteOfHour((int) (short) 0);
        boolean boolean81 = interval70.contains((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean82 = interval58.contains((org.joda.time.ReadableInterval) interval70);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Interval interval84 = interval58.withPeriodBeforeEnd(readablePeriod83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = interval58.toPeriod(periodType85);
        org.joda.time.DateTime dateTime87 = dateTime37.minus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay18.plus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.DateTime dateTime90 = dateTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period86, 768);
        java.lang.String str91 = period86.toString();
        org.joda.time.LocalDate localDate92 = localDate6.plus((org.joda.time.ReadablePeriod) period86);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str59, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PT0.033S" + "'", str91, "PT0.033S");
        org.junit.Assert.assertNotNull(localDate92);
    }

    @Test
    public void test17578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17578");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.lang.Integer int4 = dateTimeFormatter3.getPivotYear();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay9.year();
        int[] intArray13 = yearMonthDay9.getValues();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.year();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale17.getDisplayScript();
        java.lang.String str20 = locale17.toLanguageTag();
        java.lang.String str21 = locale17.toLanguageTag();
        java.lang.String str22 = locale16.getDisplayVariant(locale17);
        java.lang.String str23 = yearMonthDay9.toString("-0001-02-11", locale16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withLocale(locale16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withDefaultYear(52);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeFormatter26.getZone();
        boolean boolean28 = dateTimeFormatter26.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.parse("T09:55:07.702", dateTimeFormatter26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879059080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 7, 15]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-TW" + "'", str20, "zh-TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-TW" + "'", str21, "zh-TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-0001-02-11" + "'", str23, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17579");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime18.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay40.monthOfYear();
        org.joda.time.DateTime dateTime45 = yearMonthDay40.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay47.toDateTime(timeOfDay48, dateTimeZone49);
        boolean boolean51 = dateTime50.isBeforeNow();
        org.joda.time.DateTime dateTime53 = dateTime50.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean55 = dateTime53.isSupported(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType54.getRangeDurationType();
        org.joda.time.DateTime.Property property57 = dateTime45.property(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType54.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        int int64 = dateTime63.getYearOfCentury();
        org.joda.time.DateTime dateTime66 = dateTime63.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = dateTime63.plusSeconds((int) 'a');
        org.joda.time.DateTime dateTime69 = dateTime68.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime72 = dateTime69.withFieldAdded(durationFieldType70, 0);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay(dateTimeZone73);
        org.joda.time.TimeOfDay timeOfDay75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = yearMonthDay74.toDateTime(timeOfDay75, dateTimeZone76);
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay74.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay(dateTimeZone79);
        org.joda.time.TimeOfDay timeOfDay81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = yearMonthDay80.toDateTime(timeOfDay81, dateTimeZone82);
        org.joda.time.YearMonthDay.Property property84 = yearMonthDay80.monthOfYear();
        org.joda.time.DateTime dateTime85 = yearMonthDay80.toDateTimeAtCurrentTime();
        int int86 = property78.compareTo((org.joda.time.ReadablePartial) yearMonthDay80);
        org.joda.time.Chronology chronology87 = yearMonthDay80.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.dayOfWeek();
        org.joda.time.DurationField durationField89 = durationFieldType70.getField(chronology87);
        boolean boolean90 = durationFieldType58.isSupported(chronology87);
        org.joda.time.DateTimeField dateTimeField91 = chronology87.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight(chronology87);
        org.joda.time.DateTimeField dateTimeField93 = chronology87.clockhourOfHalfday();
        org.joda.time.DateTime dateTime94 = dateTime18.withChronology(chronology87);
        org.joda.time.DateTime.Property property95 = dateTime94.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test17580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17580");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime6.getWeekyear();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        boolean boolean21 = dateTime20.isBeforeNow();
        org.joda.time.DateTime dateTime23 = dateTime20.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime20.toDateTime(chronology28);
        boolean boolean30 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime36.toDateTime(chronology44);
        boolean boolean46 = durationFieldType31.isSupported(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime29.toDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime29.toMutableDateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTime(timeOfDay56, dateTimeZone57);
        boolean boolean59 = dateTime58.isBeforeNow();
        org.joda.time.DateTime dateTime61 = dateTime58.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTime dateTime67 = dateTime58.toDateTime(chronology66);
        boolean boolean68 = interval51.isAfter((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay(dateTimeZone70);
        org.joda.time.TimeOfDay timeOfDay72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = yearMonthDay71.toDateTime(timeOfDay72, dateTimeZone73);
        boolean boolean75 = dateTime74.isBeforeNow();
        org.joda.time.DateTime dateTime77 = dateTime74.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime81 = interval80.getEnd();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        org.joda.time.DateTime dateTime83 = dateTime74.toDateTime(chronology82);
        boolean boolean84 = durationFieldType69.isSupported(chronology82);
        org.joda.time.DateTime dateTime85 = dateTime67.toDateTime(chronology82);
        org.joda.time.DateTimeField dateTimeField86 = chronology82.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField87 = chronology82.era();
        org.joda.time.Chronology chronology88 = chronology82.withUTC();
        org.joda.time.DateTime dateTime89 = dateTime29.withChronology(chronology82);
        org.joda.time.DateTime dateTime90 = dateTime6.withChronology(chronology82);
        org.joda.time.YearMonthDay yearMonthDay91 = new org.joda.time.YearMonthDay((long) 488, chronology82);
        org.joda.time.DateTimeField dateTimeField92 = chronology82.clockhourOfDay();
        java.lang.String str93 = chronology82.toString();
        org.joda.time.YearMonthDay yearMonthDay94 = new org.joda.time.YearMonthDay(7889184004968L, chronology82);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str93, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test17581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17581");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addNoWrapToCopy(871);
        org.joda.time.LocalTime localTime6 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property3.addCopy(35607);
        org.joda.time.LocalTime localTime9 = property3.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573459247,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=247,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test17582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17582");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(20);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.year();
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withPeriodAdded(readablePeriod14, 0);
        int int17 = dateMidnight13.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.plusWeeks((-292275054));
        int int20 = dateMidnight13.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight13.minusWeeks(182);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.Interval interval33 = interval25.overlap((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration34 = interval33.toDuration();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight13.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime6.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusYears(35334189);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.year();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 42 + "'", int17 == 42);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test17583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17583");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateTime.Property property14 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        java.util.Date date17 = dateTime16.toDate();
        int int18 = date17.getDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date17);
        boolean boolean20 = date4.before(date17);
        int int21 = date4.getDate();
        int int22 = date4.getYear();
        java.time.Instant instant23 = date4.toInstant();
        java.util.Date date24 = java.util.Date.from(instant23);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879059284,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=284,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:57:39 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 122 + "'", int22 == 122);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Jul 15 09:57:39 UTC 2022");
    }

    @Test
    public void test17584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17584");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime4.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.DateTime.Property property23 = dateTime18.weekyear();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.joda.time.DateTime dateTime26 = dateTime24.withYear(2);
        int int27 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property28 = dateTime4.hourOfDay();
        org.joda.time.DateTime.Property property29 = dateTime4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.monthOfYear();
        java.lang.String str36 = property35.getAsString();
        java.lang.Object obj37 = null;
        boolean boolean38 = property35.equals(obj37);
        boolean boolean39 = dateTime4.equals((java.lang.Object) property35);
        org.joda.time.YearMonthDay yearMonthDay40 = property35.withMinimumValue();
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.lang.String str43 = property35.getAsText(locale41);
        org.joda.time.DurationField durationField44 = property35.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2" + "'", str36, "2");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e8c\u6708" + "'", str43, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test17585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17585");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfCentury((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight6 = localDate2.toDateMidnight();
        boolean boolean8 = dateMidnight6.equals((java.lang.Object) "2022-02-11T09:49:10.269");
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 42 + "'", int3 == 42);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test17586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17586");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        int int4 = property3.get();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addToCopy(10);
        org.joda.time.TimeOfDay timeOfDay7 = property3.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay8 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = timeOfDay8.getFieldTypes();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test17587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17587");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str7 = locale5.getExtension('a');
        java.lang.String str8 = locale3.getDisplayLanguage(locale5);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale3);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale10.getISO3Language();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.year();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getVariant();
        java.lang.String str22 = dateTimeField18.getAsShortText(3, locale20);
        int int23 = dateTimeField18.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay26.monthOfYear();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = property30.getAsShortText(locale31);
        java.lang.String str34 = dateTimeField18.getAsText(35277, locale31);
        java.lang.String str35 = locale10.getDisplayCountry(locale31);
        java.lang.String str36 = locale3.getDisplayLanguage(locale10);
        java.util.Locale.setDefault(category0, locale3);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u5fb7\u6587" + "'", str8, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573459356,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3" + "'", str22, "3");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e8c\u6708" + "'", str33, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "35277" + "'", str34, "35277");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str36, "\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test17588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17588");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        int int15 = dateTime14.getYearOfCentury();
        org.joda.time.DateTime dateTime17 = dateTime14.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime14.plusSeconds((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime23 = dateTime20.withFieldAdded(durationFieldType21, 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay25.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.monthOfYear();
        org.joda.time.DateTime dateTime36 = yearMonthDay31.toDateTimeAtCurrentTime();
        int int37 = property29.compareTo((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.Chronology chronology38 = yearMonthDay31.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfWeek();
        org.joda.time.DurationField durationField40 = durationFieldType21.getField(chronology38);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.minutes();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.centuryOfEra();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate50 = localDate48.withYearOfCentury(10);
        org.joda.time.LocalDate localDate52 = localDate50.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate54 = localDate50.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property55 = localDate54.weekyear();
        org.joda.time.DateTime dateTime56 = localDate54.toDateTimeAtCurrentTime();
        long long58 = chronology45.set((org.joda.time.ReadablePartial) localDate54, (long) 708);
        boolean boolean59 = durationFieldType21.isSupported(chronology45);
        org.joda.time.DateTime dateTime60 = dateTime9.withChronology(chronology45);
        int int61 = dateTime60.getYear();
        org.joda.time.DateTime.Property property62 = dateTime60.dayOfWeek();
        org.joda.time.DateTime dateTime64 = property62.addToCopy(35752216);
        org.joda.time.DateTime.Property property65 = dateTime64.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-62195212799292L) + "'", long58 == (-62195212799292L));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test17589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17589");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.plusMillis(19);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = locale10.stripExtensions();
        int int12 = property9.getMaximumTextLength(locale10);
        java.lang.Object obj13 = locale10.clone();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "en");
    }

    @Test
    public void test17590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17590");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(35279414);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str8 = interval7.toString();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.Interval interval19 = interval11.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour((int) (short) 0);
        boolean boolean30 = interval19.contains((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean31 = interval7.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Interval interval33 = interval7.withPeriodBeforeEnd(readablePeriod32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = interval7.toPeriod(periodType34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay2.plus((org.joda.time.ReadablePeriod) period35);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573459431,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=431,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:57:39 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str8, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
    }

    @Test
    public void test17591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17591");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.withField(dateTimeFieldType8, 4);
        java.lang.Object obj11 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(obj11, chronology16);
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(chronology16);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay7, chronology16);
        org.joda.time.DateTimeField dateTimeField23 = chronology16.era();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((long) 985, chronology16);
        org.joda.time.Interval interval25 = new org.joda.time.Interval(863994L, (long) 35833113, chronology16);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test17592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17592");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        boolean boolean27 = interval2.containsNow();
        org.joda.time.Chronology chronology28 = interval2.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfSecond();
        int int34 = dateTimeField32.getMaximumValue(426L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 999 + "'", int34 == 999);
    }

    @Test
    public void test17593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17593");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.TimeOfDay timeOfDay8 = property6.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property6.addNoWrapToCopy(708);
        java.util.Locale locale13 = new java.util.Locale("2022-02-09T22:48:08.395Z", "09:48:11.954");
        java.lang.String str14 = property6.getAsShortText(locale13);
        org.joda.time.TimeOfDay timeOfDay15 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField16 = property6.getField();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfCentury(10);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime22 = localDate21.toDateTimeAtCurrentTime();
        java.util.Date date23 = localDate21.toDate();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay25.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.withField(dateTimeFieldType30, 4);
        int int33 = timeOfDay32.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay32.withMillisOfSecond(0);
        int[] intArray36 = timeOfDay35.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray38 = dateTimeField16.set((org.joda.time.ReadablePartial) localDate21, 35675, intArray36, (-7198));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -7198 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals(locale13.toString(), "2022-02-09t22:48:08.395z_09:48:11.954");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "59" + "'", str14, "59");
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Feb 11 00:00:00 UTC 2010");
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(timeOfDay32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 57 + "'", int33 == 57);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[4, 57, 1, 0]");
    }

    @Test
    public void test17594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17594");
        java.lang.Object obj1 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfCentury(10);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property17 = localDate16.weekyear();
        org.joda.time.LocalDate.Property property18 = localDate16.centuryOfEra();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay23 = org.joda.time.YearMonthDay.fromCalendarFields(calendar19);
        calendar19.setFirstDayOfWeek(2022);
        int int27 = calendar19.getMinimum(2);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale35.getDisplayCountry();
        int int38 = dateTimeField34.getMaximumTextLength(locale35);
        java.lang.String str39 = locale35.getDisplayScript();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone28, locale35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long44 = dateTimeZone42.previousTransition((long) 8);
        org.joda.time.Interval interval45 = localDate16.toInterval(dateTimeZone42);
        org.joda.time.Chronology chronology46 = chronology6.withZone(dateTimeZone42);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(obj1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) 473, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((long) 35362104);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withDayOfYear(210);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1657879059497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=497,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u53f0\u7063" + "'", str37, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644573459497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=497,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644573459497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=497,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 8L + "'", long44 == 8L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test17595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17595");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(42);
        org.joda.time.DateTime dateTime8 = property5.withMaximumValue();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime11 = dateTime8.withFieldAdded(durationFieldType9, 722);
        int int12 = dateTime8.getMillisOfDay();
        org.joda.time.DateTime.Property property13 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.getDateTime();
        org.joda.time.DateTime dateTime15 = property13.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 86399525 + "'", int12 == 86399525);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test17596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17596");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        int int3 = localDate0.size();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        int int14 = localDate0.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate localDate16 = localDate0.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        int int25 = dateTime21.getYear();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime21.withDurationAdded(readableDuration26, (int) (short) 100);
        int int29 = dateTime21.getYear();
        org.joda.time.DateTime.Property property30 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime31 = property30.getDateTime();
        org.joda.time.DateTime dateTime32 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        boolean boolean40 = dateTime39.isBeforeNow();
        org.joda.time.DateTime dateTime42 = dateTime39.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime44 = dateTime42.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime42.getZone();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance();
        calendar46.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay50 = org.joda.time.YearMonthDay.fromCalendarFields(calendar46);
        calendar46.setFirstDayOfWeek(2022);
        int int54 = calendar46.getMinimum(2);
        java.util.TimeZone timeZone55 = calendar46.getTimeZone();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.year();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.lang.String str64 = locale62.getDisplayCountry();
        int int65 = dateTimeField61.getMaximumTextLength(locale62);
        java.lang.String str66 = locale62.getDisplayScript();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale62);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone55, locale62);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        long long71 = dateTimeZone69.previousTransition((long) 8);
        long long73 = dateTimeZone45.getMillisKeepLocal(dateTimeZone69, (long) (byte) 0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 35277, dateTimeZone69);
        long long76 = dateTimeZone69.convertUTCToLocal((long) 'a');
        java.lang.String str78 = dateTimeZone69.getName((long) 35334189);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime80 = dateTime33.toDateTime(dateTimeZone69);
        org.joda.time.DateTime.Property property81 = dateTime80.hourOfDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1657879059541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=541,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u53f0\u7063" + "'", str64, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644573459541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=541,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1644573459541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=541,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 8L + "'", long71 == 8L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 97L + "'", long76 == 97L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test17597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17597");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight6 = property4.setCopy("4");
        org.joda.time.DateMidnight dateMidnight8 = property4.addToCopy((int) 'u');
        org.joda.time.DateMidnight dateMidnight10 = property4.addWrapFieldToCopy(35279414);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        int int14 = localTime12.getValue((int) (byte) 0);
        int int15 = localTime12.getMillisOfSecond();
        org.joda.time.LocalTime.Property property16 = localTime12.millisOfDay();
        org.joda.time.DurationField durationField17 = property16.getLeapDurationField();
        boolean boolean18 = property4.equals((java.lang.Object) durationField17);
        org.joda.time.Interval interval19 = property4.toInterval();
        org.joda.time.DateMidnight dateMidnight20 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withYear(377);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644573459585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=39,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 585 + "'", int15 == 585);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test17598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17598");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(967L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays(35447935);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay3.plusMonths(35656471);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.year();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test17599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17599");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology5);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.LocalTime localTime11 = property9.withMinimumValue();
        org.joda.time.LocalTime localTime12 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property9.setCopy(510);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test17600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17600");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundFloorCopy();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = property5.addWrapFieldToCopy(784);
        int int8 = dateMidnight7.getWeekOfWeekyear();
        int int9 = dateMidnight7.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test17601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17601");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillis((long) 477);
        int int12 = dateTime11.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 477 + "'", int12 == 477);
    }

    @Test
    public void test17602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17602");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.property(dateTimeFieldType6);
        int int8 = yearMonthDay1.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.minusMonths(2000);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay13 = property11.addToCopy(35851390);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test17603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17603");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        int int10 = dateTime9.getCenturyOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMillis((int) (byte) 0);
        int int13 = dateTime9.getHourOfDay();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Calendar calendar15 = dateTime9.toCalendar(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale.Builder builder17 = builder2.setLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setScript("-2960958-09-01T00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: -2960958-09-01T00:00:00.003 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573460273,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=273,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test17604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17604");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 16, chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property14.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.secondOfMinute();
        int int18 = localDateTime16.getMillisOfSecond();
        int int19 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone21);
        int int23 = localDateTime22.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusDays(2);
        int int26 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withMinuteOfHour(2);
        int int29 = localDateTime22.getYearOfCentury();
        int int30 = localDateTime22.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.plusYears(5);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMonths(35380);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale35);
        java.lang.String str37 = dateTimeField10.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399 + "'", int19 == 86399);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 70 + "'", int26 == 70);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 70 + "'", int29 == 70);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "secondOfDay" + "'", str37, "secondOfDay");
    }

    @Test
    public void test17605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17605");
        java.util.Date date3 = new java.util.Date(35349, 316, 962);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Dec 17 00:00:00 UTC 37277");
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test17606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17606");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        int int10 = dateTimeField5.getMaximumValue();
        long long12 = dateTimeField5.roundHalfFloor((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        int int17 = localDateTime15.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withFieldAdded(durationFieldType20, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusSeconds(93);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusHours(35280);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis(203);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getVariant();
        java.lang.String str39 = dateTimeField35.getAsShortText(3, locale37);
        java.lang.String str40 = locale37.getLanguage();
        java.lang.String str41 = locale37.getISO3Country();
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale37.getDisplayCountry(locale42);
        java.lang.String str44 = locale37.getCountry();
        java.lang.String str45 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime27, locale37);
        org.joda.time.ReadablePartial readablePartial46 = null;
        int int47 = dateTimeField5.getMinimumValue(readablePartial46);
        int int48 = dateTimeField5.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3" + "'", str39, "3");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "de" + "'", str40, "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-57" + "'", str45, "-57");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-292275054) + "'", int47 == (-292275054));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-292275054) + "'", int48 == (-292275054));
    }

    @Test
    public void test17607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17607");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withWeekyear(35277);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withWeekyear(126);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMonthOfYear(35745302);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35745302 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test17608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17608");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTime dateTime15 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.plusMonths(270);
        int int18 = yearMonthDay17.getMonthOfYear();
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime28.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime28.getZone();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay36 = org.joda.time.YearMonthDay.fromCalendarFields(calendar32);
        calendar32.setFirstDayOfWeek(2022);
        int int40 = calendar32.getMinimum(2);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.year();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleKeys();
        java.lang.String str50 = locale48.getDisplayCountry();
        int int51 = dateTimeField47.getMaximumTextLength(locale48);
        java.lang.String str52 = locale48.getDisplayScript();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale48);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone41, locale48);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        long long57 = dateTimeZone55.previousTransition((long) 8);
        long long59 = dateTimeZone31.getMillisKeepLocal(dateTimeZone55, (long) (byte) 0);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone31);
        int int62 = dateTimeZone31.getStandardOffset((long) 42);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) 8, dateTimeZone31);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime67 = interval66.getEnd();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.Interval interval74 = interval66.overlap((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Duration duration75 = interval74.toDuration();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(dateTimeZone76);
        org.joda.time.TimeOfDay timeOfDay78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = yearMonthDay77.toDateTime(timeOfDay78, dateTimeZone79);
        boolean boolean81 = dateTime80.isBeforeNow();
        org.joda.time.DateTime dateTime83 = dateTime80.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime85 = dateTime83.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime87 = dateTime85.minusHours((int) (byte) 100);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration89 = duration75.toDuration();
        long long90 = duration89.getMillis();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight63.withDurationAdded((org.joda.time.ReadableDuration) duration89, 35608);
        org.joda.time.DateTime dateTime93 = dateTime19.plus((org.joda.time.ReadableDuration) duration89);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1657879060346,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=346,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u53f0\u7063" + "'", str50, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644573460346,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=346,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1644573460346,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=346,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 8L + "'", long57 == 8L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 33L + "'", long90 == 33L);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test17609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17609");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        java.lang.String str17 = dateTimeField15.getAsText((long) 292278994);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay25.monthOfYear();
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTimeAtCurrentTime();
        int int31 = property23.compareTo((org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.Chronology chronology32 = yearMonthDay25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay25.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.withYear(35271);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = yearMonthDay36.getFieldTypes();
        int[] intArray42 = new int[] { (byte) 0, ' ', 708, 35275 };
        int int43 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay36, intArray42);
        org.joda.time.DurationField durationField44 = dateTimeField15.getDurationField();
        java.lang.String str46 = dateTimeField15.getAsShortText(2117871900371L);
        int int48 = dateTimeField15.get(35309838L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 32, 708, 35275]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7" + "'", str46, "7");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test17610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17610");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.LocalDate.Property property8 = localDate2.centuryOfEra();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale10.getDisplayScript();
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleKeys();
        java.lang.String str14 = localDate2.toString("\u4e0a\u5348 12:00:00", locale10);
        java.util.Set<java.lang.String> strSet15 = locale10.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e0a\u5348 12:00:00" + "'", str14, "\u4e0a\u5348 12:00:00");
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test17611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17611");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime7 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime8 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.withYear(861);
        int int11 = yearMonthDay1.size();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusHours((int) (byte) 100);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = locale25.getLanguage();
        java.util.Calendar calendar27 = dateTime24.toCalendar(locale25);
        boolean boolean28 = locale25.hasExtensions();
        java.lang.String str29 = locale25.getDisplayScript();
        java.util.Locale locale30 = locale25.stripExtensions();
        java.lang.String str31 = yearMonthDay1.toString("\u52a0\u62ff\u5927", locale25);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1641531640471,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=7,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=40,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u52a0\u62ff\u5927" + "'", str31, "\u52a0\u62ff\u5927");
    }

    @Test
    public void test17612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17612");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar12);
        calendar12.setFirstDayOfWeek(2022);
        int int20 = calendar12.getMinimum(2);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.lang.String str30 = locale28.getDisplayCountry();
        int int31 = dateTimeField27.getMaximumTextLength(locale28);
        java.lang.String str32 = locale28.getDisplayScript();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long37 = dateTimeZone35.previousTransition((long) 8);
        long long39 = dateTimeZone11.getMillisKeepLocal(dateTimeZone35, (long) (byte) 0);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone11);
        int int42 = dateTimeZone11.getStandardOffset((long) 42);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 8, dateTimeZone11);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.Interval interval54 = interval46.overlap((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone56);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTime(timeOfDay58, dateTimeZone59);
        boolean boolean61 = dateTime60.isBeforeNow();
        org.joda.time.DateTime dateTime63 = dateTime60.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime65 = dateTime63.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime67 = dateTime65.minusHours((int) (byte) 100);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration69 = duration55.toDuration();
        long long70 = duration69.getMillis();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight43.withDurationAdded((org.joda.time.ReadableDuration) duration69, 35608);
        org.joda.time.Duration duration73 = duration69.toDuration();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657879060492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u53f0\u7063" + "'", str30, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573460492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573460492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8L + "'", long37 == 8L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 33L + "'", long70 == 33L);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(duration73);
    }

    @Test
    public void test17613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17613");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = property10.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfCeilingCopy();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.year();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getVariant();
        java.lang.String str23 = dateTimeField19.getAsShortText(3, locale21);
        long long25 = dateTimeField19.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.monthOfYear();
        int int30 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra(281);
        int int37 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusMinutes(35626);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "3" + "'", str23, "3");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test17614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17614");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        int int4 = property3.get();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addNoWrapToCopy((int) 'x');
        org.joda.time.TimeOfDay timeOfDay8 = property3.addNoWrapToCopy((int) (short) -1);
        int int9 = property3.get();
        org.joda.time.TimeOfDay timeOfDay10 = property3.withMinimumValue();
        int int11 = timeOfDay10.getHourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test17615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17615");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtMidnight();
        int int5 = localDate0.getEra();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfWeek();
        org.joda.time.LocalDate.Property property7 = localDate0.monthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test17616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        int int12 = property9.get();
        org.joda.time.DateTime dateTime13 = property9.roundHalfEvenCopy();
        int int14 = property9.getLeapAmount();
        org.joda.time.DateTime dateTime15 = property9.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test17617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17617");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        java.util.Locale locale28 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 35370);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTimeFormatter30.parseDateTime("Mon Oct 04 10:07:04 UTC 2849");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test17618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17618");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        int int18 = dateTimeZone16.getStandardOffset((long) 13);
        long long22 = dateTimeZone16.convertLocalToUTC(229L, false, (long) 49);
        int int24 = dateTimeZone16.getOffset(0L);
        boolean boolean26 = dateTimeZone16.isStandardOffset((long) 35275);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTime dateTime28 = localDate3.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(58L, dateTimeZone16);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 229L + "'", long22 == 229L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test17619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17619");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval26 = interval18.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval41 = interval33.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        boolean boolean47 = dateTime46.isBeforeNow();
        org.joda.time.DateTime dateTime49 = dateTime46.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour((int) (short) 0);
        boolean boolean52 = interval41.contains((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = interval29.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval29.withPeriodBeforeEnd(readablePeriod54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval29.toPeriod(periodType56);
        org.joda.time.Interval interval58 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        long long61 = chronology14.add((org.joda.time.ReadablePeriod) period57, (long) 'a', 4);
        org.joda.time.DurationField durationField62 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = chronology14.weekyear();
        org.joda.time.DurationField durationField65 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField66 = chronology14.secondOfDay();
        org.joda.time.DurationField durationField67 = chronology14.minutes();
        org.joda.time.DateMidnight dateMidnight68 = org.joda.time.DateMidnight.now(chronology14);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 229L + "'", long61 == 229L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateMidnight68);
    }

    @Test
    public void test17620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17620");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight6 = property4.setCopy("4");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        java.lang.String str13 = property12.toString();
        java.lang.String str14 = property12.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay16.withField(dateTimeFieldType17, 2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = dateMidnight6.withField(dateTimeFieldType17, 35603);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35603 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[monthOfYear]" + "'", str13, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test17621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17621");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(17);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = property5.getAsShortText(locale8);
        org.joda.time.LocalTime localTime10 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property5.getLocalTime();
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(406);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573460672,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=672,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 672 + "'", int4 == 672);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "35860672" + "'", str9, "35860672");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test17622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17622");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime.Property property3 = localTime1.millisOfDay();
        org.joda.time.Chronology chronology4 = localTime1.getChronology();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573460695,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=695,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test17623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17623");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-62100741933790L), (long) 35470);
        org.joda.time.Interval interval4 = interval2.withStartMillis(0L);
        org.junit.Assert.assertNotNull(interval4);
    }

    @Test
    public void test17624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17624");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(22);
        int int9 = localTime8.getHourOfDay();
        int int10 = localTime8.getHourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573460719,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=719,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
    }

    @Test
    public void test17625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17625");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval8 = localDate2.toInterval();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfCentury(10);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight14 = localDate11.toDateMidnight();
        long long15 = dateMidnight14.getMillis();
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.centuryOfEra();
        org.joda.time.DateMidnight.Property property17 = dateMidnight14.dayOfWeek();
        boolean boolean18 = interval8.equals((java.lang.Object) dateMidnight14);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DurationField durationField25 = chronology23.weekyears();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight14.toMutableDateTime(chronology23);
        int int33 = mutableDateTime32.getMinuteOfHour();
        int int34 = mutableDateTime32.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1265846400000L + "'", long15 == 1265846400000L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test17626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17626");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        boolean boolean13 = dateTimeField11.isLeap(9223371990305506308L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17627");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.era();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.minuteOfDay();
        org.joda.time.DurationField durationField40 = chronology33.years();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DateTime.Property property42 = dateTime41.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) dateTime41);
        int int44 = dateTime41.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20 + "'", int44 == 20);
    }

    @Test
    public void test17628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17628");
        java.util.Date date6 = new java.util.Date(35356782, (int) (byte) -1, 270, 811, (-918), 35275);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Sep 29 13:29:55 UTC 35358682");
    }

    @Test
    public void test17629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17629");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 660);
        int int2 = dateTime1.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test17630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17630");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(44);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromCalendarFields(calendar24);
        calendar24.setFirstDayOfWeek(2022);
        int int32 = calendar24.getMinimum(2);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale40.getDisplayCountry();
        int int43 = dateTimeField39.getMaximumTextLength(locale40);
        java.lang.String str44 = locale40.getDisplayScript();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale40);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone33, locale40);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long49 = dateTimeZone47.previousTransition((long) 8);
        long long51 = dateTimeZone23.getMillisKeepLocal(dateTimeZone47, (long) (byte) 0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 35277, dateTimeZone47);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter10.withZone(dateTimeZone47);
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = dateTimeFormatter10.getPrinter();
        java.lang.Integer int56 = dateTimeFormatter10.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 857);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = dateTimeFormatter10.print((long) 662);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u5fb7\u6587" + "'", str8, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1657879060815,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=815,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u53f0\u7063" + "'", str42, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644573460815,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=815,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573460815,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=40,MILLISECOND=815,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 8L + "'", long49 == 8L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(dateTimePrinter55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
    }

    @Test
    public void test17631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17631");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfYear();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(chronology4);
        org.joda.time.LocalTime localTime10 = localTime8.minusHours(35331);
        org.joda.time.LocalTime localTime12 = localTime8.minusMillis(965);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test17632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17632");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 16, chronology8);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval22 = interval14.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str26 = interval25.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime45.withMinuteOfHour((int) (short) 0);
        boolean boolean48 = interval37.contains((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = interval25.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Interval interval51 = interval25.withPeriodBeforeEnd(readablePeriod50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval25.toPeriod(periodType52);
        org.joda.time.Interval interval54 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        long long57 = chronology8.add((org.joda.time.ReadablePeriod) period53, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod58 = period53.toMutablePeriod();
        org.joda.time.Interval interval59 = interval2.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Chronology chronology60 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.TimeOfDay timeOfDay63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTime(timeOfDay63, dateTimeZone64);
        boolean boolean66 = dateTime65.isBeforeNow();
        org.joda.time.DateTime dateTime68 = dateTime65.withMonthOfYear((int) (byte) 1);
        int int69 = dateTime65.getYear();
        org.joda.time.DateTime.Property property70 = dateTime65.weekyear();
        org.joda.time.DateTime dateTime71 = property70.withMaximumValue();
        org.joda.time.DateTime.Property property72 = dateTime71.millisOfDay();
        int int73 = property72.getLeapAmount();
        org.joda.time.DateTime dateTime75 = property72.setCopy(50);
        org.joda.time.Interval interval76 = interval2.withEnd((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime.Property property77 = dateTime75.weekOfWeekyear();
        org.joda.time.DateTime dateTime78 = property77.roundFloorCopy();
        org.joda.time.DateTime dateTime79 = property77.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str26, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1163943L + "'", long57 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test17633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17633");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("09:57:27.392");
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test17634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17634");
        java.util.Date date5 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long6 = date5.getTime();
        int int7 = date5.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        long long9 = date5.getTime();
        date5.setDate(35273);
        java.time.Instant instant12 = date5.toInstant();
        date5.setMinutes(99);
        date5.setMinutes(616);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 25 18:16:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-525628200000L) + "'", long6 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-525628200000L) + "'", long9 == (-525628200000L));
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test17635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17635");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDate0.toDateTimeAtCurrentTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(458);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        int int18 = dateTimeZone16.getStandardOffset((long) 13);
        long long22 = dateTimeZone16.convertLocalToUTC(229L, false, (long) 49);
        int int24 = dateTimeZone16.getOffset(0L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone16);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight29 = yearMonthDay28.toDateMidnight();
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay28.monthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 229L + "'", long22 == 229L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test17636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17636");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusDays(35296);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localDateTime1.getValue(136);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 136");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test17637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17637");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.lang.String str1 = durationFieldType0.toString();
        java.lang.String str2 = durationFieldType0.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eras" + "'", str1, "eras");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eras" + "'", str2, "eras");
    }

    @Test
    public void test17638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17638");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone6);
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=3,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=3,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test17639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17639");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(35590, 32770, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32770 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17640");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str40 = interval39.toString();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.Interval interval51 = interval43.overlap((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone52);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTime(timeOfDay54, dateTimeZone55);
        boolean boolean57 = dateTime56.isBeforeNow();
        org.joda.time.DateTime dateTime59 = dateTime56.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime61 = dateTime59.withMinuteOfHour((int) (short) 0);
        boolean boolean62 = interval51.contains((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean63 = interval39.contains((org.joda.time.ReadableInterval) interval51);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Interval interval65 = interval39.withPeriodBeforeEnd(readablePeriod64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval39.toPeriod(periodType66);
        org.joda.time.DateTime dateTime68 = dateTime18.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(538);
        org.joda.time.DateTime dateTime72 = dateTime68.plusHours(92);
        org.joda.time.DateTime dateTime74 = dateTime68.withYear((-240039));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str40, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test17641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17641");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int8 = calendar0.getMinimum(2);
        long long9 = calendar0.getTimeInMillis();
        calendar0.setTimeInMillis((long) 134);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(35302966);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property16 = localDate14.dayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=134,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=134,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1657879061016L + "'", long9 == 1657879061016L);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test17642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17642");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime5.toDateTime(chronology13);
        boolean boolean15 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyearOfCentury();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfDay();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(chronology13);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test17643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17643");
        java.util.Date date3 = new java.util.Date(21025144, 0, 35424157);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Jan 17 00:00:00 UTC 21124032");
    }

    @Test
    public void test17644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17644");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay14.minusMonths(999);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        java.lang.String str26 = chronology22.toString();
        org.joda.time.DurationField durationField27 = chronology22.halfdays();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfCentury(10);
        org.joda.time.LocalDate localDate32 = localDate30.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight33 = localDate30.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        boolean boolean40 = dateTime39.isBeforeNow();
        org.joda.time.DateTime dateTime42 = dateTime39.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime44 = dateTime42.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime42.getZone();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance();
        calendar46.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay50 = org.joda.time.YearMonthDay.fromCalendarFields(calendar46);
        calendar46.setFirstDayOfWeek(2022);
        int int54 = calendar46.getMinimum(2);
        java.util.TimeZone timeZone55 = calendar46.getTimeZone();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.year();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.lang.String str64 = locale62.getDisplayCountry();
        int int65 = dateTimeField61.getMaximumTextLength(locale62);
        java.lang.String str66 = locale62.getDisplayScript();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale62);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone55, locale62);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        long long71 = dateTimeZone69.previousTransition((long) 8);
        long long73 = dateTimeZone45.getMillisKeepLocal(dateTimeZone69, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight74 = yearMonthDay34.toDateMidnight(dateTimeZone45);
        org.joda.time.DateTime dateTime75 = localDate30.toDateTimeAtStartOfDay(dateTimeZone45);
        int int77 = dateTimeZone45.getOffsetFromLocal(16977599999641L);
        int int79 = dateTimeZone45.getStandardOffset(1657878512644L);
        org.joda.time.Chronology chronology80 = chronology22.withZone(dateTimeZone45);
        org.joda.time.Interval interval81 = yearMonthDay17.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate82 = yearMonthDay17.toLocalDate();
        org.joda.time.YearMonthDay.Property property83 = yearMonthDay17.dayOfMonth();
        int int84 = property83.getMinimumValueOverall();
        int int85 = property83.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str26, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1657879061054,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=54,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u53f0\u7063" + "'", str64, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644573461054,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=54,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1644573461054,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=54,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 8L + "'", long71 == 8L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 31 + "'", int85 == 31);
    }

    @Test
    public void test17645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17645");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfDay();
        int int6 = dateTime4.getSecondOfMinute();
        boolean boolean7 = dateTime4.isAfterNow();
        int int8 = dateTime4.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 41 + "'", int6 == 41);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test17646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17646");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval2.withPeriodBeforeEnd(readablePeriod27);
        long long29 = interval28.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now();
        long long34 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = property32.roundHalfEvenCopy();
        boolean boolean36 = interval28.isAfter((org.joda.time.ReadableInstant) dateMidnight35);
        boolean boolean37 = interval28.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        int int46 = dateTime42.getYear();
        org.joda.time.DateTime.Property property47 = dateTime42.weekyear();
        org.joda.time.DateTime dateTime48 = property47.withMaximumValue();
        org.joda.time.DateTime dateTime50 = dateTime48.withYear(2);
        org.joda.time.LocalDate localDate51 = dateTime50.toLocalDate();
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTimeISO();
        boolean boolean53 = interval28.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Interval interval55 = interval28.withEndMillis(1656633599512L);
        long long56 = interval28.toDurationMillis();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test17647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17647");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateMidnight dateMidnight6 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfFloorCopy();
        java.lang.String str8 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        org.joda.time.DateMidnight dateMidnight11 = property4.addToCopy(32418);
        org.joda.time.DateMidnight dateMidnight12 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight14 = property4.addToCopy((long) 511);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "11" + "'", str8, "11");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test17648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17648");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        int int9 = yearMonthDay4.getValue((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        boolean boolean13 = dateTimeZone11.isStandardOffset(743L);
        org.joda.time.Interval interval14 = yearMonthDay4.toInterval(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay16.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.year();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 16, chronology28);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval42 = interval34.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str46 = interval45.toString();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.Interval interval57 = interval49.overlap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.TimeOfDay timeOfDay60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay59.toDateTime(timeOfDay60, dateTimeZone61);
        boolean boolean63 = dateTime62.isBeforeNow();
        org.joda.time.DateTime dateTime65 = dateTime62.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime67 = dateTime65.withMinuteOfHour((int) (short) 0);
        boolean boolean68 = interval57.contains((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean69 = interval45.contains((org.joda.time.ReadableInterval) interval57);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Interval interval71 = interval45.withPeriodBeforeEnd(readablePeriod70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval45.toPeriod(periodType72);
        org.joda.time.Interval interval74 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period73);
        long long77 = chronology28.add((org.joda.time.ReadablePeriod) period73, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod78 = period73.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay16.minus((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay16.withYear(621);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = yearMonthDay16.toDateMidnight(dateTimeZone82);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.withYearOfCentury(21);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight83.withYearOfEra(35437);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight83.withCenturyOfEra(0);
        boolean boolean90 = interval14.isAfter((org.joda.time.ReadableInstant) dateMidnight83);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879061143,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=143,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str46, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1163943L + "'", long77 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test17649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17649");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone5 = calendar0.getTimeZone();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone5);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str15 = locale13.getDisplayCountry();
        int int16 = dateTimeField12.getMaximumTextLength(locale13);
        long long19 = dateTimeField12.getDifferenceAsLong((long) 20, (long) 32772);
        java.lang.String str20 = dateTimeField12.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField12.getType();
        java.lang.String str22 = dateTimeField12.getName();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("months");
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getVariant();
        java.lang.String str35 = dateTimeField31.getAsShortText(3, locale33);
        java.lang.String str36 = locale33.getLanguage();
        java.lang.String str37 = locale33.getISO3Country();
        java.lang.String str38 = locale25.getDisplayScript(locale33);
        java.lang.String str39 = dateTimeField12.getAsShortText(563, locale25);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone5, locale25);
        java.lang.String str41 = calendar40.getCalendarType();
        calendar40.set(86399999, (-729), 35849, 35854307, 75, 0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879061211,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=211,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644573461211,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=211,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u53f0\u7063" + "'", str15, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "year" + "'", str20, "year");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "year" + "'", str22, "year");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "months");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "3" + "'", str35, "3");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "de" + "'", str36, "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "563" + "'", str39, "563");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=86399999,MONTH=-729,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=35849,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=35854307,MINUTE=75,SECOND=0,MILLISECOND=212,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gregory" + "'", str41, "gregory");
    }

    @Test
    public void test17650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17650");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = dateTimeField5.getAsShortText(434, locale13);
        boolean boolean15 = dateTimeField5.isLenient();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.LocalDate localDate19 = yearMonthDay17.toLocalDate();
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 2698);
        int int23 = localDate19.compareTo((org.joda.time.ReadablePartial) localDate22);
        int int24 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property28 = localDate25.weekyear();
        org.joda.time.LocalDate.Property property29 = localDate25.yearOfEra();
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate32 = localDate25.plusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property33 = localDate32.year();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.withYear(22);
        int int41 = yearMonthDay40.getDayOfMonth();
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay40.monthOfYear();
        int[] intArray43 = yearMonthDay40.getValues();
        int[] intArray45 = dateTimeField5.addWrapPartial((org.joda.time.ReadablePartial) localDate32, 460, intArray43, 0);
        java.util.Locale locale47 = new java.util.Locale("Fri Feb 11 09:47:52 UTC 2022");
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str49 = locale47.getDisplayScript(locale48);
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleAttributes();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str54 = locale52.getExtension('a');
        java.lang.String str55 = locale48.getDisplayCountry(locale52);
        int int56 = dateTimeField5.getMaximumShortTextLength(locale52);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "434" + "'", str14, "434");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[22, 2, 11]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[22, 2, 11]");
        org.junit.Assert.assertEquals(locale47.toString(), "fri feb 11 09:47:52 utc 2022");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u52a0\u62ff\u5927" + "'", str55, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
    }

    @Test
    public void test17651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17651");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTime dateTime13 = yearMonthDay8.toDateTimeAtCurrentTime();
        int int14 = property6.compareTo((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.Chronology chronology15 = yearMonthDay8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        boolean boolean17 = dateTimeFieldType0.isSupported(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.seconds();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay26.monthOfYear();
        org.joda.time.DateTime dateTime31 = yearMonthDay26.toDateTimeAtCurrentTime();
        int int32 = property24.compareTo((org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.YearMonthDay yearMonthDay33 = property24.withMinimumValue();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval44 = interval36.overlap((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration45 = interval44.toDuration();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay47.toDateTime(timeOfDay48, dateTimeZone49);
        boolean boolean51 = dateTime50.isBeforeNow();
        org.joda.time.DateTime dateTime53 = dateTime50.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime55 = dateTime53.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusHours((int) (byte) 100);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime55);
        int int59 = property24.compareTo((org.joda.time.ReadableInstant) dateTime55);
        java.lang.String str60 = property24.toString();
        org.joda.time.YearMonthDay yearMonthDay62 = property24.addToCopy(621);
        org.joda.time.DateTime dateTime63 = yearMonthDay62.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate64 = yearMonthDay62.toLocalDate();
        int[] intArray66 = chronology15.get((org.joda.time.ReadablePartial) localDate64, 1644572964590L);
        org.joda.time.DateTimeField dateTimeField67 = chronology15.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[monthOfYear]" + "'", str60, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test17652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17652");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime7 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(100);
        int int10 = dateTime7.getYear();
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime7.plus(1657878811974L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test17653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17653");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology5);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        int int11 = property9.getMinimumValue();
        org.joda.time.LocalTime localTime13 = property9.addCopy(320);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test17654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17654");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 999);
        org.joda.time.LocalDate localDate3 = localDate1.plusDays(794);
        org.joda.time.LocalDate.Property property4 = localDate1.weekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test17655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17655");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfCentury(10);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay25.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.monthOfYear();
        org.joda.time.DateTime dateTime36 = yearMonthDay31.toDateTimeAtCurrentTime();
        int int37 = property29.compareTo((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.Chronology chronology38 = yearMonthDay31.getChronology();
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay31.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean42 = yearMonthDay31.isSupported(dateTimeFieldType41);
        boolean boolean43 = localDate23.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime45 = dateTime17.withField(dateTimeFieldType41, 17);
        org.joda.time.DateMidnight.Property property46 = dateMidnight12.property(dateTimeFieldType41);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("-0001-02-11");
        java.lang.String str49 = property46.getAsText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property46.getFieldType();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.minutes();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 18008, chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.era();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime67 = interval66.getEnd();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.minutes();
        org.joda.time.DurationField durationField70 = chronology68.weekyears();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology68);
        org.joda.time.DateTimeField dateTimeField72 = chronology68.minuteOfDay();
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str76 = locale74.getExtension('a');
        java.lang.String str77 = dateTimeField72.getAsText(4, locale74);
        java.lang.String str78 = dateTimeField62.getAsText((long) 901, locale74);
        boolean boolean79 = locale74.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight80 = property46.setCopy("0002-02-08T09:53:07.715Z", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0002-02-08T09:53:07.715Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "4" + "'", str77, "4");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u516c\u5143" + "'", str78, "\u516c\u5143");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test17656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17656");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar12);
        calendar12.setFirstDayOfWeek(2022);
        int int20 = calendar12.getMinimum(2);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.lang.String str30 = locale28.getDisplayCountry();
        int int31 = dateTimeField27.getMaximumTextLength(locale28);
        java.lang.String str32 = locale28.getDisplayScript();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long37 = dateTimeZone35.previousTransition((long) 8);
        long long39 = dateTimeZone11.getMillisKeepLocal(dateTimeZone35, (long) (byte) 0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 35277, dateTimeZone35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        java.lang.String str43 = dateTimeZone35.getNameKey((long) '4');
        long long46 = dateTimeZone35.adjustOffset((long) 33, true);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657879061367,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=367,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u53f0\u7063" + "'", str30, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573461367,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=367,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573461367,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=367,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8L + "'", long37 == 8L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 33L + "'", long46 == 33L);
    }

    @Test
    public void test17657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17657");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(99, (-1), 10);
        java.util.Calendar.Builder builder12 = builder8.setTimeOfDay(35342, 962, 1);
        java.util.Calendar.Builder builder17 = builder8.setTimeOfDay(35301, 35368617, 36, 123);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Calendar.Builder builder19 = builder17.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder17.set(35298, 21025144);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test17658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17658");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property9 = dateTime8.weekOfWeekyear();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime12 = property9.addToCopy((-456997));
        org.joda.time.DateTime dateTime13 = property9.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test17659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17659");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours((int) (byte) 100);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.Interval interval35 = interval27.overlap((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration36 = interval35.toDuration();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTime(timeOfDay39, dateTimeZone40);
        boolean boolean42 = dateTime41.isBeforeNow();
        org.joda.time.DateTime dateTime44 = dateTime41.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime46 = dateTime44.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusHours((int) (byte) 100);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.Interval interval60 = interval52.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Duration duration61 = interval60.toDuration();
        boolean boolean62 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration61);
        boolean boolean63 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration61);
        java.lang.String str64 = duration11.toString();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(dateTimeZone65);
        org.joda.time.TimeOfDay timeOfDay67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay66.toDateTime(timeOfDay67, dateTimeZone68);
        boolean boolean70 = dateTime69.isBeforeNow();
        org.joda.time.DateTime dateTime72 = dateTime69.withMonthOfYear((int) (byte) 1);
        int int73 = dateTime69.getYear();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime76 = dateTime69.withDurationAdded(readableDuration74, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime76, readablePeriod77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay(dateTimeZone79);
        org.joda.time.TimeOfDay timeOfDay81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = yearMonthDay80.toDateTime(timeOfDay81, dateTimeZone82);
        boolean boolean84 = dateTime83.isBeforeNow();
        org.joda.time.DateTime dateTime86 = dateTime83.withMonthOfYear((int) (byte) 1);
        int int87 = dateTime83.getYear();
        org.joda.time.DateTime.Property property88 = dateTime83.weekyear();
        boolean boolean89 = interval78.equals((java.lang.Object) dateTime83);
        int int90 = dateTime83.getMinuteOfDay();
        org.joda.time.Interval interval91 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime83);
        boolean boolean93 = interval91.isAfter(1641894614833L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0.033S" + "'", str64, "PT0.033S");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2022 + "'", int87 == 2022);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 597 + "'", int90 == 597);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test17660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17660");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(1641894539, 35516, 27307, 35573, 116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35573 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17661");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = property4.setCopy("en-US", locale8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"en-US\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17662");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.getName();
        java.lang.String str3 = durationFieldType1.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "millis" + "'", str2, "millis");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "millis" + "'", str3, "millis");
    }

    @Test
    public void test17663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17663");
        java.util.Date date5 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long6 = date5.getTime();
        int int7 = date5.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        long long9 = date5.getTime();
        date5.setDate(35273);
        java.time.Instant instant12 = date5.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date13);
        org.joda.time.LocalTime localTime16 = localTime14.plusMillis(86399593);
        org.joda.time.LocalTime localTime18 = localTime14.withMillisOfSecond(398);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-525628200000L) + "'", long6 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-525628200000L) + "'", long9 == (-525628200000L));
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test17664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17664");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder4.setDate(22, 1970, 120003);
        java.util.Calendar.Builder builder39 = builder4.setLenient(true);
        java.util.Calendar.Builder builder43 = builder4.setWeekDate(0, 35436, 35360);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay((java.lang.Object) 35436);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879061491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573461491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573461491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test17665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17665");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology4.getZone();
        java.lang.String str8 = chronology4.toString();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str8, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17666");
        java.util.Locale locale2 = new java.util.Locale("2022-02-09T22:48:08.395Z", "09:48:11.954");
        java.lang.String str3 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-09t22:48:08.395z_09:48:11.954");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "09:48:11.954" + "'", str3, "09:48:11.954");
    }

    @Test
    public void test17667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17667");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationField durationField8 = chronology5.minutes();
        java.lang.String str9 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str9, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17668");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("T09:55:07.702");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t09:55:07.702");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17669");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-62100742311688L), chronology5);
        org.joda.time.DateTimeField dateTimeField13 = chronology5.monthOfYear();
        org.joda.time.DurationField durationField14 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField17 = chronology5.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17670");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(19);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtMidnight();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.minutes();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.DurationField durationField19 = chronology16.millis();
        org.joda.time.DurationField durationField20 = chronology16.months();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 70, chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime10.toDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField25 = chronology16.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test17671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17671");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime4.withSecondOfMinute(7);
        int int12 = dateTime4.getHourOfDay();
        int int13 = dateTime4.getDayOfYear();
        org.joda.time.DateTime.Property property14 = dateTime4.weekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 42 + "'", int13 == 42);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17672");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours(35297);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusWeeks(35272);
        int int19 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime14.minuteOfHour();
        java.lang.String str23 = property22.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[minuteOfHour]" + "'", str23, "Property[minuteOfHour]");
    }

    @Test
    public void test17673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17673");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withWeekyear(785);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.weekyear();
        java.lang.String str12 = property11.toString();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime15 = property11.addToCopy((long) 35499);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[weekyear]" + "'", str12, "Property[weekyear]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17674");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay7.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        int int26 = dateTimeZone24.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime27 = yearMonthDay7.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay46 = org.joda.time.YearMonthDay.fromCalendarFields(calendar42);
        calendar42.setFirstDayOfWeek(2022);
        int int50 = calendar42.getMinimum(2);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.year();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale58.getDisplayCountry();
        int int61 = dateTimeField57.getMaximumTextLength(locale58);
        java.lang.String str62 = locale58.getDisplayScript();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(locale58);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone51, locale58);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        long long67 = dateTimeZone65.previousTransition((long) 8);
        long long69 = dateTimeZone41.getMillisKeepLocal(dateTimeZone65, (long) (byte) 0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 35277, dateTimeZone65);
        long long72 = dateTimeZone65.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter28.withZone(dateTimeZone65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter73.withPivotYear((java.lang.Integer) 2010);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight76 = org.joda.time.DateMidnight.parse("292278993-02-08T09:53:46.536Z", dateTimeFormatter73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1657879061612,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=612,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u53f0\u7063" + "'", str60, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573461612,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=612,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1644573461612,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=612,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 8L + "'", long67 == 8L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 97L + "'", long72 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
    }

    @Test
    public void test17675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17675");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((-62100742157667L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(35532133);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test17676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17676");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = localTime1.plusHours((int) (short) -1);
        int int12 = localTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime13 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekOfWeekyear(8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        boolean boolean18 = dateTime15.isAfterNow();
        int int19 = dateTime15.getDayOfMonth();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime15.toGregorianCalendar();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573461643,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=643,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:57:41.643" + "'", str4, "09:57:41.643");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573461643,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=643,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 643 + "'", int12 == 643);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-25T09:57:41.643Z" + "'", str17, "2022-02-25T09:57:41.643Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25 + "'", int19 == 25);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
    }

    @Test
    public void test17677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17677");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime4.toDateTime(chronology12);
        org.joda.time.DurationField durationField14 = chronology12.seconds();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        int int17 = dateMidnight16.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test17678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17678");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.plusYears(588);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval20 = interval12.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str24 = interval23.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.Interval interval35 = interval27.overlap((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        boolean boolean41 = dateTime40.isBeforeNow();
        org.joda.time.DateTime dateTime43 = dateTime40.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime45 = dateTime43.withMinuteOfHour((int) (short) 0);
        boolean boolean46 = interval35.contains((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean47 = interval23.contains((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Interval interval49 = interval23.withPeriodBeforeEnd(readablePeriod48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval23.toPeriod(periodType50);
        org.joda.time.Interval interval52 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.MutablePeriod mutablePeriod53 = period51.toMutablePeriod();
        java.lang.String str54 = period51.toString();
        java.lang.String str55 = period51.toString();
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) period51);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879061677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=677,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str24, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.033S" + "'", str54, "PT0.033S");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT0.033S" + "'", str55, "PT0.033S");
        org.junit.Assert.assertNotNull(yearMonthDay56);
    }

    @Test
    public void test17679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17679");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfFloorCopy();
        int int5 = localDateTime4.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withMillisOfSecond(4321);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4321 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test17680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17680");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(31);
        org.joda.time.DateTime.Property property10 = dateTime7.hourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573461720,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=720,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test17681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17681");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay21 = org.joda.time.YearMonthDay.fromCalendarFields(calendar17);
        calendar17.setFirstDayOfWeek(2022);
        int int25 = calendar17.getMinimum(2);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getDisplayCountry();
        int int36 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str37 = locale33.getDisplayScript();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale33);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone26, locale33);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long42 = dateTimeZone40.previousTransition((long) 8);
        long long44 = dateTimeZone16.getMillisKeepLocal(dateTimeZone40, (long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(588);
        long long49 = dateTimeZone40.getMillisKeepLocal(dateTimeZone47, 1641894487215L);
        java.lang.String str51 = dateTimeZone40.getShortName(0L);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(0L, dateTimeZone40);
        boolean boolean53 = property3.equals((java.lang.Object) dateTimeZone40);
        long long56 = dateTimeZone40.adjustOffset(35402L, true);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1657879061736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u53f0\u7063" + "'", str35, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644573461736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573461736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 8L + "'", long42 == 8L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1639777687215L + "'", long49 == 1639777687215L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 35402L + "'", long56 == 35402L);
    }

    @Test
    public void test17682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17682");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(20);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDurationAdded(35296L, 538);
        org.joda.time.DateTime dateTime19 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(378);
        org.joda.time.DateTime.Property property22 = dateTime19.millisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test17683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17683");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(35271L);
    }

    @Test
    public void test17684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17684");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusDays(15);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone12);
        int int14 = localDateTime13.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear(1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        boolean boolean18 = localDateTime9.equals((java.lang.Object) property17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.millisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test17685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17685");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay10.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((-1));
        org.joda.time.DateTime dateTime22 = dateTime20.minus((long) 445);
        org.joda.time.DateTime dateTime24 = dateTime22.plusWeeks(445);
        int int25 = dateTime24.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35861356 + "'", int25 == 35861356);
    }

    @Test
    public void test17686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17686");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekyear(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(35309838);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(9);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 35271, chronology18);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        boolean boolean22 = localDateTime20.isSupported(durationFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withYear(871);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusYears(10);
        boolean boolean28 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime25);
        int int29 = localDateTime10.getYearOfCentury();
        int int30 = localDateTime10.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime10.withTime(423, 35446, 35423, 447);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 423 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
    }

    @Test
    public void test17687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17687");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours(35297);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test17688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17688");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.year();
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight11 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateMidnight dateMidnight13 = property9.addWrapFieldToCopy(35449);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879061858,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=858,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test17689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17689");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = builder4.build();
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        int int36 = calendar34.getFirstDayOfWeek();
        int int37 = calendar34.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879061872,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=872,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573461872,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=872,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573461872,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=872,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-182700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test17690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration26 = interval25.toDuration();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours((int) (byte) 100);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime36);
        int int40 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay42.toDateTime(timeOfDay43, dateTimeZone44);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay48.toDateTime(timeOfDay49, dateTimeZone50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay48.monthOfYear();
        org.joda.time.DateTime dateTime53 = yearMonthDay48.toDateTimeAtCurrentTime();
        int int54 = property46.compareTo((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.Chronology chronology55 = yearMonthDay48.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfHalfday();
        org.joda.time.DurationField durationField57 = chronology55.days();
        org.joda.time.DateTime dateTime58 = dateTime36.toDateTime(chronology55);
        boolean boolean59 = dateTime58.isBeforeNow();
        org.joda.time.DateTime dateTime61 = dateTime58.minusYears(134);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        boolean boolean67 = dateTime66.isBeforeNow();
        org.joda.time.DateTime dateTime69 = dateTime66.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay(dateTimeZone70);
        org.joda.time.TimeOfDay timeOfDay72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = yearMonthDay71.toDateTime(timeOfDay72, dateTimeZone73);
        boolean boolean75 = dateTime74.isBeforeNow();
        org.joda.time.DateTime dateTime77 = dateTime74.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime81 = interval80.getEnd();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        org.joda.time.DateTime dateTime83 = dateTime74.toDateTime(chronology82);
        boolean boolean84 = dateTime66.isAfter((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime.Property property86 = dateTime58.dayOfMonth();
        org.joda.time.DateTime dateTime88 = dateTime58.plus((long) 35324);
        org.joda.time.DateTime dateTime90 = dateTime58.minusSeconds(35360181);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test17691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17691");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        java.util.GregorianCalendar gregorianCalendar2 = dateMidnight1.toGregorianCalendar();
        java.util.TimeZone timeZone3 = gregorianCalendar2.getTimeZone();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.set(35660, 335, 881, 35862037, 115);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=35660,MONTH=335,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=881,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=35862037,MINUTE=115,SECOND=41,MILLISECOND=965,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test17692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17692");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(21720003, 996, 315);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21720003 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17693");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology4.getZone();
        java.lang.String str8 = chronology4.toString();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.monthOfYear();
        java.util.Locale locale13 = new java.util.Locale("", "DateTimeField[year]", "");
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Locale locale15 = locale13.stripExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property19 = localTime17.property(dateTimeFieldType18);
        org.joda.time.LocalTime localTime21 = property19.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime22 = property19.withMaximumValue();
        org.joda.time.LocalTime localTime24 = localTime22.plusHours(22);
        org.joda.time.LocalTime localTime26 = localTime24.minusMillis(5);
        org.joda.time.LocalTime.Property property27 = localTime24.minuteOfHour();
        org.joda.time.LocalTime localTime28 = property27.roundHalfEvenCopy();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property32 = timeOfDay31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.TimeOfDay timeOfDay34 = property32.withMaximumValue();
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay34.plusMillis(19);
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.hourOfDay();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.util.Locale locale40 = locale39.stripExtensions();
        int int41 = property38.getMaximumTextLength(locale39);
        int int42 = property27.getMaximumTextLength(locale39);
        java.lang.String str43 = locale13.getDisplayLanguage(locale39);
        int int44 = dateTimeField9.getMaximumTextLength(locale39);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str8, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals(locale13.toString(), "_DATETIMEFIELD[YEAR]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "_DATETIMEFIELD[YEAR]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "_DATETIMEFIELD[YEAR]");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644573461984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=41,MILLISECOND=984,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
    }

    @Test
    public void test17694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17694");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes(35270);
        int int19 = localDateTime18.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(50);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minus(readableDuration22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.weekyear();
        int int25 = localDateTime18.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 49 + "'", int19 == 49);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1969 + "'", int25 == 1969);
    }

    @Test
    public void test17695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17695");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode5 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getVariant();
        java.lang.String str19 = dateTimeField15.getAsShortText(3, locale17);
        int int20 = dateTimeField15.getMaximumValue();
        long long23 = dateTimeField15.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = dateTimeField15.getAsShortText(readablePartial24, 9, locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.toLanguageTag();
        java.lang.String str32 = dateTimeField15.getAsText((-1), locale30);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.lang.String str41 = locale39.getDisplayCountry();
        int int42 = dateTimeField38.getMaximumTextLength(locale39);
        java.lang.String str43 = locale30.getDisplayName(locale39);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale44.getVariant();
        java.lang.String str46 = locale30.getDisplayVariant(locale44);
        java.util.Set<java.lang.String> strSet47 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap49);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + filteringMode5 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode5.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "3" + "'", str19, "3");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9" + "'", str28, "9");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u53f0\u7063" + "'", str41, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(languageRangeList50);
    }

    @Test
    public void test17696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17696");
        java.util.Locale locale1 = new java.util.Locale("Fri Feb 11 09:47:52 UTC 2022");
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale1.getDisplayScript(locale2);
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale2.getLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "fri feb 11 09:47:52 utc 2022");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
    }

    @Test
    public void test17697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17697");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter28.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withZoneUTC();
        java.util.Locale locale35 = new java.util.Locale("2022-02-09T22:48:08.395Z", "09:48:11.954");
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) "2022-02-09T22:48:08.395Z");
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = dateTimeFormatter28.print((org.joda.time.ReadableInstant) dateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals(locale35.toString(), "2022-02-09t22:48:08.395z_09:48:11.954");
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test17698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17698");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property25 = localDate4.year();
        org.joda.time.LocalDate localDate26 = property25.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate27 = property25.getLocalDate();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test17699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17699");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.LocalDate localDate6 = localDate4.plusDays(1970);
        org.joda.time.LocalDate localDate8 = localDate6.plusYears(3);
        org.joda.time.Interval interval9 = localDate6.toInterval();
        org.joda.time.LocalDate.Property property10 = localDate6.era();
        org.joda.time.DurationField durationField11 = property10.getLeapDurationField();
        org.joda.time.LocalDate localDate12 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate13 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfCentury(10);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate20 = localDate16.minusYears(51);
        java.lang.String str21 = localDate20.toString();
        org.joda.time.LocalDate localDate23 = localDate20.plusDays(19);
        org.joda.time.LocalDate localDate25 = localDate20.minusYears(708);
        int int26 = localDate25.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.era();
        int int30 = localDate27.size();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean40 = dateTime38.isSupported(dateTimeFieldType39);
        int int41 = localDate27.indexOf(dateTimeFieldType39);
        org.joda.time.LocalDate.Property property42 = localDate27.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean44 = localDate27.isSupported(dateTimeFieldType43);
        boolean boolean45 = localDate25.isSupported(dateTimeFieldType43);
        org.joda.time.LocalDate localDate47 = localDate13.withField(dateTimeFieldType43, 414);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1959-02-11" + "'", str21, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test17700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17700");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime3.plus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime8.plusMinutes(0);
        org.joda.time.LocalTime localTime12 = localTime8.plusMillis(20);
        org.joda.time.LocalTime.Property property13 = localTime12.hourOfDay();
        org.joda.time.LocalTime.Property property14 = localTime12.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = localTime12.getFieldType(35786);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35786");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573462127,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=127,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17701");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        int int11 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFieldAdded(durationFieldType14, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusYears(126);
        int int21 = localDateTime18.size();
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withFields(readablePartial22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test17702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17702");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(35402, 859, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 859 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17703");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.withField(dateTimeFieldType5, 4);
        java.lang.Object obj8 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.clockhourOfHalfday();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(obj8, chronology13);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology13);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay4, chronology13);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.minusSeconds(77);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(timeOfDay21);
    }

    @Test
    public void test17704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17704");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property3.roundHalfFloorCopy();
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfHalfday();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.getISO3Language();
        java.lang.String str15 = dateTimeField10.getAsText(35271, locale12);
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withPeriodAdded(readablePeriod18, 0);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withCenturyOfEra(22);
        int int26 = dateMidnight23.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property27 = dateMidnight23.year();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getVariant();
        java.lang.String str37 = dateTimeField33.getAsShortText(3, locale35);
        int int38 = dateTimeField33.getMaximumValue();
        long long41 = dateTimeField33.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        boolean boolean45 = locale44.hasExtensions();
        java.lang.String str46 = dateTimeField33.getAsShortText(readablePartial42, 9, locale44);
        int int47 = property27.getMaximumTextLength(locale44);
        java.lang.String str48 = dateTimeField10.getAsShortText(1656633599512L, locale44);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573462172,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=172,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "35271" + "'", str15, "35271");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "3" + "'", str37, "3");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "11" + "'", str48, "11");
    }

    @Test
    public void test17705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17705");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(935);
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronolgy();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
    }

    @Test
    public void test17706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17706");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = property4.setCopy(15);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay6.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.monthOfYear();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.secondOfDay();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0L, chronology11);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfCentury(10);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate26 = localDate22.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval28 = localDate22.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDate22.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        int int38 = dateTime34.getYear();
        org.joda.time.DateTime.Property property39 = dateTime34.weekyear();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        org.joda.time.DateTime dateTime41 = property39.roundHalfCeilingCopy();
        java.util.Date date42 = dateTime41.toDate();
        int int43 = date42.getDate();
        org.joda.time.YearMonthDay yearMonthDay44 = org.joda.time.YearMonthDay.fromDateFields(date42);
        org.joda.time.DateTime dateTime45 = yearMonthDay44.toDateTimeAtCurrentTime();
        java.lang.String str46 = yearMonthDay44.toString();
        boolean boolean47 = localDate22.isEqual((org.joda.time.ReadablePartial) yearMonthDay44);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay44.plusDays(704);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = timeOfDay19.compareTo((org.joda.time.ReadablePartial) yearMonthDay49);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-01-03" + "'", str46, "2022-01-03");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(yearMonthDay49);
    }

    @Test
    public void test17707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17707");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfCentury(10);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = localDate3.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay23 = org.joda.time.YearMonthDay.fromCalendarFields(calendar19);
        calendar19.setFirstDayOfWeek(2022);
        int int27 = calendar19.getMinimum(2);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale35.getDisplayCountry();
        int int38 = dateTimeField34.getMaximumTextLength(locale35);
        java.lang.String str39 = locale35.getDisplayScript();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone28, locale35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long44 = dateTimeZone42.previousTransition((long) 8);
        long long46 = dateTimeZone18.getMillisKeepLocal(dateTimeZone42, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight47 = yearMonthDay7.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime48 = localDate3.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 13, dateTimeZone18);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1657879062220,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=220,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u53f0\u7063" + "'", str37, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644573462221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644573462221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 8L + "'", long44 == 8L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test17708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17708");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withWeekyear(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withCenturyOfEra(902);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.plusHours(993);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17709");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtMidnight();
        int int5 = localDate0.getEra();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime15.toDateTime(chronology23);
        boolean boolean25 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate26 = dateTime24.toLocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfCentury(20);
        org.joda.time.LocalDate localDate29 = localDate0.withFields((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfCentury(10);
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate36 = localDate32.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime37 = localDate32.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withPeriodAdded(readablePeriod39, 0);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight44.getZone();
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime47 = localDate32.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.getName((long) 38311);
        org.joda.time.Interval interval51 = localDate26.toInterval(dateTimeZone45);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.Duration duration53 = interval51.toDuration();
        org.joda.time.ReadableDuration readableDuration54 = null;
        boolean boolean55 = duration53.isShorterThan(readableDuration54);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test17710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17710");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(93);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusHours(35280);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(203);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.year();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusHours(461);
        int int20 = localDateTime14.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.days();
        java.lang.String str22 = durationFieldType21.getName();
        boolean boolean23 = localDateTime14.isSupported(durationFieldType21);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 24 + "'", int20 == 24);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "days" + "'", str22, "days");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test17711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17711");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("days");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder6 = builder2.setExtension('u', "0366-04-01");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("German");
        java.util.Locale.Builder builder9 = builder2.setLocale(locale8);
        java.util.Locale.Builder builder10 = builder2.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder12.setExtension(' ', "825");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "german");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test17712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17712");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtMidnight();
        int int5 = localDate0.getEra();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay9.monthOfYear();
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology15 = yearMonthDay9.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withYear(2);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.monthOfYear();
        org.joda.time.LocalDate localDate19 = localDate7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test17713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17713");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology5);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property15 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime18 = property15.addWrapFieldToCopy(764);
        org.joda.time.LocalTime localTime19 = property15.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test17714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17714");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        int int20 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withWeekyear(11);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis(35309838);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMonths(9);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime15.plusWeeks(35366);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withPeriodAdded(readablePeriod32, (-8798));
        java.util.Date date35 = localDateTime31.toDate();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Oct 21 23:00:35 UTC 2647");
    }

    @Test
    public void test17715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17715");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(35433, 35403463, 988, 35370);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35433 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17716");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1656633600000L);
        org.joda.time.LocalDate localDate3 = localDate1.minusYears(0);
        org.joda.time.LocalDate localDate5 = localDate1.withWeekyear(558);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.plusWeeks(35297);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plusWeeks(716);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        boolean boolean26 = interval22.containsNow();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str41 = interval40.toString();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval52 = interval44.overlap((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        boolean boolean58 = dateTime57.isBeforeNow();
        org.joda.time.DateTime dateTime60 = dateTime57.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime62 = dateTime60.withMinuteOfHour((int) (short) 0);
        boolean boolean63 = interval52.contains((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean64 = interval40.contains((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Interval interval66 = interval40.withPeriodBeforeEnd(readablePeriod65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = interval40.toPeriod(periodType67);
        org.joda.time.Interval interval69 = interval37.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Interval interval70 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight14.withPeriodAdded((org.joda.time.ReadablePeriod) period68, 47);
        org.joda.time.DateTime dateTime73 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateMidnight72);
        java.lang.String str74 = dateTime73.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str41, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0558-06-30T00:00:00.000Z" + "'", str74, "0558-06-30T00:00:00.000Z");
    }

    @Test
    public void test17717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17717");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.property(dateTimeFieldType6);
        java.lang.String str8 = property7.toString();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.YearMonthDay yearMonthDay10 = property7.withMinimumValue();
        int[] intArray11 = yearMonthDay10.getValues();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[monthOfYear]" + "'", str8, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 1, 11]");
    }

    @Test
    public void test17718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17718");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateMidnight dateMidnight6 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withDayOfMonth(19);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay16.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.year();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 16, chronology28);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval42 = interval34.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str46 = interval45.toString();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.Interval interval57 = interval49.overlap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.TimeOfDay timeOfDay60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay59.toDateTime(timeOfDay60, dateTimeZone61);
        boolean boolean63 = dateTime62.isBeforeNow();
        org.joda.time.DateTime dateTime65 = dateTime62.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime67 = dateTime65.withMinuteOfHour((int) (short) 0);
        boolean boolean68 = interval57.contains((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean69 = interval45.contains((org.joda.time.ReadableInterval) interval57);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Interval interval71 = interval45.withPeriodBeforeEnd(readablePeriod70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval45.toPeriod(periodType72);
        org.joda.time.Interval interval74 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period73);
        long long77 = chronology28.add((org.joda.time.ReadablePeriod) period73, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod78 = period73.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay16.minus((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight12.minus((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.DateTimeZone dateTimeZone81 = dateMidnight80.getZone();
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight80.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime dateTime84 = dateMidnight83.toDateTimeISO();
        boolean boolean85 = dateMidnight7.isEqual((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime.Property property86 = dateTime84.yearOfCentury();
        org.joda.time.DateTime dateTime87 = property86.getDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str46, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1163943L + "'", long77 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test17719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17719");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withWeekyear(5);
        int int15 = localDateTime14.getDayOfWeek();
        int int16 = localDateTime14.size();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes(35732);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17720");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.property(dateTimeFieldType1);
        org.joda.time.DateMidnight dateMidnight3 = property2.getDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test17721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17721");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays(306);
        org.joda.time.DateTime dateTime15 = dateTime10.plusWeeks(3);
        int int16 = dateTime15.getDayOfYear();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.DateTime.Property property18 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime21 = property20.getDateTime();
        int int22 = dateTime21.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 60 + "'", int16 == 60);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35862 + "'", int22 == 35862);
    }

    @Test
    public void test17722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17722");
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        int int4 = dateMidnight3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withPeriodAdded(readablePeriod7, 22);
        int int10 = dateMidnight9.getHourOfDay();
        int int11 = dateMidnight9.getWeekOfWeekyear();
        int int12 = dateMidnight9.getHourOfDay();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight9.withChronology(chronology17);
        org.joda.time.DateTimeZone dateTimeZone25 = chronology17.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, 35370, 518, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35370 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test17723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17723");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology4);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        java.lang.String str10 = localDate9.toString();
        java.lang.String str11 = localDate9.toString();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime21.toDateTime(chronology29);
        boolean boolean31 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime37.toDateTime(chronology45);
        boolean boolean47 = durationFieldType32.isSupported(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime30.toDateTime(chronology45);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str52 = interval51.toString();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.Interval interval63 = interval55.overlap((org.joda.time.ReadableInterval) interval60);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(dateTimeZone64);
        org.joda.time.TimeOfDay timeOfDay66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = yearMonthDay65.toDateTime(timeOfDay66, dateTimeZone67);
        boolean boolean69 = dateTime68.isBeforeNow();
        org.joda.time.DateTime dateTime71 = dateTime68.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime73 = dateTime71.withMinuteOfHour((int) (short) 0);
        boolean boolean74 = interval63.contains((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean75 = interval51.contains((org.joda.time.ReadableInterval) interval63);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Interval interval77 = interval51.withPeriodBeforeEnd(readablePeriod76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval51.toPeriod(periodType78);
        org.joda.time.DateTime dateTime80 = dateTime30.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.LocalDate localDate81 = localDate9.minus((org.joda.time.ReadablePeriod) period79);
        int[] intArray83 = chronology4.get((org.joda.time.ReadablePeriod) period79, 1657878508587L);
        org.joda.time.DurationField durationField84 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField85 = chronology4.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11" + "'", str10, "2022-02-11");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11" + "'", str11, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str52, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 2741, 1, 9, 48, 28, 587]");
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test17724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17724");
        java.util.Date date5 = new java.util.Date(33, 706, 2000, 99, 35298);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        java.lang.String str7 = date5.toGMTString();
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue May 20 15:18:00 UTC 1997");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "20 May 1997 15:18:00 GMT" + "'", str7, "20 May 1997 15:18:00 GMT");
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test17725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17725");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval5 = interval2.withEndMillis((long) 10);
        boolean boolean7 = interval5.contains((-1771457900000L));
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime19.getZone();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar23);
        calendar23.setFirstDayOfWeek(2022);
        int int31 = calendar23.getMinimum(2);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.lang.String str41 = locale39.getDisplayCountry();
        int int42 = dateTimeField38.getMaximumTextLength(locale39);
        java.lang.String str43 = locale39.getDisplayScript();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale39);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone32, locale39);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long48 = dateTimeZone46.previousTransition((long) 8);
        long long50 = dateTimeZone22.getMillisKeepLocal(dateTimeZone46, (long) (byte) 0);
        int int52 = dateTimeZone46.getOffsetFromLocal(8L);
        org.joda.time.Interval interval53 = yearMonthDay9.toInterval(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTime(timeOfDay56, dateTimeZone57);
        boolean boolean59 = dateTime58.isBeforeNow();
        org.joda.time.DateTime dateTime61 = dateTime58.withMonthOfYear((int) (byte) 1);
        int int62 = dateTime58.getYear();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime65 = dateTime58.withDurationAdded(readableDuration63, (int) (short) 100);
        org.joda.time.DateTime.Property property66 = dateTime58.weekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay67 = dateTime58.toYearMonthDay();
        org.joda.time.DateTime dateTime69 = dateTime58.plusMillis(901);
        org.joda.time.Interval interval70 = interval53.withStart((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime74 = interval73.getEnd();
        org.joda.time.Chronology chronology75 = interval73.getChronology();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime79 = interval78.getEnd();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.Interval interval81 = interval73.overlap((org.joda.time.ReadableInterval) interval78);
        boolean boolean83 = interval73.isBefore((long) (byte) 10);
        org.joda.time.Interval interval84 = interval53.gap((org.joda.time.ReadableInterval) interval73);
        org.joda.time.Interval interval85 = interval5.gap((org.joda.time.ReadableInterval) interval84);
        boolean boolean87 = interval85.contains(1657878978630L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1657879062631,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=631,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u53f0\u7063" + "'", str41, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644573462631,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=631,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644573462631,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=631,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 8L + "'", long48 == 8L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test17726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17726");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(46);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test17727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17727");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = property9.setCopy(11);
        org.joda.time.LocalTime localTime16 = property9.setCopy(706);
        org.joda.time.LocalTime localTime18 = localTime16.plusMinutes(30);
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfSecond(453);
        org.joda.time.LocalTime localTime22 = localTime20.minusMillis(35562757);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573462665,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=665,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:57:42.665" + "'", str4, "09:57:42.665");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573462665,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=665,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test17728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17728");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withPeriodAdded(readablePeriod9, 0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.DateTime dateTime17 = localDate2.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfCentury(10);
        org.joda.time.LocalDate localDate22 = localDate20.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.weekyear();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime34.toDateTime(chronology42);
        boolean boolean44 = interval27.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalDate localDate45 = dateTime43.toLocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.withYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay49.toDateTime(timeOfDay50, dateTimeZone51);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay49.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTime(timeOfDay56, dateTimeZone57);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay55.monthOfYear();
        org.joda.time.DateTime dateTime60 = yearMonthDay55.toDateTimeAtCurrentTime();
        int int61 = property53.compareTo((org.joda.time.ReadablePartial) yearMonthDay55);
        org.joda.time.Chronology chronology62 = yearMonthDay55.getChronology();
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay55.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean66 = yearMonthDay55.isSupported(dateTimeFieldType65);
        boolean boolean67 = localDate45.equals((java.lang.Object) boolean66);
        org.joda.time.LocalDate.Property property68 = localDate45.yearOfEra();
        boolean boolean69 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate45);
        int int70 = localDate24.getMonthOfYear();
        org.joda.time.LocalDate localDate72 = localDate24.minusDays(2000);
        boolean boolean73 = dateTimeZone15.equals((java.lang.Object) localDate24);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test17729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17729");
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(902, 250, chronology2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 902 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17730");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusYears(387);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay5.monthOfYear();
        java.lang.String str9 = property8.getName();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.setCopy((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusMonths((int) '4');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromCalendarFields(calendar26);
        calendar26.setFirstDayOfWeek(2022);
        int int34 = calendar26.getMinimum(2);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale42.getDisplayCountry();
        int int45 = dateTimeField41.getMaximumTextLength(locale42);
        java.lang.String str46 = locale42.getDisplayScript();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale42);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone35, locale42);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long51 = dateTimeZone49.previousTransition((long) 8);
        long long53 = dateTimeZone25.getMillisKeepLocal(dateTimeZone49, (long) (byte) 0);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 368, dateTimeZone25);
        long long58 = dateTimeZone25.adjustOffset((long) 93, false);
        org.joda.time.DateTime dateTime59 = yearMonthDay11.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay11.plusDays(768);
        org.joda.time.Chronology chronology62 = yearMonthDay11.getChronology();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1657879062728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u53f0\u7063" + "'", str44, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644573462728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573462728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 8L + "'", long51 == 8L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 93L + "'", long58 == 93L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test17731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17731");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusWeeks(86399);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        boolean boolean27 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime33.toDateTime(chronology41);
        boolean boolean43 = durationFieldType28.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime26.toDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight6.withChronology(chronology41);
        org.joda.time.DateMidnight.Property property49 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight.Property property50 = dateMidnight6.centuryOfEra();
        int int51 = dateMidnight6.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test17732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17732");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusMonths(59);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withYear(22);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar12);
        calendar12.setFirstDayOfWeek(2022);
        int int20 = calendar12.getMinimum(2);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.lang.String str30 = locale28.getDisplayCountry();
        int int31 = dateTimeField27.getMaximumTextLength(locale28);
        java.lang.String str32 = locale28.getDisplayScript();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long37 = dateTimeZone35.previousTransition((long) 8);
        java.lang.String str38 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime39 = yearMonthDay11.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = yearMonthDay3.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime dateTime42 = dateTime40.minus(743L);
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime40.withWeekyear(47);
        org.joda.time.DateTime.Property property46 = dateTime45.secondOfDay();
        java.lang.String str47 = property46.getAsText();
        org.joda.time.DateTime dateTime48 = property46.withMinimumValue();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657879062785,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u53f0\u7063" + "'", str30, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573462785,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573462785,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8L + "'", long37 == 8L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Etc/UTC" + "'", str38, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test17733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17733");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        boolean boolean15 = dateTime14.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime14.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime17.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        calendar21.setFirstDayOfWeek(2022);
        int int29 = calendar21.getMinimum(2);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale37.getDisplayCountry();
        int int40 = dateTimeField36.getMaximumTextLength(locale37);
        java.lang.String str41 = locale37.getDisplayScript();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale37);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone30, locale37);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long46 = dateTimeZone44.previousTransition((long) 8);
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone44, (long) (byte) 0);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 368, dateTimeZone20);
        long long53 = dateTimeZone20.adjustOffset((long) 93, false);
        org.joda.time.DateTime dateTime54 = dateTime4.withZone(dateTimeZone20);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now(dateTimeZone20);
        java.lang.String str58 = localDate57.toString();
        boolean boolean60 = localDate57.equals((java.lang.Object) "292278993-02-08T09:52:13.772Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1657879062811,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=811,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u53f0\u7063" + "'", str39, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573462811,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=811,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573462811,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=811,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 8L + "'", long46 == 8L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 93L + "'", long53 == 93L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-11" + "'", str58, "2022-02-11");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test17734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17734");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 55);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str5 = localDate2.toString("1");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay21 = org.joda.time.YearMonthDay.fromCalendarFields(calendar17);
        calendar17.setFirstDayOfWeek(2022);
        int int25 = calendar17.getMinimum(2);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getDisplayCountry();
        int int36 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str37 = locale33.getDisplayScript();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale33);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone26, locale33);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long42 = dateTimeZone40.previousTransition((long) 8);
        long long44 = dateTimeZone16.getMillisKeepLocal(dateTimeZone40, (long) (byte) 0);
        org.joda.time.DateTime dateTime45 = localDate2.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(52L, dateTimeZone16);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str50 = interval49.toString();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.Interval interval61 = interval53.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        boolean boolean67 = dateTime66.isBeforeNow();
        org.joda.time.DateTime dateTime69 = dateTime66.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = dateTime69.withMinuteOfHour((int) (short) 0);
        boolean boolean72 = interval61.contains((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = interval49.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Interval interval75 = interval49.withPeriodBeforeEnd(readablePeriod74);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = interval49.toPeriod(periodType76);
        org.joda.time.LocalDate localDate79 = localDate46.withPeriodAdded((org.joda.time.ReadablePeriod) period77, 538);
        org.joda.time.LocalDate localDate81 = localDate46.plusDays(789);
        org.joda.time.LocalDate localDate83 = localDate81.minusWeeks(35397);
        java.util.Calendar calendar84 = java.util.Calendar.getInstance();
        calendar84.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay88 = org.joda.time.YearMonthDay.fromCalendarFields(calendar84);
        calendar84.setFirstDayOfWeek(2022);
        int int92 = calendar84.getMinimum(2);
        java.util.TimeZone timeZone93 = calendar84.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone94 = org.joda.time.DateTimeZone.forTimeZone(timeZone93);
        java.lang.String str95 = dateTimeZone94.getID();
        long long97 = dateTimeZone94.convertUTCToLocal(35364000L);
        org.joda.time.DateTime dateTime98 = localDate83.toDateTimeAtMidnight(dateTimeZone94);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1657879062838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u53f0\u7063" + "'", str35, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644573462838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573462838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 8L + "'", long42 == 8L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str50, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1657879062838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(timeZone93);
// flaky:         org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Etc/UTC" + "'", str95, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 35364000L + "'", long97 == 35364000L);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test17735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17735");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.TimeOfDay timeOfDay8 = property6.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property6.addWrapFieldToCopy(260);
        org.joda.time.TimeOfDay timeOfDay11 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test17736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17736");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(387);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(48);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) dateTime10);
        org.joda.time.DateTime dateTime18 = dateTime10.withDurationAdded((long) 375, 35813);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test17737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17737");
        java.util.Date date3 = new java.util.Date(47, 387, 7);
        int int4 = date3.getYear();
        int int5 = date3.getDate();
        date3.setYear(0);
        date3.setYear(869);
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromDateFields(date3);
        date3.setMinutes(270);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Apr 07 04:30:00 UTC 2769");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 79 + "'", int4 == 79);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test17738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17738");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.LocalDate localDate3 = yearMonthDay1.toLocalDate();
        int int4 = localDate3.getDayOfWeek();
        org.joda.time.LocalDate.Property property5 = localDate3.monthOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test17739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17739");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean12 = dateTime10.isAfter((long) 434);
        org.joda.time.DateTime dateTime14 = dateTime10.minusSeconds(53);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfWeek();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = property20.roundHalfCeilingCopy();
        boolean boolean23 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateMidnight22);
        int int24 = dateMidnight22.getWeekOfWeekyear();
        org.joda.time.DateMidnight.Property property25 = dateMidnight22.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test17740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17740");
        java.lang.Object obj1 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfCentury(10);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property17 = localDate16.weekyear();
        org.joda.time.LocalDate.Property property18 = localDate16.centuryOfEra();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay23 = org.joda.time.YearMonthDay.fromCalendarFields(calendar19);
        calendar19.setFirstDayOfWeek(2022);
        int int27 = calendar19.getMinimum(2);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale35.getDisplayCountry();
        int int38 = dateTimeField34.getMaximumTextLength(locale35);
        java.lang.String str39 = locale35.getDisplayScript();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone28, locale35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long44 = dateTimeZone42.previousTransition((long) 8);
        org.joda.time.Interval interval45 = localDate16.toInterval(dateTimeZone42);
        org.joda.time.Chronology chronology46 = chronology6.withZone(dateTimeZone42);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(obj1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) 473, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((long) 35362104);
        org.joda.time.DateTime dateTime51 = dateMidnight50.toDateTimeISO();
        org.joda.time.DateMidnight.Property property52 = dateMidnight50.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1657879062963,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=963,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u53f0\u7063" + "'", str37, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644573462964,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=964,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644573462964,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=42,MILLISECOND=964,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 8L + "'", long44 == 8L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test17741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17741");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        boolean boolean27 = interval2.containsNow();
        org.joda.time.Chronology chronology28 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.year();
        long long33 = dateTimeField30.set((long) 35610, 35676658);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1125784416844835610L + "'", long33 == 1125784416844835610L);
    }

    @Test
    public void test17742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17742");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime3 = dateTime0.minusYears(44);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-62100742311688L), chronology9);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.monthOfYear();
        org.joda.time.DurationField durationField18 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.secondOfMinute();
        int int21 = dateTimeField19.getMaximumValue((long) 0);
        int int22 = dateTime3.get(dateTimeField19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        boolean boolean28 = dateTime27.isBeforeNow();
        org.joda.time.DateTime dateTime30 = dateTime27.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime27.toDateTime(chronology35);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.minutes();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime40 = dateTime3.toDateTime(chronology35);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(525);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 43 + "'", int22 == 43);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test17743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17743");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.isStandardOffset(35271L);
        long long12 = dateTimeZone5.convertLocalToUTC((long) 999, true, (-62100742268123L));
        org.joda.time.Interval interval13 = yearMonthDay1.toInterval(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay1.minusMonths(72);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(184);
        org.joda.time.DateTime dateTime18 = yearMonthDay1.toDateTimeAtMidnight(dateTimeZone17);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 999L + "'", long12 == 999L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test17744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17744");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime7 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime8 = yearMonthDay1.toDateTimeAtCurrentTime();
        java.lang.String str10 = yearMonthDay1.toString("09:47:51.520");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonthDay1.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTime(timeOfDay12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        int int15 = dateTime13.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "09:47:51.520" + "'", str10, "09:47:51.520");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test17745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17745");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getGreatestMinimum((int) (byte) 10);
        calendar0.setFirstDayOfWeek(461);
        int int9 = calendar0.getWeekYear();
        int int10 = calendar0.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879063094,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=461,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=94,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test17746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17746");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        int int5 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(4, 35273);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=35273,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=103,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:57:43 UTC 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
    }

    @Test
    public void test17747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17747");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = dateTimeField5.getAsShortText(434, locale13);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("de");
        java.lang.String str18 = dateTimeField5.getAsShortText((long) (-1), locale17);
        java.lang.String str19 = locale17.toLanguageTag();
        java.util.Locale locale21 = new java.util.Locale("");
        java.lang.String str22 = locale21.getDisplayScript();
        java.lang.String str23 = locale17.getDisplayCountry(locale21);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        java.lang.String str32 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.year();
        org.joda.time.DurationField durationField35 = chronology28.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) locale21, chronology28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "434" + "'", str14, "434");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969" + "'", str18, "1969");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de" + "'", str19, "de");
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str32, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test17748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17748");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYear((int) (short) -1);
        java.lang.String str23 = localDate22.toString();
        int int24 = localDate22.getDayOfWeek();
        org.joda.time.LocalDate.Property property25 = localDate22.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight26 = localDate22.toDateMidnight();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property30 = localDate27.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate localDate33 = localDate31.plusDays(1970);
        org.joda.time.LocalDate localDate35 = localDate33.plusYears(3);
        org.joda.time.Interval interval36 = localDate33.toInterval();
        org.joda.time.LocalDate localDate38 = localDate33.withWeekyear(434);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone44);
        org.joda.time.TimeOfDay timeOfDay46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay45.toDateTime(timeOfDay46, dateTimeZone47);
        boolean boolean49 = dateTime48.isBeforeNow();
        org.joda.time.DateTime dateTime51 = dateTime48.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTime dateTime57 = dateTime48.toDateTime(chronology56);
        boolean boolean58 = interval41.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDate localDate59 = dateTime57.toLocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate63 = localDate61.minusYears(587);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(dateTimeZone64);
        org.joda.time.TimeOfDay timeOfDay66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = yearMonthDay65.toDateTime(timeOfDay66, dateTimeZone67);
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay65.monthOfYear();
        org.joda.time.DateTime dateTime70 = yearMonthDay65.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay72.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay72.property(dateTimeFieldType77);
        int int79 = dateTime70.get(dateTimeFieldType77);
        org.joda.time.LocalDate.Property property80 = localDate63.property(dateTimeFieldType77);
        int int81 = localDate38.get(dateTimeFieldType77);
        int int82 = localDate22.get(dateTimeFieldType77);
        int int83 = localDate22.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-0001-02-11" + "'", str23, "-0001-02-11");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 7 + "'", int81 == 7);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 42 + "'", int83 == 42);
    }

    @Test
    public void test17749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17749");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withPeriodAdded(readablePeriod4, 22);
        int int7 = dateMidnight6.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(35277);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.minusMonths(45);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusDays(588);
        int int14 = dateMidnight11.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.plusDays(406);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1997 + "'", int14 == 1997);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test17750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17750");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime6.getYear();
        org.joda.time.DateTime.Property property11 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        java.util.Date date14 = dateTime13.toDate();
        int int15 = date14.getDate();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.withFields((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withMillis(0L);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.minusYears(23);
        org.joda.time.DateMidnight.Property property22 = dateMidnight17.dayOfWeek();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.DateMidnight dateMidnight24 = property22.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight25 = property22.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test17751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17751");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay14.minusMonths(999);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay14.plusYears(35596483);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test17752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17752");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond(42);
        org.joda.time.LocalTime localTime8 = localTime1.withMillisOfSecond((int) 'u');
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(86313);
        org.joda.time.LocalTime localTime12 = localTime10.minusHours(184);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = localTime10.withMinuteOfHour(650);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 650 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573463209,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=209,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 209 + "'", int4 == 209);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test17753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17753");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfCentury(45);
        int int7 = localDate0.getDayOfWeek();
        int int8 = localDate0.size();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test17754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17754");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay38 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        calendar34.setFirstDayOfWeek(2022);
        int int42 = calendar34.getMinimum(2);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        java.util.Calendar.Builder builder44 = builder4.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder48 = builder44.setWeekDate(33, 808, 808);
        java.util.Calendar.Builder builder52 = builder44.setDate(35334, 183, 2022);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance();
        calendar53.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay57 = org.joda.time.YearMonthDay.fromCalendarFields(calendar53);
        int int59 = calendar53.getGreatestMinimum((int) (byte) 10);
        calendar53.clear();
        int int61 = calendar53.getFirstDayOfWeek();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay66 = org.joda.time.YearMonthDay.fromCalendarFields(calendar62);
        calendar62.setFirstDayOfWeek(2022);
        int int70 = calendar62.getMinimum(2);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.year();
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleKeys();
        java.lang.String str80 = locale78.getDisplayCountry();
        int int81 = dateTimeField77.getMaximumTextLength(locale78);
        java.lang.String str82 = locale78.getDisplayScript();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(locale78);
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone71, locale78);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        calendar53.setTimeZone(timeZone71);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone71);
        java.util.Calendar.Builder builder88 = builder44.setTimeZone(timeZone71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder90 = builder88.setInstant(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879063229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573463229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573463229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1657879063229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1657879063229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u53f0\u7063" + "'", str80, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1644573463229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1644573463229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1644573463229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test17755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17755");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now();
        long long13 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
        boolean boolean16 = dateMidnight12.isAfter((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight12.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withDayOfWeek(3);
        org.joda.time.Interval interval21 = dateMidnight18.toInterval();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval24.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfWeek();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.dayOfWeek();
        org.joda.time.DateMidnight.Property property32 = dateMidnight29.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight34 = property32.setCopy("4");
        org.joda.time.DateMidnight dateMidnight36 = property32.addToCopy((int) 'u');
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 16, chronology42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.Interval interval56 = interval48.overlap((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str60 = interval59.toString();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime64 = interval63.getEnd();
        org.joda.time.Chronology chronology65 = interval63.getChronology();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime69 = interval68.getEnd();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.Interval interval71 = interval63.overlap((org.joda.time.ReadableInterval) interval68);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.YearMonthDay yearMonthDay73 = new org.joda.time.YearMonthDay(dateTimeZone72);
        org.joda.time.TimeOfDay timeOfDay74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = yearMonthDay73.toDateTime(timeOfDay74, dateTimeZone75);
        boolean boolean77 = dateTime76.isBeforeNow();
        org.joda.time.DateTime dateTime79 = dateTime76.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime81 = dateTime79.withMinuteOfHour((int) (short) 0);
        boolean boolean82 = interval71.contains((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean83 = interval59.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Interval interval85 = interval59.withPeriodBeforeEnd(readablePeriod84);
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.Period period87 = interval59.toPeriod(periodType86);
        org.joda.time.Interval interval88 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period87);
        long long91 = chronology42.add((org.joda.time.ReadablePeriod) period87, 0L, 35271);
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight36.minus((org.joda.time.ReadablePeriod) period87);
        java.lang.String str93 = period87.toString();
        org.joda.time.Interval interval94 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period87);
        org.joda.time.Interval interval95 = interval21.withPeriodAfterStart((org.joda.time.ReadablePeriod) period87);
        org.joda.time.DateTime dateTime96 = dateTime4.plus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.DateTime dateTime98 = dateTime96.withWeekyear(0);
        org.joda.time.DateTime.Property property99 = dateTime96.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str60, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1163943L + "'", long91 == 1163943L);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "PT0.033S" + "'", str93, "PT0.033S");
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test17756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17756");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(434);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears(35336);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17757");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, 6);
        org.joda.time.DateTime dateTime20 = dateTime15.plusMinutes(100);
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) 99, 808);
        org.joda.time.DateTime dateTime25 = dateTime15.plusWeeks(27086);
        org.joda.time.DateTime.Property property26 = dateTime25.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test17758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17758");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.weekyear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusYears(808);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.minusYears(35271);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573463348,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=348,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test17759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17759");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay38 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        calendar34.setFirstDayOfWeek(2022);
        int int42 = calendar34.getMinimum(2);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        java.util.Calendar.Builder builder44 = builder4.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder48 = builder44.setWeekDate(33, 808, 808);
        java.util.Calendar.Builder builder50 = builder48.setLenient(true);
        java.util.Calendar.Builder builder54 = builder48.setTimeOfDay(35786, 86399999, 35686);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder56 = builder54.setInstant((long) 493);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879063361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573463361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573463361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1657879063361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test17760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17760");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDayOfMonth(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withField(dateTimeFieldType11, 4);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withSecondOfMinute(12);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(1969);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now();
        int int21 = dateMidnight20.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withPeriodAdded(readablePeriod24, 22);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getVariant();
        java.lang.String str36 = dateTimeField32.getAsShortText(3, locale34);
        long long38 = dateTimeField32.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        int int43 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean47 = localDateTime45.isSupported(dateTimeFieldType46);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration59 = interval58.toDuration();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight23.withDurationAdded((org.joda.time.ReadableDuration) duration59, 74);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration59, 35336);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime13.minus((org.joda.time.ReadableDuration) duration59);
        int int66 = localDateTime65.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withHourOfDay(437);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 437 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "3" + "'", str36, "3");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test17761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17761");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime7 = dateTime4.withDurationAdded((long) 292278993, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        boolean boolean15 = dateTime14.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime14.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime17.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        calendar21.setFirstDayOfWeek(2022);
        int int29 = calendar21.getMinimum(2);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale37.getDisplayCountry();
        int int40 = dateTimeField36.getMaximumTextLength(locale37);
        java.lang.String str41 = locale37.getDisplayScript();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale37);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone30, locale37);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long46 = dateTimeZone44.previousTransition((long) 8);
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone44, (long) (byte) 0);
        int int50 = dateTimeZone44.getOffsetFromLocal(8L);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) 0, 0L, dateTimeZone44);
        org.joda.time.DateTime dateTime52 = dateTime4.withZoneRetainFields(dateTimeZone44);
        int int54 = dateTimeZone44.getOffsetFromLocal((long) 271);
        int int56 = dateTimeZone44.getOffset(864000000L);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now(dateTimeZone44);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1657879063393,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=393,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u53f0\u7063" + "'", str39, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573463393,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=393,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573463393,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=393,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 8L + "'", long46 == 8L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test17762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17762");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder4.setDate(22, 1970, 120003);
        java.util.Calendar.Builder builder39 = builder4.setLenient(true);
        java.util.Calendar calendar40 = builder4.build();
        int int42 = calendar40.getGreatestMinimum(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval43 = new org.joda.time.Interval((java.lang.Object) calendar40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.GregorianCalendar");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879063419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=419,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573463419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=419,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573463419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=419,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-45924547500000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=514,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=257,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test17763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17763");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths((int) (short) 0);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds(563);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int17 = dateTime13.get(dateTimeFieldType16);
        int int18 = dateTime9.get(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 42 + "'", int18 == 42);
    }

    @Test
    public void test17764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17764");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay21 = org.joda.time.YearMonthDay.fromCalendarFields(calendar17);
        calendar17.setFirstDayOfWeek(2022);
        int int25 = calendar17.getMinimum(2);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getDisplayCountry();
        int int36 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str37 = locale33.getDisplayScript();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale33);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone26, locale33);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long42 = dateTimeZone40.previousTransition((long) 8);
        long long44 = dateTimeZone16.getMillisKeepLocal(dateTimeZone40, (long) (byte) 0);
        int int46 = dateTimeZone16.getOffset((long) 'a');
        boolean boolean47 = dateTimeZone16.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(93, 706, 668, 35368617, 35830470, 32770, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35368617 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1657879063446,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=446,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u53f0\u7063" + "'", str35, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644573463447,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=447,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573463447,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=447,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 8L + "'", long42 == 8L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test17765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17765");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property2.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth(19);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.minusDays(90);
        org.joda.time.Interval interval9 = dateMidnight8.toInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test17766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17766");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay10 = property7.addToCopy(597);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay12 = property7.setCopy(538);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 538 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879063472,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=472,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test17767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17767");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(19);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval20 = interval12.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str24 = interval23.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.Interval interval35 = interval27.overlap((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        boolean boolean41 = dateTime40.isBeforeNow();
        org.joda.time.DateTime dateTime43 = dateTime40.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime45 = dateTime43.withMinuteOfHour((int) (short) 0);
        boolean boolean46 = interval35.contains((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean47 = interval23.contains((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Interval interval49 = interval23.withPeriodBeforeEnd(readablePeriod48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval23.toPeriod(periodType50);
        org.joda.time.Interval interval52 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.MutablePeriod mutablePeriod53 = period51.toMutablePeriod();
        java.lang.String str54 = period51.toString();
        org.joda.time.LocalDate localDate56 = localDate9.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 75);
        int int57 = localDate9.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str24, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.033S" + "'", str54, "PT0.033S");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 61 + "'", int57 == 61);
    }

    @Test
    public void test17768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17768");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(19);
        org.joda.time.LocalDate localDate11 = localDate6.minusYears(708);
        int int12 = localDate11.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate.Property property15 = localDate13.era();
        int int16 = localDate13.size();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean26 = dateTime24.isSupported(dateTimeFieldType25);
        int int27 = localDate13.indexOf(dateTimeFieldType25);
        org.joda.time.LocalDate.Property property28 = localDate13.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean30 = localDate13.isSupported(dateTimeFieldType29);
        boolean boolean31 = localDate11.isSupported(dateTimeFieldType29);
        int int32 = localDate11.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1251 + "'", int32 == 1251);
    }

    @Test
    public void test17769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17769");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        int int3 = localDate0.size();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        int int14 = localDate0.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate localDate16 = localDate0.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime24.getZone();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        calendar28.setFirstDayOfWeek(2022);
        int int36 = calendar28.getMinimum(2);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getDisplayCountry();
        int int47 = dateTimeField43.getMaximumTextLength(locale44);
        java.lang.String str48 = locale44.getDisplayScript();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale44);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone37, locale44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long53 = dateTimeZone51.previousTransition((long) 8);
        long long55 = dateTimeZone27.getMillisKeepLocal(dateTimeZone51, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight56 = localDate16.toDateMidnight(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusMonths(587);
        org.joda.time.DateMidnight.Property property59 = dateMidnight56.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight56.minusMonths(60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight56.withYear(458);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1657879063517,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=517,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u53f0\u7063" + "'", str46, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644573463517,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=517,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573463517,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=517,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 8L + "'", long53 == 8L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
    }

    @Test
    public void test17770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17770");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(434);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(47);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(667);
        int int15 = localDateTime12.getDayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test17771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17771");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight5 = property2.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight7 = property2.addToCopy(6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = property8.addToCopy(35360181);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test17772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17772");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35452739);
        java.lang.String str3 = dateTimeZone1.getNameKey(60000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test17773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17773");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 18008, chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.era();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.minutes();
        org.joda.time.DurationField durationField28 = chronology26.weekyears();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.minuteOfDay();
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale32.getExtension('a');
        java.lang.String str35 = dateTimeField30.getAsText(4, locale32);
        java.lang.String str36 = dateTimeField20.getAsText((long) 901, locale32);
        java.lang.String str37 = dateTimeField8.getAsShortText((long) 35366, locale32);
        int int39 = dateTimeField8.get((long) 36494076);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "4" + "'", str35, "4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u516c\u5143" + "'", str36, "\u516c\u5143");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 608 + "'", int39 == 608);
    }

    @Test
    public void test17774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17774");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar2);
        calendar2.setFirstDayOfWeek(2022);
        int int10 = calendar2.getMinimum(2);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        java.util.Date date12 = calendar2.getTime();
        boolean boolean13 = date1.after(date12);
        int int14 = date12.getSeconds();
        int int15 = date12.getDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573463596,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=596,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:57:43 UTC 2022");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1657879063596,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=596,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Jul 15 09:57:43 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test17775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17775");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        int int4 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.plusWeeks((-292275054));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = property9.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus(0L);
        org.joda.time.DateTime dateTime14 = dateMidnight13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withCenturyOfEra(588);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay18.property(dateTimeFieldType23);
        boolean boolean25 = dateTime14.isSupported(dateTimeFieldType23);
        org.joda.time.DateMidnight.Property property26 = dateMidnight6.property(dateTimeFieldType23);
        long long27 = dateMidnight6.getMillis();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-176766308121600000L) + "'", long27 == (-176766308121600000L));
    }

    @Test
    public void test17776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17776");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withDayOfYear((int) '#');
        int int5 = dateMidnight2.getWeekOfWeekyear();
        int int6 = dateMidnight2.getWeekyear();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval17 = interval9.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration18 = interval17.toDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours((int) (byte) 100);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime33 = dateTime0.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime36 = dateTime34.plus((long) 35321445);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime38 = dateTime37.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(31776955);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31776955 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test17777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17777");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addNoWrapToCopy(871);
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.DateTime dateTime7 = localTime5.toDateTimeToday();
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime.Property property9 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        int int11 = dateTimeField10.getMinimumValue();
        int int13 = dateTimeField10.getMaximumValue(35389961L);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573463634,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=634,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
    }

    @Test
    public void test17778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17778");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 16, chronology30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval44 = interval36.overlap((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str48 = interval47.toString();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.Interval interval59 = interval51.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone60);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = yearMonthDay61.toDateTime(timeOfDay62, dateTimeZone63);
        boolean boolean65 = dateTime64.isBeforeNow();
        org.joda.time.DateTime dateTime67 = dateTime64.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime69 = dateTime67.withMinuteOfHour((int) (short) 0);
        boolean boolean70 = interval59.contains((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean71 = interval47.contains((org.joda.time.ReadableInterval) interval59);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Interval interval73 = interval47.withPeriodBeforeEnd(readablePeriod72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = interval47.toPeriod(periodType74);
        org.joda.time.Interval interval76 = interval44.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period75);
        long long79 = chronology30.add((org.joda.time.ReadablePeriod) period75, 0L, 35271);
        boolean boolean80 = dateTimeFieldType22.isSupported(chronology30);
        org.joda.time.DateTimeField dateTimeField81 = chronology30.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((long) 35333459, chronology30);
        org.joda.time.DateTimeField dateTimeField83 = chronology30.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField84 = chronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField85 = chronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField87 = chronology30.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay88 = new org.joda.time.TimeOfDay(0, 983, 35436, 35389961, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 983 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str48, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1163943L + "'", long79 == 1163943L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test17779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17779");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) 292278993, (int) '#');
        boolean boolean17 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime8.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime8.plusYears(134);
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded((-1771457900000L), 1970);
        org.joda.time.DateTime dateTime25 = dateTime23.withSecondOfMinute(30);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra(35387781);
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35863666 + "'", int18 == 35863666);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test17780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17780");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property9 = dateTime8.weekOfWeekyear();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime12 = property9.addToCopy((-456997));
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((-798222));
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test17781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17781");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond(42);
        org.joda.time.LocalTime localTime8 = localTime1.withMillisOfSecond((int) 'u');
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        int int10 = localTime8.size();
        org.joda.time.LocalTime localTime12 = localTime8.minusMillis(23);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573463692,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=692,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 692 + "'", int4 == 692);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test17782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17782");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 16, chronology8);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval22 = interval14.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str26 = interval25.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime45.withMinuteOfHour((int) (short) 0);
        boolean boolean48 = interval37.contains((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = interval25.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Interval interval51 = interval25.withPeriodBeforeEnd(readablePeriod50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval25.toPeriod(periodType52);
        org.joda.time.Interval interval54 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        long long57 = chronology8.add((org.joda.time.ReadablePeriod) period53, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod58 = period53.toMutablePeriod();
        org.joda.time.Interval interval59 = interval2.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        boolean boolean60 = interval2.containsNow();
        org.joda.time.Period period61 = interval2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        int int67 = dateTime66.getCenturyOfEra();
        org.joda.time.DateTime dateTime69 = dateTime66.plusMillis((int) (byte) 0);
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay72.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay72.property(dateTimeFieldType77);
        org.joda.time.DateTime.Property property79 = dateTime69.property(dateTimeFieldType77);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType77.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(dateTimeZone81);
        org.joda.time.Chronology chronology83 = yearMonthDay82.getChronology();
        org.joda.time.DurationField durationField84 = durationFieldType80.getField(chronology83);
        org.joda.time.Chronology chronology85 = chronology83.withUTC();
        boolean boolean86 = interval2.equals((java.lang.Object) chronology83);
        java.lang.Object obj87 = null;
        org.joda.time.Interval interval88 = new org.joda.time.Interval(obj87);
        boolean boolean90 = interval88.contains((long) 60);
        boolean boolean91 = interval2.contains((org.joda.time.ReadableInterval) interval88);
        org.joda.time.DateTime dateTime92 = interval88.getEnd();
        java.util.Locale.Builder builder94 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder96 = builder94.addUnicodeLocaleAttribute("days");
        java.util.Locale locale97 = builder94.build();
        java.util.Set<java.lang.String> strSet98 = locale97.getUnicodeLocaleAttributes();
        java.lang.String str99 = dateTime92.toString("13", locale97);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str26, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1163943L + "'", long57 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20 + "'", int67 == 20);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(locale97);
        org.junit.Assert.assertEquals(locale97.toString(), "");
        org.junit.Assert.assertNotNull(strSet98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "13" + "'", str99, "13");
    }

    @Test
    public void test17783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17783");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime3.plus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime8.plusMinutes(0);
        org.joda.time.LocalTime localTime12 = localTime8.plusMillis(20);
        int int13 = localTime12.getMillisOfSecond();
        org.joda.time.LocalTime.Property property14 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime16 = localTime12.minusMillis(316);
        org.joda.time.LocalTime localTime18 = localTime12.minusMillis(343);
        org.joda.time.LocalTime.Property property19 = localTime12.hourOfDay();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573463763,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=763,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 783 + "'", int13 == 783);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test17784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17784");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (byte) 100);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getLanguage();
        java.util.Calendar calendar14 = dateTime11.toCalendar(locale12);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        java.util.Date date16 = calendar15.getTime();
        calendar15.setFirstDayOfWeek(32770);
        int int19 = calendar15.getFirstDayOfWeek();
        java.util.Date date20 = calendar15.getTime();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.add(3, 22);
        java.util.Date date25 = calendar21.getTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        int int34 = dateTime30.getYear();
        org.joda.time.DateTime.Property property35 = dateTime30.weekyear();
        org.joda.time.DateTime dateTime36 = property35.withMaximumValue();
        org.joda.time.DateTime dateTime37 = property35.roundHalfCeilingCopy();
        java.util.Date date38 = dateTime37.toDate();
        int int39 = date38.getDate();
        org.joda.time.YearMonthDay yearMonthDay40 = org.joda.time.YearMonthDay.fromDateFields(date38);
        boolean boolean41 = date25.before(date38);
        date38.setSeconds(1970);
        boolean boolean44 = date20.before(date38);
        calendar14.setTime(date38);
        java.lang.String str46 = date38.toGMTString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh" + "'", str13, "zh");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1641169970000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=32,SECOND=50,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573463777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=32770,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 09:57:43 UTC 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32770 + "'", int19 == 32770);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Fri Feb 11 09:57:43 UTC 2022");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1657879063777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Fri Jul 15 09:57:43 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 03 00:32:50 UTC 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "3 Jan 2022 00:32:50 GMT" + "'", str46, "3 Jan 2022 00:32:50 GMT");
    }

    @Test
    public void test17785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17785");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.weekyear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusYears(808);
        boolean boolean13 = dateMidnight8.isEqualNow();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = dateMidnight8.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573463804,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=804,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17786");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.LocalDate localDate6 = localDate4.plusDays(1970);
        org.joda.time.LocalDate localDate8 = localDate6.withYear(35334);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.lang.String str12 = locale10.getDisplayName();
        java.lang.String str13 = localDate8.toString("35321124", locale10);
        java.lang.String str14 = locale10.getCountry();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str12, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "35321124" + "'", str13, "35321124");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "TW" + "'", str14, "TW");
    }

    @Test
    public void test17787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17787");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfCentury((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight6 = localDate2.toDateMidnight();
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.LocalDate.Property property8 = localDate2.weekyear();
        org.joda.time.LocalDate localDate10 = localDate2.withYearOfEra(35452739);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 42 + "'", int3 == 42);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test17788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17788");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale6);
        calendar11.setMinimalDaysInFirstWeek(12);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        calendar11.setTimeInMillis((-968631455035L));
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        int int18 = localTime17.size();
        org.joda.time.Chronology chronology19 = localTime17.getChronology();
        int int20 = localTime17.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u53f0\u7063" + "'", str8, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-968631455035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=12,ERA=1,YEAR=1939,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=112,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=42,SECOND=24,MILLISECOND=965,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test17789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17789");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(374L);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury(10);
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(20);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = property18.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField21.getType();
        org.joda.time.LocalDate.Property property23 = localDate12.property(dateTimeFieldType22);
        java.lang.String str24 = dateTimeFieldType22.getName();
        boolean boolean25 = dateTime1.isSupported(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "dayOfMonth" + "'", str24, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test17790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17790");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean12 = dateTime10.isAfter((long) 434);
        org.joda.time.DateTime dateTime14 = dateTime10.withWeekyear(48);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        java.lang.String str16 = property15.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "48" + "'", str16, "48");
    }

    @Test
    public void test17791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17791");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = builder4.build();
        java.util.Calendar.Builder builder38 = builder4.setWeekDate(587, (int) (byte) 1, 518);
        java.util.Calendar.Builder builder40 = builder4.setLenient(false);
        java.util.Calendar.Builder builder44 = builder4.setWeekDate(634, 35309838, 0);
        java.util.Calendar.Builder builder48 = builder4.setWeekDate(35352344, 35532148, 0);
        java.util.Calendar.Builder builder52 = builder48.setDate(35768, 1971, 169);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879063882,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=882,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573463882,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=882,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573463882,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=882,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-182700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test17792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17792");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone6);
        java.util.Date date8 = dateTime7.toDate();
        java.util.Date date9 = dateTime7.toDate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test17793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17793");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusWeeks(86399);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        boolean boolean27 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime33.toDateTime(chronology41);
        boolean boolean43 = durationFieldType28.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime26.toDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight6.withChronology(chronology41);
        org.joda.time.DateMidnight.Property property49 = dateMidnight6.yearOfEra();
        java.lang.String str51 = dateMidnight6.toString("09:50:28.812");
        int int52 = dateMidnight6.getMillisOfDay();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.minutes();
        org.joda.time.DurationField durationField59 = chronology57.weekyears();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(chronology57);
        org.joda.time.DurationField durationField63 = chronology57.centuries();
        org.joda.time.DateTimeField dateTimeField64 = chronology57.centuryOfEra();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight6, chronology57);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str67 = durationFieldType66.toString();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight6.withFieldAdded(durationFieldType66, 272);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plusDays(714049);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "09:50:28.812" + "'", str51, "09:50:28.812");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "centuries" + "'", str67, "centuries");
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
    }

    @Test
    public void test17794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17794");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withSecondOfMinute(12);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusDays(1969);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.weekOfWeekyear();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("days");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime14 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = property7.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17795");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addNoWrapToCopy(871);
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.DateTime dateTime7 = localTime5.toDateTimeToday();
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573463970,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=970,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test17796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17796");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder33.setWeekDate(871, 37, 444);
        java.util.Locale locale39 = new java.util.Locale("Fri Feb 11 09:47:52 UTC 2022");
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = locale39.getDisplayScript(locale40);
        java.util.Calendar.Builder builder42 = builder37.setLocale(locale39);
        java.util.Calendar.Builder builder47 = builder37.setTimeOfDay(35716, 592, 1971, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar48 = builder37.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 444");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879063981,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=981,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573463982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=982,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573463982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=43,MILLISECOND=982,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals(locale39.toString(), "fri feb 11 09:47:52 utc 2022");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test17797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17797");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 2698);
        int int2 = localDate1.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test17798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17798");
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(35562757, 2021, 35460322, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17799");
        java.util.Date date1 = new java.util.Date((long) 405);
        int int2 = date1.getMonth();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test17800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17800");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property3.roundHalfFloorCopy();
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfHalfday();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.getISO3Language();
        java.lang.String str15 = dateTimeField10.getAsText(35271, locale12);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField10.set((long) 768, "292278993-02-08T09:53:55.551Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"292278993-02-08T09:53:55.551Z\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573464028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "35271" + "'", str15, "35271");
    }

    @Test
    public void test17801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17801");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getVariant();
        java.lang.String str18 = dateTimeField14.getAsShortText(3, locale16);
        long long20 = dateTimeField14.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.monthOfYear();
        int int25 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusMinutes(35270);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        int int32 = localDateTime30.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusYears(2022);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        int int38 = localDateTime36.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withMillisOfDay((int) (byte) 100);
        boolean boolean41 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        boolean boolean42 = dateTimeZone7.isLocalDateTimeGap(localDateTime40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withYear(35484);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "3" + "'", str18, "3");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test17802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17802");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        int int6 = yearMonthDay1.size();
        int int7 = yearMonthDay1.size();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        long long24 = dateTimeZone18.convertLocalToUTC(229L, false, (long) 49);
        int int26 = dateTimeZone18.getOffset(0L);
        boolean boolean28 = dateTimeZone18.isStandardOffset((long) 35275);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay1.toDateMidnight(dateTimeZone18);
        int int33 = dateTimeZone18.getOffset(1639777687215L);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 229L + "'", long24 == 229L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test17803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17803");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) 292278993, (int) '#');
        boolean boolean17 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime8.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime8.plusYears(134);
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded((-1771457900000L), 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime.Property property25 = dateTime20.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = property25.getDateTime();
        org.joda.time.DateTime dateTime27 = property25.roundFloorCopy();
        boolean boolean28 = property25.isLeap();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35864075 + "'", int18 == 35864075);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17804");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(2);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMinutes((-1035012363));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test17805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17805");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
    }

    @Test
    public void test17806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17806");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields(calendar15);
        calendar15.setFirstDayOfWeek(2022);
        int int23 = calendar15.getMinimum(2);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.lang.String str33 = locale31.getDisplayCountry();
        int int34 = dateTimeField30.getMaximumTextLength(locale31);
        java.lang.String str35 = locale31.getDisplayScript();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale31);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone24, locale31);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long40 = dateTimeZone38.previousTransition((long) 8);
        long long42 = dateTimeZone14.getMillisKeepLocal(dateTimeZone38, (long) (byte) 0);
        int int44 = dateTimeZone38.getOffsetFromLocal(8L);
        org.joda.time.Interval interval45 = yearMonthDay1.toInterval(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(dateTimeZone47);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.monthOfYear();
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now();
        long long51 = property49.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.plusWeeks(35297);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plusWeeks(716);
        org.joda.time.DateMidnight.Property property56 = dateMidnight53.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.minutes();
        org.joda.time.DurationField durationField64 = chronology62.weekyears();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.minuteOfDay();
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str70 = locale68.getExtension('a');
        java.lang.String str71 = dateTimeField66.getAsText(4, locale68);
        java.lang.String str72 = property56.getAsShortText(locale68);
        java.lang.String str73 = dateTimeZone38.getName((long) 934, locale68);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1657879064107,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=107,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u53f0\u7063" + "'", str33, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644573464108,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=108,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644573464108,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=108,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 8L + "'", long40 == 8L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "4" + "'", str71, "4");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "31" + "'", str72, "31");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
    }

    @Test
    public void test17807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17807");
        java.lang.Object obj0 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '4', chronology7);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((-62100742287078L), chronology7);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(obj0, chronology7);
        org.joda.time.DateTimeField dateTimeField15 = chronology7.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17808");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.lang.String str11 = locale9.getDisplayCountry();
        int int12 = dateTimeField8.getMaximumTextLength(locale9);
        java.lang.String str13 = locale9.getDisplayScript();
        java.lang.String str14 = locale9.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder18 = builder0.setLocale(locale15);
        java.util.Locale.Builder builder19 = builder0.clear();
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder21 = builder19.clear();
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.setScript("");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u53f0\u7063" + "'", str11, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str14, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u5fb7\u6587" + "'", str16, "\u5fb7\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinesisch" + "'", str17, "Chinesisch");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test17809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17809");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withZoneUTC();
        boolean boolean29 = dateTimeFormatter28.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withOffsetParsed();
        java.lang.StringBuffer stringBuffer31 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getVariant();
        java.lang.String str41 = dateTimeField37.getAsShortText(3, locale39);
        long long43 = dateTimeField37.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.monthOfYear();
        int int48 = dateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusMinutes(35270);
        int int51 = localDateTime50.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(50);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.minus(readableDuration54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime50.weekyear();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        org.joda.time.LocalDateTime localDateTime59 = property56.setCopy("55", locale58);
        int int60 = property56.get();
        org.joda.time.LocalDateTime localDateTime61 = property56.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter28.printTo(stringBuffer31, (org.joda.time.ReadablePartial) localDateTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "3" + "'", str41, "3");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 49 + "'", int51 == 49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1969 + "'", int60 == 1969);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test17810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17810");
        java.util.Date date6 = new java.util.Date(0, 35702, 35460322, 849, 69, 99628);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Apr 29 13:49:28 UTC 101962");
    }

    @Test
    public void test17811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17811");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 15);
        int int2 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds(746);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay4.minuteOfHour();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.hourOfDay();
        int int8 = property7.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addWrapFieldToCopy(35331916);
        org.joda.time.TimeOfDay timeOfDay12 = property7.addWrapFieldToCopy(330);
        java.lang.String str14 = timeOfDay12.toString("09:50:33.628");
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "09:50:33.628" + "'", str14, "09:50:33.628");
    }

    @Test
    public void test17812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17812");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime11.property(dateTimeFieldType19);
        boolean boolean22 = localDate0.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property23 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate24 = property23.withMinimumValue();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra(1);
        org.joda.time.LocalDate localDate28 = localDate24.minusMonths(35308956);
        org.joda.time.LocalDate localDate30 = localDate24.plusMonths(35715);
        org.joda.time.LocalDate.Property property31 = localDate24.era();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test17813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17813");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDate0.toDateTimeAtCurrentTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(458);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        int int18 = dateTimeZone16.getStandardOffset((long) 13);
        long long22 = dateTimeZone16.convertLocalToUTC(229L, false, (long) 49);
        int int24 = dateTimeZone16.getOffset(0L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone16);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = dateTime3.withZoneRetainFields(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone16);
        long long30 = dateTimeZone16.nextTransition(859L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 229L + "'", long22 == 229L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 859L + "'", long30 == 859L);
    }

    @Test
    public void test17814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17814");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
        int int4 = property3.get();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder7 = builder5.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        int int15 = dateTime14.getCenturyOfEra();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) (byte) 0);
        int int18 = dateTime14.getHourOfDay();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale19);
        java.lang.String str21 = locale19.getScript();
        java.util.Locale.Builder builder22 = builder7.setLocale(locale19);
        java.lang.String str23 = locale19.getVariant();
        java.lang.String str24 = property3.getAsText(locale19);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1644573464258,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=258,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11" + "'", str24, "11");
    }

    @Test
    public void test17815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17815");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime38.secondOfDay();
        org.joda.time.DateTime dateTime41 = property40.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime43 = property40.addToCopy(589);
        org.joda.time.DateTime dateTime44 = property40.withMinimumValue();
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTimeAtMidnight(dateTimeZone48);
        int int50 = dateTime49.getSecondOfMinute();
        org.joda.time.DateTime dateTime52 = dateTime49.minusMinutes(42);
        org.joda.time.DateTime.Property property53 = dateTime52.weekOfWeekyear();
        org.joda.time.DateTime dateTime55 = dateTime52.minusSeconds(918);
        org.joda.time.DateTime.Property property56 = dateTime55.weekyear();
        boolean boolean57 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test17816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17816");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfCentury(10);
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate11 = localDate7.minusYears(51);
        java.lang.String str12 = localDate11.toString();
        org.joda.time.LocalDate localDate14 = localDate11.plusDays(19);
        boolean boolean16 = localDate14.equals((java.lang.Object) "German");
        org.joda.time.LocalDate.Property property17 = localDate14.dayOfWeek();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = locale18.getLanguage();
        int int20 = property17.getMaximumTextLength(locale18);
        java.util.Locale.Builder builder21 = builder4.setLocale(locale18);
        java.util.Locale locale22 = locale18.stripExtensions();
        java.lang.String str23 = locale22.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1959-02-11" + "'", str12, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test17817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17817");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        boolean boolean10 = localTime8.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight6.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight15 = property14.getDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean17 = dateMidnight15.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = dateMidnight15.getChronology();
        int int19 = property4.getDifference((org.joda.time.ReadableInstant) dateMidnight15);
        int int20 = dateMidnight15.getDayOfWeek();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.withFields((org.joda.time.ReadablePartial) timeOfDay21);
        org.joda.time.DateTime dateTime23 = dateMidnight15.toDateTime();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573464318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=318,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644573464318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=318,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-456566) + "'", int19 == (-456566));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test17818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17818");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        int int22 = property14.compareTo((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.Chronology chronology23 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay16.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean27 = yearMonthDay16.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        int int40 = dateTimeZone38.getStandardOffset((long) 13);
        long long44 = dateTimeZone38.convertLocalToUTC(229L, false, (long) 49);
        long long46 = dateTimeZone38.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime47 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime48 = dateTime4.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime50 = dateTime4.minusSeconds(473);
        int int51 = dateTime50.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 229L + "'", long44 == 229L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 49L + "'", long46 == 49L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
    }

    @Test
    public void test17819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillis((long) 10);
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime4.toYearMonthDay();
        int int9 = dateTime4.getDayOfMonth();
        org.joda.time.DateTime.Property property10 = dateTime4.monthOfYear();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime22.toDateTime(chronology30);
        boolean boolean32 = interval15.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTime(timeOfDay36, dateTimeZone37);
        boolean boolean39 = dateTime38.isBeforeNow();
        org.joda.time.DateTime dateTime41 = dateTime38.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime38.toDateTime(chronology46);
        boolean boolean48 = durationFieldType33.isSupported(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime31.toDateTime(chronology46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str53 = interval52.toString();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.Interval interval64 = interval56.overlap((org.joda.time.ReadableInterval) interval61);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(dateTimeZone65);
        org.joda.time.TimeOfDay timeOfDay67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay66.toDateTime(timeOfDay67, dateTimeZone68);
        boolean boolean70 = dateTime69.isBeforeNow();
        org.joda.time.DateTime dateTime72 = dateTime69.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime74 = dateTime72.withMinuteOfHour((int) (short) 0);
        boolean boolean75 = interval64.contains((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean76 = interval52.contains((org.joda.time.ReadableInterval) interval64);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Interval interval78 = interval52.withPeriodBeforeEnd(readablePeriod77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval52.toPeriod(periodType79);
        org.joda.time.DateTime dateTime81 = dateTime31.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay(dateTimeZone83);
        org.joda.time.TimeOfDay timeOfDay85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = yearMonthDay84.toDateTime(timeOfDay85, dateTimeZone86);
        int int88 = dateTime87.getCenturyOfEra();
        org.joda.time.DateTime dateTime89 = dateTime87.withTimeAtStartOfDay();
        boolean boolean91 = dateTime87.isAfter((long) 38);
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period80, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration93 = interval92.toDuration();
        org.joda.time.Period period94 = duration93.toPeriod();
        org.joda.time.Interval interval95 = interval11.withPeriodAfterStart((org.joda.time.ReadablePeriod) period94);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str53, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 20 + "'", int88 == 20);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(interval95);
    }

    @Test
    public void test17820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17820");
        java.util.Date date1 = new java.util.Date(10L);
        date1.setSeconds(27393);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 07:36:33 UTC 1970");
    }

    @Test
    public void test17821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17821");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.withYear(22);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(39139200081L, dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(972, 616, 35446, 930, 35449, 307, 2022, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 930 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test17822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17822");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = property9.setCopy(11);
        org.joda.time.LocalTime localTime16 = property9.setCopy(706);
        org.joda.time.LocalTime localTime17 = property9.roundHalfCeilingCopy();
        java.lang.String str18 = localTime17.toString();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromCalendarFields(calendar19);
        boolean boolean22 = localTime20.equals((java.lang.Object) 16);
        java.lang.String str23 = localTime20.toString();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property27 = localTime25.property(dateTimeFieldType26);
        org.joda.time.LocalTime.Property property28 = localTime20.property(dateTimeFieldType26);
        org.joda.time.LocalTime localTime30 = property28.setCopy((int) (byte) 0);
        org.joda.time.LocalTime.Property property31 = localTime30.minuteOfHour();
        org.joda.time.LocalTime localTime32 = property31.withMinimumValue();
        java.lang.String str33 = property31.getName();
        org.joda.time.LocalTime localTime34 = property31.withMaximumValue();
        org.joda.time.LocalTime localTime35 = property31.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime36 = localTime17.withFields((org.joda.time.ReadablePartial) localTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime38 = localTime17.withSecondOfMinute(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573464430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=430,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:57:44.430" + "'", str4, "09:57:44.430");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573464430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=430,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "09:57:44.000" + "'", str18, "09:57:44.000");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644573464430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=430,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "09:57:44.430" + "'", str23, "09:57:44.430");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644573464430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=430,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "minuteOfHour" + "'", str33, "minuteOfHour");
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test17823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17823");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 621);
        java.lang.StringBuffer stringBuffer10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        int int15 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMinimumValue();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        java.lang.String str22 = property20.getName();
        org.joda.time.LocalDateTime localDateTime23 = property20.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer10, (org.joda.time.ReadablePartial) localDateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minuteOfHour" + "'", str22, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test17824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17824");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test17825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17825");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusMonths(59);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withYear(22);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar12);
        calendar12.setFirstDayOfWeek(2022);
        int int20 = calendar12.getMinimum(2);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.lang.String str30 = locale28.getDisplayCountry();
        int int31 = dateTimeField27.getMaximumTextLength(locale28);
        java.lang.String str32 = locale28.getDisplayScript();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long37 = dateTimeZone35.previousTransition((long) 8);
        java.lang.String str38 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime39 = yearMonthDay11.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = yearMonthDay3.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(24);
        int int43 = dateTime40.getSecondOfDay();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657879064466,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=466,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u53f0\u7063" + "'", str30, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573464466,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=466,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573464466,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=466,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8L + "'", long37 == 8L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Etc/UTC" + "'", str38, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test17826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17826");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 55);
        org.joda.time.DateMidnight dateMidnight2 = localDate1.toDateMidnight();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.Interval interval13 = interval5.overlap((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Duration duration14 = interval13.toDuration();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours((int) (byte) 100);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval38 = interval30.overlap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTime(timeOfDay42, dateTimeZone43);
        boolean boolean45 = dateTime44.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime44.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime49 = dateTime47.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime51 = dateTime49.minusHours((int) (byte) 100);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.Interval interval63 = interval55.overlap((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration64 = interval63.toDuration();
        boolean boolean65 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration64);
        boolean boolean66 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime70 = interval69.getEnd();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.Interval interval77 = interval69.overlap((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Duration duration78 = interval77.toDuration();
        boolean boolean79 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight2.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight.Property property81 = dateMidnight80.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight82 = property81.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField83 = property81.getDurationField();
        org.joda.time.DateTimeField dateTimeField84 = property81.getField();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test17827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17827");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        int int4 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withYearOfCentury(79);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withYearOfCentury(75);
        boolean boolean9 = dateMidnight8.isBeforeNow();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withMillis((long) 120003);
        org.joda.time.Interval interval12 = dateMidnight8.toInterval();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test17828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17828");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.LocalDate localDate3 = yearMonthDay1.toLocalDate();
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears(98613);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test17829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17829");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        java.lang.String str2 = localDateTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfEra(8);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusDays(883);
        int int7 = localDateTime6.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-11T09:57:44.551" + "'", str2, "2022-02-11T09:57:44.551");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
    }

    @Test
    public void test17830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17830");
        java.lang.Object obj0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(obj0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay(558);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 558 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17831");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        int int10 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekOfWeekyear(4);
        int int13 = localDateTime12.getMinuteOfHour();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMillisOfSecond(740);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test17832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17832");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withMillisOfSecond(617);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test17833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17833");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded(35296L, 538);
        int int7 = dateMidnight6.getDayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test17834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 13);
        long long16 = dateTimeZone10.convertLocalToUTC(229L, false, (long) 49);
        int int18 = dateTimeZone10.getOffset(0L);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay27.monthOfYear();
        org.joda.time.DateTime dateTime32 = yearMonthDay27.toDateTimeAtCurrentTime();
        int int33 = property25.compareTo((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.LocalDate localDate34 = localDate19.withFields((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.LocalDate.Property property35 = localDate34.year();
        org.joda.time.LocalDate localDate37 = localDate34.withYear(192);
        int int38 = localDate37.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 229L + "'", long16 == 229L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
    }

    @Test
    public void test17835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17835");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property3.roundHalfFloorCopy();
        int int8 = property3.getMaximumValueOverall();
        java.lang.String str9 = property3.getAsShortText();
        int int10 = property3.getMinimumValue();
        org.joda.time.LocalTime localTime11 = property3.roundHalfFloorCopy();
        int int12 = localTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573464620,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=620,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399 + "'", int8 == 86399);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "35864" + "'", str9, "35864");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 45 + "'", int12 == 45);
    }

    @Test
    public void test17836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17836");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        int int5 = calendar0.getMinimalDaysInFirstWeek();
        java.time.Instant instant6 = calendar0.toInstant();
        int int7 = calendar0.getMinimalDaysInFirstWeek();
        boolean boolean8 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879064638,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=638,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:57:44 UTC 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test17837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17837");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) '4', dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYear(53);
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        boolean boolean7 = dateTimeField6.isSupported();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category8);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        int int12 = dateTimeField6.getMaximumShortTextLength(locale11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay21.monthOfYear();
        org.joda.time.DateTime dateTime26 = yearMonthDay21.toDateTimeAtCurrentTime();
        int int27 = property19.compareTo((org.joda.time.ReadablePartial) yearMonthDay21);
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = property19.getAsShortText(locale28);
        java.lang.String str30 = dateTimeField6.getAsText(56, locale28);
        java.util.Locale.setDefault(locale28);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e8c\u6708" + "'", str29, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "56" + "'", str30, "56");
    }

    @Test
    public void test17838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17838");
        java.util.Date date5 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long6 = date5.getTime();
        int int7 = date5.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        long long9 = date5.getTime();
        date5.setDate(35273);
        java.time.Instant instant12 = date5.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        java.util.Date date14 = java.util.Date.from(instant12);
        java.time.Instant instant15 = date14.toInstant();
        int int16 = date14.getSeconds();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar17);
        boolean boolean20 = localTime18.equals((java.lang.Object) 16);
        java.lang.String str21 = localTime18.toString();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromCalendarFields(calendar22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property25 = localTime23.property(dateTimeFieldType24);
        org.joda.time.LocalTime.Property property26 = localTime18.property(dateTimeFieldType24);
        org.joda.time.LocalTime localTime28 = property26.setCopy((int) (byte) 0);
        org.joda.time.LocalTime.Property property29 = localTime28.minuteOfHour();
        org.joda.time.LocalTime localTime30 = property29.withMinimumValue();
        java.lang.String str31 = property29.getName();
        org.joda.time.LocalTime localTime32 = property29.withMaximumValue();
        org.joda.time.Interval interval33 = property29.toInterval();
        boolean boolean34 = date14.equals((java.lang.Object) property29);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-525628200000L) + "'", long6 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-525628200000L) + "'", long9 == (-525628200000L));
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644573464666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "09:57:44.666" + "'", str21, "09:57:44.666");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644573464666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfHour" + "'", str31, "minuteOfHour");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test17839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17839");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay10.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType18.getField(chronology21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(chronology21);
        java.util.Locale locale27 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        boolean boolean28 = localDate23.equals((java.lang.Object) "Deutsch");
        org.joda.time.LocalDate localDate30 = localDate23.withWeekyear(371);
        org.joda.time.LocalDate.Property property31 = localDate23.era();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.plusWeeks(772);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals(locale27.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test17840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17840");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        calendar0.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date6 = calendar0.getTime();
        int int7 = date6.getDate();
        date6.setTime((long) 41);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromDateFields(date6);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879064707,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=707,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test17841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17841");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.plusWeeks(0);
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime17 = property15.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime18 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime20 = property15.addToCopy(8L);
        org.joda.time.DateTime dateTime21 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime23 = property15.addToCopy(3L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35864 + "'", int12 == 35864);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test17842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17842");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.lang.String str11 = locale9.getDisplayCountry();
        int int12 = dateTimeField8.getMaximumTextLength(locale9);
        java.lang.String str13 = locale9.getDisplayScript();
        java.lang.String str14 = locale9.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder18 = builder0.setLocale(locale15);
        java.util.Locale.Builder builder19 = builder0.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.centuryOfEra();
        org.joda.time.DurationField durationField28 = dateTimeField27.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime39.minusHours((int) (byte) 100);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale42.getLanguage();
        java.util.Calendar calendar44 = dateTime41.toCalendar(locale42);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale42.getDisplayName(locale45);
        java.lang.String str47 = dateTimeField27.getAsShortText((long) 1970, locale42);
        java.lang.String str48 = locale42.getLanguage();
        java.util.Locale.Builder builder49 = builder19.setLocale(locale42);
        java.util.Locale.Builder builder50 = builder19.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder19.removeUnicodeLocaleAttribute("2022-01-01");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-01-01 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd" + "'", str11, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str14, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u5fb7\u6587" + "'", str16, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinesisch" + "'", str17, "Chinesisch");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1641531644739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=7,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=44,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str46, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "19" + "'", str47, "19");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh" + "'", str48, "zh");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test17843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17843");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusWeeks(86399);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        java.lang.String str8 = property7.getName();
        org.joda.time.DateMidnight dateMidnight9 = property7.withMinimumValue();
        boolean boolean11 = dateMidnight9.isAfter((long) 595);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfWeek" + "'", str8, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test17844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17844");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime4.plusSeconds((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime4.plusYears(0);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTimeISO();
        int int17 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime18 = dateTime4.withLaterOffsetAtOverlap();
        int int19 = dateTime18.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime18.getZone();
        org.joda.time.DateTime dateTime22 = dateTime18.withMillis((long) 2001);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 42 + "'", int19 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test17845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17845");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property3.roundHalfFloorCopy();
        int int8 = property3.getMaximumValueOverall();
        org.joda.time.LocalTime localTime9 = property3.withMinimumValue();
        java.lang.String str10 = property3.getName();
        boolean boolean11 = property3.isLeap();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573464785,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399 + "'", int8 == 86399);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondOfDay" + "'", str10, "secondOfDay");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test17846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17846");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 13);
        long long16 = dateTimeZone10.convertLocalToUTC(229L, false, (long) 49);
        int int18 = dateTimeZone10.getOffset(0L);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone10);
        int int20 = localDate19.getWeekyear();
        org.joda.time.LocalDate.Property property21 = localDate19.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str23 = dateTimeFieldType22.toString();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        boolean boolean25 = localDate19.isSupported(durationFieldType24);
        int int26 = localDate19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = localDate19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 229L + "'", long16 == 229L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "centuryOfEra" + "'", str23, "centuryOfEra");
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17847");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = property5.getAsShortText(locale6);
        int int9 = property5.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        org.joda.time.DurationField durationField11 = property5.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        int int20 = dateTime16.getYear();
        org.joda.time.DateTime.Property property21 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        boolean boolean24 = dateTime22.isAfter((long) 434);
        org.joda.time.DateTime dateTime26 = dateTime22.minusSeconds(53);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime26.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar28 = dateTime26.toGregorianCalendar();
        int int29 = property5.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay30 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property5.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = dateTimeField31.add(1644573074400L, 35510400185L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 35510400185");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e8c\u6708" + "'", str8, "\u4e8c\u6708");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test17848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17848");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime4.plusSeconds((int) 'a');
        int int10 = dateTime4.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTime dateTime18 = dateTime15.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime15.plusSeconds((int) 'a');
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime23 = dateTime15.minusMillis(611);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        boolean boolean29 = dateTime28.isBeforeNow();
        org.joda.time.DateTime dateTime31 = dateTime28.withMonthOfYear((int) (byte) 1);
        int int32 = dateTime28.getYear();
        org.joda.time.DateTime.Property property33 = dateTime28.weekyear();
        org.joda.time.DateTime dateTime34 = property33.withMaximumValue();
        org.joda.time.DateTime dateTime35 = property33.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime36 = property33.roundHalfCeilingCopy();
        int int37 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology38 = dateTime23.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test17849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17849");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test17850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17850");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 35306128);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test17851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17851");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 51);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronolgy();
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter5.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        boolean boolean15 = dateTime14.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime14.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime17.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        calendar21.setFirstDayOfWeek(2022);
        int int29 = calendar21.getMinimum(2);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale37.getDisplayCountry();
        int int40 = dateTimeField36.getMaximumTextLength(locale37);
        java.lang.String str41 = locale37.getDisplayScript();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale37);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone30, locale37);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long46 = dateTimeZone44.previousTransition((long) 8);
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone44, (long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(588);
        long long53 = dateTimeZone44.getMillisKeepLocal(dateTimeZone51, 1641894487215L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter5.withZone(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 335);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter5.withDefaultYear(35279);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        int int67 = dateTime63.getYear();
        org.joda.time.DateTime.Property property68 = dateTime63.weekyear();
        org.joda.time.DateTime dateTime70 = property68.setCopy("434");
        java.util.Calendar calendar71 = java.util.Calendar.getInstance();
        calendar71.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay75 = org.joda.time.YearMonthDay.fromCalendarFields(calendar71);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay75.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay75.monthOfYear();
        int int80 = yearMonthDay75.getValue((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        boolean boolean84 = dateTimeZone82.isStandardOffset(743L);
        org.joda.time.Interval interval85 = yearMonthDay75.toInterval(dateTimeZone82);
        org.joda.time.Period period86 = interval85.toPeriod();
        org.joda.time.DateTime dateTime87 = dateTime70.minus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.DateTime dateTime90 = dateTime70.withDurationAdded((-1L), (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = dateTimeFormatter58.print((org.joda.time.ReadableInstant) dateTime90);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1657879064874,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=874,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u56fd" + "'", str39, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573464874,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=874,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573464874,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=874,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 8L + "'", long46 == 8L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1639777687215L + "'", long53 == 1639777687215L);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1657879064874,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=874,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test17852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17852");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusHours(20);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.millis();
        java.lang.String str6 = durationFieldType5.toString();
        boolean boolean7 = localTime4.isSupported(durationFieldType5);
        org.joda.time.LocalTime localTime9 = localTime4.plusMinutes(434);
        org.joda.time.LocalTime localTime11 = localTime4.plusSeconds(706);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = property12.setCopy(35754040);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35754040 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millis" + "'", str6, "millis");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test17853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17853");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = property4.setCopy(15);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay6.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyear();
        long long18 = chronology11.add((long) 35303345, 97L, 32);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology11);
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(958125948000L, chronology11);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35306449L + "'", long18 == 35306449L);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test17854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17854");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = localTime1.plusHours((int) (short) -1);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime14 = property12.addWrapFieldToCopy(35387781);
        java.util.Locale locale17 = new java.util.Locale("09:48:34.082", "292278993-02-08T09:47:56.551Z");
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = property12.getAsShortText(locale17);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.getCountry();
        java.lang.String str24 = locale17.getDisplayVariant(locale21);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573464937,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=937,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:57:44.937" + "'", str4, "09:57:44.937");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573464937,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=937,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertEquals(locale17.toString(), "09:48:34.082_292278993-02-08T09:47:56.551Z");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8" + "'", str20, "8");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u5fb7\u6587" + "'", str22, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test17855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17855");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
        java.lang.String str9 = property5.getName();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay14.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay14.plusYears(588);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.monthOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DurationField durationField27 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        java.util.Locale locale33 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        java.lang.String str34 = dateTimeField28.getAsText(185L, locale33);
        java.lang.String str35 = property20.getAsShortText(locale33);
        java.lang.String str36 = property5.getAsText(locale33);
        java.lang.String str37 = property5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay39 = property5.setCopy("+00:00:00.565");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00:00.565\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "monthOfYear" + "'", str7, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1657879064954,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=44,MILLISECOND=954,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale33.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "185" + "'", str34, "185");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Jul" + "'", str35, "Jul");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "February" + "'", str36, "February");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[monthOfYear]" + "'", str37, "Property[monthOfYear]");
    }

    @Test
    public void test17856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17856");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.TimeOfDay timeOfDay8 = property6.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property6.addNoWrapToCopy(708);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusSeconds(746);
        int int13 = timeOfDay12.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusMinutes(0);
        org.joda.time.LocalTime localTime16 = timeOfDay12.toLocalTime();
        org.joda.time.LocalTime localTime18 = localTime16.plusSeconds(794);
        java.lang.String str20 = localTime18.toString("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 57 + "'", int13 == 57);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str20, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
    }

    @Test
    public void test17857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17857");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(19);
        boolean boolean11 = localDate9.equals((java.lang.Object) "German");
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) localDate9);
        int int13 = localDate12.getYearOfCentury();
        org.joda.time.LocalDate.Property property14 = localDate12.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.LocalDate localDate16 = property14.roundFloorCopy();
        org.joda.time.LocalDate localDate17 = property14.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test17858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17858");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        long long4 = dateMidnight0.getMillis();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        int int10 = dateTime9.getYearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime9.plusSeconds((int) 'a');
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, 0);
        java.lang.String str19 = durationFieldType16.toString();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight0.withFieldAdded(durationFieldType16, 100);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight0.plusDays(35275);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.minutes();
        org.joda.time.DurationField durationField31 = chronology29.weekyears();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DurationField durationField33 = chronology29.days();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((-62100742291471L), chronology29);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((long) 59);
        boolean boolean37 = dateMidnight0.isBefore((org.joda.time.ReadableInstant) dateMidnight34);
        boolean boolean38 = dateMidnight34.isAfterNow();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644537600000L + "'", long4 == 1644537600000L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test17859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17859");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusDays(17);
        org.joda.time.Chronology chronology19 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusHours(35331916);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.plusDays(15);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMonths(35679);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test17860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17860");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime4.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.DateTime.Property property23 = dateTime18.weekyear();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.joda.time.DateTime dateTime26 = dateTime24.withYear(2);
        int int27 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property28 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime29 = property28.withMaximumValue();
        org.joda.time.DateTime dateTime31 = property28.addWrapFieldToCopy(911);
        int int32 = dateTime31.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32265065 + "'", int32 == 32265065);
    }

    @Test
    public void test17861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17861");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.DateTime.Property property23 = dateTime18.weekyear();
        boolean boolean24 = interval13.equals((java.lang.Object) dateTime18);
        int int25 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        int int28 = dateTime26.getMinuteOfDay();
        boolean boolean30 = dateTime26.isAfter((-78170543635522L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 597 + "'", int25 == 597);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 597 + "'", int28 == 597);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test17862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17862");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay38 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        calendar34.setFirstDayOfWeek(2022);
        int int42 = calendar34.getMinimum(2);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        java.util.Calendar.Builder builder44 = builder4.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder48 = builder4.setDate(668, 522, 488);
        java.util.Calendar.Builder builder52 = builder4.setDate(985, 716, 182);
        java.util.Calendar.Builder builder55 = builder4.set(0, 100);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("months");
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale57);
        java.util.TimeZone timeZone59 = calendar58.getTimeZone();
        java.util.Calendar.Builder builder60 = builder4.setTimeZone(timeZone59);
        java.util.Calendar.Builder builder64 = builder60.setTimeOfDay(0, 0, 398);
        java.util.Calendar.Builder builder68 = builder60.setTimeOfDay(2000, (int) (byte) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder70 = builder68.setInstant((long) 763);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879065098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=98,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u56fd" + "'", str23, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573465098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=98,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573465098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=98,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1657879065098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=98,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "months");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644573465098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=98,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test17863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17863");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay1.toDateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plusMonths((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.minusYears(2698);
        org.joda.time.DateMidnight.Property property12 = dateMidnight7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.DateMidnight dateMidnight14 = property12.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = dateMidnight16.toString("292278993-02-08T09:52:01.588Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test17864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17864");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime6.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        int int20 = dateTime19.getMinuteOfHour();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.DateTime dateTime23 = property21.roundCeilingCopy();
        int int24 = dateTime23.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 57 + "'", int20 == 57);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2023 + "'", int24 == 2023);
    }

    @Test
    public void test17865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17865");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond(42);
        org.joda.time.LocalTime localTime8 = localTime1.withMillisOfSecond((int) 'u');
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime.Property property10 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addWrapFieldToCopy(843);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy(35308956);
        org.joda.time.LocalTime localTime17 = property13.addWrapFieldToCopy(35289);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573465155,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=155,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 155 + "'", int4 == 155);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test17866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17866");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(99, (-1), 10);
        java.util.Calendar.Builder builder10 = builder4.setLenient(false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test17867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17867");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(99, (-1), 10);
        java.util.Calendar.Builder builder10 = builder4.setLenient(true);
        java.util.Calendar.Builder builder14 = builder4.setTimeOfDay(378, 35349, 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMillis((int) (byte) 0);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay25.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay25.property(dateTimeFieldType30);
        org.joda.time.DateTime.Property property32 = dateTime22.property(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType30.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.DurationField durationField37 = durationFieldType33.getField(chronology36);
        org.joda.time.Chronology chronology38 = chronology36.withUTC();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property45 = localDate42.weekyear();
        org.joda.time.LocalDate.Property property46 = localDate42.era();
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfCentury(10);
        org.joda.time.LocalDate localDate51 = localDate49.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate53 = localDate49.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime54 = localDate49.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight55.withPeriodAdded(readablePeriod56, 0);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone62 = dateMidnight61.getZone();
        boolean boolean63 = dateTimeZone62.isFixed();
        org.joda.time.DateTime dateTime64 = localDate49.toDateTimeAtStartOfDay(dateTimeZone62);
        org.joda.time.LocalDate.Property property65 = localDate49.era();
        int int66 = localDate42.compareTo((org.joda.time.ReadablePartial) localDate49);
        int[] intArray68 = chronology40.get((org.joda.time.ReadablePartial) localDate49, (long) 405);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder69 = builder14.setFields(intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1]");
    }

    @Test
    public void test17868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17868");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.plusMillis((int) (byte) 0);
        int int9 = dateTime8.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay11.property(dateTimeFieldType16);
        org.joda.time.DateTime.Property property18 = dateTime8.property(dateTimeFieldType16);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType16.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.Chronology chronology22 = yearMonthDay21.getChronology();
        org.joda.time.DurationField durationField23 = durationFieldType19.getField(chronology22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(33L, chronology22);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.year();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.minusYears(2023);
        org.joda.time.DateMidnight.Property property28 = dateMidnight24.era();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test17869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17869");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(35279414);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        int int17 = dateTimeZone15.getStandardOffset((long) 13);
        long long21 = dateTimeZone15.convertLocalToUTC(229L, false, (long) 49);
        int int23 = dateTimeZone15.getOffset(0L);
        boolean boolean25 = dateTimeZone15.isStandardOffset((long) 35275);
        java.lang.String str27 = dateTimeZone15.getName((long) 999);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone15);
        boolean boolean30 = dateTimeZone15.isStandardOffset(127072314035275L);
        org.joda.time.DateTime dateTime31 = yearMonthDay2.toDateTimeAtMidnight(dateTimeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime31.withDate(35798759, 35787, 394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35787 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573465213,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=213,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:57:45 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 229L + "'", long21 == 229L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test17870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17870");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getGreatestMinimum((int) (byte) 10);
        int int7 = calendar0.getWeeksInWeekYear();
        calendar0.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate(34199882, 35808, 374);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 374");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879065225,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=225,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
    }

    @Test
    public void test17871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusWeeks(86399);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withYearOfEra(35279);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.Interval interval19 = interval11.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Duration duration20 = interval19.toDuration();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.Interval interval31 = interval23.overlap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration32 = interval31.toDuration();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime44 = dateTime42.minusHours((int) (byte) 100);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = duration32.toDuration();
        boolean boolean47 = duration20.isEqual((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration48 = duration20.toDuration();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight6.minus((org.joda.time.ReadableDuration) duration48);
        int int50 = dateMidnight49.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test17872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17872");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int8 = calendar0.getMinimum(2);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.monthOfYear();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        int int17 = property15.getMaximumTextLength(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone9, locale16);
        calendar18.set(371, (int) (short) 10, (int) (byte) 10, 857, 35280);
        int int25 = calendar18.getMinimalDaysInFirstWeek();
        java.util.Date date26 = calendar18.getTime();
        java.time.Instant instant27 = date26.toInstant();
        int int28 = date26.getHours();
        java.lang.String str29 = date26.toLocaleString();
        java.util.Date date35 = new java.util.Date(182, 808, 12, 15, 35302729);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.fromDateFields(date35);
        int int37 = date26.compareTo(date35);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879065261,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=261,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-50427255554739,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=372,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=9,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=45,MILLISECOND=261,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Mon Jan 09 05:00:45 UTC 372");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0372-1-9 5:00:45" + "'", str29, "0372-1-9 5:00:45");
        org.junit.Assert.assertEquals(date35.toString(), "Wed Jun 26 09:49:00 UTC 2216");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test17873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17873");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property3.addCopy(2);
        org.joda.time.LocalTime localTime9 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property3.addCopy(1641894523870L);
        org.joda.time.LocalTime localTime13 = localTime11.plusMillis(2922789);
        org.joda.time.LocalTime.Property property14 = localTime13.secondOfMinute();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = dateTimeField21.getAsShortText(3, locale23);
        long long27 = dateTimeField21.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        int int32 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMinutes(35270);
        int int35 = localDateTime34.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfEra(50);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.minus(readableDuration38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime34.weekyear();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        org.joda.time.LocalDateTime localDateTime43 = property40.setCopy("55", locale42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime44 = property14.setCopy("09:57:44.937", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"09:57:44.937\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573465281,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=281,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "3" + "'", str25, "3");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 49 + "'", int35 == 49);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test17874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17874");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 15);
        int int2 = timeOfDay1.size();
        int int3 = timeOfDay1.size();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
    }

    @Test
    public void test17875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17875");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusMonths(59);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withYear(22);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar12);
        calendar12.setFirstDayOfWeek(2022);
        int int20 = calendar12.getMinimum(2);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.lang.String str30 = locale28.getDisplayCountry();
        int int31 = dateTimeField27.getMaximumTextLength(locale28);
        java.lang.String str32 = locale28.getDisplayScript();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long37 = dateTimeZone35.previousTransition((long) 8);
        java.lang.String str38 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime39 = yearMonthDay11.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = yearMonthDay3.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(24);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear(104);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657879065308,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=308,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd" + "'", str30, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573465309,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573465309,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8L + "'", long37 == 8L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Etc/UTC" + "'", str38, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test17876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17876");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property2.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minus(0L);
        org.joda.time.DateTime dateTime7 = dateMidnight6.toDateTime();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = dateMidnight6.isBefore(readableInstant8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.plus(0L);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.DateMidnight.Property property13 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.minus((long) 1970);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        org.joda.time.DateTime dateTime23 = dateTime20.plusMillis((int) (byte) 0);
        int int24 = dateTime23.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay26.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay26.property(dateTimeFieldType31);
        org.joda.time.DateTime.Property property33 = dateTime23.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = property33.roundCeilingCopy();
        org.joda.time.DateTime dateTime35 = property33.roundCeilingCopy();
        int int36 = property33.getMaximumValueOverall();
        org.joda.time.DateTime dateTime38 = property33.addWrapFieldToCopy(371);
        boolean boolean39 = dateMidnight15.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateMidnight dateMidnight40 = dateTime38.toDateMidnight();
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.weekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight40.toMutableDateTimeISO();
        org.joda.time.DateMidnight.Property property43 = dateMidnight40.yearOfEra();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.plusMonths(89);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test17877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17877");
        long long6 = java.util.Date.UTC(2003, 35601, 35451937, 46900858, 531, 35809);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3386511607669000L + "'", long6 == 3386511607669000L);
    }

    @Test
    public void test17878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17878");
        java.lang.Object obj1 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfHalfday();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(obj1, chronology6);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(chronology6);
        int int12 = dateMidnight11.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 86313, dateTimeZone13);
        boolean boolean17 = dateTime15.isAfter((long) 712);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test17879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17879");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.DateTime.Property property23 = dateTime18.weekyear();
        boolean boolean24 = interval13.equals((java.lang.Object) dateTime18);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.Interval interval35 = interval27.overlap((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str39 = interval38.toString();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval50 = interval42.overlap((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTime(timeOfDay53, dateTimeZone54);
        boolean boolean56 = dateTime55.isBeforeNow();
        org.joda.time.DateTime dateTime58 = dateTime55.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour((int) (short) 0);
        boolean boolean61 = interval50.contains((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean62 = interval38.contains((org.joda.time.ReadableInterval) interval50);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Interval interval64 = interval38.withPeriodBeforeEnd(readablePeriod63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = interval38.toPeriod(periodType65);
        org.joda.time.Interval interval67 = interval35.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period66);
        org.joda.time.MutablePeriod mutablePeriod68 = period66.toMutablePeriod();
        org.joda.time.Interval interval69 = interval13.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period66);
        org.joda.time.ReadableInterval readableInterval70 = null;
        boolean boolean71 = interval69.contains(readableInterval70);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str39, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test17880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minus((long) 51);
        java.lang.String str15 = dateTime11.toString("11.02.2023 09:48:58");
        boolean boolean16 = dateTime11.isBeforeNow();
        org.joda.time.DateTime.Property property17 = dateTime11.year();
        org.joda.time.DateTime.Property property18 = dateTime11.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "11.02.2023 09:48:58" + "'", str15, "11.02.2023 09:48:58");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test17881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17881");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        boolean boolean12 = calendar0.after((java.lang.Object) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        int int21 = dateTime17.getYear();
        org.joda.time.DateTime.Property property22 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays(306);
        org.joda.time.DateTime dateTime28 = dateTime23.plusWeeks(3);
        int int29 = dateTime28.getDayOfYear();
        org.joda.time.Chronology chronology30 = dateTime28.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight11.withChronology(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minus((long) 35405195);
        int int34 = dateMidnight33.getMinuteOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657879065423,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=423,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 60 + "'", int29 == 60);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test17882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17882");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withSecondOfMinute(12);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusDays(1969);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 35271, chronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear((int) (byte) 0);
        int int18 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withMillisOfDay(578);
        org.joda.time.LocalDateTime.Property property21 = localDateTime13.monthOfYear();
        org.joda.time.Chronology chronology22 = localDateTime13.getChronology();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test17883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17883");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(86399970, 768, 35370);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 768 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17884");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        boolean boolean12 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        int int26 = property18.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.Chronology chronology27 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.era();
        int int30 = dateTime10.get(dateTimeField29);
        int int31 = dateTime10.getYear();
        org.joda.time.DateTime dateTime32 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) dateTime10);
        boolean boolean35 = dateTime10.isEqual((long) 35470271);
        org.joda.time.DateTime.Property property36 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime37 = dateTime10.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime10.withMinuteOfHour(398);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 398 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test17885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17885");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime4.plusSeconds((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime4.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.withYear(35532133);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test17886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17886");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay14.minusMonths(999);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        java.lang.String str26 = chronology22.toString();
        org.joda.time.DurationField durationField27 = chronology22.halfdays();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfCentury(10);
        org.joda.time.LocalDate localDate32 = localDate30.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight33 = localDate30.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        boolean boolean40 = dateTime39.isBeforeNow();
        org.joda.time.DateTime dateTime42 = dateTime39.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime44 = dateTime42.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime42.getZone();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance();
        calendar46.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay50 = org.joda.time.YearMonthDay.fromCalendarFields(calendar46);
        calendar46.setFirstDayOfWeek(2022);
        int int54 = calendar46.getMinimum(2);
        java.util.TimeZone timeZone55 = calendar46.getTimeZone();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.year();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.lang.String str64 = locale62.getDisplayCountry();
        int int65 = dateTimeField61.getMaximumTextLength(locale62);
        java.lang.String str66 = locale62.getDisplayScript();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale62);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone55, locale62);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        long long71 = dateTimeZone69.previousTransition((long) 8);
        long long73 = dateTimeZone45.getMillisKeepLocal(dateTimeZone69, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight74 = yearMonthDay34.toDateMidnight(dateTimeZone45);
        org.joda.time.DateTime dateTime75 = localDate30.toDateTimeAtStartOfDay(dateTimeZone45);
        int int77 = dateTimeZone45.getOffsetFromLocal(16977599999641L);
        int int79 = dateTimeZone45.getStandardOffset(1657878512644L);
        org.joda.time.Chronology chronology80 = chronology22.withZone(dateTimeZone45);
        org.joda.time.Interval interval81 = yearMonthDay17.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate82 = yearMonthDay17.toLocalDate();
        org.joda.time.YearMonthDay.Property property83 = yearMonthDay17.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay85 = property83.addWrapFieldToCopy(35813);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str26, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1657879065497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=497,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u4e2d\u56fd" + "'", str64, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644573465498,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=498,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1644573465498,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=498,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 8L + "'", long71 == 8L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(yearMonthDay85);
    }

    @Test
    public void test17887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17887");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1644537600000L);
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test17888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17888");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate6 = property4.addToCopy(1969);
        org.joda.time.Interval interval7 = localDate6.toInterval();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test17889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17889");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekyear(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(18008);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.millisOfSecond();
        java.lang.String str13 = localDateTime6.toString("2023/02/11 9:51:01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2023/02/11 9:51:01" + "'", str13, "2023/02/11 9:51:01");
    }

    @Test
    public void test17890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17890");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        boolean boolean7 = dateMidnight3.isAfter((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withDayOfWeek(3);
        org.joda.time.Interval interval12 = dateMidnight9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Interval interval14 = interval12.gap(readableInterval13);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.DateTime dateTime16 = interval14.getEnd();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test17891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17891");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property2 = localDate1.year();
        java.lang.Object obj3 = null;
        boolean boolean4 = property2.equals(obj3);
        org.joda.time.LocalDate localDate5 = property2.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        int int11 = dateTime10.getYearOfCentury();
        org.joda.time.DateTime dateTime13 = dateTime10.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.monthOfYear();
        org.joda.time.DateTime dateTime27 = yearMonthDay22.toDateTimeAtCurrentTime();
        int int28 = property20.compareTo((org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.Chronology chronology29 = yearMonthDay22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay22.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean33 = yearMonthDay22.isSupported(dateTimeFieldType32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTime(timeOfDay36, dateTimeZone37);
        boolean boolean39 = dateTime38.isBeforeNow();
        org.joda.time.DateTime dateTime41 = dateTime38.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime43 = dateTime41.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime41.getZone();
        int int46 = dateTimeZone44.getStandardOffset((long) 13);
        long long50 = dateTimeZone44.convertLocalToUTC(229L, false, (long) 49);
        long long52 = dateTimeZone44.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime53 = yearMonthDay22.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.DateTime dateTime54 = dateTime10.withZone(dateTimeZone44);
        java.lang.String str55 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime56 = localDate5.toDateTimeAtCurrentTime(dateTimeZone44);
        int int57 = localDate5.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 229L + "'", long50 == 229L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 49L + "'", long52 == 49L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Etc/UTC" + "'", str55, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 42 + "'", int57 == 42);
    }

    @Test
    public void test17892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17892");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTime dateTime13 = yearMonthDay8.toDateTimeAtCurrentTime();
        int int14 = property6.compareTo((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.Chronology chronology15 = yearMonthDay8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        boolean boolean17 = dateTimeFieldType0.isSupported(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.centuryOfEra();
        int int21 = dateTimeField19.get(1265932800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
    }

    @Test
    public void test17893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17893");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay7.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = yearMonthDay7.isSupported(dateTimeFieldType17);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay7.toDateMidnight();
        org.joda.time.DateTime dateTime20 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = yearMonthDay7.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
    }

    @Test
    public void test17894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17894");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withWeekyear(35277);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.secondOfMinute();
        org.joda.time.Chronology chronology6 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis(422);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test17895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17895");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.centuryOfEra();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTime(chronology19);
        boolean boolean21 = interval4.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate localDate22 = dateTime20.toLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYear((int) (short) -1);
        java.lang.String str25 = localDate24.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 16, chronology31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval45 = interval37.overlap((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str49 = interval48.toString();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.Interval interval60 = interval52.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.TimeOfDay timeOfDay63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTime(timeOfDay63, dateTimeZone64);
        boolean boolean66 = dateTime65.isBeforeNow();
        org.joda.time.DateTime dateTime68 = dateTime65.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime70 = dateTime68.withMinuteOfHour((int) (short) 0);
        boolean boolean71 = interval60.contains((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean72 = interval48.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Interval interval74 = interval48.withPeriodBeforeEnd(readablePeriod73);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = interval48.toPeriod(periodType75);
        org.joda.time.Interval interval77 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        long long80 = chronology31.add((org.joda.time.ReadablePeriod) period76, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod81 = period76.toMutablePeriod();
        org.joda.time.LocalDate localDate82 = localDate24.minus((org.joda.time.ReadablePeriod) period76);
        int int83 = period76.size();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight0.plusMonths(42);
        int int87 = dateMidnight86.getEra();
        org.joda.time.DateMidnight.Property property88 = dateMidnight86.year();
        org.joda.time.DateMidnight dateMidnight89 = property88.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight89.minusDays(49);
        org.joda.time.DateMidnight.Property property92 = dateMidnight91.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-0001-02-11" + "'", str25, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str49, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1163943L + "'", long80 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test17896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17896");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate17 = dateTime16.toLocalDate();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays(90);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfCentury(10);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime25 = localDate24.toDateTimeAtCurrentTime();
        java.util.Date date26 = localDate24.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay28.dayOfMonth();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromCalendarFields(calendar31);
        calendar31.setFirstDayOfWeek(2022);
        int int39 = calendar31.getMinimum(2);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.year();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.lang.String str49 = locale47.getDisplayCountry();
        int int50 = dateTimeField46.getMaximumTextLength(locale47);
        java.lang.String str51 = locale47.getDisplayScript();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale47);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone40, locale47);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        long long56 = dateTimeZone54.previousTransition((long) 8);
        java.lang.String str57 = dateTimeZone54.toString();
        org.joda.time.Interval interval58 = yearMonthDay28.toInterval(dateTimeZone54);
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.LocalDate localDate60 = localDate24.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime16.plus((org.joda.time.ReadablePeriod) period59);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Feb 11 00:00:00 UTC 2010");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1657879065713,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=713,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u56fd" + "'", str49, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644573465713,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=713,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644573465713,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=713,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 8L + "'", long56 == 8L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test17897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17897");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.DurationField durationField18 = chronology15.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.year();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology15);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test17898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17898");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay15 = property5.addWrapFieldToCopy(52);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay22 = property21.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay22.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay24 = property23.withMinimumValue();
        int int25 = yearMonthDay24.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay24.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays(0);
        int int29 = property5.compareTo((org.joda.time.ReadableInstant) dateMidnight26);
        int int30 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
    }

    @Test
    public void test17899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17899");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime11.property(dateTimeFieldType19);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType19.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.DurationField durationField26 = durationFieldType22.getField(chronology25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (-1), chronology25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((-62100742311688L), chronology25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime dateTime37 = dateTime34.plusMillis((int) (byte) 0);
        int int38 = dateTime37.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay40.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay40.property(dateTimeFieldType45);
        org.joda.time.DateTime.Property property47 = dateTime37.property(dateTimeFieldType45);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType45.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.Chronology chronology51 = yearMonthDay50.getChronology();
        org.joda.time.DurationField durationField52 = durationFieldType48.getField(chronology51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance();
        calendar53.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay57 = org.joda.time.YearMonthDay.fromCalendarFields(calendar53);
        calendar53.setFirstDayOfWeek(2022);
        int int61 = calendar53.getMinimum(2);
        java.util.TimeZone timeZone62 = calendar53.getTimeZone();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime66 = interval65.getEnd();
        org.joda.time.Chronology chronology67 = interval65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.year();
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleKeys();
        java.lang.String str71 = locale69.getDisplayCountry();
        int int72 = dateTimeField68.getMaximumTextLength(locale69);
        java.lang.String str73 = locale69.getDisplayScript();
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(locale69);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone62, locale69);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        long long78 = dateTimeZone76.previousTransition((long) 8);
        java.lang.String str79 = dateTimeZone76.toString();
        java.util.TimeZone timeZone80 = dateTimeZone76.toTimeZone();
        org.joda.time.Chronology chronology81 = chronology51.withZone(dateTimeZone76);
        org.joda.time.Chronology chronology82 = chronology25.withZone(dateTimeZone76);
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((-62100742261781L), chronology25);
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay((long) 818, chronology25);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1657879065790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=790,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u4e2d\u56fd" + "'", str71, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1644573465790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=790,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1644573465790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=790,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 8L + "'", long78 == 8L);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Etc/UTC" + "'", str79, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test17900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17900");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval5 = interval2.withEndMillis((long) 10);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str9 = interval8.toString();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval20 = interval12.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime28.withMinuteOfHour((int) (short) 0);
        boolean boolean31 = interval20.contains((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = interval8.contains((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval43 = interval35.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str47 = interval46.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = dateTime66.withMinuteOfHour((int) (short) 0);
        boolean boolean69 = interval58.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval46.contains((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval46.withPeriodBeforeEnd(readablePeriod71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval46.toPeriod(periodType73);
        org.joda.time.Interval interval75 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Interval interval76 = interval8.overlap((org.joda.time.ReadableInterval) interval43);
        boolean boolean77 = interval5.overlaps((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Interval interval79 = interval8.withChronology(chronology78);
        long long80 = interval79.getStartMillis();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str9, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str47, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 2L + "'", long80 == 2L);
    }

    @Test
    public void test17901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17901");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(35324L);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMaximumValue();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = property2.getAsText(locale4);
        org.joda.time.TimeOfDay timeOfDay7 = property2.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "324" + "'", str6, "324");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
    }

    @Test
    public void test17902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17902");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        java.util.GregorianCalendar gregorianCalendar9 = dateTime7.toGregorianCalendar();
        java.util.Date date10 = gregorianCalendar9.getTime();
        date10.setYear(14);
        int int13 = date10.getMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Feb 11 09:57:45 UTC 1914");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test17903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17903");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(20);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfSecond(47);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusMonths(37359);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(57428725);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1447902037 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test17904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17904");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval8 = localDate2.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDate2.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        boolean boolean15 = dateTime14.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime14.withMonthOfYear((int) (byte) 1);
        int int18 = dateTime14.getYear();
        org.joda.time.DateTime.Property property19 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        org.joda.time.DateTime dateTime21 = property19.roundHalfCeilingCopy();
        java.util.Date date22 = dateTime21.toDate();
        int int23 = date22.getDate();
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromDateFields(date22);
        org.joda.time.DateTime dateTime25 = yearMonthDay24.toDateTimeAtCurrentTime();
        java.lang.String str26 = yearMonthDay24.toString();
        boolean boolean27 = localDate2.isEqual((org.joda.time.ReadablePartial) yearMonthDay24);
        org.joda.time.LocalDate localDate29 = localDate2.minusMonths(0);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-01-03" + "'", str26, "2022-01-03");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test17905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17905");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        calendar0.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date6 = calendar0.getTime();
        calendar0.setTimeInMillis(52L);
        calendar0.roll(0, false);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=52,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Jul 15 09:57:45 UTC 2022");
    }

    @Test
    public void test17906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17906");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime9 = localTime6.minusHours(49);
        org.joda.time.LocalTime.Property property10 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addWrapFieldToCopy(911);
        org.joda.time.LocalTime localTime13 = property10.getLocalTime();
        org.joda.time.LocalTime localTime14 = property10.withMinimumValue();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573465920,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=45,MILLISECOND=920,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test17907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17907");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(33L);
        java.lang.String str2 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.plusMonths(668);
        int int5 = yearMonthDay4.getMonthOfYear();
        int int6 = yearMonthDay4.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withYear(35314);
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtCurrentTime();
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMillis(323);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test17908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17908");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(364, 37359, 895);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37359 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17909");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        org.joda.time.LocalDate localDate28 = localDate4.plusWeeks(29);
        org.joda.time.LocalDate localDate30 = localDate4.plusWeeks(515);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test17910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17910");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str19 = interval18.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval30 = interval22.overlap((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour((int) (short) 0);
        boolean boolean41 = interval30.contains((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean42 = interval18.contains((org.joda.time.ReadableInterval) interval30);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Interval interval44 = interval18.withPeriodBeforeEnd(readablePeriod43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval18.toPeriod(periodType45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.lang.String str48 = locale47.getLanguage();
        boolean boolean49 = interval18.equals((java.lang.Object) locale47);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.Interval interval60 = interval52.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Duration duration61 = interval60.toDuration();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        boolean boolean67 = dateTime66.isBeforeNow();
        org.joda.time.DateTime dateTime69 = dateTime66.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = dateTime69.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime73 = dateTime71.minusHours((int) (byte) 100);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration75 = duration61.toDuration();
        org.joda.time.Interval interval76 = interval18.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval77 = interval76.toInterval();
        org.joda.time.Period period78 = interval77.toPeriod();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay14.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = yearMonthDay14.getFieldTypes();
        org.joda.time.YearMonthDay.Property property81 = yearMonthDay14.year();
        org.joda.time.DateTimeField dateTimeField82 = property81.getField();
        java.lang.String str83 = dateTimeField82.toString();
        int int85 = dateTimeField82.getMinimumValue((long) 768);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str19, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh" + "'", str48, "zh");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DateTimeField[year]" + "'", str83, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-292275054) + "'", int85 == (-292275054));
    }

    @Test
    public void test17911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17911");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        int int4 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withYearOfCentury(79);
        org.joda.time.DateMidnight.Property property7 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight9 = property7.addToCopy(48);
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight11 = property7.roundHalfEvenCopy();
        int int12 = property7.get();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test17912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17912");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay38 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        calendar34.setFirstDayOfWeek(2022);
        int int42 = calendar34.getMinimum(2);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        java.util.Calendar.Builder builder44 = builder4.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder48 = builder4.setDate(668, 522, 488);
        java.util.Calendar.Builder builder52 = builder4.setDate(0, 46, 77);
        java.util.Calendar.Builder builder54 = builder52.setLenient(true);
        java.util.Calendar.Builder builder58 = builder52.setTimeOfDay(18008, 662, 35521);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657879066019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=19,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u56fd" + "'", str23, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573466019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=19,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573466019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=19,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1657879066019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=19,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test17913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17913");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay1.toDateMidnight(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minus((long) 434);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.minutes();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((-1L), chronology16);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight10.withChronology(chronology16);
        org.joda.time.Chronology chronology22 = dateMidnight10.getChronology();
        org.joda.time.DateMidnight.Property property23 = dateMidnight10.weekyear();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test17914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17914");
        java.lang.Object obj0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(obj0);
        int int2 = dateMidnight1.getMonthOfYear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = dateTimeField8.getAsShortText(3, locale10);
        long long14 = dateTimeField8.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        int int19 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean23 = localDateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval34 = interval26.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration35 = interval34.toDuration();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.plus((org.joda.time.ReadableDuration) duration35);
        java.lang.String str37 = duration35.toString();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight1.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration39 = duration35.toDuration();
        org.joda.time.Duration duration40 = duration35.toDuration();
        java.lang.Object obj41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(obj41);
        int int43 = dateMidnight42.getMonthOfYear();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.year();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getVariant();
        java.lang.String str53 = dateTimeField49.getAsShortText(3, locale51);
        long long55 = dateTimeField49.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.monthOfYear();
        int int60 = dateTimeField49.getMaximumValue((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean64 = localDateTime62.isSupported(dateTimeFieldType63);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime73 = interval72.getEnd();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.Interval interval75 = interval67.overlap((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Duration duration76 = interval75.toDuration();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime62.plus((org.joda.time.ReadableDuration) duration76);
        java.lang.String str78 = duration76.toString();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight42.minus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Period period80 = duration76.toPeriod();
        boolean boolean81 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration76);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "3" + "'", str12, "3");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0.033S" + "'", str37, "PT0.033S");
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "3" + "'", str53, "3");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 292278993 + "'", int60 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT0.033S" + "'", str78, "PT0.033S");
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test17915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17915");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 16, chronology5);
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now(chronology5);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusDays(21);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded(21900120L, (int) '#');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval26 = interval18.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration27 = interval26.toDuration();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval38 = interval30.overlap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTime(timeOfDay42, dateTimeZone43);
        boolean boolean45 = dateTime44.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime44.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime49 = dateTime47.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime51 = dateTime49.minusHours((int) (byte) 100);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration53 = duration39.toDuration();
        boolean boolean54 = duration27.isEqual((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str58 = interval57.toString();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime67 = interval66.getEnd();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        org.joda.time.Interval interval69 = interval61.overlap((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Duration duration70 = interval69.toDuration();
        long long71 = duration70.getMillis();
        org.joda.time.Interval interval72 = interval57.withDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        boolean boolean73 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration53);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str58, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 33L + "'", long71 == 33L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateMidnight75);
    }

    @Test
    public void test17916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17916");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime6.getYear();
        org.joda.time.DateTime.Property property11 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        java.util.Date date14 = dateTime13.toDate();
        int int15 = date14.getDate();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.withFields((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfCentury(10);
        org.joda.time.LocalDate localDate22 = localDate20.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.weekyear();
        org.joda.time.LocalDate.Property property24 = localDate22.centuryOfEra();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        calendar25.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields(calendar25);
        calendar25.setFirstDayOfWeek(2022);
        int int33 = calendar25.getMinimum(2);
        java.util.TimeZone timeZone34 = calendar25.getTimeZone();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.year();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = locale41.getDisplayCountry();
        int int44 = dateTimeField40.getMaximumTextLength(locale41);
        java.lang.String str45 = locale41.getDisplayScript();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale41);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone34, locale41);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long50 = dateTimeZone48.previousTransition((long) 8);
        org.joda.time.Interval interval51 = localDate22.toInterval(dateTimeZone48);
        long long54 = dateTimeZone48.convertLocalToUTC((-525628200000L), false);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight1.withZoneRetainFields(dateTimeZone48);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance();
        calendar56.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay60 = org.joda.time.YearMonthDay.fromCalendarFields(calendar56);
        calendar56.setFirstDayOfWeek(2022);
        int int64 = calendar56.getMinimum(2);
        java.util.TimeZone timeZone65 = calendar56.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        long long68 = dateTimeZone66.previousTransition(77846400033L);
        java.util.TimeZone timeZone69 = dateTimeZone66.toTimeZone();
        long long72 = dateTimeZone66.convertLocalToUTC((long) 134, false);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight1, dateTimeZone66);
        boolean boolean74 = dateMidnight73.isAfterNow();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight73.minus(1641894739798L);
        org.joda.time.DateMidnight.Property property77 = dateMidnight73.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1657879066141,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=141,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u56fd" + "'", str43, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573466141,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=141,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644573466141,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=141,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 8L + "'", long50 == 8L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-525628200000L) + "'", long54 == (-525628200000L));
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1657879066141,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=141,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 77846400033L + "'", long68 == 77846400033L);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 134L + "'", long72 == 134L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test17917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17917");
        java.util.Date date3 = new java.util.Date(47, 387, 7);
        int int4 = date3.getYear();
        long long5 = date3.getTime();
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromDateFields(date3);
        int int7 = timeOfDay6.size();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 07 00:00:00 UTC 1979");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 79 + "'", int4 == 79);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 292291200000L + "'", long5 == 292291200000L);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test17918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17918");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(434);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(1997);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours(35651795);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test17919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17919");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology5);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property9.addNoWrapToCopy(962);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test17920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17920");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        int int11 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        org.joda.time.DurationField durationField27 = chronology25.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval28 = new org.joda.time.Interval((java.lang.Object) property12, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test17921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17921");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode5 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet11, filteringMode12);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet26, filteringMode27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.UK;
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = locale41.getDisplayCountry();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getDisplayCountry();
        java.util.Locale locale48 = new java.util.Locale("");
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.util.Locale locale50 = java.util.Locale.UK;
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale33, locale34, locale35, locale36, locale37, locale39, locale41, locale44, locale48, locale49, locale50, locale51, locale52, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList28, filteringMode58);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet65, filteringMode66);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList28, filteringMode66);
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap70);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + filteringMode5 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode5.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode12.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u5fb7\u6587" + "'", str40, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u56fd" + "'", str43, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u56fd" + "'", str46, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode58.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode66.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(languageRangeList71);
    }

    @Test
    public void test17922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17922");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("minuteOfHour");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"minuteOfHour\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17923");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("09:47:58.878", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=09:47:58.878");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17924");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        long long4 = dateMidnight0.getMillis();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.plus((long) 32769);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromCalendarFields(calendar7);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.monthOfYear();
        int int16 = yearMonthDay11.getValue((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        boolean boolean20 = dateTimeZone18.isStandardOffset(743L);
        org.joda.time.Interval interval21 = yearMonthDay11.toInterval(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight6.toMutableDateTime(dateTimeZone18);
        int int23 = mutableDateTime22.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644537600000L + "'", long4 == 1644537600000L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1657879066294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 488 + "'", int23 == 488);
    }

    @Test
    public void test17925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17925");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        int int4 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.plusWeeks((-292275054));
        int int7 = dateMidnight0.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight0.minusWeeks(182);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight0.withYear(316);
        org.joda.time.LocalDate localDate12 = dateMidnight0.toLocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.LocalDate localDate14 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test17926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17926");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology5);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.seconds();
        boolean boolean10 = localTime8.isSupported(durationFieldType9);
        org.joda.time.LocalTime localTime12 = localTime8.plusMillis((-703165));
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17927");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight7 = property4.addToCopy(35297719);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plusYears(965);
        org.joda.time.DateMidnight.Property property10 = dateMidnight7.monthOfYear();
        int int11 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test17928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17928");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        int int4 = property3.get();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addNoWrapToCopy((int) 'x');
        org.joda.time.TimeOfDay timeOfDay8 = property3.addNoWrapToCopy((int) (short) -1);
        int int9 = property3.get();
        int int10 = property3.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 57 + "'", int4 == 57);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 57 + "'", int9 == 57);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
    }

    @Test
    public void test17929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17929");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundHalfFloorCopy();
        int int7 = dateMidnight6.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test17930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17930");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusMonths(35279414);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        int int17 = dateTimeZone15.getStandardOffset((long) 13);
        long long21 = dateTimeZone15.convertLocalToUTC(229L, false, (long) 49);
        int int23 = dateTimeZone15.getOffset(0L);
        boolean boolean25 = dateTimeZone15.isStandardOffset((long) 35275);
        java.lang.String str27 = dateTimeZone15.getName((long) 999);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone15);
        boolean boolean30 = dateTimeZone15.isStandardOffset(127072314035275L);
        org.joda.time.DateTime dateTime31 = yearMonthDay2.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime32 = yearMonthDay2.toDateTimeAtMidnight();
        int int33 = yearMonthDay2.getMonthOfYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573466361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:57:46 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 229L + "'", long21 == 229L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test17931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17931");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setLanguage("09:49:08.758");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 09:49:08.758 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17932");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime11.property(dateTimeFieldType19);
        boolean boolean22 = localDate0.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property23 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate24 = property23.withMinimumValue();
        org.joda.time.LocalDate localDate25 = property23.roundHalfCeilingCopy();
        int int26 = localDate25.getCenturyOfEra();
        org.joda.time.LocalDate localDate28 = localDate25.minusDays(1439);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test17933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17933");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale6);
        calendar11.setMinimalDaysInFirstWeek(12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar11);
        java.util.Date date15 = calendar11.getTime();
        date15.setMinutes(2698);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u56fd" + "'", str8, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644573466398,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=12,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=398,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 13 05:58:46 UTC 2022");
    }

    @Test
    public void test17934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17934");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime21 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay1.property(dateTimeFieldType22);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay1.monthOfYear();
        int int26 = yearMonthDay1.getDayOfMonth();
        int int27 = yearMonthDay1.size();
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay1.toDateMidnight();
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay1.year();
        int int30 = property29.get();
        org.joda.time.YearMonthDay yearMonthDay32 = property29.addToCopy(35308956);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property29.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay35 = property29.setCopy("2022-02-11T09:57:00.894Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:57:00.894Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
    }

    @Test
    public void test17935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        int int6 = yearMonthDay1.size();
        int int7 = yearMonthDay1.size();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        java.lang.String str9 = property8.getName();
        org.joda.time.DurationField durationField10 = property8.getRangeDurationField();
        java.lang.String str11 = property8.getAsShortText();
        java.lang.String str12 = property8.toString();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "year" + "'", str9, "year");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[year]" + "'", str12, "Property[year]");
    }

    @Test
    public void test17936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17936");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime8 = property5.addCopy((long) (short) 10);
        org.joda.time.LocalTime localTime9 = property5.withMinimumValue();
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime.Property property11 = localTime9.millisOfDay();
        java.lang.String str13 = localTime9.toString("09:48:20.170");
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573466437,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=57,SECOND=46,MILLISECOND=437,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 437 + "'", int4 == 437);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "09:48:20.170" + "'", str13, "09:48:20.170");
    }

    @Test
    public void test17937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17937");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        int int6 = yearMonthDay1.size();
        int int7 = yearMonthDay1.size();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        java.util.Locale locale12 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property8.getMaximumShortTextLength(locale13);
        int int16 = property8.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField17 = property8.getField();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale12.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17938");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("days");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Locale locale8 = new java.util.Locale("09:48:35.913", "292278993-02-08T09:48:35.962Z");
        java.lang.String str9 = locale5.getDisplayCountry(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder4.setLocale(locale8);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 09:48:35.913 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals(locale8.toString(), "09:48:35.913_292278993-02-08T09:48:35.962Z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test17939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17939");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        int int21 = dateTime17.getYear();
        org.joda.time.DateTime.Property property22 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime25 = dateTime23.withYear(2);
        org.joda.time.LocalDate localDate26 = dateTime25.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int28 = dateTime25.get(dateTimeFieldType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTime(timeOfDay36, dateTimeZone37);
        boolean boolean39 = dateTime38.isBeforeNow();
        org.joda.time.DateTime dateTime41 = dateTime38.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime38.toDateTime(chronology46);
        boolean boolean48 = interval31.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalDate localDate49 = dateTime47.toLocalDate();
        int int50 = localDate49.getEra();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTime(timeOfDay53, dateTimeZone54);
        boolean boolean56 = dateTime55.isBeforeNow();
        org.joda.time.DateTime dateTime58 = dateTime55.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime58.getZone();
        org.joda.time.DateTime dateTime62 = localDate49.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = dateTime25.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime11.withZoneRetainFields(dateTimeZone61);
        long long68 = dateTimeZone61.convertLocalToUTC((-62100742323530L), true, (long) 962);
        org.joda.time.LocalDate localDate69 = org.joda.time.LocalDate.now(dateTimeZone61);
        java.lang.String str70 = dateTimeZone61.getID();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 21, (long) 35336, dateTimeZone61);
        org.joda.time.LocalDate localDate72 = org.joda.time.LocalDate.now(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-62100742323530L) + "'", long68 == (-62100742323530L));
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Etc/UTC" + "'", str70, "Etc/UTC");
        org.junit.Assert.assertNotNull(localDate72);
    }

    @Test
    public void test17940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17940");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime14 = dateTime11.minusYears(44);
        org.joda.time.LocalDate localDate15 = dateTime11.toLocalDate();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        boolean boolean18 = locale17.hasExtensions();
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.toLanguageTag();
        java.lang.String str21 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDate15, 911, locale17);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((java.lang.Object) str21);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "911" + "'", str21, "911");
    }
}

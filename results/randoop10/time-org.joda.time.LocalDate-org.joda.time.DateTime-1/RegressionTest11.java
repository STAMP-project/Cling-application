import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest11 {

    public static boolean debug = false;

    @Test
    public void test05501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05501");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType0.getField(chronology2);
        long long6 = dateTimeField3.addWrapField((long) 100, 35395200);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        int int15 = dateTime11.getYear();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.withDurationAdded(readableDuration16, (int) (short) 100);
        org.joda.time.DateTime.Property property19 = dateTime11.weekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now();
        int int24 = dateMidnight23.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withPeriodAdded(readablePeriod27, 22);
        int int30 = dateMidnight29.getHourOfDay();
        int int31 = dateMidnight29.getWeekOfWeekyear();
        int int32 = dateMidnight29.getHourOfDay();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.minutes();
        org.joda.time.DurationField durationField39 = chronology37.weekyears();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight29.withChronology(chronology37);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval55 = interval47.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str59 = interval58.toString();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.Interval interval70 = interval62.overlap((org.joda.time.ReadableInterval) interval67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        boolean boolean76 = dateTime75.isBeforeNow();
        org.joda.time.DateTime dateTime78 = dateTime75.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime78.withMinuteOfHour((int) (short) 0);
        boolean boolean81 = interval70.contains((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean82 = interval58.contains((org.joda.time.ReadableInterval) interval70);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Interval interval84 = interval58.withPeriodBeforeEnd(readablePeriod83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = interval58.toPeriod(periodType85);
        org.joda.time.Interval interval87 = interval55.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period86);
        org.joda.time.MutablePeriod mutablePeriod88 = period86.toMutablePeriod();
        int[] intArray91 = chronology37.get((org.joda.time.ReadablePeriod) period86, (long) 668, (long) 34);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField3.addWrapPartial((org.joda.time.ReadablePartial) yearMonthDay20, 915, intArray91, 35403860);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str59, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(mutablePeriod88);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 0, 0, 0, 0, 0, 0, -634]");
    }

    @Test
    public void test05502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05502");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime7 = dateTime4.withDurationAdded((long) 292278993, (int) '#');
        boolean boolean8 = dateTime4.isEqualNow();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05503");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfSecond((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(185);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 185 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test05504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05504");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfMonth(20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(578, 43, 35326);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test05505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05505");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property10 = localDate7.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean27 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.DateTime.Property property29 = dateTime17.property(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType26.getRangeDurationType();
        int int31 = localDate7.get(dateTimeFieldType26);
        int int32 = yearMonthDay4.get(dateTimeFieldType26);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay4.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay34 = property33.getYearMonthDay();
        int int35 = property33.get();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878724303,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=303,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
    }

    @Test
    public void test05506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05506");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        boolean boolean27 = interval2.containsNow();
        org.joda.time.Chronology chronology28 = interval2.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.year();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = chronology28.getDateTimeMillis((long) 826, 52, 24, (int) (short) -1, 35470271);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test05507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusWeeks(86399);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        boolean boolean27 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime33.toDateTime(chronology41);
        boolean boolean43 = durationFieldType28.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime26.toDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight6.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField49 = chronology41.halfdayOfDay();
        long long51 = dateTimeField49.roundFloor((long) 871);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = dateTimeField49.set(0L, "35356");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"35356\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test05508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05508");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withPivotYear(134);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = dateTimeFormatter28.parseLocalDate("292278993-02-08T09:50:05.971Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test05509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05509");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.roundHalfCeilingCopy();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        boolean boolean17 = localTime15.equals((java.lang.Object) 16);
        java.lang.String str18 = localTime15.toString();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromCalendarFields(calendar19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property22 = localTime20.property(dateTimeFieldType21);
        org.joda.time.LocalTime.Property property23 = localTime15.property(dateTimeFieldType21);
        org.joda.time.LocalTime localTime25 = localTime15.plusHours((int) (short) -1);
        int int26 = localTime15.getMillisOfSecond();
        org.joda.time.DateTime dateTime27 = localTime15.toDateTimeToday();
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekOfWeekyear(8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        long long32 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalTime localTime33 = property12.withMaximumValue();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573124525,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=525,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:52:04.525" + "'", str4, "09:52:04.525");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573124526,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=526,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644573124526,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=526,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "09:52:04.526" + "'", str18, "09:52:04.526");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644573124526,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=526,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 526 + "'", int26 == 526);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-25T09:52:04.526Z" + "'", str31, "2022-02-25T09:52:04.526Z");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-27429712L) + "'", long32 == (-27429712L));
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test05510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05510");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        int int22 = property14.compareTo((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.Chronology chronology23 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay16.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean27 = yearMonthDay16.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        int int40 = dateTimeZone38.getStandardOffset((long) 13);
        long long44 = dateTimeZone38.convertLocalToUTC(229L, false, (long) 49);
        long long46 = dateTimeZone38.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime47 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime48 = dateTime4.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(dateTimeZone49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.monthOfYear();
        org.joda.time.DateMidnight dateMidnight52 = org.joda.time.DateMidnight.now();
        long long53 = property51.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfWeek();
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.centuryOfEra();
        boolean boolean58 = dateTime48.isBefore((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateTime.Property property59 = dateTime48.year();
        org.joda.time.DateTime dateTime60 = property59.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 229L + "'", long44 == 229L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 49L + "'", long46 == 49L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test05511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05511");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime dateTime10 = property8.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        java.lang.Integer int14 = dateTimeFormatter13.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter13.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withPivotYear(44);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str20 = locale18.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter13.withLocale(locale18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withOffsetParsed();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.DurationField durationField29 = chronology27.weekyears();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter21.withChronology(chronology27);
        java.lang.String str31 = chronology27.toString();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime10, chronology27);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str19, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str31, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test05512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05512");
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.now();
        int int3 = dateMidnight2.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.LocalDate localDate9 = dateMidnight8.toLocalDate();
        java.lang.Object obj10 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DurationField durationField17 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.minuteOfHour();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfCentury(10);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property26 = localDate25.weekyear();
        org.joda.time.LocalDate.Property property27 = localDate25.centuryOfEra();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        calendar28.setFirstDayOfWeek(2022);
        int int36 = calendar28.getMinimum(2);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getDisplayCountry();
        int int47 = dateTimeField43.getMaximumTextLength(locale44);
        java.lang.String str48 = locale44.getDisplayScript();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale44);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone37, locale44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long53 = dateTimeZone51.previousTransition((long) 8);
        org.joda.time.Interval interval54 = localDate25.toInterval(dateTimeZone51);
        org.joda.time.Chronology chronology55 = chronology15.withZone(dateTimeZone51);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(obj10, dateTimeZone51);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) localDate9, dateTimeZone51);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        calendar58.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay62 = org.joda.time.YearMonthDay.fromCalendarFields(calendar58);
        calendar58.setFirstDayOfWeek(2022);
        int int66 = calendar58.getMinimum(2);
        java.util.TimeZone timeZone67 = calendar58.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateTime dateTime70 = localDate57.toDateTimeAtMidnight(dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight71 = org.joda.time.DateMidnight.now(dateTimeZone69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval72 = new org.joda.time.Interval((long) 35499, (long) 423, dateTimeZone69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1657878724697,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=697,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u672c" + "'", str46, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644573124697,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=697,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573124697,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=697,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 8L + "'", long53 == 8L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1657878724697,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=697,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateMidnight71);
    }

    @Test
    public void test05513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05513");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.withField(dateTimeFieldType5, 4);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = timeOfDay7.getFieldType(35402140);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35402140");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test05514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05514");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        int int6 = dateTimeField5.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.withYear(22);
        int int13 = yearMonthDay8.size();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromCalendarFields(calendar14);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay18.year();
        int[] intArray22 = yearMonthDay18.getValues();
        int int23 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay8, intArray22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfCentury(10);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay36.monthOfYear();
        org.joda.time.DateTime dateTime41 = yearMonthDay36.toDateTimeAtCurrentTime();
        int int42 = property34.compareTo((org.joda.time.ReadablePartial) yearMonthDay36);
        org.joda.time.Chronology chronology43 = yearMonthDay36.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay36.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean47 = yearMonthDay36.isSupported(dateTimeFieldType46);
        boolean boolean48 = localDate28.isSupported(dateTimeFieldType46);
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDate28, 9, locale50);
        int int52 = localDate28.getDayOfWeek();
        java.util.Locale locale55 = new java.util.Locale("");
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale55.getScript();
        java.lang.String str58 = localDate28.toString("35279414", locale55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = locale55.getUnicodeLocaleType("35513492");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 35513492");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1657878724735,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=735,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 7, 15]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-292275054) + "'", int23 == (-292275054));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "35279414" + "'", str58, "35279414");
    }

    @Test
    public void test05515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05515");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay45 = org.joda.time.YearMonthDay.fromCalendarFields(calendar41);
        calendar41.setFirstDayOfWeek(2022);
        int int49 = calendar41.getMinimum(2);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.year();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.lang.String str59 = locale57.getDisplayCountry();
        int int60 = dateTimeField56.getMaximumTextLength(locale57);
        java.lang.String str61 = locale57.getDisplayScript();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale57);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone50, locale57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        long long66 = dateTimeZone64.previousTransition((long) 8);
        long long68 = dateTimeZone40.getMillisKeepLocal(dateTimeZone64, (long) (byte) 0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 35277, dateTimeZone64);
        long long71 = dateTimeZone64.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter27.withZone(dateTimeZone64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withPivotYear((java.lang.Integer) 2010);
        org.joda.time.Chronology chronology75 = dateTimeFormatter72.getChronology();
        java.io.Writer writer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter72.printTo(writer76, 1235273932799641L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1657878724761,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=761,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c" + "'", str59, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644573124761,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=761,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573124762,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=4,MILLISECOND=762,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 8L + "'", long66 == 8L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 97L + "'", long71 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNull(chronology75);
    }

    @Test
    public void test05516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05516");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withWeekyear(35277);
        int int4 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute(14);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone10);
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.era();
        int int14 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test05517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05517");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = localDate4.plusDays((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate4.plusYears(47);
        int int9 = localDate4.getYearOfEra();
        java.lang.String str10 = localDate4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate4.withDayOfMonth(35351);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35351 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-01-03" + "'", str10, "2022-01-03");
    }

    @Test
    public void test05518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05518");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfYear();
        int int9 = dateTimeField7.get(47519543434L);
        long long11 = dateTimeField7.roundCeiling((long) 92);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) 994);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(967L);
        java.lang.String str17 = yearMonthDay16.toString();
        int[] intArray18 = yearMonthDay16.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) yearMonthDay13, 574, intArray18, 994);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 574");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 185 + "'", int9 == 185);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
    }

    @Test
    public void test05519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05519");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.plusWeeks(0);
        int int15 = dateTime10.getYearOfCentury();
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay19.monthOfYear();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = property23.getAsShortText(locale24);
        java.lang.String str27 = locale24.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = property16.setCopy("2022-02-25T09:50:28.812Z", locale24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-25T09:50:28.812Z\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35524 + "'", int12 == 35524);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 93 + "'", int15 == 93);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ja" + "'", str25, "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2" + "'", str26, "2");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JP" + "'", str27, "JP");
    }

    @Test
    public void test05520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05520");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        java.util.Locale locale28 = dateTimeFormatter2.getLocale();
        org.joda.time.Chronology chronology29 = dateTimeFormatter2.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = dateTimeFormatter2.parseLocalDateTime("java.util.GregorianCalendar[time=1657878621770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=50,SECOND=21,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertNull(chronology29);
    }

    @Test
    public void test05521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05521");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        java.lang.String str16 = localDateTime14.toString();
        java.lang.String str18 = localDateTime14.toString("\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-0871-01-01T00:00:35.271" + "'", str16, "-0871-01-01T00:00:35.271");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc77c\ubcf8" + "'", str18, "\uc77c\ubcf8");
    }

    @Test
    public void test05522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05522");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime8 = property5.addCopy((long) (short) 10);
        org.joda.time.LocalTime localTime9 = property5.withMaximumValue();
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573125014,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=5,MILLISECOND=14,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05523");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        int int16 = dateTime12.getYear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime12.withDurationAdded(readableDuration17, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, readablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        boolean boolean27 = dateTime26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = dateTime26.withMonthOfYear((int) (byte) 1);
        int int30 = dateTime26.getYear();
        org.joda.time.DateTime.Property property31 = dateTime26.weekyear();
        boolean boolean32 = interval21.equals((java.lang.Object) dateTime26);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval43 = interval35.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str47 = interval46.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = dateTime66.withMinuteOfHour((int) (short) 0);
        boolean boolean69 = interval58.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval46.contains((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval46.withPeriodBeforeEnd(readablePeriod71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval46.toPeriod(periodType73);
        org.joda.time.Interval interval75 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        org.joda.time.MutablePeriod mutablePeriod76 = period74.toMutablePeriod();
        org.joda.time.Interval interval77 = interval21.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Period period78 = period74.toPeriod();
        int[] intArray81 = chronology4.get((org.joda.time.ReadablePeriod) period74, (long) 423, 1656633600000L);
        org.joda.time.PeriodType periodType82 = period74.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            int int84 = period74.getValue(35414727);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35414727");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str47, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[52, 5, 4, 1, 23, 59, 59, 577]");
        org.junit.Assert.assertNotNull(periodType82);
    }

    @Test
    public void test05524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05524");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.monthOfYear();
        boolean boolean8 = dateMidnight3.isAfterNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05525");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(2456179200000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2, 35408, 41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35408 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05526");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusHours(423);
        int int13 = localDateTime12.getMonthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test05527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05527");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now();
        long long7 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
        boolean boolean10 = dateMidnight6.isAfter((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight6.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withDayOfWeek(3);
        org.joda.time.Interval interval15 = dateMidnight12.toInterval();
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((-7198), 52, 801, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test05528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05528");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        int int4 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.minusYears(366);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withMonthOfYear(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test05529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05529");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(93);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusHours(35280);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(203);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = property17.setCopy("292278993-02-08T09:51:38.436Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"292278993-02-08T09:51:38.436Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05530");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.lang.Integer int4 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear(44);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = locale8.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withLocale(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.year();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter11.withChronology(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.parse("de", dateTimeFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str9, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
    }

    @Test
    public void test05531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05531");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime10.toDateTime(chronology18);
        boolean boolean20 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        boolean boolean27 = dateTime26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = dateTime26.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime26.toDateTime(chronology34);
        boolean boolean36 = durationFieldType21.isSupported(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime19.toDateTime(chronology34);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str41 = interval40.toString();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval52 = interval44.overlap((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        boolean boolean58 = dateTime57.isBeforeNow();
        org.joda.time.DateTime dateTime60 = dateTime57.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime62 = dateTime60.withMinuteOfHour((int) (short) 0);
        boolean boolean63 = interval52.contains((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean64 = interval40.contains((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Interval interval66 = interval40.withPeriodBeforeEnd(readablePeriod65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = interval40.toPeriod(periodType67);
        org.joda.time.DateTime dateTime69 = dateTime19.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay0.plus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        int int76 = dateTime75.getCenturyOfEra();
        org.joda.time.DateTime dateTime77 = dateTime75.withTimeAtStartOfDay();
        boolean boolean79 = dateTime75.isAfter((long) 38);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period68, (org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str81 = period68.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str41, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20 + "'", int76 == 20);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT0.033S" + "'", str81, "PT0.033S");
    }

    @Test
    public void test05532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05532");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str40 = interval39.toString();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.Interval interval51 = interval43.overlap((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone52);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTime(timeOfDay54, dateTimeZone55);
        boolean boolean57 = dateTime56.isBeforeNow();
        org.joda.time.DateTime dateTime59 = dateTime56.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime61 = dateTime59.withMinuteOfHour((int) (short) 0);
        boolean boolean62 = interval51.contains((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean63 = interval39.contains((org.joda.time.ReadableInterval) interval51);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Interval interval65 = interval39.withPeriodBeforeEnd(readablePeriod64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval39.toPeriod(periodType66);
        org.joda.time.DateTime dateTime68 = dateTime18.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.PeriodType periodType69 = period67.getPeriodType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str40, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test05533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05533");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumShortTextLength(locale5);
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        java.lang.String str8 = property3.toString();
        java.util.Locale locale9 = null;
        int int10 = property3.getMaximumTextLength(locale9);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[secondOfMinute]" + "'", str8, "Property[secondOfMinute]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test05534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05534");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration15 = interval14.toDuration();
        long long16 = duration15.getMillis();
        org.joda.time.Interval interval17 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        int int26 = dateTime22.getYear();
        org.joda.time.DateTime.Property property27 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        org.joda.time.DateTime dateTime30 = dateTime28.withYear(2);
        boolean boolean31 = duration15.equals((java.lang.Object) dateTime28);
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration15.isLongerThan(readableDuration32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfWeek();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight40 = property38.setCopy("4");
        org.joda.time.DateMidnight dateMidnight42 = property38.addToCopy((int) 'u');
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withWeekyear((int) 'x');
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight42.withYear(35334189);
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight42);
        long long48 = interval47.getEndMillis();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 33L + "'", long16 == 33L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1654646400000L + "'", long48 == 1654646400000L);
    }

    @Test
    public void test05535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05535");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(292278994);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusWeeks(371);
        org.joda.time.DateTimeField dateTimeField17 = localDateTime15.getField(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMonths(924);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05536");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getActualMaximum(10);
        calendar0.set((-1), (-292275054), 0);
        java.lang.String str11 = calendar0.getCalendarType();
        calendar0.set(495, 35297, 992, (int) (short) 0, 306);
        long long18 = calendar0.getTimeInMillis();
        calendar0.set(461, 35356782, 481, (int) ' ', 27);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = calendar0.get(37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 37");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=92933687435225704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2946921,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=117,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=27,SECOND=5,MILLISECOND=704,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 46363295165704L + "'", long18 == 46363295165704L);
    }

    @Test
    public void test05537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05537");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        boolean boolean12 = calendar0.after((java.lang.Object) dateMidnight11);
        int int13 = calendar0.getFirstDayOfWeek();
        calendar0.set(883, 522, 35279, 203, 35272);
        calendar0.setLenient(false);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=883,MONTH=522,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=35279,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=203,MINUTE=35272,SECOND=5,MILLISECOND=715,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test05538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05538");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusWeeks(86399);
        int int3 = localDate0.getDayOfMonth();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTime dateTime5 = localDate0.toDateTime(localTime4);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test05539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05539");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withDayOfYear((int) '#');
        int int4 = dateMidnight1.getWeekOfWeekyear();
        int int5 = dateMidnight1.getWeekyear();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.Interval interval16 = interval8.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Duration duration17 = interval16.toDuration();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.minusHours((int) (byte) 100);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableDuration) duration17);
        long long32 = interval31.toDurationMillis();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval43 = interval35.overlap((org.joda.time.ReadableInterval) interval40);
        boolean boolean45 = interval35.isBefore((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay47.toDateTime(timeOfDay48, dateTimeZone49);
        boolean boolean51 = dateTime50.isBeforeNow();
        org.joda.time.DateTime dateTime53 = dateTime50.withMonthOfYear((int) (byte) 1);
        int int54 = dateTime50.getYear();
        org.joda.time.DateTime.Property property55 = dateTime50.weekyear();
        org.joda.time.DateTime dateTime56 = property55.withMaximumValue();
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfDay();
        int int58 = dateTime56.getSecondOfDay();
        int int59 = dateTime56.getSecondOfMinute();
        int int60 = dateTime56.getDayOfMonth();
        boolean boolean61 = interval35.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Interval interval62 = interval31.withEnd((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 33L + "'", long32 == 33L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35525 + "'", int58 == 35525);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval62);
    }

    @Test
    public void test05540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05540");
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        long long14 = dateTimeZone10.adjustOffset(68256000785L, false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(35272, 13, 871, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 68256000785L + "'", long14 == 68256000785L);
    }

    @Test
    public void test05541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05541");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(2);
        org.joda.time.LocalDate localDate13 = dateTime12.toLocalDate();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate.Property property18 = localDate16.era();
        int int19 = localDate16.size();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean29 = dateTime27.isSupported(dateTimeFieldType28);
        int int30 = localDate16.indexOf(dateTimeFieldType28);
        org.joda.time.LocalDate localDate32 = localDate16.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay48 = org.joda.time.YearMonthDay.fromCalendarFields(calendar44);
        calendar44.setFirstDayOfWeek(2022);
        int int52 = calendar44.getMinimum(2);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.lang.String str62 = locale60.getDisplayCountry();
        int int63 = dateTimeField59.getMaximumTextLength(locale60);
        java.lang.String str64 = locale60.getDisplayScript();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale60);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone53, locale60);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        long long69 = dateTimeZone67.previousTransition((long) 8);
        long long71 = dateTimeZone43.getMillisKeepLocal(dateTimeZone67, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight72 = localDate32.toDateMidnight(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minusMonths(587);
        org.joda.time.DateMidnight.Property property75 = dateMidnight72.weekOfWeekyear();
        boolean boolean77 = dateMidnight72.isAfter((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight72.withField(dateTimeFieldType78, 122);
        boolean boolean81 = mutableDateTime15.isBefore((org.joda.time.ReadableInstant) dateMidnight80);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1657878725871,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=5,MILLISECOND=871,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u65e5\u672c" + "'", str62, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644573125871,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=5,MILLISECOND=871,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644573125871,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=5,MILLISECOND=871,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 8L + "'", long69 == 8L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test05542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05542");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = property16.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight18 = property16.roundHalfEvenCopy();
        int int19 = dateMidnight18.getDayOfMonth();
        int int20 = dateMidnight18.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay28.monthOfYear();
        org.joda.time.DateTime dateTime33 = yearMonthDay28.toDateTimeAtCurrentTime();
        int int34 = property26.compareTo((org.joda.time.ReadablePartial) yearMonthDay28);
        org.joda.time.Chronology chronology35 = yearMonthDay28.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.dayOfWeek();
        int int39 = dateTimeField36.getDifference((long) 'a', (long) (-1));
        long long42 = dateTimeField36.add(33L, (long) 901);
        int int43 = dateMidnight18.get(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 11 + "'", int19 == 11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 77846400033L + "'", long42 == 77846400033L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
    }

    @Test
    public void test05543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05543");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYear((int) (short) -1);
        java.lang.String str23 = localDate22.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 16, chronology29);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval43 = interval35.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str47 = interval46.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = dateTime66.withMinuteOfHour((int) (short) 0);
        boolean boolean69 = interval58.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval46.contains((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval46.withPeriodBeforeEnd(readablePeriod71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval46.toPeriod(periodType73);
        org.joda.time.Interval interval75 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        long long78 = chronology29.add((org.joda.time.ReadablePeriod) period74, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod79 = period74.toMutablePeriod();
        org.joda.time.LocalDate localDate80 = localDate22.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.LocalDate.Property property81 = localDate80.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay(dateTimeZone83);
        org.joda.time.Chronology chronology85 = yearMonthDay84.getChronology();
        org.joda.time.YearMonthDay.Property property86 = yearMonthDay84.dayOfMonth();
        java.lang.String str87 = property86.toString();
        java.util.Locale locale89 = new java.util.Locale("");
        java.lang.String str90 = locale89.getDisplayScript();
        java.lang.String str91 = property86.getAsShortText(locale89);
        java.lang.String str92 = localDate80.toString("\u82f1\u6587\u82f1\u56fd)", locale89);
        java.lang.String str93 = locale89.getISO3Country();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-0001-02-11" + "'", str23, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str47, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1163943L + "'", long78 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Property[dayOfMonth]" + "'", str87, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "11" + "'", str91, "11");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\u82f1\u6587\u82f1\u56fd)" + "'", str92, "\u82f1\u6587\u82f1\u56fd)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test05544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05544");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property3.roundHalfFloorCopy();
        int int8 = property3.getMaximumValueOverall();
        org.joda.time.LocalTime localTime9 = property3.withMinimumValue();
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime11 = property10.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573126017,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=17,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399 + "'", int8 == 86399);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test05545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05545");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(35427, 768, 36384202, 507, 633);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 507 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05546");
        java.util.Date date5 = new java.util.Date(4321, 1069, 526, 44, 683);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jul 13 07:23:00 UTC 6311");
    }

    @Test
    public void test05547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime23.toDateTime(chronology31);
        boolean boolean33 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDate localDate34 = dateTime32.toLocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.withYear((int) (short) -1);
        java.lang.String str37 = localDate36.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        org.joda.time.DurationField durationField45 = chronology43.minutes();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 16, chronology43);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.Interval interval57 = interval49.overlap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str61 = interval60.toString();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime70 = interval69.getEnd();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        org.joda.time.Interval interval72 = interval64.overlap((org.joda.time.ReadableInterval) interval69);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay(dateTimeZone73);
        org.joda.time.TimeOfDay timeOfDay75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = yearMonthDay74.toDateTime(timeOfDay75, dateTimeZone76);
        boolean boolean78 = dateTime77.isBeforeNow();
        org.joda.time.DateTime dateTime80 = dateTime77.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime82 = dateTime80.withMinuteOfHour((int) (short) 0);
        boolean boolean83 = interval72.contains((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean84 = interval60.contains((org.joda.time.ReadableInterval) interval72);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Interval interval86 = interval60.withPeriodBeforeEnd(readablePeriod85);
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = interval60.toPeriod(periodType87);
        org.joda.time.Interval interval89 = interval57.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period88);
        long long92 = chronology43.add((org.joda.time.ReadablePeriod) period88, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod93 = period88.toMutablePeriod();
        org.joda.time.LocalDate localDate94 = localDate36.minus((org.joda.time.ReadablePeriod) period88);
        int int95 = property5.compareTo((org.joda.time.ReadablePartial) localDate94);
        int int96 = localDate94.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate99 = localDate94.withFieldAdded(durationFieldType97, 35297);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-0001-02-11" + "'", str37, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str61, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1163943L + "'", long92 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod93);
        org.junit.Assert.assertNotNull(localDate94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 42 + "'", int96 == 42);
    }

    @Test
    public void test05548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05548");
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfCentury(10);
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate11 = localDate7.minusYears(51);
        java.lang.String str12 = localDate11.toString();
        org.joda.time.LocalDate localDate14 = localDate11.plusDays(19);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(611, 0, 32769, 896, 515, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 896 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1959-02-11" + "'", str12, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test05549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05549");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(99, (-1), 10);
        java.util.Calendar.Builder builder10 = builder4.setLenient(true);
        java.util.Calendar.Builder builder14 = builder4.setDate(18008, 7, 2922789);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder16 = builder4.setInstant((long) 515);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test05550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05550");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"???\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05551");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getGreatestMinimum((int) (byte) 10);
        calendar0.setFirstDayOfWeek(461);
        int int9 = calendar0.getWeekYear();
        java.util.TimeZone timeZone10 = calendar0.getTimeZone();
        java.util.Locale locale13 = new java.util.Locale("2022-02-09T22:48:08.395Z", "09:48:11.954");
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone10, locale13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878726294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=461,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertEquals(locale13.toString(), "2022-02-09t22:48:08.395z_09:48:11.954");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644573126294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test05552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05552");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(20);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(10L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int16 = localDateTime14.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.year();
        int int18 = localDateTime14.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05553");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone5 = calendar0.getTimeZone();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone5);
        int int7 = calendar6.getMinimalDaysInFirstWeek();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromCalendarFields(calendar6);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878726369,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=369,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644573126369,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=369,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test05554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05554");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime11.property(dateTimeFieldType19);
        boolean boolean22 = localDate0.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property23 = localDate0.dayOfYear();
        org.joda.time.Chronology chronology24 = localDate0.getChronology();
        int int25 = localDate0.getDayOfMonth();
        int int26 = localDate0.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate0.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = dateTime28.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
    }

    @Test
    public void test05555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05555");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(120003, 35374824, 563, 2103);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120003 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05556");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(2);
        int int9 = localDateTime2.getYearOfCentury();
        int int10 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusMinutes(42);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean14 = localDateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusSeconds(22);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime2.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.withCenturyOfEra(50);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime2.isSupported(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05557");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.centuryOfEra();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTime(chronology19);
        boolean boolean21 = interval4.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate localDate22 = dateTime20.toLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYear((int) (short) -1);
        java.lang.String str25 = localDate24.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 16, chronology31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval45 = interval37.overlap((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str49 = interval48.toString();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.Interval interval60 = interval52.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.TimeOfDay timeOfDay63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTime(timeOfDay63, dateTimeZone64);
        boolean boolean66 = dateTime65.isBeforeNow();
        org.joda.time.DateTime dateTime68 = dateTime65.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime70 = dateTime68.withMinuteOfHour((int) (short) 0);
        boolean boolean71 = interval60.contains((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean72 = interval48.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Interval interval74 = interval48.withPeriodBeforeEnd(readablePeriod73);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = interval48.toPeriod(periodType75);
        org.joda.time.Interval interval77 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        long long80 = chronology31.add((org.joda.time.ReadablePeriod) period76, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod81 = period76.toMutablePeriod();
        org.joda.time.LocalDate localDate82 = localDate24.minus((org.joda.time.ReadablePeriod) period76);
        int int83 = period76.size();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadablePeriod) period76);
        org.joda.time.Interval interval85 = interval84.toInterval();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-0001-02-11" + "'", str25, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str49, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1163943L + "'", long80 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertNotNull(interval85);
    }

    @Test
    public void test05558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now();
        long long12 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plusWeeks(86399);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withDayOfYear((int) '#');
        int int19 = dateMidnight16.getWeekOfWeekyear();
        boolean boolean20 = dateMidnight11.isEqual((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.withDayOfYear((int) '#');
        int int25 = dateMidnight22.getWeekOfWeekyear();
        int int26 = dateMidnight22.getWeekyear();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration38 = interval37.toDuration();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        boolean boolean44 = dateTime43.isBeforeNow();
        org.joda.time.DateTime dateTime46 = dateTime43.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusHours((int) (byte) 100);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight16.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime54 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear((int) 'a');
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime56.withYear(358);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test05559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05559");
        java.util.Date date6 = new java.util.Date(35399726, 11, 35389875, 35362104, 35408930, 86313);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        int int15 = dateTime11.getYear();
        org.joda.time.DateTime.Property property16 = dateTime11.weekyear();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfCeilingCopy();
        java.util.Date date19 = dateTime18.toDate();
        int int20 = date19.getDate();
        org.joda.time.YearMonthDay yearMonthDay21 = org.joda.time.YearMonthDay.fromDateFields(date19);
        int int22 = date19.getDay();
        java.lang.String str23 = date19.toLocaleString();
        date19.setMonth(784);
        int int26 = date6.compareTo(date19);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Jul 08 12:48:33 UTC 35502622");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat May 03 00:00:00 UTC 2087");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022/01/03 0:00:00" + "'", str23, "2022/01/03 0:00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test05560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05560");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology28 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withPivotYear(292278993);
        int int31 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.minuteOfHour();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfCentury(10);
        org.joda.time.LocalDate localDate46 = localDate44.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property47 = localDate46.weekyear();
        org.joda.time.LocalDate.Property property48 = localDate46.centuryOfEra();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance();
        calendar49.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay53 = org.joda.time.YearMonthDay.fromCalendarFields(calendar49);
        calendar49.setFirstDayOfWeek(2022);
        int int57 = calendar49.getMinimum(2);
        java.util.TimeZone timeZone58 = calendar49.getTimeZone();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.year();
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.lang.String str67 = locale65.getDisplayCountry();
        int int68 = dateTimeField64.getMaximumTextLength(locale65);
        java.lang.String str69 = locale65.getDisplayScript();
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(locale65);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone58, locale65);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        long long74 = dateTimeZone72.previousTransition((long) 8);
        org.joda.time.Interval interval75 = localDate46.toInterval(dateTimeZone72);
        org.joda.time.Chronology chronology76 = chronology36.withZone(dateTimeZone72);
        org.joda.time.DurationField durationField77 = chronology36.seconds();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter2.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField79 = chronology36.year();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2000 + "'", int31 == 2000);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1657878726629,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=629,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale65);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u65e5\u672c" + "'", str67, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1644573126630,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=630,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1644573126630,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=630,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 8L + "'", long74 == 8L);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test05561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05561");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay.Property property2 = timeOfDay0.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes((int) 'x');
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.plusMillis(327);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusMillis(274);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test05562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05562");
        java.util.Date date5 = new java.util.Date(971, 18, 35308956, 0, (int) (byte) 10);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 19 00:10:00 UTC 99545");
    }

    @Test
    public void test05563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05563");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay7.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        int int26 = dateTimeZone24.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime27 = yearMonthDay7.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay46 = org.joda.time.YearMonthDay.fromCalendarFields(calendar42);
        calendar42.setFirstDayOfWeek(2022);
        int int50 = calendar42.getMinimum(2);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.year();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale58.getDisplayCountry();
        int int61 = dateTimeField57.getMaximumTextLength(locale58);
        java.lang.String str62 = locale58.getDisplayScript();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(locale58);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone51, locale58);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        long long67 = dateTimeZone65.previousTransition((long) 8);
        long long69 = dateTimeZone41.getMillisKeepLocal(dateTimeZone65, (long) (byte) 0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 35277, dateTimeZone65);
        long long72 = dateTimeZone65.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter28.withZone(dateTimeZone65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter73.withPivotYear((java.lang.Integer) 35309838);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter73.withZoneUTC();
        java.lang.Integer int77 = dateTimeFormatter73.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime78 = org.joda.time.LocalTime.parse("09:48:46.597", dateTimeFormatter73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1657878726837,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=837,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c" + "'", str60, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573126837,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=837,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1644573126837,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=6,MILLISECOND=837,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 8L + "'", long67 == 8L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 97L + "'", long72 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNull(int77);
    }

    @Test
    public void test05564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05564");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(914L, chronology1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate.Property property5 = localDate3.era();
        int int6 = localDate3.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        int int17 = localDate3.indexOf(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property19 = localTime2.property(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(durationFieldType18);
    }

    @Test
    public void test05565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05565");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(93);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfCentury(10);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate21 = localDate17.minusYears(51);
        java.lang.String str22 = localDate21.toString();
        int int23 = localDate21.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfWeek();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight29 = property28.roundFloorCopy();
        boolean boolean30 = localDate21.equals((java.lang.Object) dateMidnight29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        int int36 = dateTime35.getYearOfCentury();
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfCentury(10);
        org.joda.time.LocalDate localDate41 = localDate39.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay49.toDateTime(timeOfDay50, dateTimeZone51);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay49.monthOfYear();
        org.joda.time.DateTime dateTime54 = yearMonthDay49.toDateTimeAtCurrentTime();
        int int55 = property47.compareTo((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.Chronology chronology56 = yearMonthDay49.getChronology();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay49.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean60 = yearMonthDay49.isSupported(dateTimeFieldType59);
        boolean boolean61 = localDate41.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime dateTime63 = dateTime35.withField(dateTimeFieldType59, 17);
        int int64 = localDate21.indexOf(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime14.withField(dateTimeFieldType59, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1959-02-11" + "'", str22, "1959-02-11");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test05566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05566");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        long long6 = dateMidnight5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 16, chronology20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval34 = interval26.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str38 = interval37.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval49 = interval41.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay51.toDateTime(timeOfDay52, dateTimeZone53);
        boolean boolean55 = dateTime54.isBeforeNow();
        org.joda.time.DateTime dateTime57 = dateTime54.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour((int) (short) 0);
        boolean boolean60 = interval49.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = interval37.contains((org.joda.time.ReadableInterval) interval49);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Interval interval63 = interval37.withPeriodBeforeEnd(readablePeriod62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval37.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        long long69 = chronology20.add((org.joda.time.ReadablePeriod) period65, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod70 = period65.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight5.withFields((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay(dateTimeZone73);
        org.joda.time.TimeOfDay timeOfDay75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = yearMonthDay74.toDateTime(timeOfDay75, dateTimeZone76);
        boolean boolean78 = dateTime77.isBeforeNow();
        org.joda.time.DateTime dateTime80 = dateTime77.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime82 = dateTime80.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime80.getZone();
        int int85 = dateTimeZone83.getStandardOffset((long) 13);
        long long89 = dateTimeZone83.convertLocalToUTC(229L, false, (long) 49);
        long long91 = dateTimeZone83.convertUTCToLocal((long) 49);
        org.joda.time.Interval interval92 = yearMonthDay8.toInterval(dateTimeZone83);
        org.joda.time.YearMonthDay yearMonthDay94 = yearMonthDay8.minusDays(20);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1265846400000L + "'", long6 == 1265846400000L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str38, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1163943L + "'", long69 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 229L + "'", long89 == 229L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 49L + "'", long91 == 49L);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(yearMonthDay94);
    }

    @Test
    public void test05567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05567");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalDate localDate10 = localDate6.withFieldAdded(durationFieldType8, 47);
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate12.withEra(79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test05568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05568");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.lang.String str6 = property5.toString();
        int int7 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test05569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05569");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.TimeOfDay timeOfDay8 = property6.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property6.addNoWrapToCopy(708);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusHours(15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMinuteOfHour((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test05570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05570");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(99, (-1), 10);
        java.util.Calendar.Builder builder12 = builder8.setTimeOfDay(715, (int) '4', 22);
        java.util.Calendar.Builder builder16 = builder8.setTimeOfDay(507, 28, 2922789);
        java.util.Calendar.Builder builder20 = builder8.setWeekDate(561, 38, 35447);
        java.util.Date date21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder8.setInstant(date21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test05571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05571");
        java.util.Date date6 = new java.util.Date(704, 292278993, 35352344, 4, 342, 660);
        java.lang.String str7 = date6.toLocaleString();
        date6.setDate(660);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Dec 20 09:53:00 UTC 24455979");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "24455978/03/06 9:53:00" + "'", str7, "24455978/03/06 9:53:00");
    }

    @Test
    public void test05572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05572");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        boolean boolean12 = calendar0.after((java.lang.Object) dateMidnight11);
        int int13 = calendar0.getFirstDayOfWeek();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromCalendarFields(calendar14);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay18.monthOfYear();
        java.lang.String str22 = property21.getAsString();
        boolean boolean23 = calendar0.before((java.lang.Object) property21);
        org.joda.time.DurationField durationField24 = property21.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now();
        long long30 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property33 = dateMidnight29.monthOfYear();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getVariant();
        java.lang.String str43 = dateTimeField39.getAsShortText(3, locale41);
        int int44 = dateTimeField39.getMaximumValue();
        long long47 = dateTimeField39.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = dateTimeField39.getAsShortText(readablePartial48, 9, locale50);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = dateTimeField39.getAsShortText(29, locale54);
        java.lang.String str57 = dateTimeField39.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.monthOfYear();
        int int62 = localDateTime60.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withWeekyear(11);
        int int65 = localDateTime64.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusSeconds(371);
        int int68 = localDateTime64.getYear();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.year();
        java.util.Locale locale75 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleKeys();
        java.lang.String str77 = locale75.getDisplayCountry();
        int int78 = dateTimeField74.getMaximumTextLength(locale75);
        java.lang.String str79 = locale75.getDisplayScript();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale75);
        java.lang.String str81 = locale75.getScript();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime85 = interval84.getEnd();
        org.joda.time.Chronology chronology86 = interval84.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.year();
        java.util.Locale locale88 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet89 = locale88.getUnicodeLocaleKeys();
        java.lang.String str90 = locale88.getDisplayCountry();
        int int91 = dateTimeField87.getMaximumTextLength(locale88);
        java.lang.String str92 = locale88.getDisplayScript();
        java.lang.String str93 = locale88.getDisplayName();
        java.lang.String str94 = locale75.getDisplayVariant(locale88);
        java.lang.String str95 = dateTimeField39.getAsText((org.joda.time.ReadablePartial) localDateTime64, locale88);
        int int96 = property33.getMaximumTextLength(locale88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay97 = property21.setCopy("", locale88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878727450,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=450,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1657878727450,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=450,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7" + "'", str22, "7");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "3" + "'", str43, "3");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9" + "'", str52, "9");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ko-KR" + "'", str55, "ko-KR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "29" + "'", str56, "29");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DateTimeField[year]" + "'", str57, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale75);
// flaky:         org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u65e5\u672c" + "'", str77, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644573127450,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=450,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(locale88);
// flaky:         org.junit.Assert.assertEquals(locale88.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u65e5\u672c" + "'", str90, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 9 + "'", int91 == 9);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str93, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "11" + "'", str95, "11");
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
    }

    @Test
    public void test05573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05573");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) '4', dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYear(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate2.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test05574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05574");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(2);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05575");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        java.util.Date date12 = dateTime11.toDate();
        date12.setSeconds((int) '#');
        java.time.Instant instant15 = date12.toInstant();
        int int16 = date12.getHours();
        java.lang.String str17 = date12.toString();
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Mon Jan 03 00:00:35 UTC 2022");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Mon Jan 03 00:00:35 UTC 2022" + "'", str17, "Mon Jan 03 00:00:35 UTC 2022");
    }

    @Test
    public void test05576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05576");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 15);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis((int) (short) -1);
        java.lang.String str4 = timeOfDay3.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay3.getFieldTypes();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtMidnight();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime19.toDateTime(chronology27);
        boolean boolean29 = interval12.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime35.toDateTime(chronology43);
        boolean boolean45 = durationFieldType30.isSupported(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime28.toDateTime(chronology43);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str50 = interval49.toString();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.Interval interval61 = interval53.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        boolean boolean67 = dateTime66.isBeforeNow();
        org.joda.time.DateTime dateTime69 = dateTime66.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = dateTime69.withMinuteOfHour((int) (short) 0);
        boolean boolean72 = interval61.contains((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = interval49.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Interval interval75 = interval49.withPeriodBeforeEnd(readablePeriod74);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = interval49.toPeriod(periodType76);
        org.joda.time.DateTime dateTime78 = dateTime28.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime80 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period77, 660);
        org.joda.time.DateTime dateTime81 = dateTime9.toDateTimeISO();
        int int82 = dateTime81.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property84 = dateTime81.property(dateTimeFieldType83);
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType83.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay87 = timeOfDay3.withField(dateTimeFieldType83, 68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "T00:00:00.016" + "'", str4, "T00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str50, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNull(durationFieldType85);
    }

    @Test
    public void test05577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05577");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        date1.setDate(35279414);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromDateFields(date1);
        int int6 = yearMonthDay4.getValue((int) (byte) 0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573127549,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=549,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Wed Nov 03 09:52:07 UTC 98613");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 98613 + "'", int6 == 98613);
    }

    @Test
    public void test05578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05578");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusHours(20);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.plusMinutes(896);
        int int6 = timeOfDay5.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    }

    @Test
    public void test05579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05579");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05580");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        int int6 = dateTime5.getYearOfCentury();
        org.joda.time.DateTime dateTime8 = dateTime5.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromCalendarFields(calendar22);
        calendar22.setFirstDayOfWeek(2022);
        int int30 = calendar22.getMinimum(2);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale38.getDisplayCountry();
        int int41 = dateTimeField37.getMaximumTextLength(locale38);
        java.lang.String str42 = locale38.getDisplayScript();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale38);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone31, locale38);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long47 = dateTimeZone45.previousTransition((long) 8);
        long long49 = dateTimeZone21.getMillisKeepLocal(dateTimeZone45, (long) (byte) 0);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 368, dateTimeZone21);
        long long54 = dateTimeZone21.adjustOffset((long) 93, false);
        org.joda.time.DateTime dateTime55 = dateTime5.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 35302729, dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.lang.String str58 = dateTimeZone21.getID();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight60 = org.joda.time.DateMidnight.now(dateTimeZone21);
        java.lang.String str62 = dateTimeZone21.getNameKey((long) 35277);
        long long64 = dateTimeZone21.nextTransition((long) 498);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1657878727652,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=652,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c" + "'", str40, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573127652,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=652,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644573127652,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=652,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 8L + "'", long47 == 8L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 93L + "'", long54 == 93L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 498L + "'", long64 == 498L);
    }

    @Test
    public void test05581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05581");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((java.lang.Object) 292291200000L);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(32418);
        int int4 = timeOfDay1.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = timeOfDay1.getField(901);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 901");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test05582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05582");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(7L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test05583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05583");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        boolean boolean14 = dateTime9.isEqual(1114252851693000L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-01-11T09:00:07.711Z" + "'", str11, "2022-01-11T09:00:07.711Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05584");
        java.lang.Object obj0 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfHalfday();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(obj0, chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str11 = dateTimeFieldType10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        boolean boolean13 = localTime9.isSupported(durationFieldType12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 55);
        org.joda.time.DateMidnight dateMidnight16 = localDate15.toDateMidnight();
        java.lang.String str18 = localDate15.toString("1");
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime26.getZone();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay34 = org.joda.time.YearMonthDay.fromCalendarFields(calendar30);
        calendar30.setFirstDayOfWeek(2022);
        int int38 = calendar30.getMinimum(2);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.year();
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        java.lang.String str48 = locale46.getDisplayCountry();
        int int49 = dateTimeField45.getMaximumTextLength(locale46);
        java.lang.String str50 = locale46.getDisplayScript();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale46);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone39, locale46);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        long long55 = dateTimeZone53.previousTransition((long) 8);
        long long57 = dateTimeZone29.getMillisKeepLocal(dateTimeZone53, (long) (byte) 0);
        org.joda.time.DateTime dateTime58 = localDate15.toDateTimeAtCurrentTime(dateTimeZone29);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale60.getVariant();
        java.lang.String str63 = dateTimeZone29.getShortName(45379L, locale60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) localTime9, dateTimeZone29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "centuryOfEra" + "'", str11, "centuryOfEra");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1657878727723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u65e5\u672c" + "'", str48, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644573127723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644573127723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 8L + "'", long55 == 8L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ja" + "'", str61, "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
    }

    @Test
    public void test05585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05585");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology28 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withPivotYear(292278993);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.Chronology chronology33 = yearMonthDay32.getChronology();
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay32.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay32.withDayOfMonth(19);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTime(timeOfDay39, dateTimeZone40);
        boolean boolean42 = dateTime41.isBeforeNow();
        org.joda.time.DateTime dateTime44 = dateTime41.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime46 = dateTime44.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime44.getZone();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay52 = org.joda.time.YearMonthDay.fromCalendarFields(calendar48);
        calendar48.setFirstDayOfWeek(2022);
        int int56 = calendar48.getMinimum(2);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.year();
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleKeys();
        java.lang.String str66 = locale64.getDisplayCountry();
        int int67 = dateTimeField63.getMaximumTextLength(locale64);
        java.lang.String str68 = locale64.getDisplayScript();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale64);
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone57, locale64);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        long long73 = dateTimeZone71.previousTransition((long) 8);
        long long75 = dateTimeZone47.getMillisKeepLocal(dateTimeZone71, (long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay76 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight77 = yearMonthDay32.toDateMidnight(dateTimeZone71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter2.withZone(dateTimeZone71);
        java.lang.Appendable appendable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable79, (long) 819);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1657878727746,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=746,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale64);
// flaky:         org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1644573127746,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=746,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1644573127746,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=746,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 8L + "'", long73 == 8L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
    }

    @Test
    public void test05586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05586");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        int int5 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar0.getActualMaximum(561);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 561");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:52:07 UTC 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test05587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05587");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay1.toDateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plusMonths((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.minusYears(2698);
        org.joda.time.DateMidnight.Property property12 = dateMidnight7.yearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = property12.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = property12.withMinimumValue();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test05588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05588");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime8 = property5.addCopy((long) (short) 10);
        org.joda.time.DurationField durationField9 = property5.getLeapDurationField();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573127853,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=7,MILLISECOND=853,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 853 + "'", int4 == 853);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNull(durationField9);
    }

    @Test
    public void test05589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05589");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        int int21 = localDate20.getEra();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        boolean boolean27 = dateTime26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = dateTime26.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime29.getZone();
        org.joda.time.DateTime dateTime33 = localDate20.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = localDate20.size();
        org.joda.time.LocalDate localDate36 = localDate20.withYearOfCentury(49);
        org.joda.time.Interval interval37 = localDate20.toInterval();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.Interval interval48 = interval40.overlap((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay51.toDateTime(timeOfDay52, dateTimeZone53);
        boolean boolean55 = dateTime54.isBeforeNow();
        org.joda.time.DateTime dateTime57 = dateTime54.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime61 = dateTime59.minusHours((int) (byte) 100);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration63 = duration49.toDuration();
        org.joda.time.Duration duration64 = duration49.toDuration();
        org.joda.time.Interval interval65 = interval37.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration66 = duration64.toDuration();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(duration66);
    }

    @Test
    public void test05590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05590");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05591");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTime dateTime19 = yearMonthDay14.toDateTimeAtCurrentTime();
        int int20 = property12.compareTo((org.joda.time.ReadablePartial) yearMonthDay14);
        org.joda.time.Chronology chronology21 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.Interval interval33 = interval25.overlap((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str37 = interval36.toString();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.Interval interval48 = interval40.overlap((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        boolean boolean54 = dateTime53.isBeforeNow();
        org.joda.time.DateTime dateTime56 = dateTime53.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour((int) (short) 0);
        boolean boolean59 = interval48.contains((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean60 = interval36.contains((org.joda.time.ReadableInterval) interval48);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Interval interval62 = interval36.withPeriodBeforeEnd(readablePeriod61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = interval36.toPeriod(periodType63);
        org.joda.time.Interval interval65 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        long long68 = chronology21.add((org.joda.time.ReadablePeriod) period64, (long) 'a', 4);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay(dateTimeZone70);
        org.joda.time.TimeOfDay timeOfDay72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = yearMonthDay71.toDateTime(timeOfDay72, dateTimeZone73);
        org.joda.time.YearMonthDay.Property property75 = yearMonthDay71.monthOfYear();
        org.joda.time.DateTime dateTime76 = yearMonthDay71.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(dateTimeZone77);
        org.joda.time.TimeOfDay timeOfDay79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = yearMonthDay78.toDateTime(timeOfDay79, dateTimeZone80);
        boolean boolean82 = dateTime81.isBeforeNow();
        org.joda.time.DateTime dateTime84 = dateTime81.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean86 = dateTime84.isSupported(dateTimeFieldType85);
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType85.getRangeDurationType();
        org.joda.time.DateTime.Property property88 = dateTime76.property(dateTimeFieldType85);
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType85.getRangeDurationType();
        java.lang.String str90 = durationFieldType89.getName();
        java.lang.String str91 = durationFieldType89.toString();
        int int92 = period64.get(durationFieldType89);
        org.joda.time.DurationFieldType durationFieldType93 = org.joda.time.DurationFieldType.weeks();
        boolean boolean94 = period64.isSupported(durationFieldType93);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878728047,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=47,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str37, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 229L + "'", long68 == 229L);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "months" + "'", str90, "months");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "months" + "'", str91, "months");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test05592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05592");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(44);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeFormatter6.parseMillis("35277");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test05593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05593");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35279414, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05594");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(32770, 897, (-1477041));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32770 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05595");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime4.weekOfWeekyear();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromCalendarFields(calendar13);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        int int25 = dateTime24.getCenturyOfEra();
        org.joda.time.DateTime dateTime27 = dateTime24.plusMillis((int) (byte) 0);
        int int28 = dateTime27.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay30.property(dateTimeFieldType35);
        org.joda.time.DateTime.Property property37 = dateTime27.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.DurationField durationField42 = durationFieldType38.getField(chronology41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay17.withFieldAdded(durationFieldType38, (int) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime4.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.LocalDate localDate46 = yearMonthDay17.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay17.minusDays(609);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1657878728186,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=186,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
    }

    @Test
    public void test05596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05596");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        boolean boolean15 = dateTime14.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime14.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime17.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        calendar21.setFirstDayOfWeek(2022);
        int int29 = calendar21.getMinimum(2);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale37.getDisplayCountry();
        int int40 = dateTimeField36.getMaximumTextLength(locale37);
        java.lang.String str41 = locale37.getDisplayScript();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale37);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone30, locale37);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long46 = dateTimeZone44.previousTransition((long) 8);
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone44, (long) (byte) 0);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 368, dateTimeZone20);
        long long53 = dateTimeZone20.adjustOffset((long) 93, false);
        org.joda.time.DateTime dateTime54 = dateTime4.withZone(dateTimeZone20);
        org.joda.time.DateTime.Property property55 = dateTime54.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = property55.addToCopy(1672531200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 167253120000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1657878728214,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=214,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573128214,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=214,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573128214,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=214,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 8L + "'", long46 == 8L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 93L + "'", long53 == 93L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test05597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05597");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours((int) (byte) 100);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.Chronology chronology27 = yearMonthDay26.getChronology();
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay26.dayOfMonth();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay33 = org.joda.time.YearMonthDay.fromCalendarFields(calendar29);
        calendar29.setFirstDayOfWeek(2022);
        int int37 = calendar29.getMinimum(2);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale45.getDisplayCountry();
        int int48 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str49 = locale45.getDisplayScript();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale45);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone38, locale45);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long54 = dateTimeZone52.previousTransition((long) 8);
        java.lang.String str55 = dateTimeZone52.toString();
        org.joda.time.Interval interval56 = yearMonthDay26.toInterval(dateTimeZone52);
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Interval interval58 = interval24.gap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTime dateTime59 = interval24.getStart();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1657878728305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=305,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u65e5\u672c" + "'", str47, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573128305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=305,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644573128305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=305,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 8L + "'", long54 == 8L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Etc/UTC" + "'", str55, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test05598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05598");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        boolean boolean12 = calendar0.after((java.lang.Object) dateMidnight11);
        calendar0.clear();
        calendar0.setMinimalDaysInFirstWeek(35270);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = calendar0.isSet(949);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 949");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=35270,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05599");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.LocalTime localTime4 = localTime1.withMillisOfDay(0);
        org.joda.time.LocalTime localTime6 = localTime4.plusHours(473);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((java.lang.Object) localTime4);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573128394,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=394,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test05600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05600");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.plusDays((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        int int23 = dateTime19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime25 = yearMonthDay11.toDateTime((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear((int) (byte) 1);
        int int40 = dateTime36.getYear();
        org.joda.time.DateMidnight dateMidnight41 = dateTime36.toDateMidnight();
        org.joda.time.DateTime dateTime42 = yearMonthDay28.toDateTime((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.withYearOfEra(35297719);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = locale48.hasExtensions();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.toLanguageTag();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.year();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale58.getDisplayCountry();
        int int61 = dateTimeField57.getMaximumTextLength(locale58);
        java.lang.String str62 = locale58.getVariant();
        java.lang.String str63 = locale48.getDisplayLanguage(locale58);
        java.lang.String str64 = localDate45.toString("7", locale48);
        java.lang.String str65 = property26.getAsText(locale48);
        java.lang.String str66 = yearMonthDay6.toString("09:49:55.379", locale48);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(911);
        org.joda.time.DateTime dateTime69 = yearMonthDay6.toDateTimeAtMidnight(dateTimeZone68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(287);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 287 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c" + "'", str60, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u82f1\u8a9e" + "'", str63, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "7" + "'", str64, "7");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Friday" + "'", str65, "Friday");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "09:49:55.379" + "'", str66, "09:49:55.379");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test05601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05601");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay45 = org.joda.time.YearMonthDay.fromCalendarFields(calendar41);
        calendar41.setFirstDayOfWeek(2022);
        int int49 = calendar41.getMinimum(2);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.year();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.lang.String str59 = locale57.getDisplayCountry();
        int int60 = dateTimeField56.getMaximumTextLength(locale57);
        java.lang.String str61 = locale57.getDisplayScript();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale57);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone50, locale57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        long long66 = dateTimeZone64.previousTransition((long) 8);
        long long68 = dateTimeZone40.getMillisKeepLocal(dateTimeZone64, (long) (byte) 0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 35277, dateTimeZone64);
        long long71 = dateTimeZone64.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter27.withZone(dateTimeZone64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withPivotYear((java.lang.Integer) 2010);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter74.withZoneUTC();
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = locale76.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter75.withLocale(locale76);
        int int79 = dateTimeFormatter75.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1657878728471,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c" + "'", str59, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644573128471,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573128471,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 8L + "'", long66 == 8L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 97L + "'", long71 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str77, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2000 + "'", int79 == 2000);
    }

    @Test
    public void test05602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05602");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(10L);
        int int11 = localTime10.getMillisOfDay();
        org.joda.time.LocalTime.Property property12 = localTime10.minuteOfHour();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale13);
        java.lang.String str15 = property12.getAsText(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = calendar0.getDisplayName(19, 34199882, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878728530,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=530,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
    }

    @Test
    public void test05603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05603");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTime dateTime15 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.plusMonths(270);
        java.lang.String str18 = yearMonthDay17.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2044-08-11" + "'", str18, "2044-08-11");
    }

    @Test
    public void test05604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05604");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        boolean boolean27 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime33.toDateTime(chronology41);
        boolean boolean43 = durationFieldType28.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime26.toDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(chronology41);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay48.toDateTime(timeOfDay49, dateTimeZone50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay48.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay54.monthOfYear();
        org.joda.time.DateTime dateTime59 = yearMonthDay54.toDateTimeAtCurrentTime();
        int int60 = property52.compareTo((org.joda.time.ReadablePartial) yearMonthDay54);
        org.joda.time.Chronology chronology61 = yearMonthDay54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay54.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean65 = yearMonthDay54.isSupported(dateTimeFieldType64);
        org.joda.time.DateMidnight dateMidnight66 = yearMonthDay54.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay54.plusDays(25);
        int[] intArray69 = yearMonthDay68.getValues();
        int int70 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay46, intArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType72 = yearMonthDay46.getFieldType(35331916);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35331916");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[2022, 3, 8]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2922789 + "'", int70 == 2922789);
    }

    @Test
    public void test05605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05605");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(2);
        long long13 = dateTime12.getMillis();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime12.toGregorianCalendar();
        java.util.Date date20 = new java.util.Date(33, 706, 2000, 99, 35298);
        gregorianCalendar14.setTime(date20);
        java.util.TimeZone timeZone22 = gregorianCalendar14.getTimeZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-62100742071411L) + "'", long13 == (-62100742071411L));
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertEquals(date20.toString(), "Tue May 20 15:18:00 UTC 1997");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
    }

    @Test
    public void test05606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05606");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay38 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        calendar34.setFirstDayOfWeek(2022);
        int int42 = calendar34.getMinimum(2);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        java.util.Calendar.Builder builder44 = builder4.setTimeZone(timeZone43);
        java.util.Calendar calendar45 = builder4.build();
        calendar45.add(746, 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878728604,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str23, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573128604,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573128604,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1657878728604,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-182700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05607");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime21 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay1.property(dateTimeFieldType22);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay1.monthOfYear();
        int int26 = yearMonthDay1.getDayOfMonth();
        int int27 = yearMonthDay1.size();
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay1.toDateMidnight();
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay1.year();
        int int30 = property29.get();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test05608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05608");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.LocalDate.Property property28 = localDate26.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = property28.setCopy(2007);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2007 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010-02-25" + "'", str27, "2010-02-25");
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test05609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05609");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("days");
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setExtension(' ', "19:36:26.530");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test05610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05610");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay.Property property2 = timeOfDay0.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes((int) 'x');
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.plusMillis(327);
        java.lang.String str8 = timeOfDay5.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T01:52:08.727" + "'", str8, "T01:52:08.727");
    }

    @Test
    public void test05611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05611");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder4.setDate(22, 1970, 120003);
        java.util.Date date39 = new java.util.Date(1163943L);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromDateFields(date39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder41 = builder37.setInstant(date39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878728739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str23, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573128739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573128739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:19:23 UTC 1970");
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test05612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05612");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        java.util.Date date2 = localDate0.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate0.withYearOfCentury(701);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 701 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Fri Feb 11 00:00:00 UTC 2022");
    }

    @Test
    public void test05613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05613");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        int int10 = dateTimeField5.getMaximumValue();
        long long13 = dateTimeField5.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = dateTimeField5.getAsShortText(readablePartial14, 9, locale16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.monthOfYear();
        int int23 = localDateTime21.getSecondOfMinute();
        int int24 = localDateTime21.getDayOfWeek();
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.lang.String str26 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale25);
        calendar27.setFirstDayOfWeek(934);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = calendar27.getGreatestMinimum(17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573128795,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=934,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=795,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05614");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusSeconds(51);
        org.joda.time.DateTime dateTime5 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.withLaterOffsetAtOverlap();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test05615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05615");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = builder4.build();
        java.util.Calendar.Builder builder38 = builder4.setWeekDate(587, (int) (byte) 1, 518);
        java.util.Calendar.Builder builder40 = builder4.setLenient(false);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay45 = org.joda.time.YearMonthDay.fromCalendarFields(calendar41);
        calendar41.setFirstDayOfWeek(2022);
        int int49 = calendar41.getMinimum(2);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.util.Calendar.Builder builder53 = builder4.setTimeZone(timeZone50);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder55 = builder53.setInstant(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878728820,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=820,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str23, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573128820,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=820,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573128820,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=820,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-182700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1657878728820,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=820,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test05616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(387);
        org.joda.time.DateTime dateTime14 = dateTime10.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test05617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05617");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusYears(387);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime16.getZone();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromCalendarFields(calendar20);
        calendar20.setFirstDayOfWeek(2022);
        int int28 = calendar20.getMinimum(2);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale36.getDisplayCountry();
        int int39 = dateTimeField35.getMaximumTextLength(locale36);
        java.lang.String str40 = locale36.getDisplayScript();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale36);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone29, locale36);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long45 = dateTimeZone43.previousTransition((long) 8);
        long long47 = dateTimeZone19.getMillisKeepLocal(dateTimeZone43, (long) (byte) 0);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay5.toDateMidnight(dateTimeZone19);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = property50.setCopy("Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Japanese (Japan)\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1657878728866,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=866,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str38, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644573128866,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=866,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573128866,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=8,MILLISECOND=866,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 8L + "'", long45 == 8L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test05618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05618");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMinimumValue();
        int int4 = yearMonthDay3.getYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
    }

    @Test
    public void test05619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05619");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        int int1 = timeOfDay0.size();
        int int2 = timeOfDay0.getHourOfDay();
        java.lang.String str4 = timeOfDay0.toString("09:48:34.328");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:48:34.328" + "'", str4, "09:48:34.328");
    }

    @Test
    public void test05620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05620");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusSeconds(12);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay(253);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test05621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05621");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = property6.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar9);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.LocalTime localTime13 = localTime10.withMillisOfDay(0);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours((int) (byte) 1);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime localTime18 = localTime15.plusMinutes(257);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.plusHours(20);
        org.joda.time.Chronology chronology22 = timeOfDay19.getChronology();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((java.lang.Object) localTime15, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withMinuteOfHour(145);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 145 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573129014,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=14,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test05622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05622");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay6 = property5.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField8.getType();
        long long12 = dateTimeField8.addWrapField((long) 39, (-52));
        java.lang.String str13 = dateTimeField8.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 864000039L + "'", long12 == 864000039L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str13, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test05623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05623");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        boolean boolean7 = dateMidnight3.isAfter((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.plusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        int int34 = dateTime30.getYear();
        org.joda.time.DateTime.Property property35 = dateTime30.weekyear();
        org.joda.time.DateTime dateTime36 = property35.withMaximumValue();
        org.joda.time.DateTime dateTime38 = dateTime36.withYear(2);
        int int39 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMonths(86399);
        boolean boolean43 = dateMidnight11.equals((java.lang.Object) dateTime42);
        int int44 = dateTime42.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test05624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05624");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(35470271, 2314, 335);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2314 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05625");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 0);
        boolean boolean21 = interval10.contains((org.joda.time.ReadableInstant) dateTime18);
        int int22 = dateTime18.getDayOfWeek();
        long long23 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime18.minusMonths(50);
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime18.plusMillis(768);
        org.joda.time.DateTime dateTime31 = dateTime18.minusMillis(17);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1641894729155L + "'", long23 == 1641894729155L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test05626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05626");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        int int7 = dateMidnight6.getDayOfYear();
        org.joda.time.Interval interval8 = dateMidnight6.toInterval();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight6.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        int int15 = dateTime14.getCenturyOfEra();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) (byte) 0);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay20.property(dateTimeFieldType25);
        org.joda.time.DateTime.Property property27 = dateTime17.property(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType28.getField(chronology31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(chronology31);
        java.util.Locale locale37 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        boolean boolean38 = localDate33.equals((java.lang.Object) "Deutsch");
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        boolean boolean44 = dateTime43.isBeforeNow();
        org.joda.time.DateTime dateTime46 = dateTime43.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime46.getZone();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        calendar50.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay54 = org.joda.time.YearMonthDay.fromCalendarFields(calendar50);
        calendar50.setFirstDayOfWeek(2022);
        int int58 = calendar50.getMinimum(2);
        java.util.TimeZone timeZone59 = calendar50.getTimeZone();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.year();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.lang.String str68 = locale66.getDisplayCountry();
        int int69 = dateTimeField65.getMaximumTextLength(locale66);
        java.lang.String str70 = locale66.getDisplayScript();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale66);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone59, locale66);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        long long75 = dateTimeZone73.previousTransition((long) 8);
        long long77 = dateTimeZone49.getMillisKeepLocal(dateTimeZone73, (long) (byte) 0);
        int int79 = dateTimeZone73.getOffsetFromLocal(8L);
        org.joda.time.DateMidnight dateMidnight80 = localDate33.toDateMidnight(dateTimeZone73);
        java.lang.String str81 = dateTimeZone73.getID();
        org.joda.time.DateMidnight dateMidnight82 = yearMonthDay9.toDateMidnight(dateTimeZone73);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay9.plusYears(35373914);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals(locale37.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1657878729174,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=174,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str68, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1644573129174,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=174,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1644573129174,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=174,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 8L + "'", long75 == 8L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Etc/UTC" + "'", str81, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
    }

    @Test
    public void test05627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05627");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        boolean boolean12 = calendar0.after((java.lang.Object) dateMidnight11);
        int int13 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime18.withDurationAdded(readableDuration23, (int) (short) 100);
        int int26 = dateTime25.getMillisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 93);
        boolean boolean29 = calendar0.after((java.lang.Object) dateTime25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime25.withYearOfCentury(35289);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35289 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878729221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35529221 + "'", int26 == 35529221);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05628");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateMidnight dateMidnight6 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfFloorCopy();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime18.toDateTime(chronology26);
        boolean boolean28 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfSecond();
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(145);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay37 = org.joda.time.YearMonthDay.fromCalendarFields(calendar33);
        calendar33.setFirstDayOfWeek(2022);
        int int41 = calendar33.getMinimum(2);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        long long45 = dateTimeZone43.previousTransition(77846400033L);
        java.lang.String str47 = dateTimeZone43.getName(35328L);
        org.joda.time.DateTime dateTime48 = dateTime30.withZone(dateTimeZone43);
        boolean boolean49 = dateMidnight8.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 236 + "'", int29 == 236);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1657878729236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 77846400033L + "'", long45 == 77846400033L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test05629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05629");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillis((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime4.toMutableDateTime(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = dateTime4.isBefore(readableInstant10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime14 = dateTime4.withFieldAdded(durationFieldType12, 90);
        org.joda.time.DateTime.Property property15 = dateTime4.minuteOfDay();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.minutes();
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.joda.time.DurationField durationField24 = chronology21.millis();
        org.joda.time.DurationField durationField25 = chronology21.months();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 70, chronology21);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.hourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime4.toDateTime(chronology21);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test05630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05630");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withDayOfMonth(19);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay8 = property6.setCopy("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?? (????)\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test05631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05631");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.Interval interval39 = interval31.overlap((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Duration duration40 = interval39.toDuration();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay42.toDateTime(timeOfDay43, dateTimeZone44);
        boolean boolean46 = dateTime45.isBeforeNow();
        org.joda.time.DateTime dateTime48 = dateTime45.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime50 = dateTime48.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime52 = dateTime50.minusHours((int) (byte) 100);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration54 = duration40.toDuration();
        org.joda.time.DateTime dateTime55 = dateTime28.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime60 = interval59.getEnd();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.year();
        org.joda.time.DurationField durationField63 = chronology61.minutes();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 16, chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.yearOfCentury();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.DateTimeField dateTimeField67 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField68 = chronology61.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) duration54, chronology61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010-02-25" + "'", str27, "2010-02-25");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test05632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05632");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTime dateTime13 = yearMonthDay8.toDateTimeAtCurrentTime();
        int int14 = property6.compareTo((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.Chronology chronology15 = yearMonthDay8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        boolean boolean17 = dateTimeFieldType0.isSupported(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.seconds();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay26.monthOfYear();
        org.joda.time.DateTime dateTime31 = yearMonthDay26.toDateTimeAtCurrentTime();
        int int32 = property24.compareTo((org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.YearMonthDay yearMonthDay33 = property24.withMinimumValue();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval44 = interval36.overlap((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration45 = interval44.toDuration();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay47.toDateTime(timeOfDay48, dateTimeZone49);
        boolean boolean51 = dateTime50.isBeforeNow();
        org.joda.time.DateTime dateTime53 = dateTime50.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime55 = dateTime53.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusHours((int) (byte) 100);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime55);
        int int59 = property24.compareTo((org.joda.time.ReadableInstant) dateTime55);
        java.lang.String str60 = property24.toString();
        org.joda.time.YearMonthDay yearMonthDay62 = property24.addToCopy(621);
        org.joda.time.DateTime dateTime63 = yearMonthDay62.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate64 = yearMonthDay62.toLocalDate();
        int[] intArray66 = chronology15.get((org.joda.time.ReadablePartial) localDate64, 1644572964590L);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTime dateTime68 = dateTime67.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[monthOfYear]" + "'", str60, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test05633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05633");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 0);
        boolean boolean21 = interval10.contains((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean23 = interval10.isAfter((long) (byte) 10);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfCentury(10);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate30 = localDate26.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) (short) 0);
        boolean boolean34 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.LocalDate localDate38 = yearMonthDay36.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = yearMonthDay36.getFieldType(0);
        boolean boolean41 = dateTime31.isSupported(dateTimeFieldType40);
        int int42 = dateTime31.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
    }

    @Test
    public void test05634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05634");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("days");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setExtension('u', "09:48:55.214");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 09:48:55.214 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test05635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05635");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        boolean boolean7 = dateMidnight3.isAfter((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.plusMonths(49);
        int int12 = dateMidnight3.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        int int26 = property18.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.Chronology chronology27 = yearMonthDay20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay20.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = yearMonthDay20.isSupported(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.DateMidnight.Property property33 = dateMidnight3.property(dateTimeFieldType30);
        org.joda.time.DateMidnight dateMidnight34 = property33.roundFloorCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test05636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05636");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = property6.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.TimeOfDay timeOfDay10 = property6.addToCopy(100);
        org.joda.time.TimeOfDay timeOfDay11 = property6.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay13 = property6.addWrapFieldToCopy(708);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusMillis(2018);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.plusSeconds(126);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test05637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05637");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        java.lang.String str17 = chronology14.toString();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology14);
        org.joda.time.DurationField durationField19 = chronology14.weeks();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test05638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05638");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        int int6 = dateTimeField5.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.withYear(22);
        int int13 = yearMonthDay8.size();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromCalendarFields(calendar14);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay18.year();
        int[] intArray22 = yearMonthDay18.getValues();
        int int23 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay8, intArray22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfCentury(10);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay36.monthOfYear();
        org.joda.time.DateTime dateTime41 = yearMonthDay36.toDateTimeAtCurrentTime();
        int int42 = property34.compareTo((org.joda.time.ReadablePartial) yearMonthDay36);
        org.joda.time.Chronology chronology43 = yearMonthDay36.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay36.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean47 = yearMonthDay36.isSupported(dateTimeFieldType46);
        boolean boolean48 = localDate28.isSupported(dateTimeFieldType46);
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDate28, 9, locale50);
        int int52 = localDate28.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getRangeDurationType();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType53.getField(chronology55);
        boolean boolean57 = localDate28.isSupported(dateTimeFieldType53);
        java.lang.String str58 = dateTimeFieldType53.toString();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.minutes();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.centuryOfEra();
        org.joda.time.DurationField durationField66 = chronology63.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay67 = new org.joda.time.TimeOfDay((java.lang.Object) dateTimeFieldType53, chronology63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1657878729489,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=489,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 7, 15]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-292275054) + "'", int23 == (-292275054));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "yearOfCentury" + "'", str58, "yearOfCentury");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test05639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05639");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        int int13 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFieldAdded(durationFieldType16, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusMonths(20);
        int int21 = localDateTime15.getYear();
        int int22 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime15);
        int int24 = localDateTime5.getYearOfCentury();
        java.util.Date date25 = localDateTime5.toDate();
        java.util.Date date31 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        boolean boolean32 = date25.before(date31);
        int int33 = date31.getDate();
        int int34 = date31.getSeconds();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-52) + "'", int21 == (-52));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-52) + "'", int22 == (-52));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 03 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date31.toString(), "Wed May 06 08:10:00 UTC 1953");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test05640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05640");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property5 = dateTime4.era();
        org.joda.time.DateTime dateTime7 = dateTime4.minusYears(44);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.joda.time.DurationField durationField15 = chronology13.weekyears();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((-62100742311688L), chronology13);
        org.joda.time.DateTimeField dateTimeField21 = chronology13.monthOfYear();
        org.joda.time.DurationField durationField22 = chronology13.hours();
        org.joda.time.DateTimeField dateTimeField23 = chronology13.secondOfMinute();
        int int25 = dateTimeField23.getMaximumValue((long) 0);
        int int26 = dateTime7.get(dateTimeField23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime31.toDateTime(chronology39);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.yearOfCentury();
        org.joda.time.DateTime dateTime44 = dateTime7.toDateTime(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(7, 39, 708, 515, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 708 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test05641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05641");
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfCentury(10);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        org.joda.time.LocalDate localDate13 = localDate9.withFieldAdded(durationFieldType11, 47);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        java.lang.Integer int18 = dateTimeFormatter17.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter17.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withPivotYear(44);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withLocale(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance();
        calendar39.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay43 = org.joda.time.YearMonthDay.fromCalendarFields(calendar39);
        calendar39.setFirstDayOfWeek(2022);
        int int47 = calendar39.getMinimum(2);
        java.util.TimeZone timeZone48 = calendar39.getTimeZone();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.year();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str57 = locale55.getDisplayCountry();
        int int58 = dateTimeField54.getMaximumTextLength(locale55);
        java.lang.String str59 = locale55.getDisplayScript();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale55);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone48, locale55);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        long long64 = dateTimeZone62.previousTransition((long) 8);
        long long66 = dateTimeZone38.getMillisKeepLocal(dateTimeZone62, (long) (byte) 0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 35277, dateTimeZone62);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter25.withZone(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) 495, dateTimeZone62);
        java.lang.String str71 = dateTimeZone62.toString();
        org.joda.time.Interval interval72 = localDate13.toInterval(dateTimeZone62);
        long long75 = dateTimeZone62.convertLocalToUTC((long) 458, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(3, 46238, 985, dateTimeZone62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46238 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str23, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1657878729548,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str57, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644573129548,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1644573129548,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 8L + "'", long64 == 8L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Etc/UTC" + "'", str71, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 458L + "'", long75 == 458L);
    }

    @Test
    public void test05642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05642");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withWeekOfWeekyear(10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfWeek();
        long long15 = property14.remainder();
        org.joda.time.DateMidnight dateMidnight16 = property14.roundCeilingCopy();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573129587,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=587,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test05643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05643");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        calendar0.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date6 = calendar0.getTime();
        calendar0.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar0.getLeastMaximum(667);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 667");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878729600,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=600,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Jul 15 09:52:09 UTC 2022");
    }

    @Test
    public void test05644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05644");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        int int9 = yearMonthDay4.getValue((int) (short) 0);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        java.lang.String str12 = property10.getName();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878729607,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=607,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
    }

    @Test
    public void test05645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05645");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = property3.addToCopy(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean10 = localDateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test05646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05646");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy(1594684800022L);
        org.joda.time.LocalDateTime localDateTime15 = property10.setCopy(743);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDayOfMonth(405);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 405 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05647");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.plusYears((int) '4');
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths(405);
        java.util.Locale locale11 = new java.util.Locale("zh_CN", "\u82f1\u6587\u7f8e\u56fd)", "2022-02-25T09:48:06.134Z");
        java.lang.String str12 = localDate6.toString("03.01.2022 00:32:50", locale11);
        org.joda.time.LocalDate localDate14 = localDate6.withYearOfEra(398);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "\u82f1\u6587\u7f8e\u56fd)_2022-02-25T09:48:06.134Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "03.01.2022 00:32:50" + "'", str12, "03.01.2022 00:32:50");
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test05648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05648");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = property9.setCopy(2000);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573129773,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=773,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:52:09.773" + "'", str4, "09:52:09.773");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573129773,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=773,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test05649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05649");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.LocalDate.Property property28 = localDate26.dayOfMonth();
        org.joda.time.LocalDate.Property property29 = localDate26.yearOfEra();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        java.util.Locale locale32 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        java.lang.String str34 = localDate30.toString("09:50:40.791", locale32);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010-02-25" + "'", str27, "2010-02-25");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "09:50:40.791" + "'", str34, "09:50:40.791");
    }

    @Test
    public void test05650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05650");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 18008, chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.monthOfYear();
        org.joda.time.DurationField durationField11 = chronology5.years();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05651");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime5 = property4.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = property4.setCopy("35452739");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35452739 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573129886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=886,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test05652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05652");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded((long) 292278993, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromCalendarFields(calendar22);
        calendar22.setFirstDayOfWeek(2022);
        int int30 = calendar22.getMinimum(2);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale38.getDisplayCountry();
        int int41 = dateTimeField37.getMaximumTextLength(locale38);
        java.lang.String str42 = locale38.getDisplayScript();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale38);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone31, locale38);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long47 = dateTimeZone45.previousTransition((long) 8);
        long long49 = dateTimeZone21.getMillisKeepLocal(dateTimeZone45, (long) (byte) 0);
        int int51 = dateTimeZone45.getOffsetFromLocal(8L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) 0, 0L, dateTimeZone45);
        org.joda.time.DateTime dateTime53 = dateTime5.withZoneRetainFields(dateTimeZone45);
        int int55 = dateTimeZone45.getOffsetFromLocal((long) 271);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 994, dateTimeZone45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.withDayOfMonth(443);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 443 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1657878729950,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=950,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str40, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573129950,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=950,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644573129950,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=9,MILLISECOND=950,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 8L + "'", long47 == 8L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test05653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05653");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 16, chronology8);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval22 = interval14.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str26 = interval25.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime45.withMinuteOfHour((int) (short) 0);
        boolean boolean48 = interval37.contains((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = interval25.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Interval interval51 = interval25.withPeriodBeforeEnd(readablePeriod50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval25.toPeriod(periodType52);
        org.joda.time.Interval interval54 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        long long57 = chronology8.add((org.joda.time.ReadablePeriod) period53, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod58 = period53.toMutablePeriod();
        org.joda.time.Interval interval59 = interval2.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone60);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = yearMonthDay61.toDateTime(timeOfDay62, dateTimeZone63);
        boolean boolean65 = dateTime64.isBeforeNow();
        org.joda.time.DateTime dateTime67 = dateTime64.withMonthOfYear((int) (byte) 1);
        int int68 = dateTime64.getYear();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime77 = interval76.getEnd();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.Interval interval79 = interval71.overlap((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Duration duration80 = interval79.toDuration();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(dateTimeZone81);
        org.joda.time.TimeOfDay timeOfDay83 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = yearMonthDay82.toDateTime(timeOfDay83, dateTimeZone84);
        boolean boolean86 = dateTime85.isBeforeNow();
        org.joda.time.DateTime dateTime88 = dateTime85.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime90 = dateTime88.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime92 = dateTime90.minusHours((int) (byte) 100);
        org.joda.time.Interval interval93 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration80, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime94 = dateTime64.plus((org.joda.time.ReadableDuration) duration80);
        boolean boolean95 = interval59.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime97 = dateTime64.minusHours(8);
        org.joda.time.DateTime dateTime99 = dateTime64.minusMonths(35334189);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str26, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1163943L + "'", long57 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test05654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05654");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond(42);
        org.joda.time.LocalTime localTime8 = localTime1.withMillisOfSecond((int) 'u');
        org.joda.time.LocalTime localTime10 = localTime1.plusHours(667);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay18.monthOfYear();
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        int int24 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.Chronology chronology25 = yearMonthDay18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay18.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean29 = yearMonthDay18.isSupported(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        int int42 = dateTimeZone40.getStandardOffset((long) 13);
        long long46 = dateTimeZone40.convertLocalToUTC(229L, false, (long) 49);
        long long48 = dateTimeZone40.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime49 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone40);
        java.lang.String str50 = dateTimeZone40.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) localTime1, dateTimeZone40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573130142,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=142,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 142 + "'", int4 == 142);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 229L + "'", long46 == 229L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 49L + "'", long48 == 49L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
    }

    @Test
    public void test05655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05655");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology4.getZone();
        java.lang.String str8 = chronology4.toString();
        org.joda.time.DurationField durationField9 = chronology4.halfdays();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfCentury(10);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight15 = localDate12.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime24.getZone();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        calendar28.setFirstDayOfWeek(2022);
        int int36 = calendar28.getMinimum(2);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getDisplayCountry();
        int int47 = dateTimeField43.getMaximumTextLength(locale44);
        java.lang.String str48 = locale44.getDisplayScript();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale44);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone37, locale44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long53 = dateTimeZone51.previousTransition((long) 8);
        long long55 = dateTimeZone27.getMillisKeepLocal(dateTimeZone51, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay16.toDateMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime57 = localDate12.toDateTimeAtStartOfDay(dateTimeZone27);
        int int59 = dateTimeZone27.getOffsetFromLocal(16977599999641L);
        int int61 = dateTimeZone27.getStandardOffset(1657878512644L);
        org.joda.time.Chronology chronology62 = chronology4.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str8, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1657878730222,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=222,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str46, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644573130223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573130223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 8L + "'", long53 == 8L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test05656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05656");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean12 = dateTime10.isAfter((long) 434);
        org.joda.time.DateTime dateTime14 = dateTime10.minusSeconds(53);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        int int29 = property21.compareTo((org.joda.time.ReadablePartial) yearMonthDay23);
        org.joda.time.Chronology chronology30 = yearMonthDay23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay23.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = yearMonthDay23.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay23.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay23.plusDays(25);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone44);
        org.joda.time.TimeOfDay timeOfDay46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay45.toDateTime(timeOfDay46, dateTimeZone47);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay45.monthOfYear();
        org.joda.time.DateTime dateTime50 = yearMonthDay45.toDateTimeAtCurrentTime();
        int int51 = property43.compareTo((org.joda.time.ReadablePartial) yearMonthDay45);
        org.joda.time.Chronology chronology52 = yearMonthDay45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay45.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean56 = yearMonthDay45.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(dateTimeZone57);
        org.joda.time.TimeOfDay timeOfDay59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = yearMonthDay58.toDateTime(timeOfDay59, dateTimeZone60);
        boolean boolean62 = dateTime61.isBeforeNow();
        org.joda.time.DateTime dateTime64 = dateTime61.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime66 = dateTime64.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime64.getZone();
        int int69 = dateTimeZone67.getStandardOffset((long) 13);
        long long73 = dateTimeZone67.convertLocalToUTC(229L, false, (long) 49);
        long long75 = dateTimeZone67.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime76 = yearMonthDay45.toDateTimeAtCurrentTime(dateTimeZone67);
        long long78 = dateTimeZone67.nextTransition(2118095273L);
        org.joda.time.DateTime dateTime79 = yearMonthDay23.toDateTimeAtMidnight(dateTimeZone67);
        org.joda.time.DateTime dateTime80 = dateTime14.toDateTime(dateTimeZone67);
        int int81 = dateTime14.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 229L + "'", long73 == 229L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 49L + "'", long75 == 49L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 2118095273L + "'", long78 == 2118095273L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 292278993 + "'", int81 == 292278993);
    }

    @Test
    public void test05657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05657");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int8 = calendar0.getMinimum(2);
        long long9 = calendar0.getTimeInMillis();
        java.time.Instant instant10 = calendar0.toInstant();
        calendar0.clear();
        java.lang.Object obj12 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1657878730368L + "'", long9 == 1657878730368L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test05658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05658");
        java.util.Date date5 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long6 = date5.getTime();
        int int7 = date5.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        long long9 = date5.getTime();
        date5.setDate(35273);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        java.util.Date date16 = calendar12.getTime();
        int int17 = date16.getTimezoneOffset();
        boolean boolean18 = date5.after(date16);
        int int19 = date16.getMonth();
        date16.setMonth(683);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-525628200000L) + "'", long6 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-525628200000L) + "'", long9 == (-525628200000L));
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657878730403,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=403,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Dec 15 09:52:10 UTC 2078");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
    }

    @Test
    public void test05659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05659");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMillis(7);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) '#');
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.centuryOfEra();
        org.joda.time.DurationField durationField24 = dateTimeField23.getRangeDurationField();
        int int25 = dateTime13.get(dateTimeField23);
        long long28 = dateTimeField23.getDifferenceAsLong(1641894487215L, (long) 182);
        long long30 = dateTimeField23.roundCeiling(1679320327584L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2922789 + "'", int25 == 2922789);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 4102444800000L + "'", long30 == 4102444800000L);
    }

    @Test
    public void test05660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05660");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str32 = interval31.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        int int41 = dateTime37.getYear();
        org.joda.time.DateTime.Property property42 = dateTime37.weekyear();
        org.joda.time.DateTime dateTime43 = property42.withMaximumValue();
        org.joda.time.DateTime dateTime45 = dateTime43.withYear(2);
        boolean boolean46 = interval31.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology47 = interval31.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter28.withChronology(chronology47);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfCentury(10);
        org.joda.time.LocalDate localDate53 = localDate51.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate55 = localDate51.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property56 = localDate51.monthOfYear();
        long long58 = chronology47.set((org.joda.time.ReadablePartial) localDate51, 99472710195660368L);
        int int59 = localDate51.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str32, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1265859660368L + "'", long58 == 1265859660368L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test05661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05661");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar12);
        calendar12.setFirstDayOfWeek(2022);
        int int20 = calendar12.getMinimum(2);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.lang.String str30 = locale28.getDisplayCountry();
        int int31 = dateTimeField27.getMaximumTextLength(locale28);
        java.lang.String str32 = locale28.getDisplayScript();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long37 = dateTimeZone35.previousTransition((long) 8);
        long long39 = dateTimeZone11.getMillisKeepLocal(dateTimeZone35, (long) (byte) 0);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 368, dateTimeZone11);
        long long45 = dateTimeZone11.convertLocalToUTC((long) 743, true, 1657878512644L);
        int int47 = dateTimeZone11.getOffsetFromLocal(35296L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657878730570,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=570,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str30, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573130570,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=570,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573130570,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=570,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8L + "'", long37 == 8L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 743L + "'", long45 == 743L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test05662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05662");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight6 = property4.setCopy("4");
        org.joda.time.DateMidnight dateMidnight8 = property4.addToCopy((int) 'u');
        org.joda.time.DateMidnight dateMidnight10 = property4.addWrapFieldToCopy(35279414);
        int int11 = dateMidnight10.getEra();
        org.joda.time.DateMidnight.Property property12 = dateMidnight10.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = property12.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMillis(0L);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfCentury(10);
        org.joda.time.LocalDate localDate20 = localDate18.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight21 = localDate18.toDateMidnight();
        boolean boolean22 = dateMidnight13.isEqual((org.joda.time.ReadableInstant) dateMidnight21);
        int int23 = dateMidnight13.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test05663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05663");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.Interval interval13 = interval5.overlap((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Duration duration14 = interval13.toDuration();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours((int) (byte) 100);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean28 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime38 = dateTime36.withMinuteOfHour((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTime(timeOfDay42, dateTimeZone43);
        boolean boolean45 = dateTime44.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime44.withMonthOfYear((int) (byte) 1);
        int int48 = dateTime44.getYear();
        org.joda.time.DateTime.Property property49 = dateTime44.weekyear();
        org.joda.time.DateTime dateTime50 = property49.withMaximumValue();
        org.joda.time.DateTime dateTime52 = dateTime50.withYear(2);
        org.joda.time.LocalDate localDate53 = dateTime52.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int55 = dateTime52.get(dateTimeFieldType54);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.TimeOfDay timeOfDay63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTime(timeOfDay63, dateTimeZone64);
        boolean boolean66 = dateTime65.isBeforeNow();
        org.joda.time.DateTime dateTime68 = dateTime65.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.DateTime dateTime74 = dateTime65.toDateTime(chronology73);
        boolean boolean75 = interval58.isAfter((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.LocalDate localDate76 = dateTime74.toLocalDate();
        int int77 = localDate76.getEra();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay(dateTimeZone78);
        org.joda.time.TimeOfDay timeOfDay80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = yearMonthDay79.toDateTime(timeOfDay80, dateTimeZone81);
        boolean boolean83 = dateTime82.isBeforeNow();
        org.joda.time.DateTime dateTime85 = dateTime82.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime87 = dateTime85.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime85.getZone();
        org.joda.time.DateTime dateTime89 = localDate76.toDateTimeAtMidnight(dateTimeZone88);
        org.joda.time.DateTime dateTime90 = dateTime52.withZone(dateTimeZone88);
        org.joda.time.DateTime dateTime91 = dateTime38.withZoneRetainFields(dateTimeZone88);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime.Property property93 = dateTime38.property(dateTimeFieldType92);
        boolean boolean94 = dateMidnight1.isSupported(dateTimeFieldType92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight96 = dateMidnight1.withMonthOfYear(35447935);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35447935 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test05664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05664");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withPeriodAdded(readablePeriod4, 22);
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        java.lang.Object obj8 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfHour();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfCentury(10);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate23.centuryOfEra();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromCalendarFields(calendar26);
        calendar26.setFirstDayOfWeek(2022);
        int int34 = calendar26.getMinimum(2);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale42.getDisplayCountry();
        int int45 = dateTimeField41.getMaximumTextLength(locale42);
        java.lang.String str46 = locale42.getDisplayScript();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale42);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone35, locale42);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long51 = dateTimeZone49.previousTransition((long) 8);
        org.joda.time.Interval interval52 = localDate23.toInterval(dateTimeZone49);
        org.joda.time.Chronology chronology53 = chronology13.withZone(dateTimeZone49);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(obj8, dateTimeZone49);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) localDate7, dateTimeZone49);
        org.joda.time.DateTime dateTime56 = localDate7.toDateTimeAtMidnight();
        int int57 = localDate7.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1657878730715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=715,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str44, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644573130715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=715,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573130715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=715,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 8L + "'", long51 == 8L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
    }

    @Test
    public void test05665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05665");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getGreatestMinimum((int) (byte) 10);
        calendar0.setFirstDayOfWeek(461);
        int int9 = calendar0.getWeekYear();
        java.util.TimeZone timeZone10 = calendar0.getTimeZone();
        calendar0.setMinimalDaysInFirstWeek(32);
        int int13 = calendar0.getWeeksInWeekYear();
        long long14 = calendar0.getTimeInMillis();
        java.util.Date date15 = calendar0.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(574);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878730755,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=461,minimalDaysInFirstWeek=32,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=755,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1657878730755L + "'", long14 == 1657878730755L);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Jul 15 09:52:10 UTC 2022");
    }

    @Test
    public void test05666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05666");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.minusMinutes((int) (byte) 100);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay5.hourOfDay();
        java.lang.String str10 = property9.getName();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hourOfDay" + "'", str10, "hourOfDay");
    }

    @Test
    public void test05667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05667");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.Interval interval13 = interval5.overlap((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Duration duration14 = interval13.toDuration();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours((int) (byte) 100);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean28 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int30 = dateMidnight1.get(dateTimeFieldType29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight1.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight1.minusDays(706);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight35 = dateMidnight1.withDayOfWeek(911);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 911 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
    }

    @Test
    public void test05668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05668");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = locale6.getUnicodeLocaleType("09:50:01.728");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 09:50:01.728");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str8, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644573130844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=10,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05669");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("292278993-02-08T09:49:37.276Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 292278993-02-08T09:49:37.276Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test05670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05670");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMinutes(42);
        org.joda.time.DateTime.Property property8 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        java.lang.String str10 = dateTimeFieldType9.getName();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
    }

    @Test
    public void test05671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05671");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusHours(971);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test05672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05672");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Interval interval4 = interval2.withDurationBeforeEnd(readableDuration3);
        boolean boolean6 = interval2.isBefore(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfWeek();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight11 = property10.roundFloorCopy();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval13 = interval2.withStart((org.joda.time.ReadableInstant) dateMidnight11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05673");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("1939");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05674");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getGreatestMinimum((int) (byte) 10);
        java.util.Date date7 = calendar0.getTime();
        java.lang.String str8 = calendar0.toString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878731057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=11,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Jul 15 09:52:11 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.util.GregorianCalendar[time=1657878731057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=11,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str8, "java.util.GregorianCalendar[time=1657878731057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=11,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05675");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.clear(379);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644573131071,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=11,MILLISECOND=71,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05676");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight6 = property4.setCopy("4");
        org.joda.time.DateMidnight dateMidnight8 = property4.addToCopy((int) 'u');
        org.joda.time.DateMidnight dateMidnight10 = property4.addWrapFieldToCopy(35279414);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((-359L), 35308956);
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight13.toYearMonthDay();
        int int15 = yearMonthDay14.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test05677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05677");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        int int6 = dateMidnight5.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime14.getZone();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay22 = org.joda.time.YearMonthDay.fromCalendarFields(calendar18);
        calendar18.setFirstDayOfWeek(2022);
        int int26 = calendar18.getMinimum(2);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.lang.String str36 = locale34.getDisplayCountry();
        int int37 = dateTimeField33.getMaximumTextLength(locale34);
        java.lang.String str38 = locale34.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale34);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone27, locale34);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long43 = dateTimeZone41.previousTransition((long) 8);
        long long45 = dateTimeZone17.getMillisKeepLocal(dateTimeZone41, (long) (byte) 0);
        int int47 = dateTimeZone41.getOffsetFromLocal(8L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone41);
        boolean boolean49 = dateTimeZone41.isFixed();
        long long53 = dateTimeZone41.convertLocalToUTC((long) (-52), false, (long) 706);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = locale55.getLanguage();
        java.util.Set<java.lang.String> strSet57 = locale55.getUnicodeLocaleKeys();
        java.lang.String str58 = dateTimeZone41.getShortName((long) 183, locale55);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.minutes();
        org.joda.time.DurationField durationField66 = chronology64.weekyears();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        java.util.Locale locale72 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        java.lang.String str73 = dateTimeField67.getAsText(185L, locale72);
        java.lang.String str74 = dateTimeZone41.getShortName(361L, locale72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight5.withZoneRetainFields(dateTimeZone41);
        java.lang.String str76 = dateTimeZone41.getID();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1657878731163,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=11,MILLISECOND=163,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str36, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573131163,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=11,MILLISECOND=163,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644573131163,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=11,MILLISECOND=163,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 8L + "'", long43 == 8L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-52L) + "'", long53 == (-52L));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ko" + "'", str56, "ko");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals(locale72.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "185" + "'", str73, "185");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Etc/UTC" + "'", str76, "Etc/UTC");
    }

    @Test
    public void test05678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        int int12 = property9.get();
        org.joda.time.DateTime dateTime14 = property9.setCopy("185");
        int int15 = property9.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test05679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05679");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight3.withChronology(chronology8);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight3.minus((long) 35302729);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime22 = property20.addToCopy(42);
        int int23 = dateTime22.getHourOfDay();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime34.toDateTime(chronology42);
        boolean boolean44 = interval27.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay47.toDateTime(timeOfDay48, dateTimeZone49);
        boolean boolean51 = dateTime50.isBeforeNow();
        org.joda.time.DateTime dateTime53 = dateTime50.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTime dateTime59 = dateTime50.toDateTime(chronology58);
        boolean boolean60 = durationFieldType45.isSupported(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime43.toDateTime(chronology58);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str65 = interval64.toString();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime69 = interval68.getEnd();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime74 = interval73.getEnd();
        org.joda.time.Chronology chronology75 = interval73.getChronology();
        org.joda.time.Interval interval76 = interval68.overlap((org.joda.time.ReadableInterval) interval73);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(dateTimeZone77);
        org.joda.time.TimeOfDay timeOfDay79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = yearMonthDay78.toDateTime(timeOfDay79, dateTimeZone80);
        boolean boolean82 = dateTime81.isBeforeNow();
        org.joda.time.DateTime dateTime84 = dateTime81.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime86 = dateTime84.withMinuteOfHour((int) (short) 0);
        boolean boolean87 = interval76.contains((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean88 = interval64.contains((org.joda.time.ReadableInterval) interval76);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.Interval interval90 = interval64.withPeriodBeforeEnd(readablePeriod89);
        org.joda.time.PeriodType periodType91 = null;
        org.joda.time.Period period92 = interval64.toPeriod(periodType91);
        org.joda.time.DateTime dateTime93 = dateTime43.minus((org.joda.time.ReadablePeriod) period92);
        org.joda.time.YearMonthDay yearMonthDay94 = yearMonthDay24.plus((org.joda.time.ReadablePeriod) period92);
        org.joda.time.DateTime dateTime96 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) period92, 768);
        org.joda.time.DateMidnight dateMidnight98 = dateMidnight14.withPeriodAdded((org.joda.time.ReadablePeriod) period92, 968);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str65, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(yearMonthDay94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateMidnight98);
    }

    @Test
    public void test05680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05680");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        int int5 = localDateTime3.getSecondOfMinute();
        int int6 = localDateTime3.getDayOfWeek();
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((java.lang.Object) 86313, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test05681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05681");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(79, 0, (int) 'x', 2066, 592, 996, 578);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2066 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05682");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 13);
        long long16 = dateTimeZone10.convertLocalToUTC(229L, false, (long) 49);
        int int18 = dateTimeZone10.getOffset(0L);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone10);
        java.lang.String str20 = localDate19.toString();
        java.lang.String str21 = localDate19.toString();
        org.joda.time.LocalDate localDate23 = localDate19.minusYears(35432);
        org.joda.time.LocalDate.Property property24 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property24.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 229L + "'", long16 == 229L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11" + "'", str20, "2022-02-11");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11" + "'", str21, "2022-02-11");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test05683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05683");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours((int) (byte) 100);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.Interval interval35 = interval27.overlap((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration36 = interval35.toDuration();
        boolean boolean37 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = duration36.toPeriod();
        java.lang.String str39 = period38.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.033S" + "'", str39, "PT0.033S");
    }

    @Test
    public void test05684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05684");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.lang.String str11 = locale9.getDisplayCountry();
        int int12 = dateTimeField8.getMaximumTextLength(locale9);
        java.lang.String str13 = locale9.getDisplayScript();
        java.lang.String str14 = locale9.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder18 = builder0.setLocale(locale15);
        java.util.Locale.Builder builder19 = builder0.clear();
        java.util.Locale locale20 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder0.addUnicodeLocaleAttribute("24455978/03/06 9:53:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 24455978/03/06 9:53:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str11, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str14, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str16, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Koreanisch" + "'", str17, "Koreanisch");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
    }

    @Test
    public void test05685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05685");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight5 = property2.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight7 = property2.addToCopy(6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.weekyear();
        int int9 = dateMidnight7.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 223 + "'", int9 == 223);
    }

    @Test
    public void test05686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05686");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear((int) (byte) 1);
        int int9 = dateTime5.getWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime19.toDateTime(chronology27);
        boolean boolean29 = interval12.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime35.toDateTime(chronology43);
        boolean boolean45 = durationFieldType30.isSupported(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime28.toDateTime(chronology43);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime28.toMutableDateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        boolean boolean58 = dateTime57.isBeforeNow();
        org.joda.time.DateTime dateTime60 = dateTime57.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime64 = interval63.getEnd();
        org.joda.time.Chronology chronology65 = interval63.getChronology();
        org.joda.time.DateTime dateTime66 = dateTime57.toDateTime(chronology65);
        boolean boolean67 = interval50.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay(dateTimeZone69);
        org.joda.time.TimeOfDay timeOfDay71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = yearMonthDay70.toDateTime(timeOfDay71, dateTimeZone72);
        boolean boolean74 = dateTime73.isBeforeNow();
        org.joda.time.DateTime dateTime76 = dateTime73.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime80 = interval79.getEnd();
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        org.joda.time.DateTime dateTime82 = dateTime73.toDateTime(chronology81);
        boolean boolean83 = durationFieldType68.isSupported(chronology81);
        org.joda.time.DateTime dateTime84 = dateTime66.toDateTime(chronology81);
        org.joda.time.DateTimeField dateTimeField85 = chronology81.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology81.era();
        org.joda.time.Chronology chronology87 = chronology81.withUTC();
        org.joda.time.DateTime dateTime88 = dateTime28.withChronology(chronology81);
        org.joda.time.DateTime dateTime89 = dateTime5.withChronology(chronology81);
        org.joda.time.YearMonthDay yearMonthDay90 = new org.joda.time.YearMonthDay((long) 488, chronology81);
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay90.withYear(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay95 = yearMonthDay92.withField(dateTimeFieldType93, 60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(yearMonthDay92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
    }

    @Test
    public void test05687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05687");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        int int10 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekOfWeekyear(4);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.LocalDateTime localDateTime16 = property14.getLocalDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05688");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalDate localDate10 = localDate6.withFieldAdded(durationFieldType8, 47);
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfYear();
        org.joda.time.LocalDate localDate13 = localDate6.plusYears(6);
        org.joda.time.LocalDate localDate15 = localDate13.withYear((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate13.minusDays(803);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test05689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05689");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        int int9 = property7.getMinimumValue();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878731653,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=11,MILLISECOND=653,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test05690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        boolean boolean12 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        int int26 = property18.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.Chronology chronology27 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.era();
        int int30 = dateTime10.get(dateTimeField29);
        int int31 = dateTime10.getYear();
        int int32 = dateTime10.getYearOfEra();
        org.joda.time.DateTime.Property property33 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime35 = property33.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test05691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05691");
        java.lang.Object obj0 = null;
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(obj0, dateTimeZone8);
        int int11 = localDate10.getWeekyear();
        org.joda.time.LocalDate localDate13 = localDate10.minusYears(18008);
        int int14 = localDate10.getYear();
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
    }

    @Test
    public void test05692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05692");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        boolean boolean12 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        int int26 = property18.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.Chronology chronology27 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.era();
        int int30 = dateTime10.get(dateTimeField29);
        int int31 = dateTime10.getYear();
        org.joda.time.DateTime dateTime32 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) dateTime10);
        org.joda.time.DateTime dateTime35 = dateTime10.minusHours(35302966);
        org.joda.time.DateMidnight dateMidnight36 = dateTime35.toDateMidnight();
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight39 = property37.addToCopy(1657878579206L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1657878579206 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test05693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05693");
        java.util.Locale locale2 = new java.util.Locale("2022-02-09T22:48:08.395Z", "09:48:11.954");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) "2022-02-09T22:48:08.395Z");
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime4.withMillisOfSecond(35412355);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35412355 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-09t22:48:08.395z_09:48:11.954");
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test05694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05694");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        boolean boolean1 = locale0.hasExtensions();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test05695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05695");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime4.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.DateTime.Property property23 = dateTime18.weekyear();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.joda.time.DateTime dateTime26 = dateTime24.withYear(2);
        int int27 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime4.getHourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis(940L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test05696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05696");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test05697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05697");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.millis();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.DateTime dateTime16 = dateTime13.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime13.plusSeconds((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.monthOfYear();
        org.joda.time.DateTime dateTime35 = yearMonthDay30.toDateTimeAtCurrentTime();
        int int36 = property28.compareTo((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.Chronology chronology37 = yearMonthDay30.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.DurationField durationField39 = durationFieldType20.getField(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfMonth();
        boolean boolean42 = durationFieldType8.isSupported(chronology37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) durationField7, chronology37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test05698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05698");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        org.joda.time.LocalDate localDate3 = property2.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight4 = localDate3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay6.property(dateTimeFieldType27);
        boolean boolean30 = localDate3.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        boolean boolean41 = dateTime40.isBeforeNow();
        org.joda.time.DateTime dateTime43 = dateTime40.withMonthOfYear((int) (byte) 1);
        int int44 = dateTime40.getYear();
        org.joda.time.DateMidnight dateMidnight45 = dateTime40.toDateMidnight();
        org.joda.time.DateTime dateTime46 = yearMonthDay32.toDateTime((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.LocalDate localDate47 = localDate3.withFields((org.joda.time.ReadablePartial) yearMonthDay32);
        org.joda.time.LocalDate localDate49 = localDate47.withWeekyear(365);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test05699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05699");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMinuteOfHour(4);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfSecond(35373969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35373969 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05700");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime6.property(dateTimeFieldType15);
        int int19 = property18.getMinimumValueOverall();
        org.joda.time.DateTime dateTime20 = property18.withMaximumValue();
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(254);
        int int23 = dateTime20.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 592 + "'", int23 == 592);
    }

    @Test
    public void test05701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05701");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        boolean boolean12 = interval2.isBefore((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        int int21 = dateTime17.getYear();
        org.joda.time.DateTime.Property property22 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        int int25 = dateTime23.getSecondOfDay();
        int int26 = dateTime23.getSecondOfMinute();
        int int27 = dateTime23.getDayOfMonth();
        boolean boolean28 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int29 = dateTime23.getMonthOfYear();
        org.joda.time.DateTime dateTime31 = dateTime23.withYear(19);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths(292278994);
        int int34 = dateTime31.getSecondOfDay();
        java.lang.String str35 = dateTime31.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35532 + "'", int25 == 35532);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35532 + "'", int34 == 35532);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0019-02-08T09:52:12.086Z" + "'", str35, "0019-02-08T09:52:12.086Z");
    }

    @Test
    public void test05702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05702");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusSeconds(51);
        org.joda.time.DateTime dateTime5 = localDateTime2.toDateTime();
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime dateTime8 = dateTime5.minusHours(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withEra(328);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 328 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test05703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05703");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime21 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        boolean boolean28 = dateTime27.isBeforeNow();
        org.joda.time.DateTime dateTime30 = dateTime27.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime27.toDateTime(chronology35);
        boolean boolean37 = durationFieldType22.isSupported(chronology35);
        org.joda.time.DateTime dateTime39 = dateTime21.withFieldAdded(durationFieldType22, 0);
        int int40 = dateTime21.getMillisOfDay();
        org.joda.time.DateTime.Property property41 = dateTime21.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35532148 + "'", int40 == 35532148);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05704");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime3 = dateTime0.minusYears(44);
        int int4 = dateTime3.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        int int11 = dateTime10.getCenturyOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.plusMillis((int) (byte) 0);
        int int14 = dateTime10.getHourOfDay();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Calendar calendar16 = dateTime10.toCalendar(locale15);
        java.util.Locale locale20 = new java.util.Locale("zh_CN", "\u82f1\u6587\u7f8e\u56fd)", "2022-02-25T09:48:06.134Z");
        java.lang.String str21 = locale15.getDisplayName(locale20);
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale23 = locale15.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateTime3.toString("2010-02-11T00:00:00.000Z", locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644573132168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=12,MILLISECOND=168,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "\u82f1\u6587\u7f8e\u56fd)_2022-02-25T09:48:06.134Z");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese (Japan)" + "'", str21, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
    }

    @Test
    public void test05705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05705");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        boolean boolean12 = calendar0.after((java.lang.Object) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        int int21 = dateTime17.getYear();
        org.joda.time.DateTime.Property property22 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays(306);
        org.joda.time.DateTime dateTime28 = dateTime23.plusWeeks(3);
        int int29 = dateTime28.getDayOfYear();
        org.joda.time.Chronology chronology30 = dateTime28.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight11.withChronology(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight11.plusYears(32769);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withEra(3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878732205,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=12,MILLISECOND=205,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 60 + "'", int29 == 60);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
    }

    @Test
    public void test05706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05706");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay7.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = yearMonthDay7.isSupported(dateTimeFieldType17);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay7.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay7.plusDays(25);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay7.withYear(697);
        int int25 = yearMonthDay7.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
    }

    @Test
    public void test05707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05707");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addNoWrapToCopy(871);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localTime5.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTime dateTime13 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean23 = dateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.DateTime.Property property25 = dateTime13.property(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType22.getRangeDurationType();
        java.lang.String str27 = durationFieldType26.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = localTime5.withFieldAdded(durationFieldType26, 18008);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'months' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573132303,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=12,MILLISECOND=303,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "months" + "'", str27, "months");
    }

    @Test
    public void test05708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05708");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.lang.String str11 = locale9.getDisplayCountry();
        int int12 = dateTimeField8.getMaximumTextLength(locale9);
        java.lang.String str13 = locale9.getDisplayScript();
        java.lang.String str14 = locale9.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder18 = builder0.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.setScript("09:49:11.316");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 09:49:11.316 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c" + "'", str11, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str14, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str16, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test05709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05709");
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(35399726, 0, 35399726, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35399726 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05710");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusSeconds(51);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Interval interval15 = interval7.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Duration duration16 = interval15.toDuration();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfWeek();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.dayOfWeek();
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfYear((int) 'u');
        java.util.GregorianCalendar gregorianCalendar25 = dateMidnight24.toGregorianCalendar();
        boolean boolean26 = localDateTime2.equals((java.lang.Object) dateMidnight24);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfCentury(10);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay33.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay39.monthOfYear();
        org.joda.time.DateTime dateTime44 = yearMonthDay39.toDateTimeAtCurrentTime();
        int int45 = property37.compareTo((org.joda.time.ReadablePartial) yearMonthDay39);
        org.joda.time.Chronology chronology46 = yearMonthDay39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay39.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean50 = yearMonthDay39.isSupported(dateTimeFieldType49);
        boolean boolean51 = localDate31.isSupported(dateTimeFieldType49);
        java.lang.String str52 = localDate31.toString();
        org.joda.time.Chronology chronology53 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfYear();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDate55);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2010-02-11" + "'", str52, "2010-02-11");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test05711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05711");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        java.lang.String str12 = property11.toString();
        org.joda.time.DateTime dateTime13 = property11.withMinimumValue();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfDay]" + "'", str12, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test05712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05712");
        java.util.Date date6 = new java.util.Date(35460322, 35380953, 35498, 0, 7, 32770);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 09 09:13:10 UTC 38410731");
    }

    @Test
    public void test05713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05713");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusYears(387);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay5.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay5.minusYears((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay5.minusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = yearMonthDay5.getFieldType(35518488);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35518488");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test05714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05714");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withWeekyear(35277);
        int int4 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute(14);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test05715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05715");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        java.lang.String str2 = date1.toLocaleString();
        int int3 = date1.getDay();
        date1.setMinutes(51);
        int int6 = date1.getMinutes();
        int int7 = date1.getMinutes();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573132473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=12,MILLISECOND=473,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:51:12 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022/02/11 9:52:12" + "'", str2, "2022/02/11 9:52:12");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
    }

    @Test
    public void test05716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05716");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("15 Jul 2022 09:48:56 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"15 Jul 2022 09:48:56 GMT\" is malformed at \" Jul 2022 09:48:56 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05717");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate0.withDayOfYear(871);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 871 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test05718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05718");
        java.util.Date date5 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long6 = date5.getTime();
        int int7 = date5.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        int int9 = date5.getDate();
        date5.setYear(57);
        int int12 = date5.getSeconds();
        org.junit.Assert.assertEquals(date5.toString(), "Mon May 06 08:10:00 UTC 1957");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-525628200000L) + "'", long6 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05719");
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) '4', chronology6);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((-62100742287078L), chronology6);
        int int13 = localDate12.getYearOfCentury();
        org.joda.time.LocalDate localDate15 = localDate12.minusMonths((int) 'x');
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test05720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05720");
        java.util.Date date5 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long6 = date5.getTime();
        int int7 = date5.getTimezoneOffset();
        date5.setMinutes(1970);
        int int10 = date5.getYear();
        date5.setMinutes(740);
        org.junit.Assert.assertEquals(date5.toString(), "Fri May 08 04:20:00 UTC 1953");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-525628200000L) + "'", long6 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
    }

    @Test
    public void test05721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05721");
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(289, 44, 35408930, 0, 668, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 668 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test05722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05722");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = property5.getAsShortText(locale6);
        org.joda.time.YearMonthDay yearMonthDay10 = property5.addToCopy(10);
        boolean boolean12 = property5.equals((java.lang.Object) "35322");
        int int13 = property5.getMaximumValue();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        java.lang.Integer int18 = dateTimeFormatter17.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter17.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withPivotYear(44);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withLocale(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.weekyears();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter25.withChronology(chronology31);
        java.lang.String str35 = chronology31.toString();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 35389875, chronology31);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.dayOfWeek();
        boolean boolean38 = property5.equals((java.lang.Object) dateTimeField37);
        org.joda.time.DurationField durationField39 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2" + "'", str8, "2");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str23, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str35, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test05723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05723");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minus((long) 72);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.minus((long) 35467);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusMonths(292278992);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test05724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05724");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("292278993-02-08T09:47:51.966Z");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "");
    }

    @Test
    public void test05725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05725");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.getLocalTime();
        org.joda.time.LocalTime localTime6 = property3.addNoWrapToCopy(35272);
        org.joda.time.LocalTime localTime7 = property3.getLocalTime();
        org.joda.time.Interval interval8 = property3.toInterval();
        org.joda.time.LocalTime localTime9 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property3.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = localTime10.withSecondOfMinute(35394017);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35394017 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573132847,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=12,MILLISECOND=847,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test05726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05726");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1657878639873L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = dateTime1.withWeekOfWeekyear(46238);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46238 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05727");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        int int16 = dateTime12.getYear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime12.withDurationAdded(readableDuration17, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, readablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        boolean boolean27 = dateTime26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = dateTime26.withMonthOfYear((int) (byte) 1);
        int int30 = dateTime26.getYear();
        org.joda.time.DateTime.Property property31 = dateTime26.weekyear();
        boolean boolean32 = interval21.equals((java.lang.Object) dateTime26);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval43 = interval35.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str47 = interval46.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = dateTime66.withMinuteOfHour((int) (short) 0);
        boolean boolean69 = interval58.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval46.contains((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval46.withPeriodBeforeEnd(readablePeriod71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval46.toPeriod(periodType73);
        org.joda.time.Interval interval75 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        org.joda.time.MutablePeriod mutablePeriod76 = period74.toMutablePeriod();
        org.joda.time.Interval interval77 = interval21.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Period period78 = period74.toPeriod();
        int[] intArray81 = chronology4.get((org.joda.time.ReadablePeriod) period74, (long) 423, 1656633600000L);
        org.joda.time.DateTimeField dateTimeField82 = chronology4.weekyear();
        org.joda.time.ReadablePartial readablePartial83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = chronology4.get(readablePartial83, (long) 451);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str47, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[52, 5, 4, 1, 23, 59, 59, 577]");
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test05728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05728");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withWeekOfWeekyear(10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundCeilingCopy();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573132906,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=12,MILLISECOND=906,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test05729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05729");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        int int9 = localDateTime7.getMillisOfSecond();
        int int10 = localDateTime7.getYear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.weekyear();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.TimeOfDay timeOfDay17 = property15.withMaximumValue();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.TimeOfDay timeOfDay20 = property18.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property18.addNoWrapToCopy(708);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minusSeconds(746);
        int int25 = timeOfDay24.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusMinutes(0);
        org.joda.time.DateTime dateTime28 = timeOfDay27.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = property11.compareTo((org.joda.time.ReadablePartial) timeOfDay27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 271 + "'", int9 == 271);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test05730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05730");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(17);
        org.joda.time.LocalTime.Property property9 = localTime8.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property9.setCopy("09:50:05.925");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"09:50:05.925\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573132962,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=12,MILLISECOND=962,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test05731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05731");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime dateTime10 = property8.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test05732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05732");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str14 = interval13.toString();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour((int) (short) 0);
        boolean boolean36 = interval25.contains((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean37 = interval13.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Interval interval39 = interval13.withPeriodBeforeEnd(readablePeriod38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval13.toPeriod(periodType40);
        org.joda.time.Interval interval42 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str46 = interval45.toString();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.Interval interval57 = interval49.overlap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.TimeOfDay timeOfDay60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay59.toDateTime(timeOfDay60, dateTimeZone61);
        boolean boolean63 = dateTime62.isBeforeNow();
        org.joda.time.DateTime dateTime65 = dateTime62.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime67 = dateTime65.withMinuteOfHour((int) (short) 0);
        boolean boolean68 = interval57.contains((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean69 = interval45.contains((org.joda.time.ReadableInterval) interval57);
        boolean boolean71 = interval57.contains((long) (byte) 1);
        boolean boolean72 = interval10.overlaps((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime76 = interval75.getEnd();
        org.joda.time.Chronology chronology77 = interval75.getChronology();
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime81 = interval80.getEnd();
        org.joda.time.Chronology chronology82 = interval80.getChronology();
        org.joda.time.Interval interval83 = interval75.overlap((org.joda.time.ReadableInterval) interval80);
        boolean boolean84 = interval57.isAfter((org.joda.time.ReadableInterval) interval83);
        org.joda.time.Interval interval85 = interval83.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str14, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str46, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval85);
    }

    @Test
    public void test05733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05733");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = property3.addToCopy(8);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfWeek();
        org.joda.time.DateTime dateTime14 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.LocalTime localTime15 = timeOfDay5.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localTime15.getValue(595);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 595");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test05734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05734");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 35499, (long) 488);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05735");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withWeekyear(35277);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfCentury();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.LocalDateTime localDateTime7 = property4.addToCopy(16);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "77" + "'", str5, "77");
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test05736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05736");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.year();
        int[] intArray8 = yearMonthDay4.getValues();
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay4.year();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.withMaximumValue();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878733108,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=13,MILLISECOND=108,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 7, 15]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test05737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05737");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        int int12 = dateTime8.getYear();
        org.joda.time.DateTime.Property property13 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(2);
        boolean boolean17 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfCentury(10);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay37.monthOfYear();
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        int int43 = property35.compareTo((org.joda.time.ReadablePartial) yearMonthDay37);
        org.joda.time.Chronology chronology44 = yearMonthDay37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay37.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean48 = yearMonthDay37.isSupported(dateTimeFieldType47);
        boolean boolean49 = localDate29.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime51 = dateTime23.withField(dateTimeFieldType47, 17);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfDay();
        int int53 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime51.withTimeAtStartOfDay();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test05738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05738");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay7.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        int int26 = dateTimeZone24.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime27 = yearMonthDay7.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter28.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withPivotYear(134);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter29.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.parse("09:51:27.885", dateTimeFormatter32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test05739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05739");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(2);
        int int9 = localDateTime2.getYearOfCentury();
        int int10 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusMinutes(42);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean14 = localDateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusSeconds(22);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime2.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds(287);
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDateTime18.compareTo(readablePartial21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05740");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.withField(dateTimeFieldType5, 4);
        java.lang.Object obj8 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.clockhourOfHalfday();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(obj8, chronology13);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology13);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay4, chronology13);
        org.joda.time.DateTimeField dateTimeField20 = chronology13.era();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(0L);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay23.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay27.withField(dateTimeFieldType28, 4);
        org.joda.time.TimeOfDay.Property property31 = timeOfDay27.secondOfMinute();
        int int32 = localTime22.compareTo((org.joda.time.ReadablePartial) timeOfDay27);
        int[] intArray34 = chronology13.get((org.joda.time.ReadablePartial) timeOfDay27, 0L);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay27.plusSeconds(7);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay27.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay39 = timeOfDay27.withHourOfDay(481);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 481 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test05741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05741");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        calendar0.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date6 = calendar0.getTime();
        int int7 = date6.getMinutes();
        long long8 = date6.getTime();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        java.util.Date date10 = calendar9.getTime();
        java.util.Date date16 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long17 = date16.getTime();
        int int18 = date16.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromDateFields(date16);
        long long20 = date16.getTime();
        boolean boolean21 = date10.after(date16);
        int int22 = date6.compareTo(date16);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878733378,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=13,MILLISECOND=378,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Jul 15 09:52:13 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1657878733378L + "'", long8 == 1657878733378L);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573133378,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=13,MILLISECOND=378,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:52:13 UTC 2022");
        org.junit.Assert.assertEquals(date16.toString(), "Wed May 06 08:10:00 UTC 1953");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-525628200000L) + "'", long17 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-525628200000L) + "'", long20 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test05742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05742");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) (-28401235199866L));
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime9.getZone();
        int int14 = dateTimeZone12.getStandardOffset((long) 13);
        long long18 = dateTimeZone12.convertLocalToUTC(229L, false, (long) 49);
        long long20 = dateTimeZone12.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime21 = localDate1.toDateTimeAtStartOfDay(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime21.withSecondOfMinute(35397);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35397 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 229L + "'", long18 == 229L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 49L + "'", long20 == 49L);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test05743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05743");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime3.plus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime8.plusMinutes(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int12 = localTime10.indexOf(dateTimeFieldType11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localTime10.getFieldType(35296);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35296");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573133451,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=13,MILLISECOND=451,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test05744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05744");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localDate0.get(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test05745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05745");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime6 = property4.addCopy(84264962088000L);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573133613,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=13,MILLISECOND=613,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test05746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05746");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillis((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime4.toMutableDateTime(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = dateTime4.isBefore(readableInstant10);
        org.joda.time.DateTime dateTime13 = dateTime4.withMillisOfSecond((int) ' ');
        int int14 = dateTime13.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.withCenturyOfEra((int) (byte) 100);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test05747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05747");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        boolean boolean7 = dateMidnight3.isAfter((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusWeeks(4);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusYears((int) '4');
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property20 = localDate17.weekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.monthOfYear();
        org.joda.time.DateTime dateTime27 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.DateTime.Property property39 = dateTime27.property(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType36.getRangeDurationType();
        int int41 = localDate17.get(dateTimeFieldType36);
        int int42 = yearMonthDay14.get(dateTimeFieldType36);
        org.joda.time.DateMidnight.Property property43 = dateMidnight3.property(dateTimeFieldType36);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight3.minusMonths(0);
        int int46 = dateMidnight45.getMinuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1657878733649,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=13,MILLISECOND=649,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test05748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05748");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtMidnight();
        int int5 = localDate0.getEra();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean8 = localDate0.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate0.yearOfEra();
        org.joda.time.Interval interval10 = localDate0.toInterval();
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test05749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05749");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime14 = dateTime11.minusYears(44);
        org.joda.time.LocalDate localDate15 = dateTime11.toLocalDate();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        boolean boolean18 = locale17.hasExtensions();
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.toLanguageTag();
        java.lang.String str21 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDate15, 911, locale17);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField10.set((long) 330, "3 Jan 1970 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"3 Jan 1970 00:00:00 GMT\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "911" + "'", str21, "911");
    }

    @Test
    public void test05750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05750");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.LocalDate localDate5 = property3.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate5.minusYears(1901);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292276955 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test05751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05751");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration15 = interval14.toDuration();
        long long16 = duration15.getMillis();
        org.joda.time.Interval interval17 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        int int26 = dateTime22.getYear();
        org.joda.time.DateTime.Property property27 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        org.joda.time.DateTime dateTime30 = dateTime28.withYear(2);
        boolean boolean31 = duration15.equals((java.lang.Object) dateTime28);
        int int32 = dateTime28.getDayOfMonth();
        java.lang.String str33 = dateTime28.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 33L + "'", long16 == 33L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "292278993-02-08T09:52:13.772Z" + "'", str33, "292278993-02-08T09:52:13.772Z");
    }

    @Test
    public void test05752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05752");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 34564755);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury(35373969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35373969 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05753");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property25 = localDate4.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) localDate4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test05754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05754");
        java.util.Date date3 = new java.util.Date(47, 387, 7);
        int int4 = date3.getYear();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date3);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(35324);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDayOfWeek(35405195);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35405195 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 07 00:00:00 UTC 1979");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 79 + "'", int4 == 79);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test05755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05755");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        int int4 = property3.get();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addToCopy(10);
        org.joda.time.LocalTime localTime7 = timeOfDay6.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = timeOfDay6.toString("292278993-02-08T09:49:11.158Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test05756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05756");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (byte) 100);
        boolean boolean13 = dateTime11.isEqual((long) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime16 = property14.addWrapFieldToCopy(38311);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = property14.addToCopy((-62100742109446L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -62100742109446 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test05757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05757");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime11 = dateTime4.plusMillis(962);
        java.lang.String str13 = dateTime4.toString("70");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "70" + "'", str13, "70");
    }

    @Test
    public void test05758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05758");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        int int10 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((-456566));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test05759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05759");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = property9.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight10);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusMinutes(35314);
        int int14 = timeOfDay13.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusMillis(784);
        org.joda.time.LocalTime localTime17 = timeOfDay16.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = timeOfDay16.withField(dateTimeFieldType18, 35387781);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573134882,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=14,MILLISECOND=882,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26 + "'", int14 == 26);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test05760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05760");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(35281, 812, 35333459, (int) (byte) 1, 965);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 965 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05761");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology5);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property15 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime18 = property15.addWrapFieldToCopy(764);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) property15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test05762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05762");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(44);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromCalendarFields(calendar24);
        calendar24.setFirstDayOfWeek(2022);
        int int32 = calendar24.getMinimum(2);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale40.getDisplayCountry();
        int int43 = dateTimeField39.getMaximumTextLength(locale40);
        java.lang.String str44 = locale40.getDisplayScript();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale40);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone33, locale40);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long49 = dateTimeZone47.previousTransition((long) 8);
        long long51 = dateTimeZone23.getMillisKeepLocal(dateTimeZone47, (long) (byte) 0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 35277, dateTimeZone47);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter10.withZone(dateTimeZone47);
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = dateTimeFormatter10.getPrinter();
        java.lang.Integer int56 = dateTimeFormatter10.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 857);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter58.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone60);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = yearMonthDay61.toDateTime(timeOfDay62, dateTimeZone63);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay61.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay61.property(dateTimeFieldType66);
        java.lang.String str68 = property67.toString();
        org.joda.time.DateTimeField dateTimeField69 = property67.getField();
        org.joda.time.YearMonthDay yearMonthDay71 = property67.setCopy(11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = dateTimeFormatter59.print((org.joda.time.ReadablePartial) yearMonthDay71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1657878734995,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=14,MILLISECOND=995,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c" + "'", str42, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644573134995,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=14,MILLISECOND=995,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573134995,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=14,MILLISECOND=995,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 8L + "'", long49 == 8L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(dateTimePrinter55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Property[monthOfYear]" + "'", str68, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
    }

    @Test
    public void test05763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05763");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime21 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay1.property(dateTimeFieldType22);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay1.monthOfYear();
        int int26 = yearMonthDay1.getDayOfMonth();
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay1.plusMonths(292278994);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test05764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05764");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        int int21 = localDate20.getEra();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        boolean boolean27 = dateTime26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = dateTime26.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime29.getZone();
        org.joda.time.DateTime dateTime33 = localDate20.toDateTimeAtMidnight(dateTimeZone32);
        long long37 = dateTimeZone32.convertLocalToUTC((long) (short) 10, false, 16977599999641L);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 18008);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTime(timeOfDay42, dateTimeZone43);
        boolean boolean45 = dateTime44.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime44.withMonthOfYear((int) (byte) 1);
        int int48 = dateTime44.getYear();
        org.joda.time.DateTime.Property property49 = dateTime44.weekyear();
        org.joda.time.DateTime dateTime50 = property49.withMaximumValue();
        org.joda.time.DateTime dateTime51 = property49.roundHalfCeilingCopy();
        java.util.Date date52 = dateTime51.toDate();
        int int53 = date52.getDate();
        org.joda.time.YearMonthDay yearMonthDay54 = org.joda.time.YearMonthDay.fromDateFields(date52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight39.withFields((org.joda.time.ReadablePartial) yearMonthDay54);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfCentury(10);
        org.joda.time.LocalDate localDate60 = localDate58.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property61 = localDate60.weekyear();
        org.joda.time.LocalDate.Property property62 = localDate60.centuryOfEra();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance();
        calendar63.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay67 = org.joda.time.YearMonthDay.fromCalendarFields(calendar63);
        calendar63.setFirstDayOfWeek(2022);
        int int71 = calendar63.getMinimum(2);
        java.util.TimeZone timeZone72 = calendar63.getTimeZone();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime76 = interval75.getEnd();
        org.joda.time.Chronology chronology77 = interval75.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.year();
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleKeys();
        java.lang.String str81 = locale79.getDisplayCountry();
        int int82 = dateTimeField78.getMaximumTextLength(locale79);
        java.lang.String str83 = locale79.getDisplayScript();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(locale79);
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone72, locale79);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        long long88 = dateTimeZone86.previousTransition((long) 8);
        org.joda.time.Interval interval89 = localDate60.toInterval(dateTimeZone86);
        long long92 = dateTimeZone86.convertLocalToUTC((-525628200000L), false);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight39.withZoneRetainFields(dateTimeZone86);
        int int94 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight96 = dateMidnight39.minusDays(13);
        org.joda.time.DateMidnight.Property property97 = dateMidnight39.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight99 = dateMidnight39.withMillis((-62100742267722L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1657878735039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=39,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u672c" + "'", str81, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1644573135039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=39,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1644573135039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=39,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 8L + "'", long88 == 8L);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-525628200000L) + "'", long92 == (-525628200000L));
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(dateMidnight96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(dateMidnight99);
    }

    @Test
    public void test05765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05765");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale6);
        calendar11.setMinimalDaysInFirstWeek(12);
        java.time.Instant instant14 = calendar11.toInstant();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar11);
        java.lang.String str16 = localDate15.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644573135122,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=12,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=122,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11" + "'", str16, "2022-02-11");
    }

    @Test
    public void test05766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05766");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(20);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withYear(32772);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.withYear(55);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.minusMillis(588);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(609);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(1997);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test05767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05767");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getActualMaximum(10);
        calendar0.set((-1), (-292275054), 0);
        java.lang.String str11 = calendar0.getCalendarType();
        calendar0.set(495, 35297, 992, (int) (short) 0, 306);
        long long18 = calendar0.getTimeInMillis();
        calendar0.set(461, 35356782, 481, (int) ' ', 27);
        boolean boolean26 = calendar0.isSet(9);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=461,MONTH=35356782,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=481,DAY_OF_YEAR=72,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=5,HOUR_OF_DAY=32,MINUTE=27,SECOND=15,MILLISECOND=168,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 46363295175168L + "'", long18 == 46363295175168L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test05768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05768");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime4.plusSeconds((int) 'a');
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths(35379776);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusYears(526);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test05769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05769");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.days();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime21.toDateTime(chronology29);
        boolean boolean31 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDate localDate32 = dateTime30.toLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.withYear((int) (short) -1);
        java.lang.String str35 = localDate34.toString();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.DurationField durationField43 = chronology41.minutes();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 16, chronology41);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval55 = interval47.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str59 = interval58.toString();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.Interval interval70 = interval62.overlap((org.joda.time.ReadableInterval) interval67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        boolean boolean76 = dateTime75.isBeforeNow();
        org.joda.time.DateTime dateTime78 = dateTime75.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime78.withMinuteOfHour((int) (short) 0);
        boolean boolean81 = interval70.contains((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean82 = interval58.contains((org.joda.time.ReadableInterval) interval70);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Interval interval84 = interval58.withPeriodBeforeEnd(readablePeriod83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = interval58.toPeriod(periodType85);
        org.joda.time.Interval interval87 = interval55.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period86);
        long long90 = chronology41.add((org.joda.time.ReadablePeriod) period86, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod91 = period86.toMutablePeriod();
        org.joda.time.LocalDate localDate92 = localDate34.minus((org.joda.time.ReadablePeriod) period86);
        long long95 = chronology7.add((org.joda.time.ReadablePeriod) period86, (long) 35281, 306);
        org.joda.time.LocalDate localDate96 = localDate2.minus((org.joda.time.ReadablePeriod) period86);
        int int97 = localDate96.getYearOfEra();
        org.joda.time.LocalDate.Property property98 = localDate96.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-0001-02-11" + "'", str35, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str59, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1163943L + "'", long90 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod91);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 45379L + "'", long95 == 45379L);
        org.junit.Assert.assertNotNull(localDate96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1970 + "'", int97 == 1970);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test05770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05770");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        int int12 = dateTime8.getYear();
        org.joda.time.DateTime.Property property13 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(2);
        boolean boolean17 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime16);
        long long18 = interval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = interval2.toMutableInterval();
        boolean boolean20 = interval2.isAfterNow();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str24 = interval23.toString();
        org.joda.time.Duration duration25 = interval23.toDuration();
        boolean boolean26 = interval2.isAfter((org.joda.time.ReadableInterval) interval23);
        boolean boolean28 = interval2.isBefore((long) 515);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.add(3, 22);
        int int33 = calendar29.getMinimalDaysInFirstWeek();
        int int34 = calendar29.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now();
        long long39 = property37.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight40 = property37.roundHalfEvenCopy();
        boolean boolean41 = calendar29.after((java.lang.Object) dateMidnight40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        boolean boolean47 = dateTime46.isBeforeNow();
        org.joda.time.DateTime dateTime49 = dateTime46.withMonthOfYear((int) (byte) 1);
        int int50 = dateTime46.getYear();
        org.joda.time.DateTime.Property property51 = dateTime46.weekyear();
        org.joda.time.DateTime dateTime52 = property51.withMaximumValue();
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfDay();
        org.joda.time.DateTime dateTime55 = dateTime52.minusDays(306);
        org.joda.time.DateTime dateTime57 = dateTime52.plusWeeks(3);
        int int58 = dateTime57.getDayOfYear();
        org.joda.time.Chronology chronology59 = dateTime57.getChronology();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight40.withChronology(chronology59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minus((long) 35405195);
        boolean boolean63 = interval2.contains((org.joda.time.ReadableInstant) dateMidnight62);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 33L + "'", long18 == 33L);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str24, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1657878735320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 60 + "'", int58 == 60);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05771");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(35308956, 52, 159, 18008, 967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18008 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05772");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode6 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet5, filteringMode6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.UK;
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.lang.String str22 = locale20.getDisplayCountry();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.lang.String str25 = locale23.getDisplayCountry();
        java.util.Locale locale27 = new java.util.Locale("");
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.UK;
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale12, locale13, locale14, locale15, locale16, locale18, locale20, locale23, locale27, locale28, locale29, locale30, locale31, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Locale locale46 = java.util.Locale.UK;
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleKeys();
        java.lang.String str53 = locale51.getDisplayCountry();
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        java.lang.String str56 = locale54.getDisplayCountry();
        java.util.Locale locale58 = new java.util.Locale("");
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray65 = new java.util.Locale[] { locale43, locale44, locale45, locale46, locale47, locale49, locale51, locale54, locale58, locale59, locale60, locale61, locale62, locale64 };
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList66, filteringMode68);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Locale locale74 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.lang.String>) strSet75, filteringMode76);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList70, filteringMode76);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + filteringMode6 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode6.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str19, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c" + "'", str22, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c" + "'", str25, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode37.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str50, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c" + "'", str56, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode68.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode76.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(localeList78);
    }

    @Test
    public void test05773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05773");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay45 = org.joda.time.YearMonthDay.fromCalendarFields(calendar41);
        calendar41.setFirstDayOfWeek(2022);
        int int49 = calendar41.getMinimum(2);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.year();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.lang.String str59 = locale57.getDisplayCountry();
        int int60 = dateTimeField56.getMaximumTextLength(locale57);
        java.lang.String str61 = locale57.getDisplayScript();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale57);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone50, locale57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        long long66 = dateTimeZone64.previousTransition((long) 8);
        long long68 = dateTimeZone40.getMillisKeepLocal(dateTimeZone64, (long) (byte) 0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 35277, dateTimeZone64);
        long long71 = dateTimeZone64.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter27.withZone(dateTimeZone64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withPivotYear((java.lang.Integer) 35309838);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter72.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter75.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime78 = dateTimeFormatter75.parseMutableDateTime("292278993");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1657878735430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=430,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c" + "'", str59, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644573135430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=430,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573135430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=430,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 8L + "'", long66 == 8L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 97L + "'", long71 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
    }

    @Test
    public void test05774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05774");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Duration duration4 = interval2.toDuration();
        org.joda.time.Interval interval5 = interval2.toInterval();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime10.toDateTime(chronology18);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str21 = dateTime20.toString();
        boolean boolean22 = interval5.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime20.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = dateTime20.minusWeeks(35281436);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTime20.toString("09:49:09.633", locale27);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11T09:52:15.453Z" + "'", str21, "2022-02-11T09:52:15.453Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "09:49:09.633" + "'", str28, "09:49:09.633");
    }

    @Test
    public void test05775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05775");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology28 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withPivotYear(292278993);
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter2.getParser();
        java.lang.StringBuffer stringBuffer32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        int int41 = dateTime37.getYear();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime44 = dateTime37.withDurationAdded(readableDuration42, (int) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime37.plusSeconds((int) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime37.plusYears(0);
        org.joda.time.DateTime dateTime49 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMillis(73);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer32, (org.joda.time.ReadableInstant) dateTime51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(dateTimeParser31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test05776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05776");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        boolean boolean12 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        int int26 = property18.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.Chronology chronology27 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.era();
        int int30 = dateTime10.get(dateTimeField29);
        int int31 = dateTime10.getYear();
        int int32 = dateTime10.getYearOfEra();
        org.joda.time.DateTime.Property property33 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((long) 52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) property33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test05777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05777");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight2 = property1.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test05778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05778");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        int int12 = dateTime8.getYear();
        org.joda.time.DateTime.Property property13 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(2);
        boolean boolean17 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfCentury(10);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay37.monthOfYear();
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        int int43 = property35.compareTo((org.joda.time.ReadablePartial) yearMonthDay37);
        org.joda.time.Chronology chronology44 = yearMonthDay37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay37.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean48 = yearMonthDay37.isSupported(dateTimeFieldType47);
        boolean boolean49 = localDate29.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime51 = dateTime23.withField(dateTimeFieldType47, 17);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfDay();
        int int53 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime51);
        int int54 = dateTime51.getWeekyear();
        org.joda.time.DateTime.Property property55 = dateTime51.minuteOfDay();
        org.joda.time.DateTime dateTime57 = property55.addWrapFieldToCopy(0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test05779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05779");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(292278994);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusWeeks(371);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test05780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05780");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(434);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(47);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(9);
        java.lang.Object obj13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(obj13);
        int int15 = dateMidnight14.getMonthOfYear();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = dateTimeField21.getAsShortText(3, locale23);
        long long27 = dateTimeField21.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        int int32 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval47 = interval39.overlap((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration48 = interval47.toDuration();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime34.plus((org.joda.time.ReadableDuration) duration48);
        java.lang.String str50 = duration48.toString();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight14.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration52 = duration48.toDuration();
        org.joda.time.Duration duration53 = duration48.toDuration();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration53, 716);
        int int56 = localDateTime10.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "3" + "'", str25, "3");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.033S" + "'", str50, "PT0.033S");
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test05781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05781");
        java.util.Locale locale2 = new java.util.Locale("\u82f1\u6587\u82f1\u56fd)", "488");
        org.junit.Assert.assertEquals(locale2.toString(), "\u82f1\u6587\u82f1\u56fd)_488");
    }

    @Test
    public void test05782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05782");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        java.util.Set<java.lang.Character> charSet10 = locale7.getExtensionKeys();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        calendar12.setMinimalDaysInFirstWeek(128);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644573135732,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=128,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=732,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05783");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTime dateTime27 = interval14.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.plusMillis((int) '#');
        org.joda.time.DateTime.Property property30 = dateTime27.hourOfDay();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test05784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05784");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.LocalDate localDate5 = property3.withMinimumValue();
        org.joda.time.LocalDate localDate6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate7 = property3.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfYear();
        int int9 = localDate7.getYear();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDate7.getValue(365);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 365");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2023 + "'", int9 == 2023);
    }

    @Test
    public void test05785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05785");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(22);
        org.joda.time.LocalTime localTime10 = localTime6.minusMillis(120003);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        java.lang.String str12 = property11.getAsString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573135806,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=806,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "23" + "'", str12, "23");
    }

    @Test
    public void test05786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05786");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekyear(11);
        int int7 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int9 = localDateTime6.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusWeeks(35279414);
        int int12 = localDateTime11.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYearOfCentury(35485434);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35485434 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 24 + "'", int12 == 24);
    }

    @Test
    public void test05787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05787");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTime dateTime28 = yearMonthDay23.toDateTimeAtCurrentTime();
        int int29 = property21.compareTo((org.joda.time.ReadablePartial) yearMonthDay23);
        org.joda.time.Chronology chronology30 = yearMonthDay23.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight14.withChronology(chronology30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateMidnight31.toString("Property[year]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test05788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05788");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean12 = mutableDateTime10.isSupported(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test05789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05789");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.lang.String str11 = locale6.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale6.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale12);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = calendar16.getMinimum(461);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 461");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str11, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str13, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Japanisch" + "'", str14, "Japanisch");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644573135936,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=15,MILLISECOND=936,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05790");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.withField(dateTimeFieldType5, 4);
        org.joda.time.LocalTime localTime8 = timeOfDay7.toLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusHours(35359);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        int int19 = dateTime15.getYear();
        org.joda.time.DateTime.Property property20 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime.Property property23 = dateTime21.year();
        org.joda.time.DateTime dateTime24 = property23.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean26 = dateTime24.isSupported(dateTimeFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property27 = localTime10.property(dateTimeFieldType25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "292278993-02-08T09:52:15.954Z" + "'", str22, "292278993-02-08T09:52:15.954Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test05791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05791");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        int int6 = yearMonthDay1.size();
        int int7 = yearMonthDay1.size();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addWrapFieldToCopy(35279414);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property14 = localDate11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMillis((int) (byte) 0);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay25.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay25.property(dateTimeFieldType30);
        org.joda.time.DateTime.Property property32 = dateTime22.property(dateTimeFieldType30);
        boolean boolean33 = localDate11.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property34 = localDate11.dayOfYear();
        int int35 = property8.compareTo((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property8.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay38 = property8.addToCopy(574);
        java.lang.String str39 = property8.toString();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Property[year]" + "'", str39, "Property[year]");
    }

    @Test
    public void test05792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05792");
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) 2018, chronology6);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(33L, chronology6);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test05793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05793");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(120003, 495, 185);
        java.util.Calendar calendar6 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar6.getLeastMaximum(35370);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35370");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=432040685000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1983,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=253,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=18,SECOND=5,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05794");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        int int44 = dateTime43.getYearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime43.withYearOfEra((int) (byte) 1);
        boolean boolean47 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((long) 35277);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test05795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05795");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone7);
        int int9 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime8.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        boolean boolean15 = languageRange1.equals((java.lang.Object) dateTime13);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "utc" + "'", str3, "utc");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "utc" + "'", str5, "utc");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05796");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        int int4 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.plusWeeks((-292275054));
        int int7 = dateMidnight0.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight0.plus(172800003L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = dateMidnight0.withDayOfWeek(481);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 481 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test05797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05797");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight3.withChronology(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withYearOfCentury(592);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 592 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test05798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05798");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        java.util.Locale locale17 = null;
        int int18 = dateTimeField5.getMaximumTextLength(locale17);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
    }

    @Test
    public void test05799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05799");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        int int6 = dateMidnight5.getMillisOfDay();
        org.joda.time.DateMidnight.Property property7 = dateMidnight5.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight10 = property7.setCopy(7);
        org.joda.time.DateMidnight dateMidnight11 = property7.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight13 = property7.addWrapFieldToCopy((int) 'a');
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test05800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05800");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime4.plusSeconds((int) 'a');
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        java.lang.String str12 = dateTime9.toString("09:49:17.415");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "09:49:17.415" + "'", str12, "09:49:17.415");
    }

    @Test
    public void test05801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05801");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime4.year();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test05802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05802");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusMonths(59);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay13.monthOfYear();
        org.joda.time.DateTime dateTime18 = yearMonthDay13.toDateTimeAtCurrentTime();
        int int19 = property11.compareTo((org.joda.time.ReadablePartial) yearMonthDay13);
        org.joda.time.Chronology chronology20 = yearMonthDay13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay13.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = yearMonthDay13.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        boolean boolean30 = dateTime29.isBeforeNow();
        org.joda.time.DateTime dateTime32 = dateTime29.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime32.getZone();
        int int37 = dateTimeZone35.getStandardOffset((long) 13);
        long long41 = dateTimeZone35.convertLocalToUTC(229L, false, (long) 49);
        long long43 = dateTimeZone35.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime44 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone35);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.DateTime dateTime47 = yearMonthDay3.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay3.toDateTimeAtMidnight(dateTimeZone48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField51 = yearMonthDay3.getField(803);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 803");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 229L + "'", long41 == 229L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 49L + "'", long43 == 49L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test05803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05803");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        int int39 = dateTime35.getYear();
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime43 = dateTime41.withYear(2);
        boolean boolean44 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology45 = interval29.getChronology();
        org.joda.time.Interval interval46 = interval2.overlap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology47 = interval29.getChronology();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = chronology47.getDateTimeMillis(35324, 97, 43, 35393);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test05804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05804");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withPeriodAdded(readablePeriod4, 22);
        int int7 = dateMidnight6.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(35277);
        int int10 = dateMidnight6.getMinuteOfDay();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval21 = interval13.overlap((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Duration duration22 = interval21.toDuration();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        boolean boolean28 = dateTime27.isBeforeNow();
        org.joda.time.DateTime dateTime30 = dateTime27.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusHours((int) (byte) 100);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration36 = duration22.toDuration();
        long long37 = duration36.getMillis();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight6.withDurationAdded((org.joda.time.ReadableDuration) duration36, 5);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withEra(36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 33L + "'", long37 == 33L);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test05805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05805");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(292278994);
        org.joda.time.DateTime dateTime14 = localDateTime11.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(343);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear(28);
        org.joda.time.DateTime dateTime20 = dateTime16.plusWeeks(306);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test05806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05806");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("days");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguage("2022-02-11T09:51:55.559Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:51:55.559Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05807");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder33.setWeekDefinition(26, 35525);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878736557,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=16,MILLISECOND=557,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573136557,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=16,MILLISECOND=557,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573136557,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=16,MILLISECOND=557,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test05808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05808");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test05809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05809");
        java.util.Locale locale3 = new java.util.Locale("", "DateTimeField[year]", "");
        java.lang.String str4 = locale3.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "_DATETIMEFIELD[YEAR]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
    }

    @Test
    public void test05810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05810");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusWeeks((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        int int17 = dateTimeZone15.getStandardOffset((long) 13);
        long long21 = dateTimeZone15.convertLocalToUTC(229L, false, (long) 49);
        int int23 = dateTimeZone15.getOffset(0L);
        boolean boolean25 = dateTimeZone15.isStandardOffset((long) 35275);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.DateTime dateTime27 = localDate2.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str31 = interval30.toString();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval42 = interval34.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        boolean boolean48 = dateTime47.isBeforeNow();
        org.joda.time.DateTime dateTime50 = dateTime47.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime52 = dateTime50.withMinuteOfHour((int) (short) 0);
        boolean boolean53 = interval42.contains((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean54 = interval30.contains((org.joda.time.ReadableInterval) interval42);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Interval interval56 = interval30.withPeriodBeforeEnd(readablePeriod55);
        long long57 = interval56.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(dateTimeZone58);
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.monthOfYear();
        org.joda.time.DateMidnight dateMidnight61 = org.joda.time.DateMidnight.now();
        long long62 = property60.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateMidnight dateMidnight63 = property60.roundHalfEvenCopy();
        boolean boolean64 = interval56.isAfter((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfCentury(10);
        org.joda.time.LocalDate localDate69 = localDate67.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate71 = localDate69.minusDays(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getDurationType();
        org.joda.time.LocalDate localDate75 = localDate71.withFieldAdded(durationFieldType73, 47);
        org.joda.time.LocalDate.Property property76 = localDate71.dayOfYear();
        org.joda.time.LocalDate localDate77 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate79 = localDate77.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = localDate79.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.DateTime dateTime84 = dateTime81.withDurationAdded((long) 292278993, (int) '#');
        long long85 = property76.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Chronology chronology86 = dateTime81.getChronology();
        org.joda.time.Interval interval87 = interval56.withChronology(chronology86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval88 = new org.joda.time.Interval((java.lang.Object) dateTimeZone15, chronology86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 229L + "'", long21 == 229L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str31, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35L + "'", long57 == 35L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-292278993L) + "'", long85 == (-292278993L));
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(interval87);
    }

    @Test
    public void test05811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05811");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1656633600000L);
        org.joda.time.LocalDate localDate3 = localDate1.minusYears(0);
        org.joda.time.LocalDate localDate5 = localDate1.withWeekyear(558);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks(257);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test05812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05812");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateMidnight dateMidnight6 = property4.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test05813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05813");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfDay();
        org.joda.time.LocalTime.Property property5 = localTime1.minuteOfHour();
        java.lang.String str6 = localTime1.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = localTime1.getValue(35270);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35270");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573136726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=16,MILLISECOND=726,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "09:52:16.726" + "'", str6, "09:52:16.726");
    }

    @Test
    public void test05814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05814");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay10.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType18.getField(chronology21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(chronology21);
        java.util.Locale locale27 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        boolean boolean28 = localDate23.equals((java.lang.Object) "Deutsch");
        org.joda.time.LocalDate localDate30 = localDate23.withWeekyear(371);
        org.joda.time.LocalDate.Property property31 = localDate23.era();
        org.joda.time.LocalDate localDate32 = property31.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = property31.addToCopy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals(locale27.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test05815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05815");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = localTime1.withHourOfDay(3);
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((java.lang.Object) localTime1);
        int int5 = localTime1.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localTime1.getValue(2010);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2010");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test05816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05816");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime4.plusSeconds((int) (short) 10);
        org.joda.time.DateTime dateTime15 = dateTime4.plusYears(0);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime4.minuteOfHour();
        int int18 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime4.plusSeconds(595);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test05817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05817");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        java.util.Locale locale28 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 35370);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withPivotYear(0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withSecondOfMinute(10);
        int[] intArray37 = localDateTime36.getValues();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withMinuteOfHour(52);
        int int40 = localDateTime36.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = dateTimeFormatter32.print((org.joda.time.ReadablePartial) localDateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 10001]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test05818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05818");
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now();
        int int8 = dateMidnight7.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withPeriodAdded(readablePeriod11, 22);
        int int14 = dateMidnight13.getHourOfDay();
        int int15 = dateMidnight13.getWeekOfWeekyear();
        int int16 = dateMidnight13.getHourOfDay();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.minutes();
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight13.withChronology(chronology21);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.Interval interval39 = interval31.overlap((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str43 = interval42.toString();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.Interval interval54 = interval46.overlap((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay(dateTimeZone55);
        org.joda.time.TimeOfDay timeOfDay57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = yearMonthDay56.toDateTime(timeOfDay57, dateTimeZone58);
        boolean boolean60 = dateTime59.isBeforeNow();
        org.joda.time.DateTime dateTime62 = dateTime59.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime64 = dateTime62.withMinuteOfHour((int) (short) 0);
        boolean boolean65 = interval54.contains((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = interval42.contains((org.joda.time.ReadableInterval) interval54);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Interval interval68 = interval42.withPeriodBeforeEnd(readablePeriod67);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = interval42.toPeriod(periodType69);
        org.joda.time.Interval interval71 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period70);
        org.joda.time.MutablePeriod mutablePeriod72 = period70.toMutablePeriod();
        int[] intArray75 = chronology21.get((org.joda.time.ReadablePeriod) period70, (long) 668, (long) 34);
        org.joda.time.DurationField durationField76 = chronology21.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(569, 223, 282, 730, (int) (byte) 1, 785, 35338900, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 730 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str43, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, -634]");
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test05819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.property(dateTimeFieldType6);
        java.lang.String str8 = property7.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        int int17 = dateTime13.getYear();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime13.withDurationAdded(readableDuration18, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, readablePeriod21);
        int int23 = property7.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTime(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime20.withDate(35331916, 511, 35447935);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 511 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[monthOfYear]" + "'", str8, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test05820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05820");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35359, 1069);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 1069");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05821");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.year();
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        int int10 = dateMidnight8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878737017,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=17,MILLISECOND=17,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test05822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05822");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        calendar0.setFirstDayOfWeek(32770);
        int int4 = calendar0.getFirstDayOfWeek();
        java.util.Date date5 = calendar0.getTime();
        calendar0.add(5, 461);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.set(784, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 784");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1684403537034,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=32770,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=138,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=17,MILLISECOND=34,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:52:17 UTC 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32770 + "'", int4 == 32770);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 09:52:17 UTC 2022");
    }

    @Test
    public void test05823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05823");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        org.joda.time.LocalDate localDate8 = localDate6.withWeekOfWeekyear(2);
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfEra(35405);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05824");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("days");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setScript("09:48:57.360");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 09:48:57.360 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test05825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05825");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, readablePeriod12);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime23.toDateTime(chronology31);
        boolean boolean33 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean34 = interval16.isBeforeNow();
        boolean boolean35 = interval13.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str39 = interval38.toString();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval50 = interval42.overlap((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTime(timeOfDay53, dateTimeZone54);
        boolean boolean56 = dateTime55.isBeforeNow();
        org.joda.time.DateTime dateTime58 = dateTime55.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour((int) (short) 0);
        boolean boolean61 = interval50.contains((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean62 = interval38.contains((org.joda.time.ReadableInterval) interval50);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Interval interval64 = interval38.withPeriodBeforeEnd(readablePeriod63);
        long long65 = interval64.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(dateTimeZone66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.monthOfYear();
        org.joda.time.DateMidnight dateMidnight69 = org.joda.time.DateMidnight.now();
        long long70 = property68.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.DateMidnight dateMidnight71 = property68.roundHalfEvenCopy();
        boolean boolean72 = interval64.isAfter((org.joda.time.ReadableInstant) dateMidnight71);
        boolean boolean73 = interval16.isAfter((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight71.withYearOfEra(1128);
        int int76 = dateMidnight71.getEra();
        org.joda.time.LocalDate localDate77 = dateMidnight71.toLocalDate();
        org.joda.time.Interval interval78 = localDate77.toInterval();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str39, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 35L + "'", long65 == 35L);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(interval78);
    }

    @Test
    public void test05826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05826");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay6 = property5.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.dayOfMonth();
        int int8 = property7.get();
        int int9 = property7.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property7.withMinimumValue();
        java.lang.String str11 = yearMonthDay10.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 28 + "'", int9 == 28);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-01" + "'", str11, "2022-02-01");
    }

    @Test
    public void test05827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05827");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.plusHours(538);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime13.withDayOfWeek(35351);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35351 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "292278993-02-08T09:52:17.208Z" + "'", str11, "292278993-02-08T09:52:17.208Z");
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test05828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05828");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMillis(7);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) '#');
        org.joda.time.DateTime.Property property17 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime18 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property22 = localDate19.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        int int28 = dateTime27.getCenturyOfEra();
        org.joda.time.DateTime dateTime30 = dateTime27.plusMillis((int) (byte) 0);
        int int31 = dateTime30.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay33.property(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime30.property(dateTimeFieldType38);
        boolean boolean41 = localDate19.isSupported(dateTimeFieldType38);
        boolean boolean42 = dateTime18.isSupported(dateTimeFieldType38);
        org.joda.time.DateTime.Property property43 = dateTime18.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test05829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05829");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("days");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.year();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getDisplayCountry();
        int int14 = dateTimeField10.getMaximumTextLength(locale11);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = dateTimeField10.getAsShortText((long) 587, locale18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay21.property(dateTimeFieldType26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay21.plusMonths((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.plusYears(883);
        java.util.Locale locale34 = new java.util.Locale("Fri Feb 11 09:47:52 UTC 2022");
        java.lang.String str35 = locale34.toLanguageTag();
        java.lang.String str36 = yearMonthDay31.toString("-1", locale34);
        int int37 = dateTimeField10.getMaximumTextLength(locale34);
        java.lang.String str38 = locale4.getDisplayVariant(locale34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970" + "'", str19, "1970");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertEquals(locale34.toString(), "fri feb 11 09:47:52 utc 2022");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test05830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05830");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(20);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.minusDays(35334189);
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded(0L, 35423);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test05831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05831");
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology10.getZone();
        java.lang.String str14 = chronology10.toString();
        org.joda.time.DurationField durationField15 = chronology10.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(31, 35379776, 230, 126, 182, 27093, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 126 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str14, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test05832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05832");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, readablePeriod12);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime23.toDateTime(chronology31);
        boolean boolean33 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean34 = interval16.isBeforeNow();
        boolean boolean35 = interval13.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str39 = interval38.toString();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval50 = interval42.overlap((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTime(timeOfDay53, dateTimeZone54);
        boolean boolean56 = dateTime55.isBeforeNow();
        org.joda.time.DateTime dateTime58 = dateTime55.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour((int) (short) 0);
        boolean boolean61 = interval50.contains((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean62 = interval38.contains((org.joda.time.ReadableInterval) interval50);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Interval interval64 = interval38.withPeriodBeforeEnd(readablePeriod63);
        long long65 = interval64.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(dateTimeZone66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.monthOfYear();
        org.joda.time.DateMidnight dateMidnight69 = org.joda.time.DateMidnight.now();
        long long70 = property68.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.DateMidnight dateMidnight71 = property68.roundHalfEvenCopy();
        boolean boolean72 = interval64.isAfter((org.joda.time.ReadableInstant) dateMidnight71);
        boolean boolean73 = interval16.isAfter((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight71.withYearOfEra(1128);
        org.joda.time.DateMidnight.Property property76 = dateMidnight71.yearOfEra();
        java.lang.String str77 = property76.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str39, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 35L + "'", long65 == 35L);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "yearOfEra" + "'", str77, "yearOfEra");
    }

    @Test
    public void test05833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05833");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay(dateTimeZone3);
        org.joda.time.TimeOfDay timeOfDay5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTime(timeOfDay5, dateTimeZone6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTime dateTime9 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime10 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 86399);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime10.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(704, 328, 731, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 328 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test05834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean12 = dateTime10.isAfter((long) 434);
        org.joda.time.DateTime dateTime14 = dateTime10.minusSeconds(53);
        int int15 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime10.minusHours(999);
        org.joda.time.DateTime dateTime19 = dateTime17.minus((long) 794);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test05835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05835");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundCeilingCopy();
        java.lang.String str4 = property2.getAsShortText();
        org.joda.time.DateMidnight dateMidnight5 = property2.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight7 = property2.addWrapFieldToCopy(50);
        int int8 = dateMidnight7.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfWeek();
        org.joda.time.DateMidnight.Property property12 = dateMidnight10.dayOfWeek();
        int int13 = dateMidnight10.getYear();
        int int14 = dateMidnight10.getDayOfWeek();
        java.lang.Object obj15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(obj15);
        int int17 = dateMidnight16.getMonthOfYear();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getVariant();
        java.lang.String str27 = dateTimeField23.getAsShortText(3, locale25);
        long long29 = dateTimeField23.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.monthOfYear();
        int int34 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean38 = localDateTime36.isSupported(dateTimeFieldType37);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval49 = interval41.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration50 = interval49.toDuration();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime36.plus((org.joda.time.ReadableDuration) duration50);
        java.lang.String str52 = duration50.toString();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight16.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration54 = duration50.toDuration();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight7.minus((org.joda.time.ReadableDuration) duration54);
        int int57 = dateMidnight56.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u91d1" + "'", str4, "\u91d1");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "3" + "'", str27, "3");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.033S" + "'", str52, "PT0.033S");
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 42 + "'", int57 == 42);
    }

    @Test
    public void test05836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05836");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime6.getYear();
        org.joda.time.DateTime.Property property11 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        java.util.Date date14 = dateTime13.toDate();
        int int15 = date14.getDate();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.withFields((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withMillis(0L);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval30 = interval22.overlap((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration31 = interval30.toDuration();
        long long32 = duration31.getMillis();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration31);
        int int34 = dateMidnight19.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 33L + "'", long32 == 33L);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test05837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05837");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay(dateTimeZone3);
        org.joda.time.TimeOfDay timeOfDay5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTime(timeOfDay5, dateTimeZone6);
        boolean boolean8 = dateTime7.isBeforeNow();
        org.joda.time.DateTime dateTime10 = dateTime7.withMonthOfYear((int) (byte) 1);
        int int11 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.DateTime dateTime20 = dateTime17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime17.plusSeconds((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime26 = dateTime23.withFieldAdded(durationFieldType24, 0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay34.monthOfYear();
        org.joda.time.DateTime dateTime39 = yearMonthDay34.toDateTimeAtCurrentTime();
        int int40 = property32.compareTo((org.joda.time.ReadablePartial) yearMonthDay34);
        org.joda.time.Chronology chronology41 = yearMonthDay34.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfWeek();
        org.joda.time.DurationField durationField43 = durationFieldType24.getField(chronology41);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.centuryOfEra();
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfCentury(10);
        org.joda.time.LocalDate localDate55 = localDate53.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate57 = localDate53.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property58 = localDate57.weekyear();
        org.joda.time.DateTime dateTime59 = localDate57.toDateTimeAtCurrentTime();
        long long61 = chronology48.set((org.joda.time.ReadablePartial) localDate57, (long) 708);
        boolean boolean62 = durationFieldType24.isSupported(chronology48);
        org.joda.time.DateTime dateTime63 = dateTime12.withChronology(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(994, (-1), 126, chronology48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-62195212799292L) + "'", long61 == (-62195212799292L));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test05838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05838");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable6, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05839");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        java.lang.String str7 = property6.toString();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[year]" + "'", str7, "Property[year]");
    }

    @Test
    public void test05840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05840");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0002-02-08T09:50:40.886Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0002-02-08T09:50:40.886Z\" is malformed at \"T09:50:40.886Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05841");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        boolean boolean12 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        int int26 = property18.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.Chronology chronology27 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.era();
        int int30 = dateTime10.get(dateTimeField29);
        int int31 = dateTime10.getYear();
        org.joda.time.DateTime dateTime32 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime10.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test05842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05842");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2023-2-11 9:50:40");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2023-2-11 9:50:40");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05843");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDayOfMonth(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withField(dateTimeFieldType11, 4);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withSecondOfMinute(12);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(1969);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now();
        int int21 = dateMidnight20.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withPeriodAdded(readablePeriod24, 22);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getVariant();
        java.lang.String str36 = dateTimeField32.getAsShortText(3, locale34);
        long long38 = dateTimeField32.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        int int43 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean47 = localDateTime45.isSupported(dateTimeFieldType46);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration59 = interval58.toDuration();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight23.withDurationAdded((org.joda.time.ReadableDuration) duration59, 74);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration59, 35336);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime13.minus((org.joda.time.ReadableDuration) duration59);
        int int66 = localDateTime65.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "3" + "'", str36, "3");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 86399970 + "'", int66 == 86399970);
    }

    @Test
    public void test05844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05844");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.centuryOfEra();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTime(chronology19);
        boolean boolean21 = interval4.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate localDate22 = dateTime20.toLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYear((int) (short) -1);
        java.lang.String str25 = localDate24.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 16, chronology31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval45 = interval37.overlap((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str49 = interval48.toString();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.Interval interval60 = interval52.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.TimeOfDay timeOfDay63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTime(timeOfDay63, dateTimeZone64);
        boolean boolean66 = dateTime65.isBeforeNow();
        org.joda.time.DateTime dateTime68 = dateTime65.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime70 = dateTime68.withMinuteOfHour((int) (short) 0);
        boolean boolean71 = interval60.contains((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean72 = interval48.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Interval interval74 = interval48.withPeriodBeforeEnd(readablePeriod73);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = interval48.toPeriod(periodType75);
        org.joda.time.Interval interval77 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        long long80 = chronology31.add((org.joda.time.ReadablePeriod) period76, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod81 = period76.toMutablePeriod();
        org.joda.time.LocalDate localDate82 = localDate24.minus((org.joda.time.ReadablePeriod) period76);
        int int83 = period76.size();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight0.plusMonths(42);
        int int87 = dateMidnight86.getEra();
        org.joda.time.DateMidnight.Property property88 = dateMidnight86.year();
        org.joda.time.DateMidnight dateMidnight89 = property88.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight91 = property88.setCopy(35296);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-0001-02-11" + "'", str25, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str49, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1163943L + "'", long80 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateMidnight91);
    }

    @Test
    public void test05845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05845");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar12);
        boolean boolean15 = localTime13.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localTime13);
        int int17 = property9.compareTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.LocalTime localTime18 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime19 = property9.roundCeilingCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573137987,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=17,MILLISECOND=987,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:52:17.987" + "'", str4, "09:52:17.987");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573137987,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=17,MILLISECOND=987,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644573137987,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=17,MILLISECOND=987,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test05846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05846");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime21 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay1.property(dateTimeFieldType22);
        int int25 = yearMonthDay1.getYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        int int31 = dateTime30.getCenturyOfEra();
        org.joda.time.DateTime dateTime33 = dateTime30.plusMillis((int) (byte) 0);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay36.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay36.property(dateTimeFieldType41);
        org.joda.time.DateTime.Property property43 = dateTime33.property(dateTimeFieldType41);
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay1.property(dateTimeFieldType41);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(dateTimeZone45);
        org.joda.time.TimeOfDay timeOfDay47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay46.toDateTime(timeOfDay47, dateTimeZone48);
        int int50 = dateTime49.getCenturyOfEra();
        org.joda.time.DateTime dateTime52 = dateTime49.plusMillis((int) (byte) 0);
        int int53 = dateTime52.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTime(timeOfDay56, dateTimeZone57);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay55.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property61 = yearMonthDay55.property(dateTimeFieldType60);
        org.joda.time.DateTime.Property property62 = dateTime52.property(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType60.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(dateTimeZone64);
        org.joda.time.Chronology chronology66 = yearMonthDay65.getChronology();
        org.joda.time.DurationField durationField67 = durationFieldType63.getField(chronology66);
        org.joda.time.Chronology chronology68 = chronology66.withUTC();
        java.lang.String str69 = chronology68.toString();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.dayOfYear();
        boolean boolean71 = dateTimeFieldType41.isSupported(chronology68);
        org.joda.time.DurationField durationField72 = chronology68.centuries();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20 + "'", int50 == 20);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 11 + "'", int53 == 11);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[UTC]" + "'", str69, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test05847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05847");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime6.getYear();
        org.joda.time.DateTime.Property property11 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        java.util.Date date14 = dateTime13.toDate();
        int int15 = date14.getDate();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.withFields((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withMillis(0L);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.minusYears(23);
        org.joda.time.DateMidnight.Property property22 = dateMidnight17.dayOfWeek();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.DateMidnight dateMidnight24 = property22.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((java.lang.Object) property22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test05848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05848");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 13);
        long long16 = dateTimeZone10.convertLocalToUTC(229L, false, (long) 49);
        int int18 = dateTimeZone10.getOffset(0L);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay27.monthOfYear();
        org.joda.time.DateTime dateTime32 = yearMonthDay27.toDateTimeAtCurrentTime();
        int int33 = property25.compareTo((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.LocalDate localDate34 = localDate19.withFields((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDate34.isSupported(dateTimeFieldType35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = localDate34.withDayOfYear(373);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 373 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 229L + "'", long16 == 229L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05849");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar12);
        boolean boolean15 = localTime13.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localTime13);
        int int17 = property9.compareTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.LocalTime localTime18 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = property9.addCopy((long) ' ');
        org.joda.time.LocalTime localTime21 = property9.withMaximumValue();
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = property9.setCopy("\u82f1\u6587", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573138146,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=146,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:52:18.146" + "'", str4, "09:52:18.146");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573138146,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=146,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644573138146,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=146,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
    }

    @Test
    public void test05850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05850");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfHalfday();
        long long12 = chronology5.add((-968634479000L), (long) 86399, (int) '#');
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(967L, chronology5);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-968631455035L) + "'", long12 == (-968631455035L));
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test05851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05851");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(611, 0, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 611 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05852");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 621);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter9.withChronology(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = dateTimeFormatter17.parseMutableDateTime("292278993-02-08T09:47:49.781Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test05853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05853");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        calendar0.roll(13, 42);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        int int15 = dateTime14.getCenturyOfEra();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) (byte) 0);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay20.property(dateTimeFieldType25);
        org.joda.time.DateTime.Property property27 = dateTime17.property(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType28.getField(chronology31);
        boolean boolean33 = calendar0.after((java.lang.Object) durationFieldType28);
        org.joda.time.YearMonthDay yearMonthDay34 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 182);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withPivotYear(10);
        boolean boolean42 = calendar0.after((java.lang.Object) dateTimeFormatter41);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878720243,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=0,MILLISECOND=243,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test05854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05854");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay7.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = yearMonthDay7.isSupported(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime26.getZone();
        int int31 = dateTimeZone29.getStandardOffset((long) 13);
        long long35 = dateTimeZone29.convertLocalToUTC(229L, false, (long) 49);
        long long37 = dateTimeZone29.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime38 = yearMonthDay7.toDateTimeAtCurrentTime(dateTimeZone29);
        java.lang.String str39 = dateTimeZone29.toString();
        long long43 = dateTimeZone29.convertLocalToUTC((long) 35354, true, (long) 31);
        long long45 = dateTimeZone29.nextTransition(74L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 229L + "'", long35 == 229L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 49L + "'", long37 == 49L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 35354L + "'", long43 == 35354L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 74L + "'", long45 == 74L);
    }

    @Test
    public void test05855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05855");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 819);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = timeOfDay1.getValue(35405);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35405");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test05856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05856");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(19);
        boolean boolean11 = localDate9.equals((java.lang.Object) "German");
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) localDate9);
        org.joda.time.LocalDate.Property property13 = localDate9.year();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test05857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05857");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay45 = org.joda.time.YearMonthDay.fromCalendarFields(calendar41);
        calendar41.setFirstDayOfWeek(2022);
        int int49 = calendar41.getMinimum(2);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.year();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.lang.String str59 = locale57.getDisplayCountry();
        int int60 = dateTimeField56.getMaximumTextLength(locale57);
        java.lang.String str61 = locale57.getDisplayScript();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale57);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone50, locale57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        long long66 = dateTimeZone64.previousTransition((long) 8);
        long long68 = dateTimeZone40.getMillisKeepLocal(dateTimeZone64, (long) (byte) 0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 35277, dateTimeZone64);
        long long71 = dateTimeZone64.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter27.withZone(dateTimeZone64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withPivotYear((java.lang.Integer) 2010);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter74.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long77 = dateTimeFormatter75.parseMillis("halfdays");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1657878738359,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=359,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c" + "'", str59, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644573138359,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=359,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573138359,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=359,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 8L + "'", long66 == 8L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 97L + "'", long71 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
    }

    @Test
    public void test05858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05858");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (byte) 100);
        boolean boolean13 = dateTime11.isEqual((long) (byte) 10);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 16, chronology19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.Interval interval33 = interval25.overlap((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str37 = interval36.toString();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.Interval interval48 = interval40.overlap((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        boolean boolean54 = dateTime53.isBeforeNow();
        org.joda.time.DateTime dateTime56 = dateTime53.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour((int) (short) 0);
        boolean boolean59 = interval48.contains((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean60 = interval36.contains((org.joda.time.ReadableInterval) interval48);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Interval interval62 = interval36.withPeriodBeforeEnd(readablePeriod61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = interval36.toPeriod(periodType63);
        org.joda.time.Interval interval65 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        long long68 = chronology19.add((org.joda.time.ReadablePeriod) period64, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod69 = period64.toMutablePeriod();
        org.joda.time.DateTime dateTime71 = dateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod69, (-1));
        org.joda.time.DateTime.Property property72 = dateTime71.secondOfDay();
        org.joda.time.DateTime dateTime74 = property72.addWrapFieldToCopy(826);
        org.joda.time.DateTime dateTime76 = property72.addWrapFieldToCopy(85);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str37, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1163943L + "'", long68 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test05859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05859");
        java.util.Locale locale2 = new java.util.Locale("\u82f1\u6587\u7f8e\u56fd)_09:48:02.722_T09:48:59.530", "2022-02-11T00:00:00.000Z");
        org.junit.Assert.assertEquals(locale2.toString(), "\u82f1\u6587\u7f8e\u56fd)_09:48:02.722_t09:48:59.530_2022-02-11T00:00:00.000Z");
    }

    @Test
    public void test05860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05860");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        int int10 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withDayOfWeek(7);
        boolean boolean14 = localDateTime6.equals((java.lang.Object) "zh");
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.minusWeeks(35493);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05861");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05862");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withCenturyOfEra(37);
        org.joda.time.DateTime dateTime8 = localDateTime2.toDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test05863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05863");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = dateTimeFormatter4.parseLocalDate("Property[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test05864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05864");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        int int4 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withYearOfCentury(79);
        int int7 = dateMidnight0.getMonthOfYear();
        java.lang.Object obj8 = null;
        boolean boolean9 = dateMidnight0.equals(obj8);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05865");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay6 = property5.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay8 = property7.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay9 = property7.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(35457051);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35457051 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test05866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05866");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime6.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMillis(7);
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
    }

    @Test
    public void test05867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05867");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 51);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronolgy();
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter5.getPrinter();
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer10, 1641894523870L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNull(dateTimePrinter9);
    }

    @Test
    public void test05868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05868");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.plusYears(588);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay4.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = yearMonthDay4.toString("it-IT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878738678,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=678,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05869");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime4.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.DateTime.Property property23 = dateTime18.weekyear();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.joda.time.DateTime dateTime26 = dateTime24.withYear(2);
        int int27 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime26.minusMonths(86399);
        org.joda.time.DateTime.Property property31 = dateTime30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime41 = dateTime39.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime39.getZone();
        int int44 = dateTimeZone42.getStandardOffset((long) 13);
        java.lang.Object obj45 = null;
        boolean boolean46 = dateTimeZone42.equals(obj45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) dateTime30, dateTimeZone42);
        int int48 = dateTime30.getCenturyOfEra();
        org.joda.time.DateTime dateTime50 = dateTime30.withMillisOfDay(35360);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 71 + "'", int48 == 71);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test05870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05870");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str2 = locale0.getExtension('a');
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = calendar3.getGreatestMinimum(18057);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18057");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644573138788,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=788,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05871");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime11.property(dateTimeFieldType19);
        boolean boolean22 = localDate0.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property23 = localDate0.dayOfYear();
        org.joda.time.Chronology chronology24 = localDate0.getChronology();
        int int25 = localDate0.getDayOfMonth();
        int int26 = localDate0.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate0.toDateTimeAtCurrentTime(dateTimeZone27);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localDate0.getValue(22);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test05872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05872");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        int int12 = property11.getLeapAmount();
        org.joda.time.DateTime dateTime14 = property11.setCopy(50);
        int int15 = property11.getMinimumValue();
        org.joda.time.DateTime dateTime16 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime17 = property11.roundFloorCopy();
        java.lang.String str18 = dateTime17.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime17.withMinuteOfHour(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "292278993-02-08T09:52:18.823Z" + "'", str18, "292278993-02-08T09:52:18.823Z");
    }

    @Test
    public void test05873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05873");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.Chronology chronology8 = chronology4.withUTC();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now(chronology4);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test05874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05874");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYear(134);
        int int4 = localDateTime3.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withDayOfYear(375);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 375 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test05875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05875");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale23.getExtension('a');
        java.lang.String str26 = dateTimeField21.getAsText(4, locale23);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getDisplayScript();
        java.lang.String str31 = locale28.toLanguageTag();
        java.lang.String str32 = locale28.toLanguageTag();
        java.lang.String str33 = locale27.getDisplayVariant(locale28);
        java.lang.String str34 = locale23.getDisplayLanguage(locale27);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("de");
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale36.getDisplayLanguage(locale37);
        java.lang.String str40 = locale27.getDisplayVariant(locale36);
        int int41 = property11.getMaximumTextLength(locale27);
        java.lang.String str42 = property11.getAsText();
        org.joda.time.DateTimeField dateTimeField43 = property11.getField();
        long long46 = dateTimeField43.add(1657878505806L, 35271);
        long long48 = dateTimeField43.roundHalfFloor(999L);
        org.joda.time.DurationField durationField49 = dateTimeField43.getDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "4" + "'", str26, "4");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-TW" + "'", str31, "zh-TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-TW" + "'", str32, "zh-TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Deutsch" + "'", str39, "Deutsch");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1657913776806L + "'", long46 == 1657913776806L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1000L + "'", long48 == 1000L);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test05876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05876");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.property(dateTimeFieldType6);
        java.lang.String str8 = property7.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        int int17 = dateTime13.getYear();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime13.withDurationAdded(readableDuration18, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, readablePeriod21);
        int int23 = property7.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.YearMonthDay yearMonthDay24 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfCentury(10);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate31 = localDate27.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime32 = localDate27.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval33 = localDate27.toInterval();
        int int34 = localDate27.getDayOfYear();
        int int35 = localDate27.getYearOfEra();
        int int36 = yearMonthDay24.compareTo((org.joda.time.ReadablePartial) localDate27);
        int[] intArray37 = yearMonthDay24.getValues();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay43 = property41.setCopy(15);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.year();
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay43.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((java.lang.Object) intArray37, chronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[monthOfYear]" + "'", str8, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2010 + "'", int35 == 2010);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 12, 11]");
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test05877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05877");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.getLocalTime();
        org.joda.time.LocalTime localTime6 = localTime4.plusSeconds(996);
        org.joda.time.LocalTime.Property property7 = localTime4.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property7.roundHalfFloorCopy();
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localTime8.compareTo(readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573138992,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=18,MILLISECOND=992,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test05878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05878");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property7.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test05879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05879");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("+588:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=+588:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        int int12 = property9.get();
        org.joda.time.DateTime dateTime13 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = property9.setCopy(894);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test05881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05881");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.Interval interval13 = interval5.overlap((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Duration duration14 = interval13.toDuration();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours((int) (byte) 100);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean28 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int30 = dateMidnight1.get(dateTimeFieldType29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight1.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight1.minusDays(706);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.era();
        org.joda.time.DateMidnight dateMidnight35 = property34.getDateMidnight();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test05882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05882");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 15);
        int int2 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds(746);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(0);
        int int7 = timeOfDay1.getMinuteOfHour();
        int int8 = timeOfDay1.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test05883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05883");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property3.roundHalfFloorCopy();
        int int8 = property3.getMaximumValueOverall();
        org.joda.time.LocalTime localTime9 = property3.withMinimumValue();
        java.lang.String str10 = property3.getName();
        org.joda.time.LocalTime localTime11 = property3.roundFloorCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573139102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=102,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399 + "'", int8 == 86399);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondOfDay" + "'", str10, "secondOfDay");
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test05884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05884");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 66);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test05885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05885");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime6.property(dateTimeFieldType15);
        int int19 = property18.getMinimumValueOverall();
        org.joda.time.DateTime dateTime20 = property18.withMaximumValue();
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder25 = builder21.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromCalendarFields(calendar26);
        calendar26.setFirstDayOfWeek(2022);
        int int34 = calendar26.getMinimum(2);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale42.getDisplayCountry();
        int int45 = dateTimeField41.getMaximumTextLength(locale42);
        java.lang.String str46 = locale42.getDisplayScript();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale42);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone35, locale42);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long51 = dateTimeZone49.previousTransition((long) 8);
        java.lang.String str52 = dateTimeZone49.toString();
        java.util.TimeZone timeZone53 = dateTimeZone49.toTimeZone();
        java.util.Calendar.Builder builder54 = builder25.setTimeZone(timeZone53);
        java.util.Calendar calendar55 = builder25.build();
        boolean boolean56 = dateTime20.equals((java.lang.Object) builder25);
        org.joda.time.DateTime dateTime58 = dateTime20.plus((long) 53);
        int int59 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTime.Property property60 = dateTime20.year();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1657878739169,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=169,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u65e5\u672c" + "'", str44, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644573139169,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=169,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573139169,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=169,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 8L + "'", long51 == 8L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-182700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 592 + "'", int59 == 592);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test05886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05886");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean12 = dateTime10.isAfter((long) 434);
        org.joda.time.DateTime dateTime14 = dateTime10.withMillisOfDay(49);
        int int15 = dateTime10.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35539225 + "'", int15 == 35539225);
    }

    @Test
    public void test05887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05887");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        org.joda.time.LocalDate localDate3 = property2.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight4 = localDate3.toDateMidnight();
        org.joda.time.LocalDate.Property property5 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate7 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test05888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05888");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        boolean boolean7 = dateTimeField6.isLenient();
        long long9 = dateTimeField6.roundHalfEven((long) 876);
        int int12 = dateTimeField6.getDifference(10368000045L, (long) 35387781);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        java.util.Date date14 = calendar13.getTime();
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromDateFields(date14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths(35279414);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property21 = localDate18.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        int int27 = dateTime26.getCenturyOfEra();
        org.joda.time.DateTime dateTime29 = dateTime26.plusMillis((int) (byte) 0);
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay32.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay32.property(dateTimeFieldType37);
        org.joda.time.DateTime.Property property39 = dateTime29.property(dateTimeFieldType37);
        boolean boolean40 = localDate18.isSupported(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay42.toDateTime(timeOfDay43, dateTimeZone44);
        int int46 = dateTime45.getYearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime45.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime50 = dateTime45.plusSeconds((int) 'a');
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime54 = dateTime51.withFieldAdded(durationFieldType52, 0);
        boolean boolean55 = localDate18.isSupported(durationFieldType52);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay17.withFieldAdded(durationFieldType52, 33);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay57.plusDays(35331);
        int int60 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 946684800000L + "'", long9 == 946684800000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644573139399,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=399,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Fri Feb 11 09:52:19 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2922789 + "'", int60 == 2922789);
    }

    @Test
    public void test05889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05889");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        java.lang.String str2 = date1.toLocaleString();
        int int3 = date1.getDay();
        date1.setMinutes(51);
        int int6 = date1.getDate();
        date1.setSeconds((int) (short) 10);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573139430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=430,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:51:10 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022/02/11 9:52:19" + "'", str2, "2022/02/11 9:52:19");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
    }

    @Test
    public void test05890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05890");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime5.getFieldTypes();
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.weekOfWeekyear();
        int int13 = property12.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test05891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05891");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(6, 99, 784);
        java.util.Calendar.Builder builder12 = builder0.setDate(2698, 8, 1970);
        java.util.Calendar.Builder builder15 = builder12.set(7, 934);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(80, 34564);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test05892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05892");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusWeeks(86399);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        boolean boolean27 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime33.toDateTime(chronology41);
        boolean boolean43 = durationFieldType28.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime26.toDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight6.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField49 = chronology41.halfdayOfDay();
        long long51 = dateTimeField49.roundFloor((long) 871);
        long long54 = dateTimeField49.add(1644572909028L, 254);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1655545709028L + "'", long54 == 1655545709028L);
    }

    @Test
    public void test05893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05893");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = localTime1.withHourOfDay(3);
        org.joda.time.LocalTime localTime5 = localTime3.withMinuteOfHour(13);
        org.joda.time.LocalTime.Property property6 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime8 = localTime3.plusSeconds(46238);
        java.lang.String str9 = localTime8.toString();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.days();
        java.lang.String str11 = durationFieldType10.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = localTime8.withFieldAdded(durationFieldType10, 784);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'days' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "15:50:38.010" + "'", str9, "15:50:38.010");
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "days" + "'", str11, "days");
    }

    @Test
    public void test05894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05894");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDayOfMonth(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withField(dateTimeFieldType11, 4);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withSecondOfMinute(12);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(1969);
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now();
        int int21 = dateMidnight20.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withPeriodAdded(readablePeriod24, 22);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getVariant();
        java.lang.String str36 = dateTimeField32.getAsShortText(3, locale34);
        long long38 = dateTimeField32.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        int int43 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean47 = localDateTime45.isSupported(dateTimeFieldType46);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration59 = interval58.toDuration();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight23.withDurationAdded((org.joda.time.ReadableDuration) duration59, 74);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration59, 35336);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime13.minus((org.joda.time.ReadableDuration) duration59);
        int int66 = localDateTime65.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.plusHours(35379776);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "3" + "'", str36, "3");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 59 + "'", int66 == 59);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test05895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05895");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addNoWrapToCopy(10);
        int int7 = timeOfDay6.getMillisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 665 + "'", int7 == 665);
    }

    @Test
    public void test05896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05896");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 46238);
    }

    @Test
    public void test05897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05897");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        int int21 = dateTime17.getYear();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.withDurationAdded(readableDuration22, (int) (short) 100);
        org.joda.time.DateTime.Property property25 = dateTime17.weekOfWeekyear();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromCalendarFields(calendar26);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        int int38 = dateTime37.getCenturyOfEra();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMillis((int) (byte) 0);
        int int41 = dateTime40.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay43.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay43.property(dateTimeFieldType48);
        org.joda.time.DateTime.Property property50 = dateTime40.property(dateTimeFieldType48);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType48.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone52);
        org.joda.time.Chronology chronology54 = yearMonthDay53.getChronology();
        org.joda.time.DurationField durationField55 = durationFieldType51.getField(chronology54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay30.withFieldAdded(durationFieldType51, (int) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime17.withFields((org.joda.time.ReadablePartial) yearMonthDay30);
        long long59 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = property11.getDateTime();
        long long61 = dateTime60.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1657878739692,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=692,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 9223370331033600000L + "'", long59 == 9223370331033600000L);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 9223371988912339692L + "'", long61 == 9223371988912339692L);
    }

    @Test
    public void test05898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05898");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getGreatestMinimum((int) (byte) 10);
        calendar0.setFirstDayOfWeek(461);
        int int9 = calendar0.getWeekYear();
        java.util.TimeZone timeZone10 = calendar0.getTimeZone();
        calendar0.setMinimalDaysInFirstWeek(32);
        int int13 = calendar0.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate(1969, 274, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 37");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878739723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=461,minimalDaysInFirstWeek=32,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test05899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05899");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = property9.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight10);
        int[] intArray12 = timeOfDay11.getValues();
        java.lang.String str13 = timeOfDay11.toString();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573139769,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=19,MILLISECOND=769,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "T00:00:00.000" + "'", str13, "T00:00:00.000");
    }

    @Test
    public void test05900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05900");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.monthOfYear();
        org.joda.time.DateTime dateTime35 = yearMonthDay30.toDateTimeAtCurrentTime();
        int int36 = property28.compareTo((org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.Chronology chronology37 = yearMonthDay30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay30.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean41 = yearMonthDay30.isSupported(dateTimeFieldType40);
        boolean boolean42 = localDate20.equals((java.lang.Object) boolean41);
        org.joda.time.LocalDate.Property property43 = localDate20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone44);
        org.joda.time.TimeOfDay timeOfDay46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay45.toDateTime(timeOfDay46, dateTimeZone47);
        boolean boolean49 = dateTime48.isBeforeNow();
        org.joda.time.DateTime dateTime51 = dateTime48.withMonthOfYear((int) (byte) 1);
        int int52 = dateTime48.getYear();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime55 = dateTime48.withDurationAdded(readableDuration53, (int) (short) 100);
        int int56 = property43.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDate localDate57 = property43.withMaximumValue();
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfCentury(11);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
    }

    @Test
    public void test05901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05901");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.dayOfWeek();
        int int9 = dateTimeField8.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test05902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05902");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean12 = dateTime10.isAfter((long) 434);
        org.joda.time.DateTime dateTime14 = dateTime10.minusSeconds(53);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfWeek();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = property20.roundHalfCeilingCopy();
        boolean boolean23 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateMidnight22);
        int int24 = dateTime14.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
    }

    @Test
    public void test05903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05903");
        java.util.Date date3 = new java.util.Date(80, 616, 134);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Sep 11 00:00:00 UTC 2031");
    }

    @Test
    public void test05904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int6 = property2.getLeapAmount();
        org.joda.time.Interval interval7 = property2.toInterval();
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval10 = interval7.withEndMillis((long) 475);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test05905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05905");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.secondOfMinute();
        int int13 = dateTime11.getCenturyOfEra();
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(257);
        org.joda.time.DateTime dateTime17 = dateTime11.minusWeeks(289);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime17.withDate((int) 'a', 379, 7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 379 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test05906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05906");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime11.property(dateTimeFieldType19);
        boolean boolean22 = localDate0.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property23 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate24 = property23.withMinimumValue();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 55);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property30 = localDate27.weekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay32.monthOfYear();
        org.joda.time.DateTime dateTime37 = yearMonthDay32.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean47 = dateTime45.isSupported(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.DateTime.Property property49 = dateTime37.property(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType46.getRangeDurationType();
        int int51 = localDate27.get(dateTimeFieldType46);
        boolean boolean52 = localDate26.isSupported(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate54 = localDate24.withField(dateTimeFieldType46, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test05907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05907");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(2);
        int int9 = localDateTime2.getYearOfCentury();
        int int10 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.plusYears(5);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = property15.setCopy("months");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"months\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05908");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("35297");
        org.junit.Assert.assertNotNull(dateMidnight1);
    }

    @Test
    public void test05909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05909");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(42);
        int int8 = dateTime7.getHourOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.year();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromCalendarFields(calendar10);
        boolean boolean13 = localTime11.equals((java.lang.Object) 16);
        java.util.Locale locale15 = null;
        java.lang.String str16 = localTime11.toString("-1", locale15);
        org.joda.time.LocalTime localTime18 = localTime11.plusMinutes(70);
        org.joda.time.LocalTime localTime20 = localTime18.minusMillis(588);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = property9.compareTo((org.joda.time.ReadablePartial) localTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644573140272,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=20,MILLISECOND=272,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test05910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05910");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.era();
        long long40 = dateTimeField38.roundHalfFloor((long) 35272);
        java.lang.String str41 = dateTimeField38.toString();
        java.lang.String str43 = dateTimeField38.getAsText((long) 43);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property47 = localDate44.weekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay49.toDateTime(timeOfDay50, dateTimeZone51);
        int int53 = dateTime52.getCenturyOfEra();
        org.joda.time.DateTime dateTime55 = dateTime52.plusMillis((int) (byte) 0);
        int int56 = dateTime55.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(dateTimeZone57);
        org.joda.time.TimeOfDay timeOfDay59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = yearMonthDay58.toDateTime(timeOfDay59, dateTimeZone60);
        org.joda.time.YearMonthDay.Property property62 = yearMonthDay58.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property64 = yearMonthDay58.property(dateTimeFieldType63);
        org.joda.time.DateTime.Property property65 = dateTime55.property(dateTimeFieldType63);
        boolean boolean66 = localDate44.isSupported(dateTimeFieldType63);
        org.joda.time.LocalDate.Property property67 = localDate44.dayOfYear();
        org.joda.time.Chronology chronology68 = localDate44.getChronology();
        org.joda.time.LocalDate localDate70 = localDate44.minusYears(5);
        java.util.Locale locale72 = new java.util.Locale("");
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleKeys();
        java.lang.String str74 = locale72.getLanguage();
        java.lang.String str75 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDate70, locale72);
        java.lang.String str76 = locale72.getISO3Country();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-62135596800000L) + "'", long40 == (-62135596800000L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[era]" + "'", str41, "DateTimeField[era]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u897f\u66a6" + "'", str43, "\u897f\u66a6");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20 + "'", int53 == 20);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "AD" + "'", str75, "AD");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test05911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05911");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.DateTime dateTime21 = yearMonthDay16.toDateTimeAtCurrentTime();
        int int22 = property14.compareTo((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.Chronology chronology23 = yearMonthDay16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay16.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean27 = yearMonthDay16.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        int int40 = dateTimeZone38.getStandardOffset((long) 13);
        long long44 = dateTimeZone38.convertLocalToUTC(229L, false, (long) 49);
        long long46 = dateTimeZone38.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime47 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime48 = dateTime4.withZone(dateTimeZone38);
        int int49 = dateTime48.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 229L + "'", long44 == 229L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 49L + "'", long46 == 49L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 592 + "'", int49 == 592);
    }

    @Test
    public void test05912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05912");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields(calendar15);
        calendar15.setFirstDayOfWeek(2022);
        int int23 = calendar15.getMinimum(2);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.lang.String str33 = locale31.getDisplayCountry();
        int int34 = dateTimeField30.getMaximumTextLength(locale31);
        java.lang.String str35 = locale31.getDisplayScript();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale31);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone24, locale31);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long40 = dateTimeZone38.previousTransition((long) 8);
        long long42 = dateTimeZone14.getMillisKeepLocal(dateTimeZone38, (long) (byte) 0);
        int int44 = dateTimeZone38.getOffsetFromLocal(8L);
        org.joda.time.Interval interval45 = yearMonthDay1.toInterval(dateTimeZone38);
        int int47 = dateTimeZone38.getOffset((long) 35301);
        org.joda.time.DateMidnight dateMidnight48 = org.joda.time.DateMidnight.now(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight49 = org.joda.time.DateMidnight.now(dateTimeZone38);
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.year();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getVariant();
        java.lang.String str61 = dateTimeField57.getAsShortText(3, locale59);
        java.lang.String str62 = locale59.getLanguage();
        java.lang.String str63 = locale59.getISO3Country();
        java.util.Set<java.lang.String> strSet64 = locale59.getUnicodeLocaleKeys();
        java.lang.String str65 = dateTimeZone38.getName((long) 35350, locale59);
        java.lang.String str66 = locale59.getISO3Language();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1657878740370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=20,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644573140370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=20,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644573140370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=20,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 8L + "'", long40 == 8L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "3" + "'", str61, "3");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "de" + "'", str62, "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "deu" + "'", str66, "deu");
    }

    @Test
    public void test05913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05913");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minusMonths(1128);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withWeekOfWeekyear(35356);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35356 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test05914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05914");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = localTime1.plusHours((int) (short) -1);
        org.joda.time.LocalTime localTime13 = localTime1.withMillisOfDay(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) localTime1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573140436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=20,MILLISECOND=436,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:52:20.436" + "'", str4, "09:52:20.436");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573140436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=20,MILLISECOND=436,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test05915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05915");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        java.lang.String str17 = dateTimeField15.getAsText((long) 292278994);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay25.monthOfYear();
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTimeAtCurrentTime();
        int int31 = property23.compareTo((org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.Chronology chronology32 = yearMonthDay25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay25.withMonthOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.withYear(35271);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = yearMonthDay36.getFieldTypes();
        int[] intArray42 = new int[] { (byte) 0, ' ', 708, 35275 };
        int int43 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay36, intArray42);
        org.joda.time.DurationField durationField44 = dateTimeField15.getDurationField();
        org.joda.time.DurationField durationField45 = dateTimeField15.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 32, 708, 35275]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test05916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05916");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode5 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet19, filteringMode20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.UK;
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.lang.String str36 = locale34.getDisplayCountry();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale37.getDisplayCountry();
        java.util.Locale locale41 = new java.util.Locale("");
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale43 = java.util.Locale.UK;
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale26, locale27, locale28, locale29, locale30, locale32, locale34, locale37, locale41, locale42, locale43, locale44, locale45, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList49, filteringMode51);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList21, filteringMode51);
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet59, filteringMode60);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strMap62);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale67 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.lang.String>) strSet68, filteringMode69);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList70);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList70);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + filteringMode5 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode5.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode20.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str33, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode51.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode60.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode69.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test05917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05917");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = localTime1.withHourOfDay(3);
        org.joda.time.LocalTime localTime5 = localTime3.withMinuteOfHour(13);
        int int6 = localTime3.getMillisOfSecond();
        org.joda.time.LocalTime.Property property7 = localTime3.hourOfDay();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05918");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime18.toMutableDateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        boolean boolean48 = dateTime47.isBeforeNow();
        org.joda.time.DateTime dateTime50 = dateTime47.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime47.toDateTime(chronology55);
        boolean boolean57 = interval40.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime70 = interval69.getEnd();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        org.joda.time.DateTime dateTime72 = dateTime63.toDateTime(chronology71);
        boolean boolean73 = durationFieldType58.isSupported(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime56.toDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField75 = chronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology71.era();
        org.joda.time.Chronology chronology77 = chronology71.withUTC();
        org.joda.time.DateTime dateTime78 = dateTime18.withChronology(chronology71);
        org.joda.time.DateTimeField dateTimeField79 = chronology71.weekyear();
        int int81 = dateTimeField79.get((long) 563);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
    }

    @Test
    public void test05919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05919");
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getVariant();
        java.lang.String str15 = dateTimeField11.getAsShortText(3, locale13);
        long long17 = dateTimeField11.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.monthOfYear();
        int int22 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime20);
        int int23 = localDateTime20.getMillisOfSecond();
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(35436, 965, (int) (byte) 0, 0, 966, 962, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 966 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3" + "'", str15, "3");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test05920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05920");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateTime.Property property14 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        java.util.Date date17 = dateTime16.toDate();
        int int18 = date17.getDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date17);
        boolean boolean20 = date4.before(date17);
        date4.setTime((long) 35273);
        date4.setSeconds(134);
        int int25 = date4.getYear();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.add(3, 22);
        java.util.Date date30 = calendar26.getTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        int int39 = dateTime35.getYear();
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime42 = property40.roundHalfCeilingCopy();
        java.util.Date date43 = dateTime42.toDate();
        int int44 = date43.getDate();
        org.joda.time.YearMonthDay yearMonthDay45 = org.joda.time.YearMonthDay.fromDateFields(date43);
        boolean boolean46 = date30.before(date43);
        date43.setTime((long) (byte) 0);
        boolean boolean49 = date4.before(date43);
        long long50 = date4.getTime();
        date4.setTime((long) 662);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878740900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=20,MILLISECOND=900,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1657878740900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=20,MILLISECOND=900,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Jul 15 09:52:20 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 134273L + "'", long50 == 134273L);
    }

    @Test
    public void test05921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05921");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime11.property(dateTimeFieldType19);
        boolean boolean22 = localDate0.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property23 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate24 = property23.withMinimumValue();
        org.joda.time.LocalDate localDate25 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate26 = property23.roundHalfEvenCopy();
        int int27 = localDate26.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate26.property(dateTimeFieldType28);
        int int30 = localDate26.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
    }

    @Test
    public void test05922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05922");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay7.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        int int26 = dateTimeZone24.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime27 = yearMonthDay7.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withZone(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.parse("09:49:55.379", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test05923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05923");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u671d\u9c9c\u6587", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05924");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getGreatestMinimum((int) (byte) 10);
        calendar0.clear();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate(35433, 462, 38311);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 38311");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test05925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05925");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 15);
        int int2 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay1.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay4 = property3.getTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.withMillisOfSecond(35408);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35408 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test05926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05926");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 86399999);
        int int2 = dateTime1.getYearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        boolean boolean21 = dateTime20.isBeforeNow();
        org.joda.time.DateTime dateTime23 = dateTime20.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime23.getZone();
        int int28 = dateTimeZone26.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime29 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter5.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter30.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay48 = org.joda.time.YearMonthDay.fromCalendarFields(calendar44);
        calendar44.setFirstDayOfWeek(2022);
        int int52 = calendar44.getMinimum(2);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.lang.String str62 = locale60.getDisplayCountry();
        int int63 = dateTimeField59.getMaximumTextLength(locale60);
        java.lang.String str64 = locale60.getDisplayScript();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale60);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone53, locale60);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        long long69 = dateTimeZone67.previousTransition((long) 8);
        long long71 = dateTimeZone43.getMillisKeepLocal(dateTimeZone67, (long) (byte) 0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 35277, dateTimeZone67);
        long long74 = dateTimeZone67.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter30.withZone(dateTimeZone67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter75.withPivotYear((java.lang.Integer) 2010);
        org.joda.time.format.DateTimePrinter dateTimePrinter78 = dateTimeFormatter75.getPrinter();
        boolean boolean79 = dateTimeFormatter75.isPrinter();
        boolean boolean80 = dateTimeFormatter75.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = dateTime1.toString(dateTimeFormatter75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1657878741080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u65e5\u672c" + "'", str62, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644573141080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644573141080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 8L + "'", long69 == 8L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 97L + "'", long74 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNull(dateTimePrinter78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test05927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05927");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("secondOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: secondOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05928");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.plusYears(962);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval9 = interval5.gap((org.joda.time.ReadableInterval) interval8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight.Property property13 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight.Property property14 = dateMidnight11.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight16 = property14.setCopy("4");
        org.joda.time.DateMidnight dateMidnight18 = property14.addToCopy((int) 'u');
        org.joda.time.DateMidnight dateMidnight20 = property14.addWrapFieldToCopy(35281);
        org.joda.time.DateMidnight dateMidnight21 = property14.roundHalfFloorCopy();
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfEra();
        boolean boolean23 = interval9.isBefore((org.joda.time.ReadableInstant) dateMidnight21);
        int int24 = dateMidnight21.getMonthOfYear();
        boolean boolean26 = dateMidnight21.isAfter((long) 35532133);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test05929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05929");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumShortTextLength(locale5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = property3.addNoWrapToCopy(35482320);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test05930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05930");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        java.util.GregorianCalendar gregorianCalendar9 = dateTime7.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar9);
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar9);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        int int18 = dateTimeField17.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay20.withYear(22);
        int int25 = yearMonthDay20.size();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromCalendarFields(calendar26);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay30.year();
        int[] intArray34 = yearMonthDay30.getValues();
        int int35 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay20, intArray34);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfCentury(10);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay42.toDateTime(timeOfDay43, dateTimeZone44);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay48.toDateTime(timeOfDay49, dateTimeZone50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay48.monthOfYear();
        org.joda.time.DateTime dateTime53 = yearMonthDay48.toDateTimeAtCurrentTime();
        int int54 = property46.compareTo((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.Chronology chronology55 = yearMonthDay48.getChronology();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay48.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean59 = yearMonthDay48.isSupported(dateTimeFieldType58);
        boolean boolean60 = localDate40.isSupported(dateTimeFieldType58);
        java.util.Locale locale62 = java.util.Locale.UK;
        java.lang.String str63 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDate40, 9, locale62);
        int int64 = localDate40.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getRangeDurationType();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType65.getField(chronology67);
        boolean boolean69 = localDate40.isSupported(dateTimeFieldType65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay11.withField(dateTimeFieldType65, 762);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1657878741294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2022, 7, 15]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-292275054) + "'", int35 == (-292275054));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "9" + "'", str63, "9");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test05931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05931");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        org.joda.time.LocalTime localTime6 = localTime1.minusMinutes(22);
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        int int8 = dateTime7.getWeekyear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573141353,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=353,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:52:21.353" + "'", str4, "09:52:21.353");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test05932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05932");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.dayOfYear();
        int int11 = dateTimeField9.get(1644572896626L);
        long long14 = dateTimeField9.add(1657878528011L, 2049);
        long long16 = dateTimeField9.roundHalfEven(0L);
        int int18 = dateTimeField9.getMinimumValue(1243815626939000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 42 + "'", int11 == 42);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1834912128011L + "'", long14 == 1834912128011L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test05933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05933");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime6.getYear();
        org.joda.time.DateTime.Property property11 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.minusMillis(7);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded(readableDuration16, (int) '#');
        int int19 = dateTime15.getWeekyear();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar21 = dateTime15.toCalendar(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.minutes();
        org.joda.time.DurationField durationField29 = chronology27.weekyears();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.minuteOfDay();
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale33.getExtension('a');
        java.lang.String str36 = dateTimeField31.getAsText(4, locale33);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale38.getDisplayScript();
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = locale38.toLanguageTag();
        java.lang.String str43 = locale37.getDisplayVariant(locale38);
        java.lang.String str44 = locale33.getDisplayLanguage(locale37);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("de");
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = locale46.getDisplayLanguage(locale47);
        java.lang.String str50 = locale37.getDisplayVariant(locale46);
        java.lang.String str51 = locale20.getDisplayScript(locale46);
        java.util.Locale.Builder builder52 = builder0.setLocale(locale20);
        java.lang.String str53 = locale20.getDisplayName();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=9223371988912341377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=292278993,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "4" + "'", str36, "4");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh-TW" + "'", str41, "zh-TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh-TW" + "'", str42, "zh-TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u6587" + "'", str44, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Deutsch" + "'", str49, "Deutsch");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(builder52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str53, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
    }

    @Test
    public void test05934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05934");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes(35270);
        int int19 = localDateTime14.size();
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime23.getFieldType((-46800000));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -46800000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test05935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        java.lang.String str7 = dateTimeField5.getAsShortText((long) 35301);
        int int10 = dateTimeField5.getDifference((long) 211, (long) 477);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test05936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05936");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours((int) (byte) 100);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration25 = duration11.toDuration();
        long long26 = duration11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.year();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getVariant();
        java.lang.String str44 = dateTimeField40.getAsShortText(3, locale42);
        int int45 = dateTimeField40.getMaximumValue();
        long long48 = dateTimeField40.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) long48, dateTimeZone49);
        boolean boolean51 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime50.getCenturyOfEra();
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.yearOfEra();
        boolean boolean56 = duration11.equals((java.lang.Object) dateTimeField55);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = dateTimeField55.set((long) 871, "11.02.2022 09:48:33");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"11.02.2022 09:48:33\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 33L + "'", long26 == 33L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "3" + "'", str44, "3");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05937");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        int int10 = dateTimeField5.getMaximumValue();
        long long12 = dateTimeField5.roundHalfFloor((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        int int17 = localDateTime15.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withFieldAdded(durationFieldType20, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusSeconds(93);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusHours(35280);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis(203);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getVariant();
        java.lang.String str39 = dateTimeField35.getAsShortText(3, locale37);
        java.lang.String str40 = locale37.getLanguage();
        java.lang.String str41 = locale37.getISO3Country();
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale37.getDisplayCountry(locale42);
        java.lang.String str44 = locale37.getCountry();
        java.lang.String str45 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime27, locale37);
        int int46 = dateTimeField5.getMinimumValue();
        long long49 = dateTimeField5.addWrapField((long) 60, 35350);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3" + "'", str39, "3");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "de" + "'", str40, "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-57" + "'", str45, "-57");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-292275054) + "'", int46 == (-292275054));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1115538220800060L + "'", long49 == 1115538220800060L);
    }

    @Test
    public void test05938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05938");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(35335, 35474, 35532148, 526, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 526 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05939");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        int int12 = property9.get();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withDayOfYear((int) '#');
        int int17 = dateMidnight14.getWeekOfWeekyear();
        int int18 = dateMidnight14.getWeekyear();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval29 = interval21.overlap((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration30 = interval29.toDuration();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusHours((int) (byte) 100);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableDuration) duration30);
        int int45 = property9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.YearMonthDay yearMonthDay46 = dateMidnight14.toYearMonthDay();
        org.joda.time.DateMidnight.Property property47 = dateMidnight14.yearOfEra();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DurationField durationField56 = chronology54.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) 271, chronology54);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.yearOfEra();
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Calendar calendar61 = dateMidnight58.toCalendar(locale60);
        java.lang.String str62 = locale60.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight63 = property47.setCopy("DateTimeField[era]", locale60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[era]\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
    }

    @Test
    public void test05940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05940");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateTime.Property property14 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        java.util.Date date17 = dateTime16.toDate();
        int int18 = date17.getDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date17);
        boolean boolean20 = date4.before(date17);
        date4.setTime((long) 35273);
        date4.setSeconds(134);
        int int25 = date4.getDay();
        date4.setDate(461);
        java.time.Instant instant28 = date4.toInstant();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878741598,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=598,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Tue Apr 06 00:02:14 UTC 1971");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test05941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05941");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusYears(387);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay5.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay5.minusYears((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay5.minusYears(0);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.dayOfMonth();
        java.lang.String str14 = property13.getAsShortText();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "11" + "'", str14, "11");
    }

    @Test
    public void test05942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05942");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.util.Locale locale5 = null;
        java.lang.String str6 = localTime1.toString("-1", locale5);
        org.joda.time.LocalTime localTime8 = localTime1.plusMillis(51);
        int int9 = localTime8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573141725,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=725,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1" + "'", str6, "-1");
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
    }

    @Test
    public void test05943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05943");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 86399);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test05944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05944");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(35308956, 35399726, 35297);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35399726 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05945");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = property5.getAsShortText(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale14.getLanguage();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e8c\u6708" + "'", str15, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
    }

    @Test
    public void test05946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05946");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 432, (long) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05947");
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.year();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 16, chronology9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.Interval interval23 = interval15.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str27 = interval26.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval38 = interval30.overlap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        boolean boolean44 = dateTime43.isBeforeNow();
        org.joda.time.DateTime dateTime46 = dateTime43.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour((int) (short) 0);
        boolean boolean49 = interval38.contains((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = interval26.contains((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Interval interval52 = interval26.withPeriodBeforeEnd(readablePeriod51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval26.toPeriod(periodType53);
        org.joda.time.Interval interval55 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        long long58 = chronology9.add((org.joda.time.ReadablePeriod) period54, 0L, 35271);
        org.joda.time.DateTimeField dateTimeField59 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = chronology9.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(379, 2698, 35435991, 159, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 379 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str27, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1163943L + "'", long58 == 1163943L);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test05948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05948");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        int int14 = dateTime10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateTime10.toDateMidnight();
        org.joda.time.DateTime dateTime16 = yearMonthDay2.toDateTime((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withYearOfEra(35297719);
        org.joda.time.LocalDate localDate19 = dateMidnight18.toLocalDate();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withCenturyOfEra(706);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay29.monthOfYear();
        org.joda.time.DateTime dateTime34 = yearMonthDay29.toDateTimeAtCurrentTime();
        int int35 = property27.compareTo((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.Chronology chronology36 = yearMonthDay29.getChronology();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay29.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean40 = yearMonthDay29.isSupported(dateTimeFieldType39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay42.toDateTime(timeOfDay43, dateTimeZone44);
        boolean boolean46 = dateTime45.isBeforeNow();
        org.joda.time.DateTime dateTime48 = dateTime45.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime50 = dateTime48.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime48.getZone();
        int int53 = dateTimeZone51.getStandardOffset((long) 13);
        long long57 = dateTimeZone51.convertLocalToUTC(229L, false, (long) 49);
        long long59 = dateTimeZone51.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime60 = yearMonthDay29.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight62 = org.joda.time.DateMidnight.now(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight18.withZoneRetainFields(dateTimeZone51);
        long long65 = dateTimeZone51.previousTransition((long) 35);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 818, dateTimeZone51);
        java.lang.String str67 = dateTimeZone51.getID();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 229L + "'", long57 == 229L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 49L + "'", long59 == 49L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 35L + "'", long65 == 35L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
    }

    @Test
    public void test05949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05949");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfYear(10);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        org.joda.time.LocalDate localDate7 = property5.addToCopy(35297719);
        org.joda.time.LocalDate localDate9 = property5.setCopy(43);
        org.joda.time.LocalDate localDate11 = localDate9.withCenturyOfEra(22);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        boolean boolean21 = dateTime20.isBeforeNow();
        org.joda.time.DateTime dateTime23 = dateTime20.withMonthOfYear((int) (byte) 1);
        int int24 = dateTime20.getYear();
        org.joda.time.DateTime.Property property25 = dateTime20.weekyear();
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property25.roundHalfCeilingCopy();
        java.util.Date date28 = dateTime27.toDate();
        int int29 = date28.getDate();
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromDateFields(date28);
        org.joda.time.DateTime dateTime31 = yearMonthDay30.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime33 = dateTime31.withYear(35297719);
        int int34 = dateMidnight15.compareTo((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Calendar calendar38 = dateTime33.toCalendar(locale35);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval49 = interval41.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration50 = interval49.toDuration();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTime(timeOfDay53, dateTimeZone54);
        boolean boolean56 = dateTime55.isBeforeNow();
        org.joda.time.DateTime dateTime58 = dateTime55.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime62 = dateTime60.minusHours((int) (byte) 100);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime60);
        long long64 = duration50.getMillis();
        org.joda.time.Period period65 = duration50.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay(dateTimeZone66);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay67.toDateTime(timeOfDay68, dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        boolean boolean76 = dateTime75.isBeforeNow();
        org.joda.time.DateTime dateTime78 = dateTime75.withMonthOfYear((int) (byte) 1);
        int int79 = dateTime75.getYear();
        org.joda.time.DateMidnight dateMidnight80 = dateTime75.toDateMidnight();
        org.joda.time.DateTime dateTime81 = yearMonthDay67.toDateTime((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime84 = dateTime81.withFieldAdded(durationFieldType82, 6);
        int int85 = period65.get(durationFieldType82);
        org.joda.time.DateTime dateTime86 = dateTime33.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.LocalDate localDate87 = localDate11.plus((org.joda.time.ReadablePeriod) period65);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644573141942,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=942,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u97d3\u56fd\u8a9e" + "'", str37, "\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1113826257193941942,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=35297719,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=21,MILLISECOND=942,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 33L + "'", long64 == 33L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localDate87);
    }

    @Test
    public void test05950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05950");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        int int14 = property5.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property5.getFieldType();
        org.joda.time.DateTimeField dateTimeField16 = property5.getField();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        int int22 = dateTime21.getCenturyOfEra();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMillis((int) (byte) 0);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateTime21);
        boolean boolean26 = property5.equals((java.lang.Object) localDate25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay35.withYear(22);
        int int40 = yearMonthDay35.size();
        int int41 = yearMonthDay35.size();
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay35.dayOfMonth();
        int int43 = yearMonthDay35.getDayOfMonth();
        int int44 = yearMonthDay35.getDayOfMonth();
        int[] intArray47 = new int[] { 35275, 35289 };
        int int48 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay35, intArray47);
        int[] intArray49 = yearMonthDay35.getValues();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(dateTimeZone50);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.monthOfYear();
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now();
        long long54 = property52.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(dateTimeZone55);
        boolean boolean57 = dateMidnight53.isAfter((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight53.minusWeeks(4);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance();
        calendar60.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay64 = org.joda.time.YearMonthDay.fromCalendarFields(calendar60);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay64.plusYears((int) '4');
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate69 = localDate67.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property70 = localDate67.weekyear();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay72.monthOfYear();
        org.joda.time.DateTime dateTime77 = yearMonthDay72.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay(dateTimeZone78);
        org.joda.time.TimeOfDay timeOfDay80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = yearMonthDay79.toDateTime(timeOfDay80, dateTimeZone81);
        boolean boolean83 = dateTime82.isBeforeNow();
        org.joda.time.DateTime dateTime85 = dateTime82.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean87 = dateTime85.isSupported(dateTimeFieldType86);
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType86.getRangeDurationType();
        org.joda.time.DateTime.Property property89 = dateTime77.property(dateTimeFieldType86);
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType86.getRangeDurationType();
        int int91 = localDate67.get(dateTimeFieldType86);
        int int92 = yearMonthDay64.get(dateTimeFieldType86);
        org.joda.time.DateMidnight.Property property93 = dateMidnight53.property(dateTimeFieldType86);
        org.joda.time.YearMonthDay.Property property94 = yearMonthDay35.property(dateTimeFieldType86);
        boolean boolean95 = localDate25.isSupported(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 11 + "'", int44 == 11);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[35275, 35289]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 86399999 + "'", int48 == 86399999);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1657878742019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=19,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 11 + "'", int91 == 11);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 15 + "'", int92 == 15);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test05951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05951");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime9.getZone();
        int int14 = dateTimeZone12.getStandardOffset((long) 13);
        long long18 = dateTimeZone12.convertLocalToUTC(229L, false, (long) 49);
        int int20 = dateTimeZone12.getOffset((-968634479000L));
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 43, (long) 387, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        boolean boolean27 = dateTime26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = dateTime26.withMonthOfYear((int) (byte) 1);
        int int30 = dateTime26.getYear();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime33 = dateTime26.withDurationAdded(readableDuration31, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, readablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        boolean boolean41 = dateTime40.isBeforeNow();
        org.joda.time.DateTime dateTime43 = dateTime40.withMonthOfYear((int) (byte) 1);
        int int44 = dateTime40.getYear();
        org.joda.time.DateTime.Property property45 = dateTime40.weekyear();
        boolean boolean46 = interval35.equals((java.lang.Object) dateTime40);
        int int47 = dateTime40.getMinuteOfDay();
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime();
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfMonth();
        int int50 = dateTime48.getMinuteOfDay();
        org.joda.time.DateTime dateTime52 = dateTime48.minus(0L);
        boolean boolean53 = interval21.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTime(timeOfDay56, dateTimeZone57);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay55.monthOfYear();
        java.lang.String str60 = property59.toString();
        java.lang.String str61 = property59.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property59.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime52.withField(dateTimeFieldType62, 538);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 538 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 229L + "'", long18 == 229L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 592 + "'", int47 == 592);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 592 + "'", int50 == 592);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[monthOfYear]" + "'", str60, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "monthOfYear" + "'", str61, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test05952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05952");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = property6.withMaximumValue();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = locale8.getScript();
        int int11 = property6.getMaximumShortTextLength(locale8);
        java.lang.String str12 = property6.getAsText();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-KR" + "'", str9, "ko-KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "59" + "'", str12, "59");
    }

    @Test
    public void test05953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05953");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int6 = calendar0.getActualMaximum(10);
        calendar0.add((int) (byte) 10, 0);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar10);
        calendar10.setFirstDayOfWeek(2022);
        int int18 = calendar10.getMinimum(2);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay21.monthOfYear();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        int int27 = property25.getMaximumTextLength(locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone19, locale26);
        calendar28.set(371, (int) (short) 10, (int) (byte) 10, 857, 35280);
        calendar28.set(876, 11, 292278994, 453, (int) ' ');
        boolean boolean41 = calendar0.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878742148,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=148,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1657878742148,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=148,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=876,MONTH=11,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=292278994,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=453,MINUTE=32,SECOND=22,MILLISECOND=148,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test05954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05954");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(2);
        int int9 = localDateTime2.getYearOfCentury();
        int int10 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusMinutes(42);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean14 = localDateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusSeconds(22);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((-52));
        org.joda.time.LocalDateTime localDateTime20 = property17.withMinimumValue();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfDay();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) localTime23);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test05955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05955");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime9 = localTime6.minusHours(49);
        org.joda.time.LocalTime.Property property10 = localTime6.minuteOfHour();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        int int12 = property10.getMaximumTextLength(locale11);
        org.joda.time.LocalTime localTime13 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573142240,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test05956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05956");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime7 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(100);
        int int10 = dateTime7.getYear();
        int int11 = dateTime7.getEra();
        org.joda.time.DateTime dateTime13 = dateTime7.plusHours(111);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 182);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTime13.toString(dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test05957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05957");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        int int6 = timeOfDay5.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.withMillisOfSecond(17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = timeOfDay5.getFieldType(869);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 869");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 274 + "'", int6 == 274);
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test05958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05958");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime4.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime4.withDayOfMonth(462);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 462 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05959");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(679, 2, 35518883);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35518883 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05960");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("26");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '26' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05961");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        calendar0.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date6 = calendar0.getTime();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getYear();
        java.lang.String str9 = date6.toLocaleString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878742378,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=378,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Jul 15 09:52:22 UTC 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 122 + "'", int8 == 122);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022/07/15 9:52:22" + "'", str9, "2022/07/15 9:52:22");
    }

    @Test
    public void test05962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05962");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        long long5 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone6 = calendar0.getTimeZone();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        boolean boolean8 = calendar0.isWeekDateSupported();
        boolean boolean9 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878742410,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=410,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:52:22 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1657878742410L + "'", long5 == 1657878742410L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test05963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05963");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekyear();
        org.joda.time.LocalDate localDate6 = property5.roundCeilingCopy();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getVariant();
        java.lang.String str16 = dateTimeField12.getAsShortText(3, locale14);
        long long18 = dateTimeField12.roundHalfCeiling((long) 8);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = dateTimeField12.getAsShortText(434, locale20);
        int int22 = property5.getMaximumTextLength(locale20);
        java.lang.String str23 = property5.getAsText();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "434" + "'", str21, "434");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2010" + "'", str23, "2010");
    }

    @Test
    public void test05964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05964");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 999);
        org.joda.time.LocalDate.Property property2 = localDate1.year();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DurationField durationField10 = chronology8.weekyears();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DurationField durationField12 = chronology8.days();
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 134, chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((java.lang.Object) localDate1, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test05965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05965");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        int int3 = localDate0.size();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        int int14 = localDate0.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate localDate16 = localDate0.withDayOfYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        int int25 = dateTime21.getYear();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime21.withDurationAdded(readableDuration26, (int) (short) 100);
        int int29 = dateTime21.getYear();
        org.joda.time.DateTime.Property property30 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime31 = property30.getDateTime();
        org.joda.time.DateTime dateTime32 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property33 = dateTime31.millisOfDay();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("months");
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getVariant();
        java.lang.String str46 = dateTimeField42.getAsShortText(3, locale44);
        java.lang.String str47 = locale44.getLanguage();
        java.lang.String str48 = locale44.getISO3Country();
        java.lang.String str49 = locale36.getDisplayScript(locale44);
        java.lang.String str50 = dateTime31.toString("09:50:02.936", locale44);
        java.lang.String str51 = locale44.getDisplayName();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "months");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "3" + "'", str46, "3");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "09:50:02.936" + "'", str50, "09:50:02.936");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str51, "\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test05966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05966");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(2);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        org.joda.time.DateTime.Property property14 = dateTime12.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property14.setCopy("09:50:42.801");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"09:50:42.801\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test05967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05967");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        long long5 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone6 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.lang.String str13 = yearMonthDay8.toString("\u4e8c\u6708", locale10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone6, locale10);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields(calendar14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        int int25 = dateTime21.getYear();
        org.joda.time.DateTime.Property property26 = dateTime21.weekyear();
        org.joda.time.DateTime dateTime27 = property26.withMaximumValue();
        boolean boolean28 = dateTime27.isBeforeNow();
        org.joda.time.DateTime dateTime30 = dateTime27.minusMillis(7);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded(readableDuration31, (int) '#');
        int int34 = dateTime30.getWeekyear();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar36 = dateTime30.toCalendar(locale35);
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.minutes();
        org.joda.time.DurationField durationField44 = chronology42.weekyears();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.minuteOfDay();
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str50 = locale48.getExtension('a');
        java.lang.String str51 = dateTimeField46.getAsText(4, locale48);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale53.getDisplayScript();
        java.lang.String str56 = locale53.toLanguageTag();
        java.lang.String str57 = locale53.toLanguageTag();
        java.lang.String str58 = locale52.getDisplayVariant(locale53);
        java.lang.String str59 = locale48.getDisplayLanguage(locale52);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("de");
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        boolean boolean63 = locale62.hasExtensions();
        java.lang.String str64 = locale61.getDisplayLanguage(locale62);
        java.lang.String str65 = locale52.getDisplayVariant(locale61);
        java.lang.String str66 = locale35.getDisplayScript(locale61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = yearMonthDay15.toString("2022-02-11T09:48:24.283Z", locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878742549,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=549,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:52:22 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1657878742549L + "'", long5 == 1657878742549L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str11, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e8c\u6708" + "'", str13, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644573142549,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=549,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=9223371988912342542,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=292278993,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=542,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "4" + "'", str51, "4");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zh-TW" + "'", str56, "zh-TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh-TW" + "'", str57, "zh-TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u6587" + "'", str59, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Deutsch" + "'", str64, "Deutsch");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test05968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05968");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.millisOfDay();
        int int9 = dateTimeField8.getMinimumValue();
        int int11 = dateTimeField8.get((long) (short) 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test05969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05969");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str19 = interval18.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval30 = interval22.overlap((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour((int) (short) 0);
        boolean boolean41 = interval30.contains((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean42 = interval18.contains((org.joda.time.ReadableInterval) interval30);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Interval interval44 = interval18.withPeriodBeforeEnd(readablePeriod43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval18.toPeriod(periodType45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.lang.String str48 = locale47.getLanguage();
        boolean boolean49 = interval18.equals((java.lang.Object) locale47);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.Interval interval60 = interval52.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Duration duration61 = interval60.toDuration();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        boolean boolean67 = dateTime66.isBeforeNow();
        org.joda.time.DateTime dateTime69 = dateTime66.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = dateTime69.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime73 = dateTime71.minusHours((int) (byte) 100);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration75 = duration61.toDuration();
        org.joda.time.Interval interval76 = interval18.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval77 = interval76.toInterval();
        org.joda.time.Period period78 = interval77.toPeriod();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay14.plus((org.joda.time.ReadablePeriod) period78);
        java.lang.String str80 = yearMonthDay79.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str19, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ja" + "'", str48, "ja");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-01-11" + "'", str80, "2022-01-11");
    }

    @Test
    public void test05970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05970");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        int int5 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(4, 35273);
        int int9 = calendar0.getWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=22989174742671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2698,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=182,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=671,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:52:22 UTC 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2698 + "'", int9 == 2698);
    }

    @Test
    public void test05971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05971");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(dateTimeZone6);
        int int8 = dateTime7.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        int int13 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusYears(2022);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        int int20 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withFieldAdded(durationFieldType23, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours(203);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int31 = localDateTime29.get(dateTimeFieldType30);
        int int32 = dateTime7.get(dateTimeFieldType30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.DurationField durationField40 = chronology38.weekyears();
        org.joda.time.DurationField durationField41 = chronology38.millis();
        org.joda.time.DurationField durationField42 = chronology38.months();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 70, chronology38);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField45 = chronology38.clockhourOfHalfday();
        org.joda.time.DateTime dateTime46 = dateTime7.toDateTime(chronology38);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        boolean boolean49 = dateTime47.isEqual((long) 35279);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 358 + "'", int31 == 358);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05972");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMonths(20);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withYear(32772);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.plusMinutes(901);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(85);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05973");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) ' ', 764, 35452739);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05974");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar9);
        boolean boolean12 = localTime10.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withFields((org.joda.time.ReadablePartial) localTime10);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight8.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withWeekOfWeekyear(10);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minus((long) 764);
        boolean boolean21 = languageRange1.equals((java.lang.Object) 764);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "utc" + "'", str2, "utc");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "utc" + "'", str6, "utc");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573142815,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=815,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test05975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05975");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder33.setWeekDate(871, 37, 444);
        java.util.Locale locale39 = new java.util.Locale("Fri Feb 11 09:47:52 UTC 2022");
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = locale39.getDisplayScript(locale40);
        java.util.Calendar.Builder builder42 = builder37.setLocale(locale39);
        java.util.Calendar.Builder builder46 = builder42.setTimeOfDay(368, 746, 35297);
        java.util.Calendar.Builder builder50 = builder46.setWeekDate(35356782, 315, 35333459);
        java.util.Calendar.Builder builder52 = builder50.setLenient(false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878742833,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=833,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573142833,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=833,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573142833,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=22,MILLISECOND=833,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals(locale39.toString(), "fri feb 11 09:47:52 utc 2022");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test05976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05976");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        int int7 = localDateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusYears(2022);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        boolean boolean13 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test05977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05977");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight6 = property4.setCopy("4");
        org.joda.time.DateMidnight dateMidnight8 = property4.addToCopy((int) 'u');
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 16, chronology14);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Interval interval28 = interval20.overlap((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str32 = interval31.toString();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval43 = interval35.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone44);
        org.joda.time.TimeOfDay timeOfDay46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay45.toDateTime(timeOfDay46, dateTimeZone47);
        boolean boolean49 = dateTime48.isBeforeNow();
        org.joda.time.DateTime dateTime51 = dateTime48.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime53 = dateTime51.withMinuteOfHour((int) (short) 0);
        boolean boolean54 = interval43.contains((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean55 = interval31.contains((org.joda.time.ReadableInterval) interval43);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Interval interval57 = interval31.withPeriodBeforeEnd(readablePeriod56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = interval31.toPeriod(periodType58);
        org.joda.time.Interval interval60 = interval28.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period59);
        long long63 = chronology14.add((org.joda.time.ReadablePeriod) period59, 0L, 35271);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight8.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.monthOfYear();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.minusWeeks(33);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str32, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1163943L + "'", long63 == 1163943L);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test05978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05978");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 21, (long) 307);
    }

    @Test
    public void test05979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05979");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTimeFormatter6.parseDateTime("09:51:36.347");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test05980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05980");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfSecond(743);
        org.joda.time.LocalTime localTime10 = localTime6.plusSeconds(522);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours(518);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((java.lang.Object) localTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573143033,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=33,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test05981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05981");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = dateTimeField5.getAsShortText(434, locale13);
        boolean boolean15 = dateTimeField5.isLenient();
        int int16 = dateTimeField5.getMinimumValue();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar17);
        boolean boolean20 = localTime18.equals((java.lang.Object) 16);
        java.lang.String str21 = localTime18.toString();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromCalendarFields(calendar22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property25 = localTime23.property(dateTimeFieldType24);
        org.joda.time.LocalTime.Property property26 = localTime18.property(dateTimeFieldType24);
        org.joda.time.LocalTime localTime28 = localTime18.plusHours((int) (short) -1);
        org.joda.time.LocalTime localTime30 = localTime28.minusMinutes(3);
        org.joda.time.LocalTime localTime32 = localTime28.minusSeconds(44);
        int int33 = localTime32.size();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.minutes();
        org.joda.time.DurationField durationField42 = chronology40.weekyears();
        org.joda.time.DurationField durationField43 = chronology40.millis();
        org.joda.time.DurationField durationField44 = chronology40.months();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 70, chronology40);
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(0L, chronology40);
        int int47 = timeOfDay46.getMinuteOfHour();
        int[] intArray48 = timeOfDay46.getValues();
        int int49 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localTime32, intArray48);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = dateTimeField5.set((long) 126, "09:50:05.836");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"09:50:05.836\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "434" + "'", str14, "434");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644573143050,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=50,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "09:52:23.050" + "'", str21, "09:52:23.050");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644573143050,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=50,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-292275054) + "'", int49 == (-292275054));
    }

    @Test
    public void test05982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05982");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.property(dateTimeFieldType6);
        int int8 = yearMonthDay1.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay1.minusMonths(2000);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay1.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05983");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        int int44 = dateTime43.getYearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime43.withYearOfEra((int) (byte) 1);
        boolean boolean47 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime43);
        int int48 = dateTime43.getCenturyOfEra();
        org.joda.time.DateTime dateTime50 = dateTime43.plusMillis((int) (byte) 100);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.Interval interval61 = interval53.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration62 = interval61.toDuration();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(dateTimeZone63);
        org.joda.time.TimeOfDay timeOfDay65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = yearMonthDay64.toDateTime(timeOfDay65, dateTimeZone66);
        boolean boolean68 = dateTime67.isBeforeNow();
        org.joda.time.DateTime dateTime70 = dateTime67.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime72 = dateTime70.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime74 = dateTime72.minusHours((int) (byte) 100);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime79 = interval78.getEnd();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime84 = interval83.getEnd();
        org.joda.time.Chronology chronology85 = interval83.getChronology();
        org.joda.time.Interval interval86 = interval78.overlap((org.joda.time.ReadableInterval) interval83);
        org.joda.time.Duration duration87 = interval86.toDuration();
        boolean boolean88 = duration62.isLongerThan((org.joda.time.ReadableDuration) duration87);
        org.joda.time.Interval interval89 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTime dateTime90 = interval89.getStart();
        org.joda.time.Period period91 = interval89.toPeriod();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test05984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05984");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = builder4.build();
        java.util.Calendar.Builder builder38 = builder4.setTimeOfDay(31, 35405, 35356782);
        java.util.Calendar calendar39 = builder38.build();
        java.util.Calendar.Builder builder43 = builder38.setDate(62, 17, 897);
        java.util.Calendar.Builder builder47 = builder43.setTimeOfDay(803, 0, 53);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878743206,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=206,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573143206,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=206,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573143206,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=206,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-182700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=37592682000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1971,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=71,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=24,SECOND=42,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test05985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05985");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(19);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property11 = localDate9.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate9.withDayOfYear(35514);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35514 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05986");
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime15.toDateTime(chronology23);
        boolean boolean25 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate26 = dateTime24.toLocalDate();
        int int27 = localDate26.getEra();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        org.joda.time.DateTime dateTime39 = localDate26.toDateTimeAtMidnight(dateTimeZone38);
        java.lang.String str40 = dateTimeZone38.toString();
        int int42 = dateTimeZone38.getOffsetFromLocal((long) 35381);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(0, (int) (short) 100, 35513, (-798222), 35324, 706, dateTimeZone38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -798222 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test05987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05987");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        int int7 = property3.getDifference((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime.Property property8 = dateTime6.hourOfDay();
        java.lang.String str9 = property8.getAsString();
        long long10 = property8.remainder();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9" + "'", str9, "9");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3143292L + "'", long10 == 3143292L);
    }

    @Test
    public void test05988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05988");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.lang.String str11 = locale6.getDisplayName();
        java.lang.String str12 = locale6.getScript();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str11, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test05989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05989");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withCenturyOfEra(22);
        int int9 = dateMidnight6.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property10 = dateMidnight6.year();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight6.toYearMonthDay();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        int int28 = dateTime24.getYear();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime24.withDurationAdded(readableDuration29, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, readablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTime(timeOfDay36, dateTimeZone37);
        boolean boolean39 = dateTime38.isBeforeNow();
        org.joda.time.DateTime dateTime41 = dateTime38.withMonthOfYear((int) (byte) 1);
        int int42 = dateTime38.getYear();
        org.joda.time.DateTime.Property property43 = dateTime38.weekyear();
        boolean boolean44 = interval33.equals((java.lang.Object) dateTime38);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval55 = interval47.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str59 = interval58.toString();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.Interval interval70 = interval62.overlap((org.joda.time.ReadableInterval) interval67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        boolean boolean76 = dateTime75.isBeforeNow();
        org.joda.time.DateTime dateTime78 = dateTime75.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = dateTime78.withMinuteOfHour((int) (short) 0);
        boolean boolean81 = interval70.contains((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean82 = interval58.contains((org.joda.time.ReadableInterval) interval70);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Interval interval84 = interval58.withPeriodBeforeEnd(readablePeriod83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = interval58.toPeriod(periodType85);
        org.joda.time.Interval interval87 = interval55.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period86);
        org.joda.time.MutablePeriod mutablePeriod88 = period86.toMutablePeriod();
        org.joda.time.Interval interval89 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period86);
        org.joda.time.Period period90 = period86.toPeriod();
        int[] intArray93 = chronology16.get((org.joda.time.ReadablePeriod) period86, (long) 423, 1656633600000L);
        org.joda.time.PeriodType periodType94 = period86.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period86, 270);
        org.joda.time.DateTime dateTime97 = yearMonthDay96.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str59, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(mutablePeriod88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[52, 5, 4, 1, 23, 59, 59, 577]");
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(yearMonthDay96);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test05990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05990");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusWeeks(86399);
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(462);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtCurrentTime(dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((-2022));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2022 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test05991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05991");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfSecond();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 992, chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.weekyearOfCentury();
        long long13 = dateTimeField11.roundFloor((long) 35408930);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test05992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05992");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.TimeOfDay timeOfDay12 = property10.withMaximumValue();
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay14 = property13.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar16);
        org.joda.time.DateTime dateTime18 = localTime17.toDateTimeToday();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfDay(0);
        org.joda.time.LocalTime localTime22 = localTime20.plusHours((int) (byte) 1);
        int int23 = property13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.LocalTime localTime25 = localTime22.plusMinutes(257);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.plusHours(20);
        org.joda.time.Chronology chronology29 = timeOfDay26.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((java.lang.Object) localTime22, chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(2007, 927, 135, 0, 434, 808, 2030, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 434 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644573143584,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=584,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test05993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05993");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateMidnight dateMidnight6 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfFloorCopy();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        boolean boolean27 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDate localDate28 = dateTime26.toLocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfCentury(20);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight7.withFields((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateMidnight.Property property32 = dateMidnight7.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight33 = property32.getDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTime(timeOfDay36, dateTimeZone37);
        boolean boolean39 = dateTime38.isBeforeNow();
        org.joda.time.DateTime dateTime41 = dateTime38.withMonthOfYear((int) (byte) 1);
        int int42 = dateTime38.getYear();
        org.joda.time.DateTime.Property property43 = dateTime38.weekyear();
        org.joda.time.DateTime dateTime44 = property43.withMaximumValue();
        org.joda.time.DateTime dateTime46 = dateTime44.withYear(2);
        org.joda.time.DateTime.Property property47 = dateTime46.secondOfDay();
        int int48 = dateTime46.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
    }

    @Test
    public void test05994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05994");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDate.Property property6 = localDate2.weekOfWeekyear();
        int int7 = localDate2.getWeekOfWeekyear();
        int int8 = localDate2.getEra();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str12 = interval11.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.Interval interval23 = interval15.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        boolean boolean29 = dateTime28.isBeforeNow();
        org.joda.time.DateTime dateTime31 = dateTime28.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime31.withMinuteOfHour((int) (short) 0);
        boolean boolean34 = interval23.contains((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean35 = interval11.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime36 = interval23.getStart();
        org.joda.time.DateTime dateTime38 = dateTime36.plusMillis((int) '#');
        int int39 = dateTime38.getWeekOfWeekyear();
        org.joda.time.Chronology chronology40 = dateTime38.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getDurationType();
        java.lang.String str43 = dateTimeFieldType41.getName();
        int int44 = dateTime38.get(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate46 = localDate2.withField(dateTimeFieldType41, 354);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 354 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 42 + "'", int3 == 42);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str12, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "dayOfMonth" + "'", str43, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test05995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05995");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMinuteOfHour(4);
        int[] intArray12 = localDateTime11.getValues();
        int int13 = localDateTime11.size();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-52, 1, 1, 240003]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test05996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05996");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMillis((int) (byte) 0);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay17.property(dateTimeFieldType22);
        org.joda.time.DateTime.Property property24 = dateTime14.property(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType22.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DurationField durationField29 = durationFieldType25.getField(chronology28);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(chronology28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((-62100742311688L), chronology28);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        int int38 = dateTime37.getCenturyOfEra();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMillis((int) (byte) 0);
        int int41 = dateTime40.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay43.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay43.property(dateTimeFieldType48);
        org.joda.time.DateTime.Property property50 = dateTime40.property(dateTimeFieldType48);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType48.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone52);
        org.joda.time.Chronology chronology54 = yearMonthDay53.getChronology();
        org.joda.time.DurationField durationField55 = durationFieldType51.getField(chronology54);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance();
        calendar56.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay60 = org.joda.time.YearMonthDay.fromCalendarFields(calendar56);
        calendar56.setFirstDayOfWeek(2022);
        int int64 = calendar56.getMinimum(2);
        java.util.TimeZone timeZone65 = calendar56.getTimeZone();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime69 = interval68.getEnd();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.year();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleKeys();
        java.lang.String str74 = locale72.getDisplayCountry();
        int int75 = dateTimeField71.getMaximumTextLength(locale72);
        java.lang.String str76 = locale72.getDisplayScript();
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(locale72);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone65, locale72);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        long long81 = dateTimeZone79.previousTransition((long) 8);
        java.lang.String str82 = dateTimeZone79.toString();
        java.util.TimeZone timeZone83 = dateTimeZone79.toTimeZone();
        org.joda.time.Chronology chronology84 = chronology54.withZone(dateTimeZone79);
        org.joda.time.Chronology chronology85 = chronology28.withZone(dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight86 = new org.joda.time.DateMidnight((-62100742261781L), chronology28);
        org.joda.time.DateTimeField dateTimeField87 = chronology28.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime(35399726, 13, 37, 271, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35399726 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1657878743704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=704,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u65e5\u672c" + "'", str74, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(calendar77);
// flaky:         org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1644573143704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=704,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=1644573143704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=704,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 8L + "'", long81 == 8L);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Etc/UTC" + "'", str82, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test05997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05997");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        calendar1.setFirstDayOfWeek(2022);
        int int9 = calendar1.getMinimum(2);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 271, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1657878743754,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=754,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test05998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05998");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar12);
        calendar12.setFirstDayOfWeek(2022);
        int int20 = calendar12.getMinimum(2);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.lang.String str30 = locale28.getDisplayCountry();
        int int31 = dateTimeField27.getMaximumTextLength(locale28);
        java.lang.String str32 = locale28.getDisplayScript();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long37 = dateTimeZone35.previousTransition((long) 8);
        long long39 = dateTimeZone11.getMillisKeepLocal(dateTimeZone35, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight40 = yearMonthDay0.toDateMidnight(dateTimeZone11);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657878743770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c" + "'", str30, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573143770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644573143770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8L + "'", long37 == 8L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test05999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05999");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setVariant("09:48:26.613");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 09:48:26.613 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test06000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test06000");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        long long8 = dateTimeField5.getDifferenceAsLong(1644572909028L, (long) 35337);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.minutes();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 35271, chronology14);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusYears(0);
        java.lang.String str20 = localDateTime16.toString();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.minutes();
        org.joda.time.DurationField durationField28 = chronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        java.util.Locale locale34 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        java.lang.String str35 = dateTimeField29.getAsText(185L, locale34);
        java.lang.String str36 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime16, 35452739, locale34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withDurationAdded(readableDuration42, 440);
        int int45 = localDateTime41.getCenturyOfEra();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay51 = org.joda.time.YearMonthDay.fromCalendarFields(calendar47);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.plusYears((int) '4');
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property57 = localDate54.weekyear();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.TimeOfDay timeOfDay60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay59.toDateTime(timeOfDay60, dateTimeZone61);
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay59.monthOfYear();
        org.joda.time.DateTime dateTime64 = yearMonthDay59.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(dateTimeZone65);
        org.joda.time.TimeOfDay timeOfDay67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay66.toDateTime(timeOfDay67, dateTimeZone68);
        boolean boolean70 = dateTime69.isBeforeNow();
        org.joda.time.DateTime dateTime72 = dateTime69.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean74 = dateTime72.isSupported(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType73.getRangeDurationType();
        org.joda.time.DateTime.Property property76 = dateTime64.property(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType73.getRangeDurationType();
        int int78 = localDate54.get(dateTimeFieldType73);
        int int79 = yearMonthDay51.get(dateTimeFieldType73);
        org.joda.time.YearMonthDay.Property property80 = yearMonthDay51.dayOfMonth();
        int[] intArray81 = yearMonthDay51.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = dateTimeField5.set((org.joda.time.ReadablePartial) localDateTime41, 44, intArray81, 35414727);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:35.271" + "'", str20, "1970-01-01T00:00:35.271");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale34.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "185" + "'", str35, "185");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "35452739" + "'", str36, "35452739");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1657878743845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=52,SECOND=23,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 11 + "'", int78 == 11);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 15 + "'", int79 == 15);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[2022, 7, 15]");
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withWeekOfWeekyear(10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) 764);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundFloorCopy();
        org.joda.time.DurationField durationField16 = property14.getRangeDurationField();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573285748,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=45,MILLISECOND=748,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMillis(7);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime24.getZone();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        calendar28.setFirstDayOfWeek(2022);
        int int36 = calendar28.getMinimum(2);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getDisplayCountry();
        int int47 = dateTimeField43.getMaximumTextLength(locale44);
        java.lang.String str48 = locale44.getDisplayScript();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale44);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone37, locale44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long53 = dateTimeZone51.previousTransition((long) 8);
        long long55 = dateTimeZone27.getMillisKeepLocal(dateTimeZone51, (long) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime13.withZoneRetainFields(dateTimeZone27);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1657878885810,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=45,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u53f0\u7063" + "'", str46, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644573285810,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=45,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573285810,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=45,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 8L + "'", long53 == 8L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 7);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str14 = interval13.toString();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour((int) (short) 0);
        boolean boolean36 = interval25.contains((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean37 = interval13.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Interval interval39 = interval13.withPeriodBeforeEnd(readablePeriod38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval13.toPeriod(periodType40);
        org.joda.time.Interval interval42 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.withDayOfYear((int) '#');
        int int47 = dateMidnight44.getWeekOfWeekyear();
        int int48 = dateMidnight44.getWeekyear();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.Interval interval59 = interval51.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration60 = interval59.toDuration();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.TimeOfDay timeOfDay63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTime(timeOfDay63, dateTimeZone64);
        boolean boolean66 = dateTime65.isBeforeNow();
        org.joda.time.DateTime dateTime68 = dateTime65.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime70 = dateTime68.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime72 = dateTime70.minusHours((int) (byte) 100);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableDuration) duration60);
        boolean boolean75 = interval10.overlaps((org.joda.time.ReadableInterval) interval74);
        long long76 = interval74.getEndMillis();
        org.joda.time.DateTime dateTime77 = interval74.getStart();
        org.joda.time.Period period78 = interval74.toPeriod();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str14, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1644537600033L + "'", long76 == 1644537600033L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.monthOfYear();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getVariant();
        java.lang.String str17 = dateTimeField13.getAsShortText(3, locale15);
        int int18 = dateTimeField13.getMaximumValue();
        long long21 = dateTimeField13.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = dateTimeField13.getAsShortText(readablePartial22, 9, locale24);
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale28.toLanguageTag();
        java.lang.String str30 = dateTimeField13.getAsShortText(29, locale28);
        java.lang.String str31 = dateTimeField13.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.monthOfYear();
        int int36 = localDateTime34.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withWeekyear(11);
        int int39 = localDateTime38.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusSeconds(371);
        int int42 = localDateTime38.getYear();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.year();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.lang.String str51 = locale49.getDisplayCountry();
        int int52 = dateTimeField48.getMaximumTextLength(locale49);
        java.lang.String str53 = locale49.getDisplayScript();
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale49);
        java.lang.String str55 = locale49.getScript();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.year();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.lang.String str64 = locale62.getDisplayCountry();
        int int65 = dateTimeField61.getMaximumTextLength(locale62);
        java.lang.String str66 = locale62.getDisplayScript();
        java.lang.String str67 = locale62.getDisplayName();
        java.lang.String str68 = locale49.getDisplayVariant(locale62);
        java.lang.String str69 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime38, locale62);
        int int70 = property7.getMaximumTextLength(locale62);
        java.util.Locale locale72 = new java.util.Locale("Fri Feb 11 09:47:52 UTC 2022");
        java.lang.String str73 = property7.getAsText(locale72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property7.getFieldType();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime80 = interval79.getEnd();
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        org.joda.time.DurationField durationField82 = chronology81.minutes();
        org.joda.time.DurationField durationField83 = chronology81.weekyears();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) 271, chronology81);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime(chronology81);
        org.joda.time.DateTimeField dateTimeField87 = chronology81.hourOfDay();
        java.util.Locale locale89 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale90 = locale89.stripExtensions();
        java.lang.String str91 = dateTimeField87.getAsText(0L, locale89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight92 = property7.setCopy("2022-02-25T09:49:25.609Z", locale89);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-25T09:49:25.609Z\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ko-KR" + "'", str29, "ko-KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "29" + "'", str30, "29");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DateTimeField[year]" + "'", str31, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u53f0\u7063" + "'", str51, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1644573285884,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=45,MILLISECOND=884,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u53f0\u7063" + "'", str64, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str67, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "11" + "'", str69, "11");
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertEquals(locale72.toString(), "fri feb 11 09:47:52 utc 2022");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "February" + "'", str73, "February");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0" + "'", str91, "0");
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.lang.String str11 = locale9.getDisplayCountry();
        int int12 = dateTimeField8.getMaximumTextLength(locale9);
        java.lang.String str13 = locale9.getDisplayScript();
        java.lang.String str14 = locale9.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder18 = builder0.setLocale(locale15);
        java.util.Locale.Builder builder19 = builder0.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.centuryOfEra();
        org.joda.time.DurationField durationField28 = dateTimeField27.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime39.minusHours((int) (byte) 100);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale42.getLanguage();
        java.util.Calendar calendar44 = dateTime41.toCalendar(locale42);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale42.getDisplayName(locale45);
        java.lang.String str47 = dateTimeField27.getAsShortText((long) 1970, locale42);
        java.lang.String str48 = locale42.getLanguage();
        java.util.Locale.Builder builder49 = builder19.setLocale(locale42);
        java.util.Locale.Builder builder50 = builder19.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder53 = builder19.setUnicodeLocaleKeyword("09:50:11.285", "Apr 27, 31274 6:00:00 PM");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 09:50:11.285 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u53f0\u7063" + "'", str11, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str14, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u5fb7\u6587" + "'", str16, "\u5fb7\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinesisch" + "'", str17, "Chinesisch");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1641531645928,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=7,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=45,MILLISECOND=928,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str46, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "19" + "'", str47, "19");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh" + "'", str48, "zh");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        java.util.Locale locale1 = new java.util.Locale("09:53:03.093");
        org.junit.Assert.assertEquals(locale1.toString(), "09:53:03.093");
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = property9.setCopy(11);
        org.joda.time.LocalTime localTime16 = property9.setCopy(706);
        org.joda.time.LocalTime localTime18 = localTime16.plusMinutes(30);
        org.joda.time.DateTime dateTime19 = localTime16.toDateTimeToday();
        org.joda.time.DateTime dateTime21 = dateTime19.plusDays(368);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573285952,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=45,MILLISECOND=952,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:54:45.952" + "'", str4, "09:54:45.952");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573285952,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=45,MILLISECOND=952,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.plusDays((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        int int23 = dateTime19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime25 = yearMonthDay11.toDateTime((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear((int) (byte) 1);
        int int40 = dateTime36.getYear();
        org.joda.time.DateMidnight dateMidnight41 = dateTime36.toDateMidnight();
        org.joda.time.DateTime dateTime42 = yearMonthDay28.toDateTime((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.withYearOfEra(35297719);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = locale48.hasExtensions();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.toLanguageTag();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.year();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale58.getDisplayCountry();
        int int61 = dateTimeField57.getMaximumTextLength(locale58);
        java.lang.String str62 = locale58.getVariant();
        java.lang.String str63 = locale48.getDisplayLanguage(locale58);
        java.lang.String str64 = localDate45.toString("7", locale48);
        java.lang.String str65 = property26.getAsText(locale48);
        java.lang.String str66 = yearMonthDay6.toString("09:49:55.379", locale48);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(911);
        org.joda.time.DateTime dateTime69 = yearMonthDay6.toDateTimeAtMidnight(dateTimeZone68);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime74 = interval73.getEnd();
        org.joda.time.Chronology chronology75 = interval73.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.year();
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet78 = locale77.getUnicodeLocaleKeys();
        java.lang.String str79 = locale77.getDisplayCountry();
        int int80 = dateTimeField76.getMaximumTextLength(locale77);
        java.lang.String str81 = locale77.getDisplayScript();
        java.lang.String str82 = dateTimeZone68.getShortName((long) 35532, locale77);
        java.lang.String str83 = dateTimeZone68.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u53f0\u7063" + "'", str60, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u82f1\u6587" + "'", str63, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "7" + "'", str64, "7");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Friday" + "'", str65, "Friday");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "09:49:55.379" + "'", str66, "09:49:55.379");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(locale77);
// flaky:         org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u53f0\u7063" + "'", str79, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.911" + "'", str82, "+00:00:00.911");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.911" + "'", str83, "+00:00:00.911");
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str14 = interval13.toString();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour((int) (short) 0);
        boolean boolean36 = interval25.contains((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean37 = interval13.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Interval interval39 = interval13.withPeriodBeforeEnd(readablePeriod38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval13.toPeriod(periodType40);
        org.joda.time.Interval interval42 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Interval interval44 = interval10.withEndMillis(47L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        boolean boolean54 = dateTime53.isBeforeNow();
        org.joda.time.DateTime dateTime56 = dateTime53.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime56.getZone();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance();
        calendar60.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay64 = org.joda.time.YearMonthDay.fromCalendarFields(calendar60);
        calendar60.setFirstDayOfWeek(2022);
        int int68 = calendar60.getMinimum(2);
        java.util.TimeZone timeZone69 = calendar60.getTimeZone();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime73 = interval72.getEnd();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.year();
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleKeys();
        java.lang.String str78 = locale76.getDisplayCountry();
        int int79 = dateTimeField75.getMaximumTextLength(locale76);
        java.lang.String str80 = locale76.getDisplayScript();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale76);
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone69, locale76);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        long long85 = dateTimeZone83.previousTransition((long) 8);
        long long87 = dateTimeZone59.getMillisKeepLocal(dateTimeZone83, (long) (byte) 0);
        int int89 = dateTimeZone83.getOffsetFromLocal(8L);
        org.joda.time.Interval interval90 = yearMonthDay46.toInterval(dateTimeZone83);
        long long91 = interval90.toDurationMillis();
        boolean boolean92 = interval44.overlaps((org.joda.time.ReadableInterval) interval90);
        boolean boolean93 = interval90.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str14, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1657878886028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u53f0\u7063" + "'", str78, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1644573286028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=1644573286028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 8L + "'", long85 == 8L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 86400000L + "'", long91 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        int int39 = dateTime35.getYear();
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime43 = dateTime41.withYear(2);
        boolean boolean44 = interval29.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology45 = interval29.getChronology();
        org.joda.time.Interval interval46 = interval2.overlap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Interval interval48 = interval29.withEndMillis((long) 35303345);
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.DateTime dateTime51 = dateTime49.minus((long) 159);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDate2.getFieldType(56);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 56");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.LocalDate.Property property28 = localDate26.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay48 = org.joda.time.YearMonthDay.fromCalendarFields(calendar44);
        calendar44.setFirstDayOfWeek(2022);
        int int52 = calendar44.getMinimum(2);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.lang.String str62 = locale60.getDisplayCountry();
        int int63 = dateTimeField59.getMaximumTextLength(locale60);
        java.lang.String str64 = locale60.getDisplayScript();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale60);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone53, locale60);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        long long69 = dateTimeZone67.previousTransition((long) 8);
        long long71 = dateTimeZone43.getMillisKeepLocal(dateTimeZone67, (long) (byte) 0);
        int int73 = dateTimeZone67.getOffsetFromLocal(8L);
        org.joda.time.Interval interval74 = yearMonthDay30.toInterval(dateTimeZone67);
        org.joda.time.Interval interval75 = localDate26.toInterval(dateTimeZone67);
        long long76 = interval75.getStartMillis();
        org.joda.time.DateTime dateTime77 = interval75.getStart();
        org.joda.time.DateTime dateTime79 = dateTime77.plusDays(786);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010-02-25" + "'", str27, "2010-02-25");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1657878886104,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=104,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u53f0\u7063" + "'", str62, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644573286104,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=104,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644573286104,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=104,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 8L + "'", long69 == 8L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1267056000000L + "'", long76 == 1267056000000L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.dayOfWeek();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusHours(35431824);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay9.plusHours((-7198));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        boolean boolean12 = calendar0.after((java.lang.Object) dateMidnight11);
        int int13 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime18.withDurationAdded(readableDuration23, (int) (short) 100);
        int int26 = dateTime25.getMillisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 93);
        boolean boolean29 = calendar0.after((java.lang.Object) dateTime25);
        org.joda.time.DateTime dateTime31 = dateTime25.minusSeconds(605);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878886187,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=187,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35686187 + "'", int26 == 35686187);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        boolean boolean12 = calendar0.after((java.lang.Object) dateMidnight11);
        int int13 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime18.withDurationAdded(readableDuration23, (int) (short) 100);
        int int26 = dateTime25.getMillisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 93);
        boolean boolean29 = calendar0.after((java.lang.Object) dateTime25);
        java.lang.Object obj30 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878886204,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=204,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35686204 + "'", int26 == 35686204);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "java.util.GregorianCalendar[time=1657878886204,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=204,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "java.util.GregorianCalendar[time=1657878886204,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=204,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "java.util.GregorianCalendar[time=1657878886204,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=204,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.plusWeeks(0);
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime17 = property15.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35686 + "'", int12 == 35686);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(44);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter10.withChronology(chronology16);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology16);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u5fb7\u6587" + "'", str8, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        int int10 = dateTimeField5.getMaximumValue();
        long long13 = dateTimeField5.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = dateTimeField5.getAsShortText(readablePartial14, 9, locale16);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.toLanguageTag();
        java.lang.String str22 = dateTimeField5.getAsText((-1), locale20);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale20.getDisplayLanguage(locale23);
        boolean boolean25 = locale20.hasExtensions();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1" + "'", str22, "-1");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getWeekyear();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime18.toDateTime(chronology26);
        boolean boolean28 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime34.toDateTime(chronology42);
        boolean boolean44 = durationFieldType29.isSupported(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime27.toDateTime(chronology42);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime27.toMutableDateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone52);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTime(timeOfDay54, dateTimeZone55);
        boolean boolean57 = dateTime56.isBeforeNow();
        org.joda.time.DateTime dateTime59 = dateTime56.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.DateTime dateTime65 = dateTime56.toDateTime(chronology64);
        boolean boolean66 = interval49.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(dateTimeZone68);
        org.joda.time.TimeOfDay timeOfDay70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = yearMonthDay69.toDateTime(timeOfDay70, dateTimeZone71);
        boolean boolean73 = dateTime72.isBeforeNow();
        org.joda.time.DateTime dateTime75 = dateTime72.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime79 = interval78.getEnd();
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.DateTime dateTime81 = dateTime72.toDateTime(chronology80);
        boolean boolean82 = durationFieldType67.isSupported(chronology80);
        org.joda.time.DateTime dateTime83 = dateTime65.toDateTime(chronology80);
        org.joda.time.DateTimeField dateTimeField84 = chronology80.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology80.era();
        org.joda.time.Chronology chronology86 = chronology80.withUTC();
        org.joda.time.DateTime dateTime87 = dateTime27.withChronology(chronology80);
        org.joda.time.DateTime dateTime88 = dateTime4.withChronology(chronology80);
        int int89 = dateTime88.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 6 + "'", int89 == 6);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withPeriodAdded(readablePeriod4, 22);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar12);
        boolean boolean15 = localTime13.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight11.withZoneRetainFields(dateTimeZone17);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str22 = interval21.toString();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.Interval interval33 = interval25.overlap((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration34 = interval33.toDuration();
        long long35 = duration34.getMillis();
        org.joda.time.Interval interval36 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        boolean boolean37 = dateMidnight18.equals((java.lang.Object) duration34);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight9.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight9.getZone();
        long long41 = dateTimeZone39.previousTransition((long) 74);
        boolean boolean42 = dateTimeZone39.isFixed();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644573286314,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=314,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str22, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 33L + "'", long35 == 33L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 74L + "'", long41 == 74L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime38.secondOfDay();
        org.joda.time.DurationField durationField41 = property40.getDurationField();
        org.joda.time.DateTime dateTime42 = property40.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval2.withPeriodBeforeEnd(readablePeriod27);
        long long29 = interval28.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now();
        long long34 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = property32.roundHalfEvenCopy();
        boolean boolean36 = interval28.isAfter((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfCentury(10);
        org.joda.time.LocalDate localDate41 = localDate39.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate43 = localDate41.minusDays(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getDurationType();
        org.joda.time.LocalDate localDate47 = localDate43.withFieldAdded(durationFieldType45, 47);
        org.joda.time.LocalDate.Property property48 = localDate43.dayOfYear();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime53.withDurationAdded((long) 292278993, (int) '#');
        long long57 = property48.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology58 = dateTime53.getChronology();
        org.joda.time.Interval interval59 = interval28.withChronology(chronology58);
        boolean boolean60 = interval28.isAfterNow();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-292278993L) + "'", long57 == (-292278993L));
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight6 = property4.setCopy("4");
        org.joda.time.DateMidnight dateMidnight8 = property4.addToCopy((int) 'u');
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) property9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval26 = interval18.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval41 = interval33.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        boolean boolean47 = dateTime46.isBeforeNow();
        org.joda.time.DateTime dateTime49 = dateTime46.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour((int) (short) 0);
        boolean boolean52 = interval41.contains((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = interval29.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval29.withPeriodBeforeEnd(readablePeriod54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval29.toPeriod(periodType56);
        org.joda.time.Interval interval58 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        long long61 = chronology14.add((org.joda.time.ReadablePeriod) period57, (long) 'a', 4);
        org.joda.time.DurationField durationField62 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField64 = chronology14.secondOfMinute();
        org.joda.time.DurationField durationField65 = chronology14.months();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 229L + "'", long61 == 229L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay19.monthOfYear();
        org.joda.time.DateTime dateTime24 = yearMonthDay19.toDateTimeAtCurrentTime();
        int int25 = property17.compareTo((org.joda.time.ReadablePartial) yearMonthDay19);
        org.joda.time.Chronology chronology26 = yearMonthDay19.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.era();
        org.joda.time.DateTime dateTime29 = dateTime10.withChronology(chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        int int38 = dateTime34.getYear();
        org.joda.time.DateTime.Property property39 = dateTime34.weekyear();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        org.joda.time.DateTime dateTime41 = property39.roundHalfCeilingCopy();
        java.util.Date date42 = dateTime41.toDate();
        int int43 = date42.getDate();
        org.joda.time.YearMonthDay yearMonthDay44 = org.joda.time.YearMonthDay.fromDateFields(date42);
        org.joda.time.DateTime dateTime45 = yearMonthDay44.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime47 = dateTime45.withYear(35297719);
        org.joda.time.DateTime dateTime49 = dateTime45.withMonthOfYear(1);
        boolean boolean50 = dateTime29.equals((java.lang.Object) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime29.withSecondOfMinute(35333459);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35333459 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.getLocalTime();
        org.joda.time.LocalTime localTime5 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime6 = property3.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = property3.setCopy("2822-02-11");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2822-02-11\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573286510,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=510,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale10.getExtension('a');
        java.lang.String str13 = dateTimeField8.getAsText(4, locale10);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay14.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.withField(dateTimeFieldType19, 4);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("de");
        java.lang.String str25 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) timeOfDay21, 35277, locale24);
        long long28 = dateTimeField8.addWrapField((long) '#', 35);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.lang.String str31 = locale29.getISO3Language();
        int int32 = dateTimeField8.getMaximumTextLength(locale29);
        long long35 = dateTimeField8.addWrapField(981849600000L, 35308793);
        int int37 = dateTimeField8.getLeapAmount((long) '4');
        long long40 = dateTimeField8.addWrapField((long) 35408, 35309838);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "4" + "'", str13, "4");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "35277" + "'", str25, "35277");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2100035L + "'", long28 == 2100035L);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 981935580000L + "'", long35 == 981935580000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 62315408L + "'", long40 == 62315408L);
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime12.toDateTime(chronology20);
        boolean boolean22 = interval5.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        boolean boolean29 = dateTime28.isBeforeNow();
        org.joda.time.DateTime dateTime31 = dateTime28.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime28.toDateTime(chronology36);
        boolean boolean38 = durationFieldType23.isSupported(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime21.toDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(27223, 434, 836, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 434 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField9.set((long) 35629, 35599);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35599 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "monthOfYear" + "'", str7, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval26 = interval18.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval41 = interval33.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        boolean boolean47 = dateTime46.isBeforeNow();
        org.joda.time.DateTime dateTime49 = dateTime46.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour((int) (short) 0);
        boolean boolean52 = interval41.contains((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = interval29.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval29.withPeriodBeforeEnd(readablePeriod54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval29.toPeriod(periodType56);
        org.joda.time.Interval interval58 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        long long61 = chronology14.add((org.joda.time.ReadablePeriod) period57, (long) 'a', 4);
        org.joda.time.DurationField durationField62 = chronology14.hours();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 229L + "'", long61 == 229L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekyear(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(35309838);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(9);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 35271, chronology18);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        boolean boolean22 = localDateTime20.isSupported(durationFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withYear(871);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusYears(10);
        boolean boolean28 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime25);
        int int29 = localDateTime10.getYearOfCentury();
        int int30 = localDateTime10.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime10.withMonthOfYear(2030);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2030 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now();
        long long5 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        boolean boolean8 = dateMidnight4.isAfter((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfWeek(3);
        org.joda.time.Interval interval13 = dateMidnight10.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj0, chronology15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now();
        long long23 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.plusWeeks(86399);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight28 = property26.addToCopy(1L);
        org.joda.time.Interval interval29 = interval18.withEnd((org.joda.time.ReadableInstant) dateMidnight28);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        int int9 = yearMonthDay4.getValue((int) (short) 0);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay4.monthOfYear();
        org.joda.time.DurationField durationField11 = property10.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay12 = property10.withMaximumValue();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878886658,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=658,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        int int12 = dateTime4.getYear();
        org.joda.time.DateTime dateTime14 = dateTime4.withSecondOfMinute(8);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(32);
        org.joda.time.DateTime dateTime18 = dateTime14.withMillisOfSecond(763);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        int int27 = dateTime23.getYear();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime30 = dateTime23.withDurationAdded(readableDuration28, (int) (short) 100);
        org.joda.time.DateTime.Property property31 = dateTime23.weekOfWeekyear();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay36 = org.joda.time.YearMonthDay.fromCalendarFields(calendar32);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        int int44 = dateTime43.getCenturyOfEra();
        org.joda.time.DateTime dateTime46 = dateTime43.plusMillis((int) (byte) 0);
        int int47 = dateTime46.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay49.toDateTime(timeOfDay50, dateTimeZone51);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay49.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay49.property(dateTimeFieldType54);
        org.joda.time.DateTime.Property property56 = dateTime46.property(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType54.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.Chronology chronology60 = yearMonthDay59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType57.getField(chronology60);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay36.withFieldAdded(durationFieldType57, (int) (short) 100);
        org.joda.time.DateTime dateTime64 = dateTime23.withFields((org.joda.time.ReadablePartial) yearMonthDay36);
        org.joda.time.DateTime dateTime66 = dateTime64.withDayOfYear((int) (byte) 10);
        int int67 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1657878886667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=667,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20 + "'", int44 == 20);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 11 + "'", int47 == 11);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        int int4 = property3.get();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addToCopy(10);
        int int7 = timeOfDay6.size();
        java.lang.String str8 = timeOfDay6.toString();
        int int9 = timeOfDay6.getMillisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 57 + "'", int4 == 57);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T09:55:07.702" + "'", str8, "T09:55:07.702");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 702 + "'", int9 == 702);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = property3.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay6 = property3.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = property3.setCopy(801109);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 801109 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay6);
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withZoneUTC();
        boolean boolean29 = dateTimeFormatter28.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withOffsetParsed();
        boolean boolean31 = dateTimeFormatter30.isParser();
        org.joda.time.Chronology chronology32 = dateTimeFormatter30.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter30.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime35 = dateTimeFormatter30.parseMutableDateTime("\u82f1\u6587\u7f8e\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(chronology32);
        org.junit.Assert.assertNull(dateTimeParser33);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime38.secondOfDay();
        org.joda.time.DateTime dateTime41 = property40.roundHalfEvenCopy();
        int int42 = dateTime41.getMillisOfSecond();
        org.joda.time.Chronology chronology43 = dateTime41.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.centuryOfEra();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTime(chronology19);
        boolean boolean21 = interval4.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate localDate22 = dateTime20.toLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYear((int) (short) -1);
        java.lang.String str25 = localDate24.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 16, chronology31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval45 = interval37.overlap((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str49 = interval48.toString();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.Interval interval60 = interval52.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.TimeOfDay timeOfDay63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTime(timeOfDay63, dateTimeZone64);
        boolean boolean66 = dateTime65.isBeforeNow();
        org.joda.time.DateTime dateTime68 = dateTime65.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime70 = dateTime68.withMinuteOfHour((int) (short) 0);
        boolean boolean71 = interval60.contains((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean72 = interval48.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Interval interval74 = interval48.withPeriodBeforeEnd(readablePeriod73);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = interval48.toPeriod(periodType75);
        org.joda.time.Interval interval77 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        long long80 = chronology31.add((org.joda.time.ReadablePeriod) period76, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod81 = period76.toMutablePeriod();
        org.joda.time.LocalDate localDate82 = localDate24.minus((org.joda.time.ReadablePeriod) period76);
        int int83 = period76.size();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight0.plusMonths(42);
        int int87 = dateMidnight0.getYearOfCentury();
        int int88 = dateMidnight0.getMillisOfDay();
        java.lang.Class<?> wildcardClass89 = dateMidnight0.getClass();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-0001-02-11" + "'", str25, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str49, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1163943L + "'", long80 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 22 + "'", int87 == 22);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(434);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(47);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(47);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 86399);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.millisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay38 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        calendar34.setFirstDayOfWeek(2022);
        int int42 = calendar34.getMinimum(2);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        java.util.Calendar.Builder builder44 = builder4.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder48 = builder4.setDate(668, 522, 488);
        java.util.Calendar.Builder builder52 = builder4.setDate(985, 716, 182);
        java.util.Calendar.Builder builder55 = builder4.set(0, 100);
        java.util.Calendar.Builder builder60 = builder4.setTimeOfDay(611, 587, (int) (byte) 100, 32);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance();
        calendar61.add(3, 22);
        calendar61.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date67 = calendar61.getTime();
        calendar61.setFirstDayOfWeek(35271);
        calendar61.set(42, 883, 13, 1970, 708);
        boolean boolean76 = calendar61.isWeekDateSupported();
        java.util.TimeZone timeZone77 = calendar61.getTimeZone();
        java.util.Calendar.Builder builder78 = builder4.setTimeZone(timeZone77);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance();
        java.util.Date date80 = calendar79.getTime();
        java.util.Date date86 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long87 = date86.getTime();
        int int88 = date86.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay89 = org.joda.time.TimeOfDay.fromDateFields(date86);
        long long90 = date86.getTime();
        date86.setDate(35273);
        java.time.Instant instant93 = date86.toInstant();
        java.util.Date date94 = java.util.Date.from(instant93);
        boolean boolean95 = date80.after(date94);
        date80.setSeconds(378);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder98 = builder4.setInstant(date80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878886861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=861,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573286862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573286862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1657878886862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=35271,minimalDaysInFirstWeek=1,ERA=1,YEAR=42,MONTH=883,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=1970,MINUTE=708,SECOND=46,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Fri Jul 15 09:54:46 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1644573286862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=46,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date80);
// flaky:         org.junit.Assert.assertEquals(date80.toString(), "Fri Feb 11 10:00:18 UTC 2022");
        org.junit.Assert.assertEquals(date86.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-525628200000L) + "'", long87 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-525628200000L) + "'", long90 == (-525628200000L));
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now();
        long long12 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plusWeeks(86399);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withDayOfYear((int) '#');
        int int19 = dateMidnight16.getWeekOfWeekyear();
        boolean boolean20 = dateMidnight11.isEqual((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.withDayOfYear((int) '#');
        int int25 = dateMidnight22.getWeekOfWeekyear();
        int int26 = dateMidnight22.getWeekyear();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration38 = interval37.toDuration();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        boolean boolean44 = dateTime43.isBeforeNow();
        org.joda.time.DateTime dateTime46 = dateTime43.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusHours((int) (byte) 100);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight16.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime54 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear((int) 'a');
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime56.plusSeconds(35291);
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTimeISO();
        int int61 = dateTime60.getMonthOfYear();
        int int62 = dateTime60.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears(10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        int int19 = localDateTime17.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withWeekyear(11);
        int int22 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int24 = localDateTime21.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        boolean boolean29 = localDateTime25.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int33 = dateTimeZone31.getOffsetFromLocal(9676835272L);
        long long35 = dateTimeZone27.getMillisKeepLocal(dateTimeZone31, (long) 35451937);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35451937L + "'", long35 == 35451937L);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        int int8 = localDate6.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight.Property property13 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundFloorCopy();
        boolean boolean15 = localDate6.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateTime dateTime16 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        int int18 = dateTime17.getWeekyear();
        org.joda.time.DateTime.Property property19 = dateTime17.dayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1959 + "'", int18 == 1959);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration26 = interval25.toDuration();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours((int) (byte) 100);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime36);
        int int40 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        java.lang.String str41 = property5.getName();
        int int42 = property5.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay44 = property5.addToCopy(965);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "monthOfYear" + "'", str41, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay44);
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay6 = property5.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.dayOfMonth();
        int int8 = property7.get();
        int int9 = property7.getMaximumValue();
        int int10 = property7.get();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime21.toDateTime(chronology29);
        boolean boolean31 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime37.toDateTime(chronology45);
        boolean boolean47 = durationFieldType32.isSupported(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime30.toDateTime(chronology45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readableDuration49);
        org.joda.time.LocalDate localDate51 = dateTime50.toLocalDate();
        org.joda.time.DateTime dateTime52 = localDate51.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property53 = localDate51.dayOfWeek();
        org.joda.time.LocalDate.Property property54 = localDate51.centuryOfEra();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.year();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.lang.String str64 = locale62.getDisplayCountry();
        int int65 = dateTimeField61.getMaximumTextLength(locale62);
        java.lang.String str66 = locale62.getDisplayName();
        java.lang.String str67 = locale62.getISO3Language();
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.lang.String str69 = locale68.getDisplayName();
        java.lang.String str70 = locale62.getDisplayName(locale68);
        int int71 = property54.getMaximumShortTextLength(locale62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay72 = property7.setCopy("292278993-02-08T09:54:27.101Z", locale62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"292278993-02-08T09:54:27.101Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 28 + "'", int9 == 28);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u53f0\u7063" + "'", str64, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str66, "\u4e2d\u6587\u53f0\u7063)");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zho" + "'", str67, "zho");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u5fb7\u6587\u5fb7\u570b)" + "'", str69, "\u5fb7\u6587\u5fb7\u570b)");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinesisch (Taiwan)" + "'", str70, "Chinesisch (Taiwan)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        java.util.Locale locale1 = new java.util.Locale("09:48:26.613");
        org.junit.Assert.assertEquals(locale1.toString(), "09:48:26.613");
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withDayOfYear((int) '#');
        int int5 = dateMidnight2.getWeekOfWeekyear();
        int int6 = dateMidnight2.getWeekyear();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval17 = interval9.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration18 = interval17.toDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours((int) (byte) 100);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime33 = dateTime0.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        int int36 = dateTime35.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateTime35.toDateMidnight();
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfWeek();
        int int39 = dateMidnight37.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.withDayOfMonth(35356);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35356 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfYear(778);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 778 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMinutes(42);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury(10);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        int int26 = property18.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.Chronology chronology27 = yearMonthDay20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay20.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = yearMonthDay20.isSupported(dateTimeFieldType30);
        boolean boolean32 = localDate12.isSupported(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType30.getDurationType();
        org.joda.time.DateTime.Property property34 = dateTime7.property(dateTimeFieldType30);
        org.joda.time.DateTime dateTime35 = property34.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.withYear(35424157);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DurationField durationField12 = chronology7.halfdays();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfCentury(10);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight18 = localDate15.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime27.getZone();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromCalendarFields(calendar31);
        calendar31.setFirstDayOfWeek(2022);
        int int39 = calendar31.getMinimum(2);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.year();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.lang.String str49 = locale47.getDisplayCountry();
        int int50 = dateTimeField46.getMaximumTextLength(locale47);
        java.lang.String str51 = locale47.getDisplayScript();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale47);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone40, locale47);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        long long56 = dateTimeZone54.previousTransition((long) 8);
        long long58 = dateTimeZone30.getMillisKeepLocal(dateTimeZone54, (long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay19.toDateMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime60 = localDate15.toDateTimeAtStartOfDay(dateTimeZone30);
        int int62 = dateTimeZone30.getOffsetFromLocal(16977599999641L);
        int int64 = dateTimeZone30.getStandardOffset(1657878512644L);
        org.joda.time.Chronology chronology65 = chronology7.withZone(dateTimeZone30);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology65);
        java.lang.String str67 = chronology65.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay((int) (short) -1, 68, 27, chronology65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str11, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1657878887236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u53f0\u7063" + "'", str49, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644573287236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644573287236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 8L + "'", long56 == 8L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str67, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(897, 2049, 27176);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2049 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.Chronology chronology37 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        int int2 = calendar1.getWeeksInWeekYear();
        java.time.Instant instant3 = calendar1.toInstant();
        calendar1.add(0, 27);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(instant3);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMillis(35342);
        int int31 = dateTime28.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010-02-25" + "'", str27, "2010-02-25");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime12.toDateTime(chronology20);
        boolean boolean22 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.minusHours(35271);
        org.joda.time.Interval interval27 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 16, chronology33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval47 = interval39.overlap((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str51 = interval50.toString();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime60 = interval59.getEnd();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.Interval interval62 = interval54.overlap((org.joda.time.ReadableInterval) interval59);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(dateTimeZone63);
        org.joda.time.TimeOfDay timeOfDay65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = yearMonthDay64.toDateTime(timeOfDay65, dateTimeZone66);
        boolean boolean68 = dateTime67.isBeforeNow();
        org.joda.time.DateTime dateTime70 = dateTime67.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime72 = dateTime70.withMinuteOfHour((int) (short) 0);
        boolean boolean73 = interval62.contains((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean74 = interval50.contains((org.joda.time.ReadableInterval) interval62);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Interval interval76 = interval50.withPeriodBeforeEnd(readablePeriod75);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = interval50.toPeriod(periodType77);
        org.joda.time.Interval interval79 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        long long82 = chronology33.add((org.joda.time.ReadablePeriod) period78, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod83 = period78.toMutablePeriod();
        org.joda.time.Interval interval84 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Chronology chronology85 = interval27.getChronology();
        org.joda.time.DateTime dateTime86 = dateTime24.toDateTime(chronology85);
        int int87 = dateTime86.getMinuteOfDay();
        int int88 = dateTime86.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str51, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1163943L + "'", long82 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1134 + "'", int87 == 1134);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withYearOfEra(35297719);
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withCenturyOfEra(706);
        boolean boolean22 = dateMidnight17.isAfter(1644573216614L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        java.util.Locale locale2 = new java.util.Locale("2022-02-09T22:48:08.395Z", "09:48:11.954");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) "2022-02-09T22:48:08.395Z");
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        int int10 = dateTime9.getCenturyOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMillis((int) (byte) 0);
        int int13 = dateTime12.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay15.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay15.property(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime12.property(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType20.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType23.getField(chronology26);
        org.joda.time.Chronology chronology28 = chronology26.withUTC();
        java.lang.String str29 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfYear();
        org.joda.time.DurationField durationField31 = chronology28.weekyears();
        org.joda.time.DateTime dateTime32 = dateTime3.toDateTime(chronology28);
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-09t22:48:08.395z_09:48:11.954");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = property5.getAsShortText(locale6);
        org.joda.time.YearMonthDay yearMonthDay10 = property5.addWrapFieldToCopy(371);
        int int11 = property5.get();
        org.joda.time.YearMonthDay yearMonthDay12 = property5.getYearMonthDay();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.add(3, 22);
        java.util.Date date17 = calendar13.getTime();
        long long18 = calendar13.getTimeInMillis();
        java.util.TimeZone timeZone19 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.lang.String str26 = yearMonthDay21.toString("\u4e8c\u6708", locale23);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone19, locale23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval29 = yearMonthDay12.toInterval(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e8c\u6708" + "'", str8, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1657878887399,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=399,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Jul 15 09:54:47 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1657878887399L + "'", long18 == 1657878887399L);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5fb7\u6587" + "'", str24, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e8c\u6708" + "'", str26, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573287399,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=399,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime18.toMutableDateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        boolean boolean48 = dateTime47.isBeforeNow();
        org.joda.time.DateTime dateTime50 = dateTime47.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime47.toDateTime(chronology55);
        boolean boolean57 = interval40.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime70 = interval69.getEnd();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        org.joda.time.DateTime dateTime72 = dateTime63.toDateTime(chronology71);
        boolean boolean73 = durationFieldType58.isSupported(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime56.toDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField75 = chronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology71.era();
        org.joda.time.Chronology chronology77 = chronology71.withUTC();
        org.joda.time.DateTime dateTime78 = dateTime18.withChronology(chronology71);
        org.joda.time.DateTimeField dateTimeField79 = chronology71.weekyear();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.DateTimeField dateTimeField81 = chronology71.monthOfYear();
        long long83 = dateTimeField81.roundHalfEven((-62100742091336L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-62101382400000L) + "'", long83 == (-62101382400000L));
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.YearMonthDay yearMonthDay1 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean3 = dateMidnight0.isSupported(dateTimeFieldType2);
        java.lang.String str4 = dateTimeFieldType2.getName();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(yearMonthDay1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfCentury" + "'", str4, "yearOfCentury");
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime6 = timeOfDay5.toDateTimeToday();
        int int7 = timeOfDay5.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay5.minusSeconds(203);
        int int10 = timeOfDay9.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(timeOfDay9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        java.time.Instant instant2 = date1.toInstant();
        java.util.Date date3 = java.util.Date.from(instant2);
        java.util.Date date4 = java.util.Date.from(instant2);
        date4.setMonth(13);
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date4);
        java.time.Instant instant8 = date4.toInstant();
        java.lang.String str9 = date4.toLocaleString();
        date4.setHours(901);
        long long12 = date4.getTime();
        int int13 = date4.getYear();
        int int14 = date4.getDate();
        java.time.Instant instant15 = date4.toInstant();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573287468,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=468,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:54:47 UTC 2022");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 09:54:47 UTC 2022");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Mar 20 13:54:47 UTC 2023");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(instant8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Feb 11, 2023 9:54:47 AM" + "'", str9, "Feb 11, 2023 9:54:47 AM");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1679320487468L + "'", long12 == 1679320487468L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 123 + "'", int13 == 123);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval2.withPeriodBeforeEnd(readablePeriod27);
        long long29 = interval28.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now();
        long long34 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = property32.roundHalfEvenCopy();
        boolean boolean36 = interval28.isAfter((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.MutableInterval mutableInterval37 = interval28.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays(126);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTime();
        org.joda.time.DateTime dateTime44 = dateTime41.minusWeeks(35337);
        int int45 = dateTime44.getHourOfDay();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        long long5 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone6 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.lang.String str13 = yearMonthDay8.toString("\u4e8c\u6708", locale10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone6, locale10);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = calendar14.getActualMinimum(58670342);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58670342");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878887506,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=506,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:54:47 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1657878887506L + "'", long5 == 1657878887506L);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u5fb7\u6587" + "'", str11, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e8c\u6708" + "'", str13, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644573287506,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=506,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        int int2 = dateMidnight1.getSecondOfDay();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(86399);
        int int6 = localDate3.getEra();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(chronology24);
        boolean boolean26 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDate localDate27 = dateTime25.toLocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.withYear((int) (short) -1);
        java.lang.String str30 = localDate29.toString();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 16, chronology36);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval50 = interval42.overlap((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str54 = interval53.toString();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.Interval interval65 = interval57.overlap((org.joda.time.ReadableInterval) interval62);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay(dateTimeZone66);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay67.toDateTime(timeOfDay68, dateTimeZone69);
        boolean boolean71 = dateTime70.isBeforeNow();
        org.joda.time.DateTime dateTime73 = dateTime70.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime75 = dateTime73.withMinuteOfHour((int) (short) 0);
        boolean boolean76 = interval65.contains((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean77 = interval53.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Interval interval79 = interval53.withPeriodBeforeEnd(readablePeriod78);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = interval53.toPeriod(periodType80);
        org.joda.time.Interval interval82 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period81);
        long long85 = chronology36.add((org.joda.time.ReadablePeriod) period81, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod86 = period81.toMutablePeriod();
        org.joda.time.LocalDate localDate87 = localDate29.minus((org.joda.time.ReadablePeriod) period81);
        int int88 = period81.size();
        org.joda.time.LocalDate localDate89 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate91 = localDate89.withYearOfCentury(10);
        org.joda.time.LocalDate localDate93 = localDate91.plusYears((int) '4');
        org.joda.time.DurationFieldType durationFieldType94 = org.joda.time.DurationFieldType.seconds();
        boolean boolean95 = localDate91.isSupported(durationFieldType94);
        boolean boolean96 = period81.isSupported(durationFieldType94);
        org.joda.time.LocalDate localDate97 = localDate3.plus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.DateMidnight dateMidnight98 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.DateMidnight.Property property99 = dateMidnight98.yearOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-0001-02-11" + "'", str30, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str54, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1163943L + "'", long85 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod86);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(localDate97);
        org.junit.Assert.assertNotNull(dateMidnight98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay3.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay3.property(dateTimeFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.plusMonths((int) 'u');
        boolean boolean12 = calendar0.after((java.lang.Object) 'u');
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.add(3, 22);
        int int17 = calendar13.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone18 = calendar13.getTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        java.time.Instant instant20 = calendar19.toInstant();
        boolean boolean21 = calendar0.after((java.lang.Object) instant20);
        boolean boolean22 = calendar0.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.add((-292275054), 328);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573287569,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:54:47 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1657878887569,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644573287569,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay10.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType18.getField(chronology21);
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.getLocalTime();
        org.joda.time.LocalTime localTime6 = property3.addNoWrapToCopy(35272);
        org.joda.time.LocalTime localTime7 = property3.getLocalTime();
        org.joda.time.Interval interval8 = property3.toInterval();
        org.joda.time.LocalTime localTime9 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property3.addCopy((long) 'a');
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573287601,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=601,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears(10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        int int19 = localDateTime17.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withWeekyear(11);
        int int22 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int24 = localDateTime21.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        boolean boolean29 = localDateTime25.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0L);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromMillisOfDay((long) 999);
        int int34 = timeOfDay31.compareTo((org.joda.time.ReadablePartial) localTime33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = localDateTime25.isBefore((org.joda.time.ReadablePartial) timeOfDay31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.minuteOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) '4', chronology5);
        org.joda.time.LocalDate localDate12 = localDate10.minusDays((int) (byte) 10);
        org.joda.time.LocalDate localDate14 = localDate10.minusWeeks(2049);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str17 = locale16.getLanguage();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale16);
        java.lang.String str19 = localDate14.toString("09:49:37.804", locale16);
        java.lang.String str20 = locale16.getScript();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644573287635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=635,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "09:49:37.804" + "'", str19, "09:49:37.804");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfEra();
        int int5 = localDate0.getYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = property12.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.dayOfMonth();
        int int15 = property14.get();
        java.lang.String str16 = property14.getAsString();
        java.util.Locale locale18 = new java.util.Locale("");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.lang.String str20 = property14.getAsText(locale18);
        java.lang.String str21 = localDate0.toString("405", locale18);
        java.util.Date date22 = localDate0.toDate();
        int int23 = date22.getMinutes();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11" + "'", str16, "11");
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "11" + "'", str20, "11");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "405" + "'", str21, "405");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DateMidnight dateMidnight6 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfFloorCopy();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        boolean boolean27 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDate localDate28 = dateTime26.toLocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfCentury(20);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight7.withFields((org.joda.time.ReadablePartial) localDate28);
        int int32 = dateMidnight7.getMinuteOfHour();
        int int33 = dateMidnight7.getWeekyear();
        int int34 = dateMidnight7.getMonthOfYear();
        org.joda.time.LocalDate localDate35 = dateMidnight7.toLocalDate();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay40 = org.joda.time.YearMonthDay.fromCalendarFields(calendar36);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.plusYears((int) '4');
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property46 = localDate43.weekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay48.toDateTime(timeOfDay49, dateTimeZone50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay48.monthOfYear();
        org.joda.time.DateTime dateTime53 = yearMonthDay48.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTime(timeOfDay56, dateTimeZone57);
        boolean boolean59 = dateTime58.isBeforeNow();
        org.joda.time.DateTime dateTime61 = dateTime58.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean63 = dateTime61.isSupported(dateTimeFieldType62);
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType62.getRangeDurationType();
        org.joda.time.DateTime.Property property65 = dateTime53.property(dateTimeFieldType62);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType62.getRangeDurationType();
        int int67 = localDate43.get(dateTimeFieldType62);
        int int68 = yearMonthDay40.get(dateTimeFieldType62);
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay40.dayOfMonth();
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay40.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = yearMonthDay40.toDateMidnight(dateTimeZone71);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance();
        calendar73.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay77 = org.joda.time.YearMonthDay.fromCalendarFields(calendar73);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay77.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property80 = yearMonthDay77.year();
        int[] intArray81 = yearMonthDay77.getValues();
        org.joda.time.YearMonthDay.Property property82 = yearMonthDay77.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property82.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay40.withField(dateTimeFieldType83, (int) (byte) 100);
        int int86 = yearMonthDay85.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight7.withFields((org.joda.time.ReadablePartial) yearMonthDay85);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1657878887662,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=662,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 11 + "'", int67 == 11);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 15 + "'", int68 == 15);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1657878887662,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=662,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[2022, 7, 15]");
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 15 + "'", int86 == 15);
        org.junit.Assert.assertNotNull(dateMidnight87);
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(0);
        int int15 = localDateTime14.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 35382000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(44, 41, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        java.util.Date date2 = localDate0.toDate();
        int int3 = localDate0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Fri Feb 11 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertNotNull(dateMidnight4);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay38 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        calendar34.setFirstDayOfWeek(2022);
        int int42 = calendar34.getMinimum(2);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        java.util.Calendar.Builder builder44 = builder4.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder48 = builder4.setDate(668, 522, 488);
        java.util.Calendar.Builder builder52 = builder4.setDate(274, 2022, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder54 = builder52.setInstant(946684800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878887777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573287777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573287777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1657878887777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(42);
        org.joda.time.DateTime dateTime8 = property5.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(19);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        int int12 = dateTime10.getYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1959 + "'", int12 == 1959);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean20 = localDateTime18.isSupported(dateTimeFieldType19);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.Interval interval31 = interval23.overlap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration32 = interval31.toDuration();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plus((org.joda.time.ReadableDuration) duration32);
        int int34 = localDateTime33.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.era();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.dayOfMonth();
        int int8 = localDateTime2.getDayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        int int15 = dateTime11.getYear();
        org.joda.time.DateTime.Property property16 = dateTime11.weekyear();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays(306);
        org.joda.time.DateTime dateTime22 = dateTime17.plusWeeks(3);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillis((long) 34564755);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        boolean boolean27 = mutableDateTime25.isEqual(35328L);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime25, "6 May 1953 08:10:00 GMT", 248);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        long long6 = dateMidnight5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 16, chronology20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval34 = interval26.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str38 = interval37.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval49 = interval41.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay51.toDateTime(timeOfDay52, dateTimeZone53);
        boolean boolean55 = dateTime54.isBeforeNow();
        org.joda.time.DateTime dateTime57 = dateTime54.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour((int) (short) 0);
        boolean boolean60 = interval49.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = interval37.contains((org.joda.time.ReadableInterval) interval49);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Interval interval63 = interval37.withPeriodBeforeEnd(readablePeriod62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval37.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        long long69 = chronology20.add((org.joda.time.ReadablePeriod) period65, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod70 = period65.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight5.withFields((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.DateMidnight.Property property73 = dateMidnight5.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.YearMonthDay yearMonthDay76 = new org.joda.time.YearMonthDay(dateTimeZone75);
        org.joda.time.TimeOfDay timeOfDay77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = yearMonthDay76.toDateTime(timeOfDay77, dateTimeZone78);
        boolean boolean80 = dateTime79.isBeforeNow();
        org.joda.time.DateTime dateTime82 = dateTime79.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime86 = interval85.getEnd();
        org.joda.time.Chronology chronology87 = interval85.getChronology();
        org.joda.time.DateTime dateTime88 = dateTime79.toDateTime(chronology87);
        boolean boolean89 = durationFieldType74.isSupported(chronology87);
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight5.withFieldAdded(durationFieldType74, 9);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1265846400000L + "'", long6 == 1265846400000L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str38, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1163943L + "'", long69 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateMidnight91);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int8 = calendar0.getMinimum(2);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.getID();
        long long13 = dateTimeZone10.previousTransition((long) '4');
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = dateTimeField21.getAsShortText(3, locale23);
        int int26 = dateTimeField21.getMaximumValue();
        long long29 = dateTimeField21.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = dateTimeField21.getAsShortText(readablePartial30, 9, locale32);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = dateTimeField21.getAsText((-1), locale36);
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = dateTimeZone10.getShortName((-62100742311688L), locale36);
        boolean boolean41 = locale36.hasExtensions();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878887995,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=47,MILLISECOND=995,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "3" + "'", str25, "3");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9" + "'", str34, "9");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "und" + "'", str37, "und");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und" + "'", str39, "und");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes(35270);
        int int19 = localDateTime18.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(50);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusSeconds(35306128);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusHours(35280);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 49 + "'", int19 == 49);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withWeekyear(623);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.LocalDate.Property property28 = localDate26.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay48 = org.joda.time.YearMonthDay.fromCalendarFields(calendar44);
        calendar44.setFirstDayOfWeek(2022);
        int int52 = calendar44.getMinimum(2);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.lang.String str62 = locale60.getDisplayCountry();
        int int63 = dateTimeField59.getMaximumTextLength(locale60);
        java.lang.String str64 = locale60.getDisplayScript();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale60);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone53, locale60);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        long long69 = dateTimeZone67.previousTransition((long) 8);
        long long71 = dateTimeZone43.getMillisKeepLocal(dateTimeZone67, (long) (byte) 0);
        int int73 = dateTimeZone67.getOffsetFromLocal(8L);
        org.joda.time.Interval interval74 = yearMonthDay30.toInterval(dateTimeZone67);
        org.joda.time.Interval interval75 = localDate26.toInterval(dateTimeZone67);
        java.util.Date date76 = localDate26.toDate();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(dateTimeZone77);
        org.joda.time.TimeOfDay timeOfDay79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = yearMonthDay78.toDateTime(timeOfDay79, dateTimeZone80);
        boolean boolean82 = dateTime81.isBeforeNow();
        org.joda.time.DateTime dateTime84 = dateTime81.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime86 = dateTime84.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone87 = dateTime84.getZone();
        int int89 = dateTimeZone87.getStandardOffset((long) 13);
        java.lang.Object obj90 = null;
        boolean boolean91 = dateTimeZone87.equals(obj90);
        org.joda.time.DateTime dateTime92 = localDate26.toDateTimeAtStartOfDay(dateTimeZone87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime94 = dateTime92.withDayOfYear(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010-02-25" + "'", str27, "2010-02-25");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1657878888038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u53f0\u7063" + "'", str62, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644573288038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644573288038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 8L + "'", long69 == 8L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Feb 25 00:00:00 UTC 2010");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, readablePeriod12);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime23.toDateTime(chronology31);
        boolean boolean33 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean34 = interval16.isBeforeNow();
        boolean boolean35 = interval13.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str39 = interval38.toString();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval50 = interval42.overlap((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTime(timeOfDay53, dateTimeZone54);
        boolean boolean56 = dateTime55.isBeforeNow();
        org.joda.time.DateTime dateTime58 = dateTime55.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour((int) (short) 0);
        boolean boolean61 = interval50.contains((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean62 = interval38.contains((org.joda.time.ReadableInterval) interval50);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Interval interval64 = interval38.withPeriodBeforeEnd(readablePeriod63);
        long long65 = interval64.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(dateTimeZone66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.monthOfYear();
        org.joda.time.DateMidnight dateMidnight69 = org.joda.time.DateMidnight.now();
        long long70 = property68.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.DateMidnight dateMidnight71 = property68.roundHalfEvenCopy();
        boolean boolean72 = interval64.isAfter((org.joda.time.ReadableInstant) dateMidnight71);
        boolean boolean73 = interval16.isAfter((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight71.withYearOfEra(1128);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minus(readablePeriod76);
        org.joda.time.DateMidnight.Property property78 = dateMidnight77.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str39, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 35L + "'", long65 == 35L);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property2.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minus(0L);
        org.joda.time.DateTime dateTime7 = dateMidnight6.toDateTime();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = dateMidnight6.isBefore(readableInstant8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.plus(0L);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.DateMidnight.Property property13 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.plusMonths(35351);
        int int16 = dateMidnight15.getWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4968 + "'", int16 == 4968);
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYear((int) (short) -1);
        java.lang.String str23 = localDate22.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 16, chronology29);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval43 = interval35.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str47 = interval46.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = dateTime66.withMinuteOfHour((int) (short) 0);
        boolean boolean69 = interval58.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval46.contains((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval46.withPeriodBeforeEnd(readablePeriod71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval46.toPeriod(periodType73);
        org.joda.time.Interval interval75 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        long long78 = chronology29.add((org.joda.time.ReadablePeriod) period74, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod79 = period74.toMutablePeriod();
        org.joda.time.LocalDate localDate80 = localDate22.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.LocalDate.Property property81 = localDate80.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int83 = localDate80.getValue(292278992);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 292278992");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-0001-02-11" + "'", str23, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str47, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1163943L + "'", long78 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        int int18 = property10.compareTo((org.joda.time.ReadablePartial) yearMonthDay12);
        org.joda.time.Chronology chronology19 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = yearMonthDay12.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate26 = localDate4.plusWeeks(2);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.LocalDate.Property property28 = localDate26.dayOfMonth();
        org.joda.time.LocalDate.Property property29 = localDate26.yearOfEra();
        org.joda.time.LocalDate localDate30 = property29.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = property29.setCopy("\uc77c\ubcf8");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??????\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2010-02-25" + "'", str27, "2010-02-25");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withWeekyear((-456566));
        boolean boolean10 = dateMidnight3.isEqual((long) 46);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getVariant();
        java.lang.String str20 = dateTimeField16.getAsShortText(3, locale18);
        int int21 = dateTimeField16.getMaximumValue();
        long long24 = dateTimeField16.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = dateTimeField16.getAsShortText(readablePartial25, 9, locale27);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.toLanguageTag();
        java.lang.String str33 = dateTimeField16.getAsText((-1), locale31);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale40.getDisplayCountry();
        int int43 = dateTimeField39.getMaximumTextLength(locale40);
        java.lang.String str44 = locale31.getDisplayName(locale40);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale45.getVariant();
        java.lang.String str47 = locale31.getDisplayVariant(locale45);
        java.lang.String str48 = locale31.getDisplayLanguage();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance();
        calendar49.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay53 = org.joda.time.YearMonthDay.fromCalendarFields(calendar49);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property56 = yearMonthDay53.monthOfYear();
        java.lang.String str57 = property56.getAsString();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        boolean boolean59 = property56.equals((java.lang.Object) locale58);
        java.lang.String str60 = locale31.getDisplayName(locale58);
        java.util.Calendar calendar61 = dateMidnight3.toCalendar(locale58);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "3" + "'", str20, "3");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "9" + "'", str29, "9");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u53f0\u7063" + "'", str42, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1657878888317,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=317,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "7" + "'", str57, "7");
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Zone must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime.Property property12 = dateTime10.year();
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        int int14 = dateTime10.getWeekyear();
        java.lang.Object obj15 = null;
        boolean boolean16 = dateTime10.equals(obj15);
        int int17 = dateTime10.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay33 = org.joda.time.YearMonthDay.fromCalendarFields(calendar29);
        calendar29.setFirstDayOfWeek(2022);
        int int37 = calendar29.getMinimum(2);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale45.getDisplayCountry();
        int int48 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str49 = locale45.getDisplayScript();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale45);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone38, locale45);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long54 = dateTimeZone52.previousTransition((long) 8);
        long long56 = dateTimeZone28.getMillisKeepLocal(dateTimeZone52, (long) (byte) 0);
        int int58 = dateTimeZone52.getOffsetFromLocal(8L);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone52);
        boolean boolean60 = dateTimeZone52.isFixed();
        long long64 = dateTimeZone52.convertLocalToUTC((long) (-52), false, (long) 706);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime66 = dateTime10.withZoneRetainFields(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "292278993-02-08T09:54:48.377Z" + "'", str11, "292278993-02-08T09:54:48.377Z");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278993 + "'", int17 == 292278993);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1657878888377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u53f0\u7063" + "'", str47, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573288377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644573288377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 8L + "'", long54 == 8L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-52L) + "'", long64 == (-52L));
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfYear(10);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        org.joda.time.LocalDate localDate7 = property5.addToCopy(35297719);
        org.joda.time.LocalDate localDate9 = property5.setCopy(43);
        org.joda.time.LocalDate localDate10 = property5.roundCeilingCopy();
        int int11 = localDate10.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime8 = property5.addCopy((long) (short) 10);
        org.joda.time.LocalTime localTime9 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime10 = property5.getLocalTime();
        org.joda.time.LocalTime localTime11 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfSecond((int) (short) 0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573288465,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=465,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 465 + "'", int4 == 465);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        int int10 = dateTimeField5.getMaximumValue();
        long long13 = dateTimeField5.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = dateTimeField5.getAsShortText(readablePartial14, 9, locale16);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.toLanguageTag();
        java.lang.String str22 = dateTimeField5.getAsText((-1), locale20);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.lang.String str31 = locale29.getDisplayCountry();
        int int32 = dateTimeField28.getMaximumTextLength(locale29);
        java.lang.String str33 = locale20.getDisplayName(locale29);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("15.07.2022 09:48:28");
        java.lang.String str36 = locale29.getDisplayName(locale35);
        java.lang.String str37 = locale29.getISO3Language();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1" + "'", str22, "-1");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u53f0\u7063" + "'", str31, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (Taiwan)" + "'", str36, "Chinese (Taiwan)");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zho" + "'", str37, "zho");
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(15);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusYears(35272);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay6.year();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878888503,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=503,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = property3.addToCopy(8);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        long long10 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfWeek();
        org.joda.time.DateTime dateTime14 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) dateMidnight12);
        int int15 = timeOfDay5.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay5.minusMinutes(52);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getVariant();
        java.lang.String str17 = dateTimeField13.getAsShortText(3, locale15);
        long long19 = dateTimeField13.roundHalfCeiling((long) 8);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.lang.String str22 = dateTimeField13.getAsShortText(434, locale21);
        java.lang.String str23 = dateTimeField6.getAsShortText(77846400033L, locale21);
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        int int34 = dateTime30.getYear();
        org.joda.time.DateTime.Property property35 = dateTime30.weekyear();
        org.joda.time.DateTime dateTime36 = property35.withMaximumValue();
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.minusMillis(7);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(readableDuration40, (int) '#');
        int int43 = dateTime39.getWeekyear();
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar45 = dateTime39.toCalendar(locale44);
        java.util.Locale.setDefault(category25, locale44);
        org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.centuryOfEra();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfCentury();
        org.joda.time.LocalDate.Property property51 = localDate49.era();
        int int52 = localDate49.size();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        boolean boolean58 = dateTime57.isBeforeNow();
        org.joda.time.DateTime dateTime60 = dateTime57.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean62 = dateTime60.isSupported(dateTimeFieldType61);
        int int63 = localDate49.indexOf(dateTimeFieldType61);
        org.joda.time.DateMidnight.Property property64 = dateMidnight47.property(dateTimeFieldType61);
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight47.toMutableDateTimeISO();
        java.util.Locale locale66 = java.util.Locale.US;
        java.util.Calendar calendar67 = mutableDateTime65.toCalendar(locale66);
        java.util.Locale locale68 = locale66.stripExtensions();
        java.util.Locale.setDefault(category25, locale68);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime73 = interval72.getEnd();
        org.joda.time.Chronology chronology74 = interval72.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.year();
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleKeys();
        java.lang.String str78 = locale76.getDisplayCountry();
        int int79 = dateTimeField75.getMaximumTextLength(locale76);
        java.lang.String str80 = locale76.getVariant();
        java.lang.String str81 = locale76.getCountry();
        java.util.Locale.setDefault(category25, locale76);
        java.util.Locale locale83 = java.util.Locale.getDefault(category25);
        java.lang.String str84 = dateTimeField6.getAsText(633, locale83);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "434" + "'", str22, "434");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "19" + "'", str23, "19");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=9223371988912488521,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=292278993,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=521,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u53f0\u7063" + "'", str78, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "TW" + "'", str81, "TW");
        org.junit.Assert.assertNotNull(locale83);
// flaky:         org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "633" + "'", str84, "633");
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears(10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        int int19 = localDateTime17.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withWeekyear(11);
        int int22 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int24 = localDateTime21.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(962);
        int int28 = localDateTime25.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        int int12 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.plusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime19.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        boolean boolean30 = dateTime29.isBeforeNow();
        org.joda.time.DateTime dateTime32 = dateTime29.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime32.getZone();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay40 = org.joda.time.YearMonthDay.fromCalendarFields(calendar36);
        calendar36.setFirstDayOfWeek(2022);
        int int44 = calendar36.getMinimum(2);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.year();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        java.lang.String str54 = locale52.getDisplayCountry();
        int int55 = dateTimeField51.getMaximumTextLength(locale52);
        java.lang.String str56 = locale52.getDisplayScript();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale52);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone45, locale52);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        long long61 = dateTimeZone59.previousTransition((long) 8);
        long long63 = dateTimeZone35.getMillisKeepLocal(dateTimeZone59, (long) (byte) 0);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 368, dateTimeZone35);
        long long68 = dateTimeZone35.adjustOffset((long) 93, false);
        org.joda.time.DateTime dateTime69 = dateTime19.withZone(dateTimeZone35);
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now(dateTimeZone35);
        org.joda.time.Interval interval71 = localDate70.toInterval();
        org.joda.time.Duration duration72 = interval71.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime74 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration72, 35653710);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371988912488618 + 3080480544000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35688 + "'", int12 == 35688);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1657878888618,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=618,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u53f0\u7063" + "'", str54, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644573288619,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=619,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644573288619,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=619,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 8L + "'", long61 == 8L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 93L + "'", long68 == 93L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(duration72);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        java.util.GregorianCalendar gregorianCalendar7 = dateMidnight3.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = gregorianCalendar7.getActualMinimum(389);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 389");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Calendar calendar4 = builder3.build();
        calendar4.setFirstDayOfWeek(23);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 35271, chronology12);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        boolean boolean16 = localDateTime14.isSupported(durationFieldType15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minus(readableDuration17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfMonth(20);
        boolean boolean23 = calendar4.before((java.lang.Object) localDateTime20);
        java.lang.String str24 = calendar4.getCalendarType();
        int int25 = calendar4.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = calendar4.get(169);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 169");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=23,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gregory" + "'", str24, "gregory");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 23 + "'", int25 == 23);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        int int3 = localDate0.size();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        int int14 = localDate0.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property15 = localDate0.weekyear();
        org.joda.time.LocalDate localDate17 = property15.addToCopy(35337);
        int int18 = localDate17.getWeekyear();
        org.joda.time.LocalDate.Property property19 = localDate17.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37359 + "'", int18 == 37359);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = property5.getAsShortText(locale6);
        int int9 = property5.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        org.joda.time.DurationField durationField11 = property5.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        int int20 = dateTime16.getYear();
        org.joda.time.DateTime.Property property21 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        boolean boolean24 = dateTime22.isAfter((long) 434);
        org.joda.time.DateTime dateTime26 = dateTime22.minusSeconds(53);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime26.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar28 = dateTime26.toGregorianCalendar();
        int int29 = property5.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.YearMonthDay yearMonthDay30 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property5.getField();
        org.joda.time.YearMonthDay yearMonthDay32 = property5.getYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e8c\u6708" + "'", str8, "\u4e8c\u6708");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationField durationField8 = chronology5.minutes();
        java.lang.String str9 = chronology5.toString();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getVariant();
        java.lang.String str19 = dateTimeField15.getAsShortText(3, locale17);
        long long21 = dateTimeField15.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.monthOfYear();
        int int26 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusMinutes(35270);
        int int29 = localDateTime24.size();
        int[] intArray31 = chronology5.get((org.joda.time.ReadablePartial) localDateTime24, (long) 35296);
        long long35 = chronology5.add((long) (-2022), 32428956L, 35543);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str9, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "3" + "'", str19, "3");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 35296]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1152622381086L + "'", long35 == 1152622381086L);
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(10L);
        org.joda.time.LocalTime localTime3 = localTime1.withHourOfDay(3);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 15);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMillis((int) (short) -1);
        java.lang.String str8 = timeOfDay7.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = timeOfDay7.getFieldTypes();
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DurationField durationField17 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay7.withChronologyRetainFields(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology15.getDateTimeMillis(660, 35275, 46, 39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35275 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T00:00:00.016" + "'", str8, "T00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusMonths(746);
        org.joda.time.LocalDate localDate6 = localDate4.minusYears(373);
        int int7 = localDate6.getYearOfCentury();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        int int11 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        int int22 = localDate8.indexOf(dateTimeFieldType20);
        org.joda.time.LocalDate localDate24 = localDate8.withDayOfYear((int) '#');
        org.joda.time.LocalDate localDate26 = localDate8.withDayOfYear((int) (short) 10);
        int int27 = localDate26.getDayOfYear();
        org.joda.time.LocalDate localDate29 = localDate26.minusYears(12);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        boolean boolean40 = dateTime39.isBeforeNow();
        org.joda.time.DateTime dateTime42 = dateTime39.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime39.toDateTime(chronology47);
        boolean boolean49 = interval32.isAfter((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.withPeriodAdded(readablePeriod52, 0);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone58 = dateMidnight57.getZone();
        org.joda.time.DateTime dateTime59 = dateTime48.withZoneRetainFields(dateTimeZone58);
        org.joda.time.Interval interval60 = localDate29.toInterval(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDate6.toDateTimeAtCurrentTime(dateTimeZone58);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 880 + "'", int50 == 880);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withDayOfYear((int) '#');
        int int5 = dateMidnight2.getWeekOfWeekyear();
        int int6 = dateMidnight2.getWeekyear();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval17 = interval9.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration18 = interval17.toDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours((int) (byte) 100);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime33 = dateTime0.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime35 = dateTime0.plusSeconds(400);
        int int36 = dateTime35.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        int int6 = dateTimeField5.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.withYear(22);
        int int13 = yearMonthDay8.size();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromCalendarFields(calendar14);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay18.year();
        int[] intArray22 = yearMonthDay18.getValues();
        int int23 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay8, intArray22);
        org.joda.time.DateTime dateTime24 = yearMonthDay8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime26 = dateTime24.withMillisOfDay(35373969);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1657878888940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 7, 15]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-292275054) + "'", int23 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property10 = localDate7.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTime dateTime17 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean27 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.DateTime.Property property29 = dateTime17.property(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType26.getRangeDurationType();
        int int31 = localDate7.get(dateTimeFieldType26);
        int int32 = yearMonthDay4.get(dateTimeFieldType26);
        int int33 = yearMonthDay4.getDayOfMonth();
        org.joda.time.Chronology chronology34 = yearMonthDay4.getChronology();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878888967,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=48,MILLISECOND=967,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateTime.Property property14 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays(306);
        org.joda.time.DateTime dateTime20 = dateTime15.plusWeeks(3);
        int int21 = dateTime20.getDayOfYear();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight0, chronology22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight0.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 60 + "'", int21 == 60);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 182);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((-1));
        int int8 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.parse("54", dateTimeFormatter5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35405195);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now();
        long long7 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
        boolean boolean10 = dateMidnight6.isAfter((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight6.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withDayOfWeek(3);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.year();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        int int18 = dateTimeField16.getMaximumTextLength(locale17);
        java.util.Locale locale19 = locale17.stripExtensions();
        java.lang.String str20 = dateTimeZone1.getShortName((long) 35295, locale19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+09:50:05.195" + "'", str20, "+09:50:05.195");
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(35379776, 919, 972, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35379776 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getVariant();
        java.lang.String str17 = dateTimeField13.getAsShortText(3, locale15);
        int int18 = dateTimeField13.getMaximumValue();
        long long21 = dateTimeField13.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) long21, dateTimeZone22);
        boolean boolean24 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime23);
        java.util.Date date25 = dateTime23.toDate();
        long long26 = date25.getTime();
        date25.setYear((-52));
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = localDate29.withMonthOfYear(481);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 481 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 31 23:59:59 UTC 1848");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        int int10 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withWeekOfWeekyear(14);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(35408);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusWeeks(342);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(19);
        boolean boolean11 = localDate9.equals((java.lang.Object) "German");
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) localDate9);
        int int13 = localDate12.getYearOfCentury();
        org.joda.time.LocalDate.Property property14 = localDate12.yearOfCentury();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.LocalDate localDate16 = property14.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "59" + "'", str15, "59");
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        boolean boolean3 = dateTimeZone1.isStandardOffset(743L);
        long long7 = dateTimeZone1.convertLocalToUTC((long) (byte) 1, false, (long) 335);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-487L) + "'", long7 == (-487L));
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode5 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet15, filteringMode16);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.lang.String str26 = locale24.getDisplayCountry();
        int int27 = dateTimeField23.getMaximumTextLength(locale24);
        java.lang.String str28 = locale24.getDisplayScript();
        java.lang.String str29 = locale24.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale24.getDisplayLanguage(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.lang.String str36 = locale35.getLanguage();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet37);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet37);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + filteringMode5 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode5.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode16.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u53f0\u7063" + "'", str26, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str29, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u5fb7\u6587" + "'", str31, "\u5fb7\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinesisch" + "'", str32, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zh" + "'", str36, "zh");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(chronology6);
        org.joda.time.DateTimeField dateTimeField12 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-62100742311688L), chronology6);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.monthOfYear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(175L, chronology6);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Interval interval4 = interval2.withDurationBeforeEnd(readableDuration3);
        org.joda.time.DateTime dateTime5 = interval4.getStart();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours((int) (byte) 100);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfDay();
        java.lang.String str19 = property18.getName();
        org.joda.time.DateTime dateTime21 = property18.addWrapFieldToCopy(292278993);
        org.joda.time.DateTime dateTime22 = property18.roundFloorCopy();
        int int23 = dateTime22.getDayOfYear();
        int int24 = dateTime22.getDayOfWeek();
        boolean boolean25 = interval4.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime27 = dateTime22.plusMinutes(0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "secondOfDay" + "'", str19, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(387);
        org.joda.time.DateTime dateTime14 = dateTime10.withYear(48);
        org.joda.time.DateTime.Property property15 = dateTime10.minuteOfDay();
        int int16 = property15.getMaximumValueOverall();
        org.joda.time.Interval interval17 = property15.toInterval();
        int int18 = property15.get();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1439 + "'", int16 == 1439);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 594 + "'", int18 == 594);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property2.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth(19);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 16, chronology20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval34 = interval26.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str38 = interval37.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval49 = interval41.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay51.toDateTime(timeOfDay52, dateTimeZone53);
        boolean boolean55 = dateTime54.isBeforeNow();
        org.joda.time.DateTime dateTime57 = dateTime54.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour((int) (short) 0);
        boolean boolean60 = interval49.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = interval37.contains((org.joda.time.ReadableInterval) interval49);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Interval interval63 = interval37.withPeriodBeforeEnd(readablePeriod62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval37.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        long long69 = chronology20.add((org.joda.time.ReadablePeriod) period65, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod70 = period65.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight4.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone73 = dateMidnight72.getZone();
        java.lang.String str75 = dateTimeZone73.getName((long) 44);
        java.lang.String str77 = dateTimeZone73.getName((long) 25);
        long long80 = dateTimeZone73.convertLocalToUTC(1644573255582L, true);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str38, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1163943L + "'", long69 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1644573255582L + "'", long80 == 1644573255582L);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusMonths(35275);
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        int int19 = localDate18.getWeekyear();
        int int20 = localDate18.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate18.withDayOfMonth(35431824);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35431824 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-918) + "'", int19 == (-918));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 919 + "'", int20 == 919);
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(22);
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(5);
        org.joda.time.LocalTime.Property property11 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property11.withMinimumValue();
        org.joda.time.Interval interval13 = property11.toInterval();
        org.joda.time.LocalTime localTime14 = property11.getLocalTime();
        org.joda.time.LocalTime localTime16 = property11.addWrapFieldToCopy(125);
        org.joda.time.LocalTime localTime18 = localTime16.minusSeconds(254);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) 290);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withCenturyOfEra(71);
        boolean boolean23 = localTime16.equals((java.lang.Object) dateMidnight20);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573289270,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=270,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("days");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setRegion("2022-02-11T09:52:33.757Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:52:33.757Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusYears(0);
        int int11 = localDateTime7.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(851);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 851 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.withYear(22);
        int int14 = yearMonthDay9.size();
        int[] intArray16 = new int[] { 292278994 };
        int int17 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay9, intArray16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay33 = org.joda.time.YearMonthDay.fromCalendarFields(calendar29);
        calendar29.setFirstDayOfWeek(2022);
        int int37 = calendar29.getMinimum(2);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale45.getDisplayCountry();
        int int48 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str49 = locale45.getDisplayScript();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale45);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone38, locale45);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long54 = dateTimeZone52.previousTransition((long) 8);
        long long56 = dateTimeZone28.getMillisKeepLocal(dateTimeZone52, (long) (byte) 0);
        int int58 = dateTimeZone28.getOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay9.toDateMidnight(dateTimeZone28);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        org.joda.time.Interval interval70 = interval62.overlap((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration71 = interval70.toDuration();
        long long72 = duration71.getMillis();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight59, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration74 = duration71.toDuration();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[292278994]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1657878889310,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=310,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u53f0\u7063" + "'", str47, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573289310,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=310,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644573289310,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=310,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 8L + "'", long54 == 8L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 33L + "'", long72 == 33L);
        org.junit.Assert.assertNotNull(duration74);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        int int5 = dateTimeFormatter2.getDefaultYear();
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.ReadablePartial readablePartial7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTimeFormatter2.print(readablePartial7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusSeconds(32770);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573289355,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=355,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:54:49 UTC 2022");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusYears(387);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime16.getZone();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromCalendarFields(calendar20);
        calendar20.setFirstDayOfWeek(2022);
        int int28 = calendar20.getMinimum(2);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale36.getDisplayCountry();
        int int39 = dateTimeField35.getMaximumTextLength(locale36);
        java.lang.String str40 = locale36.getDisplayScript();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale36);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone29, locale36);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long45 = dateTimeZone43.previousTransition((long) 8);
        long long47 = dateTimeZone19.getMillisKeepLocal(dateTimeZone43, (long) (byte) 0);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay5.toDateMidnight(dateTimeZone19);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = property50.setCopy(270);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1657878889377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u53f0\u7063" + "'", str38, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644573289377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573289377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 8L + "'", long45 == 8L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight52);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(86399, 4, 32769, 27093);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("405");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 405");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.weekyear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusYears(808);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withWeekyear(0);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573289426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = localTime1.plusHours((int) (short) -1);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalTime localTime14 = property12.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = localTime14.plusMillis(283);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfCentury(10);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property22 = localDate21.weekyear();
        org.joda.time.LocalDate localDate23 = property22.roundCeilingCopy();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime33.toDateTime(chronology41);
        boolean boolean43 = interval26.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDate localDate44 = dateTime42.toLocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.withYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay48.toDateTime(timeOfDay49, dateTimeZone50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay48.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay54.monthOfYear();
        org.joda.time.DateTime dateTime59 = yearMonthDay54.toDateTimeAtCurrentTime();
        int int60 = property52.compareTo((org.joda.time.ReadablePartial) yearMonthDay54);
        org.joda.time.Chronology chronology61 = yearMonthDay54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay54.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean65 = yearMonthDay54.isSupported(dateTimeFieldType64);
        boolean boolean66 = localDate44.equals((java.lang.Object) boolean65);
        org.joda.time.LocalDate.Property property67 = localDate44.yearOfEra();
        boolean boolean68 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate44);
        int int69 = localDate23.getMonthOfYear();
        org.joda.time.LocalDate.Property property70 = localDate23.yearOfEra();
        org.joda.time.LocalDate localDate71 = property70.withMaximumValue();
        java.lang.String str72 = localDate71.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = localTime16.isAfter((org.joda.time.ReadablePartial) localDate71);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573289441,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=441,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:54:49.441" + "'", str4, "09:54:49.441");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573289442,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=442,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "292278993-01-03" + "'", str72, "292278993-01-03");
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(120003, 495, 185);
        java.util.Calendar.Builder builder10 = builder5.setTimeOfDay(338, 423, 564, 7);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.set((int) '#', (int) 'u', 20, 15, (int) '4', 0);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        boolean boolean15 = calendar0.after((java.lang.Object) dateTimeField14);
        int int16 = calendar0.getMinimalDaysInFirstWeek();
        long long17 = calendar0.getTimeInMillis();
        calendar0.setFirstDayOfWeek(2017);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar0.getMaximum(927);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 927");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-60753485279527,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2017,minimalDaysInFirstWeek=1,ERA=1,YEAR=44,MONTH=9,WEEK_OF_YEAR=43,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=294,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=52,SECOND=0,MILLISECOND=473,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60753485279527L) + "'", long17 == (-60753485279527L));
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("Korean (South Korea)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Korean (South Korea)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35309838);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfSecond(398);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        long long5 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone6 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.lang.String str13 = yearMonthDay8.toString("\u4e8c\u6708", locale10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone6, locale10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        int int23 = dateTime19.getYear();
        org.joda.time.DateTime.Property property24 = dateTime19.weekyear();
        org.joda.time.DateTime.Property property25 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime26 = property25.roundCeilingCopy();
        org.joda.time.DateTime dateTime27 = property25.withMinimumValue();
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        int int37 = dateTime33.getYear();
        org.joda.time.DateTime.Property property38 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime39 = property38.withMaximumValue();
        boolean boolean40 = dateTime39.isBeforeNow();
        org.joda.time.DateTime dateTime42 = dateTime39.minusMillis(7);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded(readableDuration43, (int) '#');
        int int46 = dateTime42.getWeekyear();
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar48 = dateTime42.toCalendar(locale47);
        java.util.Locale.setDefault(category28, locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.lang.String str52 = locale50.getCountry();
        java.util.Locale.setDefault(category28, locale50);
        java.lang.String str54 = property25.getAsText(locale50);
        java.util.Set<java.lang.String> strSet55 = locale50.getUnicodeLocaleKeys();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone6, locale50);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str59 = dateTimeZone57.getNameKey(3143292L);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878889521,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=521,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:54:49 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1657878889521L + "'", long5 == 1657878889521L);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u5fb7\u6587" + "'", str11, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e8c\u6708" + "'", str13, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644573289521,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=521,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.FORMAT + "'", category28.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 292278993 + "'", int46 == 292278993);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=9223371988912489515,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=292278993,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u5fb7\u6587" + "'", str51, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "20" + "'", str54, "20");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644573289522,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=522,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTime dateTime13 = yearMonthDay8.toDateTimeAtCurrentTime();
        int int14 = property6.compareTo((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.Chronology chronology15 = yearMonthDay8.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay8.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean19 = yearMonthDay8.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime27.getZone();
        int int32 = dateTimeZone30.getStandardOffset((long) 13);
        long long36 = dateTimeZone30.convertLocalToUTC(229L, false, (long) 49);
        long long38 = dateTimeZone30.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime39 = yearMonthDay8.toDateTimeAtCurrentTime(dateTimeZone30);
        long long41 = dateTimeZone30.nextTransition(2118095273L);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1657878547272L, dateTimeZone30);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 229L + "'", long36 == 229L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 49L + "'", long38 == 49L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2118095273L + "'", long41 == 2118095273L);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("11-Feb-2022 09:48:18");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"11-Feb-2022 09:48:18\" is malformed at \"-Feb-2022 09:48:18\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime.Property property8 = localTime6.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str10 = dateTimeFieldType9.toString();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        boolean boolean12 = localTime6.isSupported(dateTimeFieldType9);
        org.joda.time.LocalTime localTime14 = localTime6.withMillisOfSecond(443);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573289589,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=589,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "centuryOfEra" + "'", str10, "centuryOfEra");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        int int21 = localDate20.getEra();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTime(timeOfDay24, dateTimeZone25);
        boolean boolean27 = dateTime26.isBeforeNow();
        org.joda.time.DateTime dateTime29 = dateTime26.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime31 = dateTime29.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime29.getZone();
        org.joda.time.DateTime dateTime33 = localDate20.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate20.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime36 = dateTime34.plusMillis(39);
        int int37 = dateTime36.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        int int44 = dateTime43.getCenturyOfEra();
        org.joda.time.DateTime dateTime46 = dateTime43.plusMillis((int) (byte) 0);
        int int47 = dateTime46.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay49.toDateTime(timeOfDay50, dateTimeZone51);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay49.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay49.property(dateTimeFieldType54);
        org.joda.time.DateTime.Property property56 = dateTime46.property(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType54.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.Chronology chronology60 = yearMonthDay59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType57.getField(chronology60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay66 = org.joda.time.YearMonthDay.fromCalendarFields(calendar62);
        calendar62.setFirstDayOfWeek(2022);
        int int70 = calendar62.getMinimum(2);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.year();
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleKeys();
        java.lang.String str80 = locale78.getDisplayCountry();
        int int81 = dateTimeField77.getMaximumTextLength(locale78);
        java.lang.String str82 = locale78.getDisplayScript();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(locale78);
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone71, locale78);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        long long87 = dateTimeZone85.previousTransition((long) 8);
        java.lang.String str88 = dateTimeZone85.toString();
        java.util.TimeZone timeZone89 = dateTimeZone85.toTimeZone();
        org.joda.time.Chronology chronology90 = chronology60.withZone(dateTimeZone85);
        org.joda.time.DateMidnight dateMidnight91 = new org.joda.time.DateMidnight((long) 29, chronology60);
        org.joda.time.YearMonthDay yearMonthDay92 = new org.joda.time.YearMonthDay(chronology60);
        org.joda.time.DateTime dateTime93 = dateTime36.toDateTime(chronology60);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20 + "'", int44 == 20);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 11 + "'", int47 == 11);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1657878889602,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=602,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u53f0\u7063" + "'", str80, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1644573289602,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=602,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1644573289602,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=602,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 8L + "'", long87 == 8L);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Etc/UTC" + "'", str88, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.monthOfYear();
        int int9 = yearMonthDay4.getValue((int) (short) 0);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        boolean boolean12 = dateTimeField11.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField11.getType();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878889704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=704,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime18.toMutableDateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        boolean boolean48 = dateTime47.isBeforeNow();
        org.joda.time.DateTime dateTime50 = dateTime47.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime47.toDateTime(chronology55);
        boolean boolean57 = interval40.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime70 = interval69.getEnd();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        org.joda.time.DateTime dateTime72 = dateTime63.toDateTime(chronology71);
        boolean boolean73 = durationFieldType58.isSupported(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime56.toDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField75 = chronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology71.era();
        org.joda.time.Chronology chronology77 = chronology71.withUTC();
        org.joda.time.DateTime dateTime78 = dateTime18.withChronology(chronology71);
        org.joda.time.DateTime.Property property79 = dateTime78.hourOfDay();
        org.joda.time.DateTime dateTime81 = property79.addToCopy(2066);
        org.joda.time.DateTime dateTime83 = dateTime81.withYearOfEra(477);
        org.joda.time.DateTime dateTime85 = dateTime83.plusHours(35435);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str40 = interval39.toString();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.Interval interval51 = interval43.overlap((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone52);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTime(timeOfDay54, dateTimeZone55);
        boolean boolean57 = dateTime56.isBeforeNow();
        org.joda.time.DateTime dateTime59 = dateTime56.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime61 = dateTime59.withMinuteOfHour((int) (short) 0);
        boolean boolean62 = interval51.contains((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean63 = interval39.contains((org.joda.time.ReadableInterval) interval51);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Interval interval65 = interval39.withPeriodBeforeEnd(readablePeriod64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval39.toPeriod(periodType66);
        org.joda.time.DateTime dateTime68 = dateTime18.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime71 = dateTime69.withYear(589);
        org.joda.time.DateTime dateTime73 = dateTime69.minusMillis(0);
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str40, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode5 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.UK;
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.lang.String str26 = locale24.getDisplayCountry();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = locale27.getDisplayCountry();
        java.util.Locale locale31 = new java.util.Locale("");
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.UK;
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale16, locale17, locale18, locale19, locale20, locale22, locale24, locale27, locale31, locale32, locale33, locale34, locale35, locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList39, filteringMode41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.Locale locale50 = java.util.Locale.UK;
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str57 = locale55.getDisplayCountry();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale58.getDisplayCountry();
        java.util.Locale locale62 = new java.util.Locale("");
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Locale locale64 = java.util.Locale.UK;
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale51, locale53, locale55, locale58, locale62, locale63, locale64, locale65, locale66, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList70, filteringMode72);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap76);
        java.util.Locale locale78 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleAttributes();
        java.lang.String str80 = java.util.Locale.lookupTag(languageRangeList77, (java.util.Collection<java.lang.String>) strSet79);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + filteringMode5 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode5.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u5fb7\u6587" + "'", str23, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u53f0\u7063" + "'", str26, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u53f0\u7063" + "'", str29, "\u53f0\u7063");
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u5fb7\u6587" + "'", str54, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u53f0\u7063" + "'", str57, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u53f0\u7063" + "'", str60, "\u53f0\u7063");
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode72.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(11);
        int int10 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusWeeks(37);
        int int13 = localDateTime12.getSecondOfMinute();
        int int14 = localDateTime12.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 51);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withPivotYear(2001);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = dateTimeFormatter9.parseLocalDateTime("09:50:50.181");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("\u5fb7\u6587\u5fb7\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?? (??)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.Interval interval32 = interval29.withEndMillis((long) 10);
        boolean boolean33 = interval14.isBefore((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval44 = interval36.overlap((org.joda.time.ReadableInterval) interval41);
        boolean boolean45 = interval41.containsNow();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay49.toDateTime(timeOfDay50, dateTimeZone51);
        boolean boolean53 = dateTime52.isBeforeNow();
        org.joda.time.DateTime dateTime55 = dateTime52.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime57 = dateTime55.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime55.getZone();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance();
        calendar59.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay63 = org.joda.time.YearMonthDay.fromCalendarFields(calendar59);
        calendar59.setFirstDayOfWeek(2022);
        int int67 = calendar59.getMinimum(2);
        java.util.TimeZone timeZone68 = calendar59.getTimeZone();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.year();
        java.util.Locale locale75 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleKeys();
        java.lang.String str77 = locale75.getDisplayCountry();
        int int78 = dateTimeField74.getMaximumTextLength(locale75);
        java.lang.String str79 = locale75.getDisplayScript();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale75);
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone68, locale75);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        long long84 = dateTimeZone82.previousTransition((long) 8);
        long long86 = dateTimeZone58.getMillisKeepLocal(dateTimeZone82, (long) (byte) 0);
        int int88 = dateTimeZone82.getOffsetFromLocal(8L);
        org.joda.time.Interval interval89 = new org.joda.time.Interval((long) (byte) 0, 0L, dateTimeZone82);
        boolean boolean90 = interval41.contains((org.joda.time.ReadableInterval) interval89);
        boolean boolean91 = interval14.abuts((org.joda.time.ReadableInterval) interval89);
        org.joda.time.Chronology chronology92 = interval14.getChronology();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1657878889939,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=939,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale75);
// flaky:         org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u53f0\u7063" + "'", str77, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644573289939,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=939,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1644573289939,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=49,MILLISECOND=939,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 8L + "'", long84 == 8L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(chronology92);
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("292278993-02-08T09:50:19.811Z");
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate(58, 35296, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: -292275054");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573290026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=26,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        java.util.Date date3 = new java.util.Date(35275, 432, 1134);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 07 00:00:00 UTC 37214");
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDate0.toDateTimeAtCurrentTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtMidnight();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(chronology21);
        boolean boolean23 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        boolean boolean30 = dateTime29.isBeforeNow();
        org.joda.time.DateTime dateTime32 = dateTime29.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology37);
        boolean boolean39 = durationFieldType24.isSupported(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime22.toDateTime(chronology37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str44 = interval43.toString();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval55 = interval47.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone56);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTime(timeOfDay58, dateTimeZone59);
        boolean boolean61 = dateTime60.isBeforeNow();
        org.joda.time.DateTime dateTime63 = dateTime60.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime65 = dateTime63.withMinuteOfHour((int) (short) 0);
        boolean boolean66 = interval55.contains((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean67 = interval43.contains((org.joda.time.ReadableInterval) interval55);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Interval interval69 = interval43.withPeriodBeforeEnd(readablePeriod68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = interval43.toPeriod(periodType70);
        org.joda.time.DateTime dateTime72 = dateTime22.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.DateTime dateTime74 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period71, 660);
        org.joda.time.TimeOfDay timeOfDay75 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay75.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property78 = timeOfDay77.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField79 = property78.getField();
        org.joda.time.TimeOfDay timeOfDay80 = property78.withMaximumValue();
        org.joda.time.TimeOfDay.Property property81 = timeOfDay80.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay82 = property81.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property81.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = dateTime74.withField(dateTimeFieldType83, 581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 581 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str44, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(timeOfDay80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology6.getZone();
        long long13 = dateTimeZone9.convertLocalToUTC((long) 274, false, 1657878632974L);
        int int15 = dateTimeZone9.getOffset((long) (short) 100);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 274L + "'", long13 == 274L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(8L, chronology5);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology5);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 16, chronology8);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval22 = interval14.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str26 = interval25.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime45.withMinuteOfHour((int) (short) 0);
        boolean boolean48 = interval37.contains((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = interval25.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Interval interval51 = interval25.withPeriodBeforeEnd(readablePeriod50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval25.toPeriod(periodType52);
        org.joda.time.Interval interval54 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        long long57 = chronology8.add((org.joda.time.ReadablePeriod) period53, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod58 = period53.toMutablePeriod();
        org.joda.time.Interval interval59 = interval2.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        boolean boolean60 = interval2.containsNow();
        org.joda.time.Period period61 = interval2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        boolean boolean67 = dateTime66.isBeforeNow();
        org.joda.time.DateTime dateTime69 = dateTime66.withMonthOfYear((int) (byte) 1);
        int int70 = dateTime66.getYear();
        org.joda.time.DateTime.Property property71 = dateTime66.weekyear();
        org.joda.time.DateTime dateTime72 = property71.withMaximumValue();
        org.joda.time.DateTime.Property property73 = dateTime72.millisOfDay();
        int int74 = dateTime72.getSecondOfDay();
        org.joda.time.DateTime dateTime76 = dateTime72.plusWeeks(0);
        boolean boolean77 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime79 = dateTime72.withCenturyOfEra(453);
        org.joda.time.DateTime.Property property80 = dateTime79.yearOfEra();
        org.joda.time.DateTime dateTime81 = property80.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str26, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1163943L + "'", long57 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35690 + "'", int74 == 35690);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("31274-4-27 18:00:00");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withPeriodAdded(readablePeriod4, 22);
        int int7 = dateMidnight6.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(35277);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.year();
        org.joda.time.DateMidnight dateMidnight11 = property10.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        java.util.Date date5 = new java.util.Date(33, 706, 2000, 99, 35298);
        int int6 = date5.getMinutes();
        org.junit.Assert.assertEquals(date5.toString(), "Tue May 20 15:18:00 UTC 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 18 + "'", int6 == 18);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addNoWrapToCopy(10);
        org.joda.time.TimeOfDay timeOfDay7 = property3.getTimeOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plus(readablePeriod8);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(563);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int7 = dateTime3.get(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = property11.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime14 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = property11.addToCopy(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = dateTime3.get(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfCentury(10);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay18.monthOfYear();
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        int int24 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.Chronology chronology25 = yearMonthDay18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay18.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean29 = yearMonthDay18.isSupported(dateTimeFieldType28);
        boolean boolean30 = localDate10.isSupported(dateTimeFieldType28);
        org.joda.time.DateTime dateTime32 = dateTime4.withField(dateTimeFieldType28, 17);
        org.joda.time.DateTime.Property property33 = dateTime32.secondOfDay();
        org.joda.time.DateMidnight dateMidnight34 = dateTime32.toDateMidnight();
        org.joda.time.DateTime dateTime36 = dateTime32.plusMinutes(935);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(211);
        java.lang.String str2 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+211:00" + "'", str2, "+211:00");
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.getLocalTime();
        org.joda.time.LocalTime localTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573290325,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=325,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (short) -1);
        org.joda.time.LocalTime localTime7 = localTime1.minusMinutes(35297865);
        int int8 = localTime1.size();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        int int17 = dateTime13.getYear();
        org.joda.time.DateTime.Property property18 = dateTime13.weekyear();
        org.joda.time.DateTime dateTime19 = property18.withMaximumValue();
        boolean boolean21 = dateTime19.isAfter((long) 434);
        org.joda.time.DateTime dateTime23 = dateTime19.minusSeconds(53);
        int int24 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime19.minusHours(999);
        org.joda.time.DateTime dateTime28 = dateTime26.minus((long) 794);
        org.joda.time.LocalDate localDate29 = dateTime28.toLocalDate();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay34.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay34.property(dateTimeFieldType39);
        boolean boolean41 = localDate32.equals((java.lang.Object) dateTimeFieldType39);
        int int42 = localDate29.get(dateTimeFieldType39);
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withPeriodAdded(readablePeriod44, 0);
        int int47 = dateMidnight43.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight43.plusWeeks((-292275054));
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(dateTimeZone50);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.monthOfYear();
        org.joda.time.DateMidnight dateMidnight54 = property52.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minus(0L);
        org.joda.time.DateTime dateTime57 = dateMidnight56.toDateTime();
        org.joda.time.DateTime dateTime59 = dateTime57.withCenturyOfEra(588);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone60);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = yearMonthDay61.toDateTime(timeOfDay62, dateTimeZone63);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay61.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay61.property(dateTimeFieldType66);
        boolean boolean68 = dateTime57.isSupported(dateTimeFieldType66);
        org.joda.time.DateMidnight.Property property69 = dateMidnight49.property(dateTimeFieldType66);
        int int70 = localDate29.get(dateTimeFieldType66);
        java.lang.String str71 = dateTimeFieldType66.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime73 = localTime1.withField(dateTimeFieldType66, 338);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573290337,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=337,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 42 + "'", int47 == 42);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "monthOfYear" + "'", str71, "monthOfYear");
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay3.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay3.property(dateTimeFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay3.plusMonths((int) 'u');
        boolean boolean12 = calendar0.after((java.lang.Object) 'u');
        calendar0.set(32772, 0, 86313);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay21 = org.joda.time.YearMonthDay.fromCalendarFields(calendar17);
        calendar17.setFirstDayOfWeek(2022);
        int int25 = calendar17.getMinimum(2);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getDisplayCountry();
        int int36 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str37 = locale33.getDisplayScript();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale33);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone26, locale33);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long42 = dateTimeZone40.previousTransition((long) 8);
        java.lang.String str43 = dateTimeZone40.toString();
        java.util.TimeZone timeZone44 = dateTimeZone40.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        java.time.Instant instant46 = calendar0.toInstant();
        java.util.Date date47 = java.util.Date.from(instant46);
        java.lang.String str48 = date47.toLocaleString();
        int int49 = date47.getHours();
        date47.setDate(511);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=979474586090434,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=33008,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=116,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=434,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:54:50 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1657878890434,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=434,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u53f0\u7063" + "'", str35, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644573290435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573290435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 8L + "'", long42 == 8L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Thu Aug 24 09:54:50 UTC 33009");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "25.04.33008 09:54:50" + "'", str48, "25.04.33008 09:54:50");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay(dateTimeZone3);
        org.joda.time.TimeOfDay timeOfDay5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTime(timeOfDay5, dateTimeZone6);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTime dateTime15 = yearMonthDay10.toDateTimeAtCurrentTime();
        int int16 = property8.compareTo((org.joda.time.ReadablePartial) yearMonthDay10);
        org.joda.time.Chronology chronology17 = yearMonthDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(692, 504, 123, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 504 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekOfWeekyear(48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfWeek(46746671);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46746671 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(183);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 35656471);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields(calendar11);
        calendar11.setFirstDayOfWeek(2022);
        int int19 = calendar11.getMinimum(2);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = locale27.getDisplayCountry();
        int int30 = dateTimeField26.getMaximumTextLength(locale27);
        java.lang.String str31 = locale27.getDisplayScript();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale27);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone20, locale27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        long long36 = dateTimeZone34.previousTransition((long) 8);
        long long38 = dateTimeZone10.getMillisKeepLocal(dateTimeZone34, (long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        java.lang.String str40 = dateTimeZone34.toString();
        java.lang.String str41 = dateTimeZone34.getID();
        int int43 = dateTimeZone34.getOffset((-61877950991029L));
        java.lang.String str44 = dateTimeZone34.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1657878890484,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=484,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u53f0\u7063" + "'", str29, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644573290484,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=484,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573290484,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=484,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 8L + "'", long36 == 8L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Etc/UTC" + "'", str44, "Etc/UTC");
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime7 = dateTime4.withDurationAdded((long) 292278993, (int) '#');
        int int8 = dateTime7.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime7.withWeekOfWeekyear(35686);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35686 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(9, 1, (int) ' ', 0, 16);
        calendar0.setFirstDayOfWeek(794);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfCentury(10);
        org.joda.time.LocalDate localDate13 = localDate9.withDayOfYear(10);
        org.joda.time.LocalDate.Property property14 = localDate13.year();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) localDate13);
        java.util.Date date16 = localDate13.toDate();
        calendar0.setTime(date16);
        int int18 = date16.getTimezoneOffset();
        int int19 = date16.getMinutes();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1641772800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=794,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Jan 10 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval26 = interval18.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval41 = interval33.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        boolean boolean47 = dateTime46.isBeforeNow();
        org.joda.time.DateTime dateTime49 = dateTime46.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour((int) (short) 0);
        boolean boolean52 = interval41.contains((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = interval29.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval29.withPeriodBeforeEnd(readablePeriod54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval29.toPeriod(periodType56);
        org.joda.time.Interval interval58 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        long long61 = chronology14.add((org.joda.time.ReadablePeriod) period57, (long) 'a', 4);
        org.joda.time.DurationField durationField62 = chronology14.hours();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology14);
        int int65 = dateMidnight64.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 229L + "'", long61 == 229L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 35395200);
        org.joda.time.ReadablePartial readablePartial2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = timeOfDay1.isEqual(readablePartial2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(2);
        int int9 = localDateTime2.getYearOfCentury();
        int int10 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusMinutes(42);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean14 = localDateTime2.isSupported(dateTimeFieldType13);
        java.lang.String str16 = localDateTime2.toString("2010-02-25");
        int int17 = localDateTime2.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2010-02-25" + "'", str16, "2010-02-25");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("09:53:24.901");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '09:53:24.901' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfDay();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.Interval interval16 = interval8.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Duration duration17 = interval16.toDuration();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.minusHours((int) (byte) 100);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration31 = duration17.toDuration();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.monthOfYear();
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now();
        long long36 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.plusWeeks(86399);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withDayOfYear((int) '#');
        int int43 = dateMidnight40.getWeekOfWeekyear();
        boolean boolean44 = dateMidnight35.isEqual((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withDayOfYear((int) '#');
        int int49 = dateMidnight46.getWeekOfWeekyear();
        int int50 = dateMidnight46.getWeekyear();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.Interval interval61 = interval53.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration62 = interval61.toDuration();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(dateTimeZone63);
        org.joda.time.TimeOfDay timeOfDay65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = yearMonthDay64.toDateTime(timeOfDay65, dateTimeZone66);
        boolean boolean68 = dateTime67.isBeforeNow();
        org.joda.time.DateTime dateTime70 = dateTime67.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime72 = dateTime70.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime74 = dateTime72.minusHours((int) (byte) 100);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight40.minus((org.joda.time.ReadableDuration) duration62);
        boolean boolean78 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTime dateTime79 = dateTime4.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale81 = new java.util.Locale("Fri Feb 11 09:47:52 UTC 2022");
        java.util.Calendar calendar82 = dateTime4.toCalendar(locale81);
        int int83 = dateTime4.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertEquals(locale81.toString(), "fri feb 11 09:47:52 utc 2022");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=1644573290802,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=50,MILLISECOND=802,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 50 + "'", int83 == 50);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Interval interval15 = interval7.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str19 = interval18.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Interval interval30 = interval22.overlap((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour((int) (short) 0);
        boolean boolean41 = interval30.contains((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean42 = interval18.contains((org.joda.time.ReadableInterval) interval30);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Interval interval44 = interval18.withPeriodBeforeEnd(readablePeriod43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval18.toPeriod(periodType45);
        org.joda.time.Interval interval47 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        org.joda.time.MutablePeriod mutablePeriod48 = period46.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.minusMonths(51);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay49.minusMonths(44);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.plusMonths(595);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str19, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.property(dateTimeFieldType6);
        java.lang.String str8 = property7.toString();
        org.joda.time.YearMonthDay yearMonthDay10 = property7.addToCopy(9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.plusMonths(35558);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusDays(53);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[monthOfYear]" + "'", str8, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("09:54:12.218");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '09:54:12.218' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str14 = interval13.toString();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour((int) (short) 0);
        boolean boolean36 = interval25.contains((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean37 = interval13.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Interval interval39 = interval13.withPeriodBeforeEnd(readablePeriod38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval13.toPeriod(periodType40);
        org.joda.time.Interval interval42 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        org.joda.time.MutablePeriod mutablePeriod43 = period41.toMutablePeriod();
        java.lang.String str44 = period41.toString();
        org.joda.time.Period period45 = period41.toPeriod();
        int int46 = period41.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str14, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0.033S" + "'", str44, "PT0.033S");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        boolean boolean27 = interval2.containsNow();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime42.toDateTime(chronology50);
        boolean boolean52 = interval35.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTime(timeOfDay56, dateTimeZone57);
        boolean boolean59 = dateTime58.isBeforeNow();
        org.joda.time.DateTime dateTime61 = dateTime58.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTime dateTime67 = dateTime58.toDateTime(chronology66);
        boolean boolean68 = durationFieldType53.isSupported(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime51.toDateTime(chronology66);
        org.joda.time.DateTimeField dateTimeField70 = chronology66.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.era();
        org.joda.time.Chronology chronology72 = chronology66.withUTC();
        org.joda.time.DateTime dateTime73 = dateTime32.toDateTime(chronology72);
        boolean boolean74 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime76 = dateTime32.minusSeconds(35608697);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 16, chronology8);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval22 = interval14.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str26 = interval25.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval37 = interval29.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime45.withMinuteOfHour((int) (short) 0);
        boolean boolean48 = interval37.contains((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = interval25.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Interval interval51 = interval25.withPeriodBeforeEnd(readablePeriod50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval25.toPeriod(periodType52);
        org.joda.time.Interval interval54 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        long long57 = chronology8.add((org.joda.time.ReadablePeriod) period53, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod58 = period53.toMutablePeriod();
        org.joda.time.Interval interval59 = interval2.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        boolean boolean60 = interval2.containsNow();
        org.joda.time.Period period61 = interval2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        int int67 = dateTime66.getCenturyOfEra();
        org.joda.time.DateTime dateTime69 = dateTime66.plusMillis((int) (byte) 0);
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone71);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = yearMonthDay72.toDateTime(timeOfDay73, dateTimeZone74);
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay72.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property78 = yearMonthDay72.property(dateTimeFieldType77);
        org.joda.time.DateTime.Property property79 = dateTime69.property(dateTimeFieldType77);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType77.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(dateTimeZone81);
        org.joda.time.Chronology chronology83 = yearMonthDay82.getChronology();
        org.joda.time.DurationField durationField84 = durationFieldType80.getField(chronology83);
        org.joda.time.Chronology chronology85 = chronology83.withUTC();
        boolean boolean86 = interval2.equals((java.lang.Object) chronology83);
        org.joda.time.DateTimeField dateTimeField87 = chronology83.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField88 = chronology83.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str26, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1163943L + "'", long57 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20 + "'", int67 == 20);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields(calendar11);
        calendar11.setFirstDayOfWeek(2022);
        int int19 = calendar11.getMinimum(2);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = locale27.getDisplayCountry();
        int int30 = dateTimeField26.getMaximumTextLength(locale27);
        java.lang.String str31 = locale27.getDisplayScript();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale27);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone20, locale27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        long long36 = dateTimeZone34.previousTransition((long) 8);
        long long38 = dateTimeZone10.getMillisKeepLocal(dateTimeZone34, (long) (byte) 0);
        int int40 = dateTimeZone34.getOffsetFromLocal(8L);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone34);
        boolean boolean42 = dateTimeZone34.isFixed();
        long long46 = dateTimeZone34.convertLocalToUTC((long) (-52), false, (long) 706);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = locale48.getLanguage();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.lang.String str51 = dateTimeZone34.getShortName((long) 183, locale48);
        java.lang.Object obj52 = locale48.clone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1657878891089,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=89,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u53f0\u7063" + "'", str29, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644573291090,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=90,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573291090,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=90,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 8L + "'", long36 == 8L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-52L) + "'", long46 == (-52L));
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "zh_TW");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "zh_TW");
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = property9.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight10.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDurationAdded(1644573066206L, 18008);
        org.joda.time.DateMidnight.Property property16 = dateMidnight10.dayOfYear();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573291125,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=125,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 55);
        org.joda.time.DateMidnight dateMidnight2 = localDate1.toDateMidnight();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = interval5.getChronology();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.Interval interval13 = interval5.overlap((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Duration duration14 = interval13.toDuration();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours((int) (byte) 100);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval38 = interval30.overlap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration39 = interval38.toDuration();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTime(timeOfDay42, dateTimeZone43);
        boolean boolean45 = dateTime44.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime44.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime49 = dateTime47.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime51 = dateTime49.minusHours((int) (byte) 100);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.Interval interval63 = interval55.overlap((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration64 = interval63.toDuration();
        boolean boolean65 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration64);
        boolean boolean66 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime70 = interval69.getEnd();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        org.joda.time.Chronology chronology76 = interval74.getChronology();
        org.joda.time.Interval interval77 = interval69.overlap((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Duration duration78 = interval77.toDuration();
        boolean boolean79 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight2.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight.Property property81 = dateMidnight2.yearOfEra();
        org.joda.time.DateMidnight dateMidnight82 = property81.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight83 = property81.getDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateMidnight83);
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 621);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        calendar25.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields(calendar25);
        calendar25.setFirstDayOfWeek(2022);
        int int33 = calendar25.getMinimum(2);
        java.util.TimeZone timeZone34 = calendar25.getTimeZone();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.year();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = locale41.getDisplayCountry();
        int int44 = dateTimeField40.getMaximumTextLength(locale41);
        java.lang.String str45 = locale41.getDisplayScript();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale41);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone34, locale41);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long50 = dateTimeZone48.previousTransition((long) 8);
        long long52 = dateTimeZone24.getMillisKeepLocal(dateTimeZone48, (long) (byte) 0);
        int int54 = dateTimeZone48.getOffsetFromLocal(8L);
        org.joda.time.Interval interval55 = yearMonthDay11.toInterval(dateTimeZone48);
        int int57 = dateTimeZone48.getOffset((long) 35301);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter9.withZone(dateTimeZone48);
        org.joda.time.Chronology chronology59 = dateTimeFormatter58.getChronology();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1657878891197,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=197,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u53f0\u7063" + "'", str43, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573291197,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=197,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644573291197,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=197,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 8L + "'", long50 == 8L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNull(chronology59);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        int int19 = dateTime15.getYear();
        org.joda.time.DateTime.Property property20 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(2);
        org.joda.time.LocalDate localDate24 = dateTime23.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int26 = dateTime23.get(dateTimeFieldType25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime36.toDateTime(chronology44);
        boolean boolean46 = interval29.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDate localDate47 = dateTime45.toLocalDate();
        int int48 = localDate47.getEra();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        boolean boolean54 = dateTime53.isBeforeNow();
        org.joda.time.DateTime dateTime56 = dateTime53.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime56.getZone();
        org.joda.time.DateTime dateTime60 = localDate47.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = dateTime23.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime9.withZoneRetainFields(dateTimeZone59);
        long long66 = dateTimeZone59.convertLocalToUTC((-62100742323530L), true, (long) 962);
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now(dateTimeZone59);
        int int68 = localDate67.getYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-62100742323530L) + "'", long66 == (-62100742323530L));
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.lang.String str6 = property5.toString();
        java.lang.String str7 = property5.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
        java.lang.String str9 = property5.getName();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay14.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay14.plusYears(588);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay14.monthOfYear();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DurationField durationField27 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        java.util.Locale locale33 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        java.lang.String str34 = dateTimeField28.getAsText(185L, locale33);
        java.lang.String str35 = property20.getAsShortText(locale33);
        java.lang.String str36 = property5.getAsText(locale33);
        java.lang.String str37 = locale33.getCountry();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "monthOfYear" + "'", str7, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1657878891252,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=252,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale33.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "185" + "'", str34, "185");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Jul" + "'", str35, "Jul");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "February" + "'", str36, "February");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DEUTSCH" + "'", str37, "DEUTSCH");
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        int int6 = yearMonthDay1.size();
        int int7 = yearMonthDay1.size();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addWrapFieldToCopy(35279414);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property14 = localDate11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMillis((int) (byte) 0);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay25.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay25.property(dateTimeFieldType30);
        org.joda.time.DateTime.Property property32 = dateTime22.property(dateTimeFieldType30);
        boolean boolean33 = localDate11.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property34 = localDate11.dayOfYear();
        int int35 = property8.compareTo((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property36 = localDate11.era();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMillis((int) (byte) 0);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay12.property(dateTimeFieldType17);
        org.joda.time.DateTime.Property property19 = dateTime9.property(dateTimeFieldType17);
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType17.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DurationField durationField24 = durationFieldType20.getField(chronology23);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1), chronology23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((-62100742311688L), chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.clockhourOfDay();
        org.joda.time.DurationField durationField29 = chronology23.millis();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = chronology23.getDateTimeMillis(0, 0, 68, 35413509);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear((int) (byte) 1);
        int int9 = dateTime5.getYear();
        org.joda.time.DateTime.Property property10 = dateTime5.weekyear();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMillis(7);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, (int) '#');
        int int18 = dateTime14.getWeekyear();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar20 = dateTime14.toCalendar(locale19);
        java.util.Locale.setDefault(category0, locale19);
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.centuryOfEra();
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.LocalDate.Property property26 = localDate24.era();
        int int27 = localDate24.size();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay29.toDateTime(timeOfDay30, dateTimeZone31);
        boolean boolean33 = dateTime32.isBeforeNow();
        org.joda.time.DateTime dateTime35 = dateTime32.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        int int38 = localDate24.indexOf(dateTimeFieldType36);
        org.joda.time.DateMidnight.Property property39 = dateMidnight22.property(dateTimeFieldType36);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight22.toMutableDateTimeISO();
        java.util.Locale locale41 = java.util.Locale.US;
        java.util.Calendar calendar42 = mutableDateTime40.toCalendar(locale41);
        java.util.Locale locale43 = locale41.stripExtensions();
        java.util.Locale.setDefault(category0, locale43);
        java.lang.String str45 = locale43.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=9223371988912491347,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=292278993,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=347,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusHours(20);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        int int4 = timeOfDay2.getSecondOfMinute();
        int int5 = timeOfDay2.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54 + "'", int5 == 54);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 965);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight7 = property4.addToCopy(35297719);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plusYears(965);
        int int10 = dateMidnight9.getMillisOfDay();
        int int11 = dateMidnight9.getMinuteOfHour();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate.Property property14 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.DateMidnight.Property property16 = dateMidnight9.property(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.plusDays((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusMonths(49);
        org.joda.time.LocalDate localDate9 = yearMonthDay8.toLocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate12 = localDate9.minusYears(35334);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime6.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(306);
        int int22 = dateTime21.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        boolean boolean28 = dateTime27.isBeforeNow();
        org.joda.time.DateTime dateTime30 = dateTime27.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime30.getZone();
        int int35 = dateTimeZone33.getStandardOffset((long) 13);
        long long39 = dateTimeZone33.convertLocalToUTC(229L, false, (long) 49);
        int int41 = dateTimeZone33.getOffset(0L);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay50.monthOfYear();
        org.joda.time.DateTime dateTime55 = yearMonthDay50.toDateTimeAtCurrentTime();
        int int56 = property48.compareTo((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.LocalDate localDate57 = localDate42.withFields((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.DateTime dateTime58 = dateTime21.withFields((org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTime.Property property59 = dateTime58.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 229L + "'", long39 == 229L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addNoWrapToCopy(871);
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.DateTime dateTime7 = localTime5.toDateTimeToday();
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime.Property property9 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        long long12 = property9.remainder();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573291478,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=478,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 589);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.property(dateTimeFieldType6);
        java.lang.String str8 = property7.toString();
        org.joda.time.YearMonthDay yearMonthDay10 = property7.addToCopy(9);
        org.joda.time.YearMonthDay yearMonthDay12 = property7.addWrapFieldToCopy(203);
        org.joda.time.DateTime dateTime13 = yearMonthDay12.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[monthOfYear]" + "'", str8, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        int int3 = localDate0.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        boolean boolean15 = dateTime14.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime14.withMonthOfYear((int) (byte) 1);
        int int18 = dateTime14.getYear();
        org.joda.time.DateMidnight dateMidnight19 = dateTime14.toDateMidnight();
        org.joda.time.DateTime dateTime20 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withYearOfEra(35297719);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withCenturyOfEra(706);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay33.monthOfYear();
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        int int39 = property31.compareTo((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.Chronology chronology40 = yearMonthDay33.getChronology();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay33.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean44 = yearMonthDay33.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(dateTimeZone45);
        org.joda.time.TimeOfDay timeOfDay47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay46.toDateTime(timeOfDay47, dateTimeZone48);
        boolean boolean50 = dateTime49.isBeforeNow();
        org.joda.time.DateTime dateTime52 = dateTime49.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime54 = dateTime52.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime52.getZone();
        int int57 = dateTimeZone55.getStandardOffset((long) 13);
        long long61 = dateTimeZone55.convertLocalToUTC(229L, false, (long) 49);
        long long63 = dateTimeZone55.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime64 = yearMonthDay33.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight66 = org.joda.time.DateMidnight.now(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight22.withZoneRetainFields(dateTimeZone55);
        long long69 = dateTimeZone55.previousTransition((long) 35);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((-1L), dateTimeZone55);
        boolean boolean71 = dateTimeZone55.isFixed();
        org.joda.time.Interval interval72 = localDate0.toInterval(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 229L + "'", long61 == 229L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 49L + "'", long63 == 49L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 35L + "'", long69 == 35L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.plusDays((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        int int23 = dateTime19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime25 = yearMonthDay11.toDateTime((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear((int) (byte) 1);
        int int40 = dateTime36.getYear();
        org.joda.time.DateMidnight dateMidnight41 = dateTime36.toDateMidnight();
        org.joda.time.DateTime dateTime42 = yearMonthDay28.toDateTime((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.withYearOfEra(35297719);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = locale48.hasExtensions();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.toLanguageTag();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.year();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale58.getDisplayCountry();
        int int61 = dateTimeField57.getMaximumTextLength(locale58);
        java.lang.String str62 = locale58.getVariant();
        java.lang.String str63 = locale48.getDisplayLanguage(locale58);
        java.lang.String str64 = localDate45.toString("7", locale48);
        java.lang.String str65 = property26.getAsText(locale48);
        java.lang.String str66 = yearMonthDay6.toString("09:49:55.379", locale48);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(911);
        org.joda.time.DateTime dateTime69 = yearMonthDay6.toDateTimeAtMidnight(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = yearMonthDay6.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u53f0\u7063" + "'", str60, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u82f1\u6587" + "'", str63, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "7" + "'", str64, "7");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Friday" + "'", str65, "Friday");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "09:49:55.379" + "'", str66, "09:49:55.379");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay1.toDateMidnight(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minus((long) 434);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str14 = interval13.toString();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime33 = dateTime30.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour((int) (short) 0);
        boolean boolean36 = interval25.contains((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean37 = interval13.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Interval interval39 = interval13.withPeriodBeforeEnd(readablePeriod38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval13.toPeriod(periodType40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale42.getLanguage();
        boolean boolean44 = interval13.equals((java.lang.Object) locale42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.monthOfYear();
        org.joda.time.DateMidnight dateMidnight48 = org.joda.time.DateMidnight.now();
        long long49 = property47.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.plusWeeks(86399);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.withDayOfYear((int) '#');
        int int56 = dateMidnight53.getWeekOfWeekyear();
        boolean boolean57 = dateMidnight48.isEqual((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.withDayOfYear((int) '#');
        int int62 = dateMidnight59.getWeekOfWeekyear();
        int int63 = dateMidnight59.getWeekyear();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime67 = interval66.getEnd();
        org.joda.time.Chronology chronology68 = interval66.getChronology();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.Interval interval74 = interval66.overlap((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Duration duration75 = interval74.toDuration();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(dateTimeZone76);
        org.joda.time.TimeOfDay timeOfDay78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = yearMonthDay77.toDateTime(timeOfDay78, dateTimeZone79);
        boolean boolean81 = dateTime80.isBeforeNow();
        org.joda.time.DateTime dateTime83 = dateTime80.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime85 = dateTime83.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime87 = dateTime85.minusHours((int) (byte) 100);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Interval interval89 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight59, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight53.minus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval91 = interval13.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval93 = interval13.withEndMillis(3000000L);
        org.joda.time.Duration duration94 = interval93.toDuration();
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration94);
        int int96 = dateMidnight10.getCenturyOfEra();
        boolean boolean97 = dateMidnight10.isAfterNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight99 = dateMidnight10.withYearOfCentury(378);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 378 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str14, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 20 + "'", int96 == 20);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusSeconds(51);
        int int5 = localDateTime4.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField(32826116);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32826116");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = property2.getDateMidnight();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, 670, 34564);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 670 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        int int6 = dateTime5.getYearOfCentury();
        org.joda.time.DateTime dateTime8 = dateTime5.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromCalendarFields(calendar22);
        calendar22.setFirstDayOfWeek(2022);
        int int30 = calendar22.getMinimum(2);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale38.getDisplayCountry();
        int int41 = dateTimeField37.getMaximumTextLength(locale38);
        java.lang.String str42 = locale38.getDisplayScript();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale38);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone31, locale38);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long47 = dateTimeZone45.previousTransition((long) 8);
        long long49 = dateTimeZone21.getMillisKeepLocal(dateTimeZone45, (long) (byte) 0);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 368, dateTimeZone21);
        long long54 = dateTimeZone21.adjustOffset((long) 93, false);
        org.joda.time.DateTime dateTime55 = dateTime5.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 35302729, dateTimeZone21);
        long long59 = dateTimeZone21.adjustOffset((long) 1248, true);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1657878891677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=677,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573291678,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=678,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644573291678,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=678,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 8L + "'", long47 == 8L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 93L + "'", long54 == 93L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1248L + "'", long59 == 1248L);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDate0.toDateTimeAtCurrentTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtMidnight();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(chronology21);
        boolean boolean23 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        boolean boolean30 = dateTime29.isBeforeNow();
        org.joda.time.DateTime dateTime32 = dateTime29.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology37);
        boolean boolean39 = durationFieldType24.isSupported(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime22.toDateTime(chronology37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str44 = interval43.toString();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval55 = interval47.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone56);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTime(timeOfDay58, dateTimeZone59);
        boolean boolean61 = dateTime60.isBeforeNow();
        org.joda.time.DateTime dateTime63 = dateTime60.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime65 = dateTime63.withMinuteOfHour((int) (short) 0);
        boolean boolean66 = interval55.contains((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean67 = interval43.contains((org.joda.time.ReadableInterval) interval55);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Interval interval69 = interval43.withPeriodBeforeEnd(readablePeriod68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = interval43.toPeriod(periodType70);
        org.joda.time.DateTime dateTime72 = dateTime22.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.DateTime dateTime74 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period71, 660);
        org.joda.time.DateTime dateTime75 = dateTime3.toDateTimeISO();
        int int76 = dateTime75.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property78 = dateTime75.property(dateTimeFieldType77);
        org.joda.time.DateTime dateTime80 = dateTime75.minusWeeks(35412355);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(dateTimeZone81);
        org.joda.time.TimeOfDay timeOfDay83 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = yearMonthDay82.toDateTime(timeOfDay83, dateTimeZone84);
        int int86 = dateTime85.getCenturyOfEra();
        org.joda.time.DateTime dateTime88 = dateTime85.plusMillis((int) (byte) 0);
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate((java.lang.Object) dateTime85);
        int int90 = dateTime85.getEra();
        int int91 = dateTime80.compareTo((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime93 = dateTime85.minusMonths(35436);
        org.joda.time.DateTime dateTime95 = dateTime85.minusYears(81);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str44, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 20 + "'", int86 == 20);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval22 = interval14.overlap((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Duration duration23 = interval22.toDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        boolean boolean29 = dateTime28.isBeforeNow();
        org.joda.time.DateTime dateTime31 = dateTime28.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime31.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusHours((int) (byte) 100);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration37 = duration23.toDuration();
        boolean boolean38 = duration11.isEqual((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration39 = duration11.toDuration();
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay42.toDateTime(timeOfDay43, dateTimeZone44);
        boolean boolean46 = dateTime45.isBeforeNow();
        org.joda.time.DateTime dateTime48 = dateTime45.withMonthOfYear((int) (byte) 1);
        int int49 = dateTime45.getYear();
        org.joda.time.DateTime.Property property50 = dateTime45.weekyear();
        org.joda.time.DateTime dateTime51 = property50.withMaximumValue();
        org.joda.time.DateTime.Property property52 = dateTime51.millisOfDay();
        boolean boolean53 = dateTime51.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay55.toDateTime(timeOfDay56, dateTimeZone57);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay55.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone60);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = yearMonthDay61.toDateTime(timeOfDay62, dateTimeZone63);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay61.monthOfYear();
        org.joda.time.DateTime dateTime66 = yearMonthDay61.toDateTimeAtCurrentTime();
        int int67 = property59.compareTo((org.joda.time.ReadablePartial) yearMonthDay61);
        org.joda.time.Chronology chronology68 = yearMonthDay61.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.halfdays();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.era();
        int int71 = dateTime51.get(dateTimeField70);
        int int72 = dateTime51.getYear();
        int int73 = dateTime51.getDayOfMonth();
        boolean boolean74 = duration39.equals((java.lang.Object) dateTime51);
        org.joda.time.ReadableDuration readableDuration75 = null;
        boolean boolean76 = duration39.isShorterThan(readableDuration75);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.minus(readablePeriod3);
        int int5 = timeOfDay4.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusMinutes(17);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay4.withMillisOfSecond(708);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay4.withMillisOfSecond(253);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusSeconds(590);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.plusMinutes(35431);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = timeOfDay11.toString(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 848 + "'", int5 == 848);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "T09:54:51.253" + "'", str17, "T09:54:51.253");
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes(35270);
        int int19 = localDateTime18.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(50);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusSeconds(35306128);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfYear(41);
        int int29 = localDateTime26.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 49 + "'", int19 == 49);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 54 + "'", int24 == 54);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1968 + "'", int29 == 1968);
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfYear();
        int int9 = dateTimeField7.get(47519543434L);
        long long11 = dateTimeField7.roundCeiling((long) 92);
        int int14 = dateTimeField7.getDifference((long) 285, (-62100742273206L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 185 + "'", int9 == 185);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 718758 + "'", int14 == 718758);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withSecondOfMinute(8);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = timeOfDay5.toString("09:49:37.031", locale9);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "09:49:37.031" + "'", str11, "09:49:37.031");
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getVariant();
        java.lang.String str17 = dateTimeField13.getAsShortText(3, locale15);
        int int18 = dateTimeField13.getMaximumValue();
        long long21 = dateTimeField13.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) long21, dateTimeZone22);
        boolean boolean24 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getCenturyOfEra();
        org.joda.time.Chronology chronology26 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.halfdayOfDay();
        int int30 = dateTimeField28.getMaximumValue(981935580000L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(99, (-1), 10);
        java.util.Calendar.Builder builder10 = builder4.setLenient(true);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Calendar.Builder builder12 = builder4.setLocale(locale11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        calendar25.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields(calendar25);
        calendar25.setFirstDayOfWeek(2022);
        int int33 = calendar25.getMinimum(2);
        java.util.TimeZone timeZone34 = calendar25.getTimeZone();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.year();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = locale41.getDisplayCountry();
        int int44 = dateTimeField40.getMaximumTextLength(locale41);
        java.lang.String str45 = locale41.getDisplayScript();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale41);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone34, locale41);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long50 = dateTimeZone48.previousTransition((long) 8);
        long long52 = dateTimeZone24.getMillisKeepLocal(dateTimeZone48, (long) (byte) 0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 35277, dateTimeZone48);
        java.util.TimeZone timeZone54 = dateTimeZone48.toTimeZone();
        java.util.Calendar.Builder builder55 = builder12.setTimeZone(timeZone54);
        java.util.Calendar.Builder builder59 = builder55.setWeekDate(49, 440, 589);
        java.util.Calendar.Builder builder61 = builder55.setLenient(true);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.year();
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale69.getVariant();
        java.lang.String str71 = dateTimeField67.getAsShortText(3, locale69);
        int int72 = dateTimeField67.getMaximumValue();
        long long75 = dateTimeField67.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial76 = null;
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        boolean boolean79 = locale78.hasExtensions();
        java.lang.String str80 = dateTimeField67.getAsShortText(readablePartial76, 9, locale78);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone82);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.monthOfYear();
        int int85 = localDateTime83.getSecondOfMinute();
        int int86 = localDateTime83.getDayOfWeek();
        java.util.Locale locale87 = java.util.Locale.CHINA;
        java.lang.String str88 = dateTimeField67.getAsText((org.joda.time.ReadablePartial) localDateTime83, locale87);
        org.joda.time.LocalDateTime.Property property89 = localDateTime83.millisOfSecond();
        int[] intArray90 = localDateTime83.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder91 = builder61.setFields(intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1657878891956,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=956,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573291956,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=956,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644573291956,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=51,MILLISECOND=956,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 8L + "'", long50 == 8L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "3" + "'", str71, "3");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "9" + "'", str80, "9");
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1970" + "'", str88, "1970");
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1970, 1, 1, 3]");
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        boolean boolean28 = dateTimeFormatter27.isOffsetParsed();
        java.util.Locale locale29 = dateTimeFormatter27.getLocale();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay37.monthOfYear();
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        int int43 = property35.compareTo((org.joda.time.ReadablePartial) yearMonthDay37);
        org.joda.time.Chronology chronology44 = yearMonthDay37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay37.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean48 = yearMonthDay37.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        boolean boolean54 = dateTime53.isBeforeNow();
        org.joda.time.DateTime dateTime56 = dateTime53.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime56.getZone();
        int int61 = dateTimeZone59.getStandardOffset((long) 13);
        long long65 = dateTimeZone59.convertLocalToUTC(229L, false, (long) 49);
        long long67 = dateTimeZone59.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime68 = yearMonthDay37.toDateTimeAtCurrentTime(dateTimeZone59);
        java.lang.String str69 = dateTimeZone59.getID();
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter27.withZone(dateTimeZone59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime73 = dateTimeFormatter71.parseLocalTime("09:50:36.000");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 229L + "'", long65 == 229L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 49L + "'", long67 == 49L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime6.getYear();
        org.joda.time.DateTime.Property property11 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        java.util.Date date14 = dateTime13.toDate();
        int int15 = date14.getDate();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.withFields((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withMillis(0L);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.minusYears(23);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.era();
        org.joda.time.DateMidnight dateMidnight23 = property22.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusSeconds(12);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(2922789);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMonthOfYear(1967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1967 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths(0);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra(86399470);
        int int7 = dateTime6.getCenturyOfEra();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573292060,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=60,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 863994 + "'", int7 == 863994);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 434);
        int int2 = timeOfDay1.getMillisOfSecond();
        org.joda.time.DateTime dateTime3 = timeOfDay1.toDateTimeToday();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Interval interval15 = interval7.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Duration duration16 = interval15.toDuration();
        org.joda.time.DateTime dateTime18 = dateTime4.withDurationAdded((org.joda.time.ReadableDuration) duration16, (-52));
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime dateTime20 = dateTime4.toDateTime();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 434 + "'", int2 == 434);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.DurationField durationField8 = chronology5.millis();
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 70, chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial13 = null;
        int int14 = dateTimeField12.getMinimumValue(readablePartial13);
        long long17 = dateTimeField12.add(0L, 35297719);
        long long19 = dateTimeField12.roundHalfFloor((-259200000L));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekyear();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.minutes();
        org.joda.time.DurationField durationField31 = chronology29.weekyears();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.minuteOfDay();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale35.getExtension('a');
        java.lang.String str38 = dateTimeField33.getAsText(4, locale35);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale40.getDisplayScript();
        java.lang.String str43 = locale40.toLanguageTag();
        java.lang.String str44 = locale40.toLanguageTag();
        java.lang.String str45 = locale39.getDisplayVariant(locale40);
        java.lang.String str46 = locale35.getDisplayLanguage(locale39);
        java.lang.String str47 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale35);
        java.util.Set<java.lang.String> strSet48 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale35.getDisplayLanguage();
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale35.getDisplayVariant(locale50);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2117863140000L + "'", long17 == 2117863140000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-259200000L) + "'", long19 == (-259200000L));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "4" + "'", str38, "4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh-TW" + "'", str43, "zh-TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh-TW" + "'", str44, "zh-TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u6587" + "'", str46, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.lang.Integer int4 = dateTimeFormatter3.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.parse("", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 18008, chronology5);
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMillis(35370);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        boolean boolean12 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTime dateTime25 = yearMonthDay20.toDateTimeAtCurrentTime();
        int int26 = property18.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
        org.joda.time.Chronology chronology27 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.era();
        int int30 = dateTime10.get(dateTimeField29);
        int int31 = dateTime10.getYear();
        org.joda.time.DateTime dateTime32 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) dateTime10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay1.property(dateTimeFieldType6);
        java.lang.String str8 = property7.toString();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        int int12 = dateTimeField9.getMinimumValue(35331L);
        long long14 = dateTimeField9.roundCeiling((long) 453);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField9.add(9L, (-62101382400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: -62101382400000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[monthOfYear]" + "'", str8, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2678400000L + "'", long14 == 2678400000L);
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.LocalDate localDate6 = localDate4.plusDays(1970);
        org.joda.time.LocalDate localDate8 = localDate6.withYear(35334);
        int int9 = localDate6.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 49 + "'", int9 == 49);
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTime(timeOfDay4, dateTimeZone5);
        boolean boolean7 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime6.getYear();
        org.joda.time.DateTime.Property property11 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        java.util.Date date14 = dateTime13.toDate();
        int int15 = date14.getDate();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.withFields((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withMillis(0L);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.withCenturyOfEra(342);
        org.joda.time.Interval interval24 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 16, chronology30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval44 = interval36.overlap((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str48 = interval47.toString();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.Interval interval59 = interval51.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone60);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = yearMonthDay61.toDateTime(timeOfDay62, dateTimeZone63);
        boolean boolean65 = dateTime64.isBeforeNow();
        org.joda.time.DateTime dateTime67 = dateTime64.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime69 = dateTime67.withMinuteOfHour((int) (short) 0);
        boolean boolean70 = interval59.contains((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean71 = interval47.contains((org.joda.time.ReadableInterval) interval59);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Interval interval73 = interval47.withPeriodBeforeEnd(readablePeriod72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = interval47.toPeriod(periodType74);
        org.joda.time.Interval interval76 = interval44.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period75);
        long long79 = chronology30.add((org.joda.time.ReadablePeriod) period75, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod80 = period75.toMutablePeriod();
        org.joda.time.Interval interval81 = interval24.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period75);
        boolean boolean82 = interval24.containsNow();
        org.joda.time.Period period83 = interval24.toPeriod();
        java.lang.String str84 = period83.toString();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight21.withPeriodAdded((org.joda.time.ReadablePeriod) period83, 35402140);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight21.minusYears(38311);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str48, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1163943L + "'", long79 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PT0.001S" + "'", str84, "PT0.001S");
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight88);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        int int4 = dateMidnight1.getYear();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight1.toMutableDateTime();
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight.Property property7 = dateMidnight1.year();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        int int22 = dateTime18.getYear();
        org.joda.time.DateMidnight dateMidnight23 = dateTime18.toDateMidnight();
        org.joda.time.DateTime dateTime24 = yearMonthDay10.toDateTime((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime27 = dateTime24.withFieldAdded(durationFieldType25, 6);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight8.withFieldAdded(durationFieldType25, 4);
        int int30 = dateMidnight8.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(2);
        long long13 = dateTime12.getMillis();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime17 = dateTime12.minusMinutes(316);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay19.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay24 = property23.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.dayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime12.withFields((org.joda.time.ReadablePartial) yearMonthDay24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime12.plusWeeks(585);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-62100741907632L) + "'", long13 == (-62100741907632L));
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(3);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = property3.addToCopy((long) 12);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property3.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        boolean boolean12 = dateTime10.isAfter((long) 434);
        org.joda.time.DateTime dateTime14 = dateTime10.withWeekyear(48);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.DateTime dateTime16 = dateTime14.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekyear(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(35309838);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDateTime10.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusMillis(338);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateTime.Property property14 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        boolean boolean17 = dateTime15.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTime(timeOfDay26, dateTimeZone27);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay25.monthOfYear();
        org.joda.time.DateTime dateTime30 = yearMonthDay25.toDateTimeAtCurrentTime();
        int int31 = property23.compareTo((org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.Chronology chronology32 = yearMonthDay25.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.era();
        int int35 = dateTime15.get(dateTimeField34);
        int int36 = dateTime15.getYear();
        int int37 = dateTime15.getDayOfMonth();
        long long38 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDate localDate39 = property4.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-292276970L) + "'", long38 == (-292276970L));
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        int int10 = dateTimeField5.getMaximumValue();
        long long13 = dateTimeField5.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = dateTimeField5.getAsShortText(readablePartial14, 9, locale16);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale20.toLanguageTag();
        java.lang.String str22 = dateTimeField5.getAsShortText(29, locale20);
        java.lang.String str23 = dateTimeField5.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.monthOfYear();
        int int28 = localDateTime26.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withWeekyear(11);
        int int31 = localDateTime30.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds(371);
        int int34 = localDateTime30.getYear();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.year();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = locale41.getDisplayCountry();
        int int44 = dateTimeField40.getMaximumTextLength(locale41);
        java.lang.String str45 = locale41.getDisplayScript();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale41);
        java.lang.String str47 = locale41.getScript();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.year();
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        java.lang.String str56 = locale54.getDisplayCountry();
        int int57 = dateTimeField53.getMaximumTextLength(locale54);
        java.lang.String str58 = locale54.getDisplayScript();
        java.lang.String str59 = locale54.getDisplayName();
        java.lang.String str60 = locale41.getDisplayVariant(locale54);
        java.lang.String str61 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale54);
        org.joda.time.LocalDateTime.Property property62 = localDateTime30.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = property62.setCopy(130);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 130 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko-KR" + "'", str21, "ko-KR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "29" + "'", str22, "29");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DateTimeField[year]" + "'", str23, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573292448,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=448,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "31 dec 1969 23:59:59 gmt" + "'", str59, "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "11" + "'", str61, "11");
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        java.util.Date date3 = new java.util.Date(5, 1970, 20);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date3);
        int int5 = date3.getYear();
        int int6 = date3.getSeconds();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Mar 20 00:00:00 UTC 2069");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 169 + "'", int5 == 169);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        int int12 = property9.get();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withDayOfYear((int) '#');
        int int17 = dateMidnight14.getWeekOfWeekyear();
        int int18 = dateMidnight14.getWeekyear();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval29 = interval21.overlap((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration30 = interval29.toDuration();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusHours((int) (byte) 100);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableDuration) duration30);
        int int45 = property9.compareTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime47 = property9.setCopy(0);
        org.joda.time.DateTime.Property property48 = dateTime47.monthOfYear();
        int int49 = property48.get();
        org.joda.time.DateTime dateTime51 = property48.addToCopy(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDate0.toDateTimeAtCurrentTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtMidnight();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTime(chronology21);
        boolean boolean23 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        boolean boolean30 = dateTime29.isBeforeNow();
        org.joda.time.DateTime dateTime32 = dateTime29.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(chronology37);
        boolean boolean39 = durationFieldType24.isSupported(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime22.toDateTime(chronology37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str44 = interval43.toString();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Chronology chronology54 = interval52.getChronology();
        org.joda.time.Interval interval55 = interval47.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone56);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTime(timeOfDay58, dateTimeZone59);
        boolean boolean61 = dateTime60.isBeforeNow();
        org.joda.time.DateTime dateTime63 = dateTime60.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime65 = dateTime63.withMinuteOfHour((int) (short) 0);
        boolean boolean66 = interval55.contains((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean67 = interval43.contains((org.joda.time.ReadableInterval) interval55);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Interval interval69 = interval43.withPeriodBeforeEnd(readablePeriod68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = interval43.toPeriod(periodType70);
        org.joda.time.DateTime dateTime72 = dateTime22.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.DateTime dateTime74 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period71, 660);
        org.joda.time.DateTime dateTime75 = dateTime3.toDateTimeISO();
        int int76 = dateTime75.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property78 = dateTime75.property(dateTimeFieldType77);
        org.joda.time.DateTimeField dateTimeField79 = property78.getField();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str44, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(35457051, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35457051 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        org.joda.time.LocalDate localDate3 = property2.withMinimumValue();
        org.joda.time.ReadablePartial readablePartial4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localDate3.compareTo(readablePartial4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        int int11 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFieldAdded(durationFieldType14, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours(203);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 74);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.plus(readablePeriod2);
        int int4 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localTime1.getValue(27145);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27145");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay10.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((-1));
        org.joda.time.DateTime dateTime22 = dateTime20.minus((long) 445);
        long long23 = dateTime20.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1646992492634L + "'", long23 == 1646992492634L);
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        int int12 = property11.getLeapAmount();
        org.joda.time.DateTime dateTime14 = property11.setCopy(50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property11.addToCopy(46363295207094L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371988912492647 + 46363295207094");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        int int6 = dateTimeField5.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.withYear(22);
        int int13 = yearMonthDay8.size();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromCalendarFields(calendar14);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay18.year();
        int[] intArray22 = yearMonthDay18.getValues();
        int int23 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay8, intArray22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfCentury(10);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay36.monthOfYear();
        org.joda.time.DateTime dateTime41 = yearMonthDay36.toDateTimeAtCurrentTime();
        int int42 = property34.compareTo((org.joda.time.ReadablePartial) yearMonthDay36);
        org.joda.time.Chronology chronology43 = yearMonthDay36.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay36.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean47 = yearMonthDay36.isSupported(dateTimeFieldType46);
        boolean boolean48 = localDate28.isSupported(dateTimeFieldType46);
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDate28, 9, locale50);
        int int52 = localDate28.getDayOfWeek();
        java.util.Locale locale55 = new java.util.Locale("");
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale55.getScript();
        java.lang.String str58 = localDate28.toString("35279414", locale55);
        int int59 = localDate28.getWeekyear();
        int int60 = localDate28.getWeekyear();
        org.joda.time.LocalDate localDate62 = localDate28.plusWeeks(35562757);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1657878892657,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=657,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 7, 15]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-292275054) + "'", int23 == (-292275054));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "35279414" + "'", str58, "35279414");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2010 + "'", int59 == 2010);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2010 + "'", int60 == 2010);
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        int int11 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFieldAdded(durationFieldType14, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours(203);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusSeconds(35273);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minusWeeks(35289);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMillis(35326);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusYears(35447935);
        boolean boolean31 = localDateTime29.equals((java.lang.Object) (-62100742323530L));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1477041), 697);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 697");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime4.getHourOfDay();
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Calendar calendar10 = dateTime4.toCalendar(locale9);
        org.joda.time.DateTime dateTime11 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = dateTime4.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = property21.getAsShortText(locale22);
        org.joda.time.YearMonthDay yearMonthDay26 = property21.addWrapFieldToCopy(371);
        int int27 = property21.get();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getVariant();
        java.lang.String str37 = dateTimeField33.getAsShortText(3, locale35);
        int int38 = dateTimeField33.getMaximumValue();
        long long41 = dateTimeField33.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        boolean boolean45 = locale44.hasExtensions();
        java.lang.String str46 = dateTimeField33.getAsShortText(readablePartial42, 9, locale44);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.toLanguageTag();
        java.lang.String str50 = dateTimeField33.getAsText((-1), locale48);
        java.lang.String str51 = locale48.getDisplayCountry();
        java.lang.String str52 = property21.getAsText(locale48);
        java.util.Set<java.lang.String> strSet53 = locale48.getUnicodeLocaleKeys();
        java.lang.String str54 = dateTime4.toString("09:51:32.661", locale48);
        org.joda.time.Chronology chronology55 = dateTime4.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644573292731,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=731,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "31 dec 1969 23:59:59 gmt");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "31 dec 1969 23:59:59 gmt" + "'", str23, "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Feb" + "'", str24, "Feb");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "3" + "'", str37, "3");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "und" + "'", str49, "und");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1" + "'", str50, "-1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "February" + "'", str52, "February");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "09:51:32.661" + "'", str54, "09:51:32.661");
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        int int8 = dateTimeField5.getDifference((long) 786, (-1L));
        org.joda.time.DurationField durationField9 = dateTimeField5.getDurationField();
        org.joda.time.DurationField durationField10 = dateTimeField5.getRangeDurationField();
        long long13 = dateTimeField5.add((-9223370344339235L), 27223);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-9151780945939235L) + "'", long13 == (-9151780945939235L));
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        java.util.Date date3 = new java.util.Date(35351, 12222, 36384202);
        java.lang.String str4 = date3.toLocaleString();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 21 00:00:00 UTC 137886");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jan 21, 137886 12:00:00 AM" + "'", str4, "Jan 21, 137886 12:00:00 AM");
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields(calendar11);
        calendar11.setFirstDayOfWeek(2022);
        int int19 = calendar11.getMinimum(2);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = locale27.getDisplayCountry();
        int int30 = dateTimeField26.getMaximumTextLength(locale27);
        java.lang.String str31 = locale27.getDisplayScript();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale27);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone20, locale27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        long long36 = dateTimeZone34.previousTransition((long) 8);
        long long38 = dateTimeZone10.getMillisKeepLocal(dateTimeZone34, (long) (byte) 0);
        int int40 = dateTimeZone34.getOffsetFromLocal(8L);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone34);
        boolean boolean42 = dateTimeZone34.isFixed();
        long long46 = dateTimeZone34.convertLocalToUTC((long) (-52), false, (long) 706);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = locale48.getLanguage();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.lang.String str51 = dateTimeZone34.getShortName((long) 183, locale48);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.minutes();
        org.joda.time.DurationField durationField59 = chronology57.weekyears();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.millisOfSecond();
        java.util.Locale locale65 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        java.lang.String str66 = dateTimeField60.getAsText(185L, locale65);
        java.lang.String str67 = dateTimeZone34.getShortName(361L, locale65);
        boolean boolean68 = dateTimeZone34.isFixed();
        long long70 = dateTimeZone34.convertUTCToLocal((long) 3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1657878892771,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=771,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644573292771,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=771,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573292771,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=771,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 8L + "'", long36 == 8L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-52L) + "'", long46 == (-52L));
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "31 dec 1969 23:59:59 gmt");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "31 dec 1969 23:59:59 gmt" + "'", str49, "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals(locale65.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "185" + "'", str66, "185");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 3L + "'", long70 == 3L);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury(10);
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.monthOfYear();
        org.joda.time.DateTime dateTime19 = yearMonthDay14.toDateTimeAtCurrentTime();
        int int20 = property12.compareTo((org.joda.time.ReadablePartial) yearMonthDay14);
        org.joda.time.Chronology chronology21 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay14.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean25 = yearMonthDay14.isSupported(dateTimeFieldType24);
        boolean boolean26 = localDate6.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDate localDate28 = localDate6.plusWeeks(2);
        java.lang.String str29 = localDate28.toString();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        boolean boolean40 = dateTime39.isBeforeNow();
        org.joda.time.DateTime dateTime42 = dateTime39.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime44 = dateTime42.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime42.getZone();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance();
        calendar46.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay50 = org.joda.time.YearMonthDay.fromCalendarFields(calendar46);
        calendar46.setFirstDayOfWeek(2022);
        int int54 = calendar46.getMinimum(2);
        java.util.TimeZone timeZone55 = calendar46.getTimeZone();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.year();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.lang.String str64 = locale62.getDisplayCountry();
        int int65 = dateTimeField61.getMaximumTextLength(locale62);
        java.lang.String str66 = locale62.getDisplayScript();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale62);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone55, locale62);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        long long71 = dateTimeZone69.previousTransition((long) 8);
        long long73 = dateTimeZone45.getMillisKeepLocal(dateTimeZone69, (long) (byte) 0);
        int int75 = dateTimeZone69.getOffsetFromLocal(8L);
        org.joda.time.Interval interval76 = yearMonthDay32.toInterval(dateTimeZone69);
        org.joda.time.Interval interval77 = localDate28.toInterval(dateTimeZone69);
        boolean boolean78 = dateTimeZone69.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval79 = new org.joda.time.Interval(1641894729155L, 599619000000L, dateTimeZone69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2010-02-25" + "'", str29, "2010-02-25");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1657878892796,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=796,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644573292796,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=796,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1644573292796,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=796,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 8L + "'", long71 == 8L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        int int7 = yearMonthDay6.getMonthOfYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878892815,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=815,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        java.lang.Object obj0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(obj0);
        int int2 = dateMidnight1.getMonthOfYear();
        int int3 = dateMidnight1.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.year();
        int int5 = localDateTime3.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfCentury(35629);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35629 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        int int6 = yearMonthDay1.size();
        int int7 = yearMonthDay1.size();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        long long24 = dateTimeZone18.convertLocalToUTC(229L, false, (long) 49);
        int int26 = dateTimeZone18.getOffset(0L);
        boolean boolean28 = dateTimeZone18.isStandardOffset((long) 35275);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay1.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime32 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTime(timeOfDay35, dateTimeZone36);
        boolean boolean38 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay48 = org.joda.time.YearMonthDay.fromCalendarFields(calendar44);
        calendar44.setFirstDayOfWeek(2022);
        int int52 = calendar44.getMinimum(2);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.lang.String str62 = locale60.getDisplayCountry();
        int int63 = dateTimeField59.getMaximumTextLength(locale60);
        java.lang.String str64 = locale60.getDisplayScript();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale60);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone53, locale60);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        long long69 = dateTimeZone67.previousTransition((long) 8);
        long long71 = dateTimeZone43.getMillisKeepLocal(dateTimeZone67, (long) (byte) 0);
        int int73 = dateTimeZone67.getOffsetFromLocal(8L);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone67);
        boolean boolean75 = dateTimeZone67.isFixed();
        long long79 = dateTimeZone67.convertLocalToUTC((long) (-52), false, (long) 706);
        org.joda.time.DateTime dateTime80 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay(dateTimeZone82);
        org.joda.time.TimeOfDay timeOfDay84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = yearMonthDay83.toDateTime(timeOfDay84, dateTimeZone85);
        org.joda.time.YearMonthDay.Property property87 = yearMonthDay83.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay88 = property87.getYearMonthDay();
        org.joda.time.YearMonthDay.Property property89 = yearMonthDay88.dayOfMonth();
        int int90 = property89.get();
        java.lang.String str91 = property89.getAsString();
        java.util.Locale locale93 = new java.util.Locale("");
        java.util.Set<java.lang.String> strSet94 = locale93.getUnicodeLocaleKeys();
        java.lang.String str95 = property89.getAsText(locale93);
        java.lang.String str96 = dateTimeZone67.getName(22989174760948L, locale93);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 229L + "'", long24 == 229L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1657878892843,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=843,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644573292843,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=843,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644573292843,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=843,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 8L + "'", long69 == 8L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-52L) + "'", long79 == (-52L));
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 11 + "'", int90 == 11);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "11" + "'", str91, "11");
        org.junit.Assert.assertEquals(locale93.toString(), "");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "11" + "'", str95, "11");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "+00:00" + "'", str96, "+00:00");
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime();
        org.joda.time.DateMidnight.Property property12 = dateMidnight8.yearOfEra();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573292887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=887,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        int int5 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        int int10 = localTime8.getValue((int) (byte) 0);
        int int11 = localTime8.getMillisOfSecond();
        org.joda.time.LocalTime.Property property12 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy(17);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = property12.getAsShortText(locale15);
        org.joda.time.LocalTime localTime17 = property12.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str19 = dateTimeFieldType18.toString();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType18.getDurationType();
        boolean boolean21 = localTime17.isSupported(dateTimeFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = localTime6.withField(dateTimeFieldType18, 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878892898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=898,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:54:52 UTC 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644573292898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=52,MILLISECOND=898,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 898 + "'", int11 == 898);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "35692898" + "'", str16, "35692898");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "centuryOfEra" + "'", str19, "centuryOfEra");
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Interval interval4 = interval2.withDurationBeforeEnd(readableDuration3);
        org.joda.time.Interval interval5 = interval4.toInterval();
        org.joda.time.DateTime dateTime6 = interval4.getEnd();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now();
        long long11 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.plusWeeks(86399);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfWeek();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime24.toDateTime(chronology32);
        boolean boolean34 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        boolean boolean41 = dateTime40.isBeforeNow();
        org.joda.time.DateTime dateTime43 = dateTime40.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime40.toDateTime(chronology48);
        boolean boolean50 = durationFieldType35.isSupported(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime33.toDateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.era();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight13.withChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField56 = chronology48.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime6.toMutableDateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField58 = chronology48.clockhourOfHalfday();
        long long60 = dateTimeField58.roundHalfCeiling((long) 455);
        long long62 = dateTimeField58.roundFloor((long) 593);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        java.lang.String str12 = property11.toString();
        org.joda.time.DateTime dateTime13 = property11.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property11.addToCopy(1656633600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371988912492940 + 1656633600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfDay]" + "'", str12, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        boolean boolean3 = dateTimeZone1.isStandardOffset(743L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getVariant();
        java.lang.String str15 = dateTimeField11.getAsShortText(3, locale13);
        long long17 = dateTimeField11.roundHalfCeiling((long) 8);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = dateTimeField11.getAsShortText(434, locale19);
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.lang.String str23 = dateTimeZone1.getName(104256554375000L, locale19);
        long long25 = dateTimeZone1.previousTransition((long) 8);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime26.withWeekOfWeekyear(35393);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35393 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3" + "'", str15, "3");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "434" + "'", str20, "434");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "South Korea" + "'", str22, "South Korea");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.488" + "'", str23, "+00:00:00.488");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8L + "'", long25 == 8L);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay10.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType18.getField(chronology21);
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfWeek();
        org.joda.time.DurationField durationField27 = chronology25.weeks();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTime dateTime27 = interval14.getStart();
        java.lang.String str28 = interval14.toString();
        boolean boolean30 = interval14.isBefore(14579L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str28, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(35544);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 1);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.monthOfYear();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withCenturyOfEra(668);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMinutes(0);
        int int18 = localDateTime17.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 66870 + "'", int18 == 66870);
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.plusMonths(35406);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.minusYears(35387781);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = yearMonthDay8.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight9 = property8.getDateMidnight();
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfEra();
        java.lang.String str11 = property10.toString();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy((long) 67);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[yearOfEra]" + "'", str11, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 16, chronology5);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.Interval interval19 = interval11.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str23 = interval22.toString();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval34 = interval26.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay36.toDateTime(timeOfDay37, dateTimeZone38);
        boolean boolean40 = dateTime39.isBeforeNow();
        org.joda.time.DateTime dateTime42 = dateTime39.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime44 = dateTime42.withMinuteOfHour((int) (short) 0);
        boolean boolean45 = interval34.contains((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = interval22.contains((org.joda.time.ReadableInterval) interval34);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Interval interval48 = interval22.withPeriodBeforeEnd(readablePeriod47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval22.toPeriod(periodType49);
        org.joda.time.Interval interval51 = interval19.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period50);
        long long54 = chronology5.add((org.joda.time.ReadablePeriod) period50, 0L, 35271);
        org.joda.time.DateTimeField dateTimeField55 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = chronology5.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long61 = chronology5.getDateTimeMillis(37359, 811, 1901, 1913);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 811 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str23, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1163943L + "'", long54 == 1163943L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int8 = calendar0.getMinimum(2);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.lang.String str18 = locale16.getDisplayCountry();
        int int19 = dateTimeField15.getMaximumTextLength(locale16);
        java.lang.String str20 = locale16.getDisplayScript();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale16);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone9, locale16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878893257,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=257,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644573293257,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=257,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644573293257,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=257,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = property10.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = property10.roundHalfEvenCopy();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.LocalDateTime localDateTime17 = property10.setCopy("1969");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3" + "'", str15, "3");
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property12 = dateMidnight8.year();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573293283,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=283,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now();
        long long5 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        boolean boolean8 = dateMidnight4.isAfter((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withDayOfWeek(3);
        org.joda.time.Interval interval13 = dateMidnight10.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now(chronology14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(35L, chronology14);
        boolean boolean18 = dateTime17.isEqualNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime7 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 86399);
        org.joda.time.DateTime dateTime11 = dateTime9.plus(0L);
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays(306);
        org.joda.time.DateTime dateTime15 = dateTime10.plusWeeks(3);
        int int16 = dateTime15.getDayOfYear();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.DateTime.Property property18 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 60 + "'", int16 == 60);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay45 = org.joda.time.YearMonthDay.fromCalendarFields(calendar41);
        calendar41.setFirstDayOfWeek(2022);
        int int49 = calendar41.getMinimum(2);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.year();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.lang.String str59 = locale57.getDisplayCountry();
        int int60 = dateTimeField56.getMaximumTextLength(locale57);
        java.lang.String str61 = locale57.getDisplayScript();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale57);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone50, locale57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        long long66 = dateTimeZone64.previousTransition((long) 8);
        long long68 = dateTimeZone40.getMillisKeepLocal(dateTimeZone64, (long) (byte) 0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 35277, dateTimeZone64);
        long long71 = dateTimeZone64.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter27.withZone(dateTimeZone64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withPivotYear((java.lang.Integer) 2010);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter74.withZoneUTC();
        org.joda.time.Chronology chronology76 = dateTimeFormatter75.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter77 = dateTimeFormatter75.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter75.withDefaultYear(35273);
        java.lang.StringBuffer stringBuffer80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(dateTimeZone81);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.monthOfYear();
        org.joda.time.DateMidnight dateMidnight84 = org.joda.time.DateMidnight.now();
        long long85 = property83.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight84);
        org.joda.time.DateTimeField dateTimeField86 = property83.getField();
        int int87 = property83.getLeapAmount();
        org.joda.time.DateMidnight dateMidnight88 = property83.roundHalfEvenCopy();
        int int89 = dateMidnight88.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter79.printTo(stringBuffer80, (org.joda.time.ReadableInstant) dateMidnight88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1657878893329,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=329,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644573293329,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=329,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573293329,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=329,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 8L + "'", long66 == 8L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 97L + "'", long71 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNull(chronology76);
        org.junit.Assert.assertNull(dateTimePrinter77);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 22 + "'", int89 == 22);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval26 = interval18.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval41 = interval33.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        boolean boolean47 = dateTime46.isBeforeNow();
        org.joda.time.DateTime dateTime49 = dateTime46.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour((int) (short) 0);
        boolean boolean52 = interval41.contains((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = interval29.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval29.withPeriodBeforeEnd(readablePeriod54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval29.toPeriod(periodType56);
        org.joda.time.Interval interval58 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        long long61 = chronology14.add((org.joda.time.ReadablePeriod) period57, (long) 'a', 4);
        org.joda.time.DurationField durationField62 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology14.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours(55);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = localDate66.withCenturyOfEra(803);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay(dateTimeZone70);
        org.joda.time.TimeOfDay timeOfDay72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = yearMonthDay71.toDateTime(timeOfDay72, dateTimeZone73);
        boolean boolean75 = dateTime74.isBeforeNow();
        org.joda.time.DateTime dateTime77 = dateTime74.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime79 = dateTime77.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime77.getZone();
        int int82 = dateTimeZone80.getStandardOffset((long) 13);
        long long86 = dateTimeZone80.convertLocalToUTC(229L, false, (long) 49);
        int int88 = dateTimeZone80.getOffset(0L);
        org.joda.time.LocalDate localDate89 = org.joda.time.LocalDate.now(dateTimeZone80);
        org.joda.time.LocalDate localDate91 = localDate89.minusMonths(967);
        org.joda.time.LocalDate.Property property92 = localDate91.weekOfWeekyear();
        int[] intArray93 = localDate91.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = dateTimeField63.set((org.joda.time.ReadablePartial) localDate66, 80, intArray93, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 229L + "'", long61 == 229L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 229L + "'", long86 == 229L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1941, 7, 11]");
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval2.withPeriodBeforeEnd(readablePeriod27);
        long long29 = interval28.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now();
        long long34 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = property32.roundHalfEvenCopy();
        boolean boolean36 = interval28.isAfter((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.MutableInterval mutableInterval37 = interval28.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays(126);
        int int42 = dateTime38.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime38.withDayOfMonth(309);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 309 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 13);
        long long16 = dateTimeZone10.convertLocalToUTC(229L, false, (long) 49);
        int int18 = dateTimeZone10.getOffset(0L);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths(967);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate24 = localDate21.plusWeeks(35467);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 229L + "'", long16 == 229L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("292278993-02-08T09:50:05.971Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=292278993-02-08t09:50:05.971z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) '4', dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYear(53);
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) (-28401235199866L));
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        long long24 = dateTimeZone18.convertLocalToUTC(229L, false, (long) 49);
        long long26 = dateTimeZone18.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime27 = localDate7.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime28 = localDate2.toDateTimeAtMidnight(dateTimeZone18);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        java.util.Date date30 = calendar29.getTime();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromDateFields(date30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusMonths(35279414);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusYears(35310889);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(43);
        org.joda.time.DateMidnight dateMidnight38 = yearMonthDay35.toDateMidnight(dateTimeZone37);
        long long40 = dateTimeZone18.getMillisKeepLocal(dateTimeZone37, (-968631455035L));
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 229L + "'", long24 == 229L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 49L + "'", long26 == 49L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644573293476,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=476,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Feb 11 09:54:53 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-968786255035L) + "'", long40 == (-968786255035L));
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withSecondOfMinute(10);
        int[] intArray4 = localDateTime3.getValues();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays(716);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1970, 1, 1, 10001]");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        int int6 = timeOfDay5.getMillisOfSecond();
        org.joda.time.LocalTime localTime7 = timeOfDay5.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 510 + "'", int6 == 510);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property2.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minus(0L);
        org.joda.time.DateTime dateTime7 = dateMidnight6.toDateTime();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = dateMidnight6.isBefore(readableInstant8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.plus(0L);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.DateMidnight.Property property13 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.minus((long) 1970);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        org.joda.time.DateTime dateTime23 = dateTime20.plusMillis((int) (byte) 0);
        int int24 = dateTime23.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay26.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay26.property(dateTimeFieldType31);
        org.joda.time.DateTime.Property property33 = dateTime23.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = property33.roundCeilingCopy();
        org.joda.time.DateTime dateTime35 = property33.roundCeilingCopy();
        int int36 = property33.getMaximumValueOverall();
        org.joda.time.DateTime dateTime38 = property33.addWrapFieldToCopy(371);
        boolean boolean39 = dateMidnight15.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateMidnight dateMidnight40 = dateTime38.toDateMidnight();
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.weekyear();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.era();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(629, 35351, 282, 35485875, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35485875 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.DurationField durationField8 = property7.getLeapDurationField();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573293547,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=547,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNull(durationField8);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale6);
        calendar11.setMinimalDaysInFirstWeek(12);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        calendar11.roll(4, 17);
        boolean boolean18 = calendar11.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromCalendarFields(calendar11);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645178093557,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=12,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=18,DAY_OF_YEAR=49,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=557,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval2.withPeriodBeforeEnd(readablePeriod27);
        boolean boolean29 = interval28.isBeforeNow();
        boolean boolean30 = interval28.isBeforeNow();
        org.joda.time.Interval interval32 = interval28.withEndMillis((long) 35666);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime4.weekOfWeekyear();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromCalendarFields(calendar13);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTime(timeOfDay22, dateTimeZone23);
        int int25 = dateTime24.getCenturyOfEra();
        org.joda.time.DateTime dateTime27 = dateTime24.plusMillis((int) (byte) 0);
        int int28 = dateTime27.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay30.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay30.property(dateTimeFieldType35);
        org.joda.time.DateTime.Property property37 = dateTime27.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.DurationField durationField42 = durationFieldType38.getField(chronology41);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay17.withFieldAdded(durationFieldType38, (int) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime4.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        int int46 = dateTime4.getWeekyear();
        int int47 = dateTime4.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1657878893585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime4 = property3.withMaximumValue();
        int int5 = property3.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573293608,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=608,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime4.withWeekyear(35434934);
        org.joda.time.DateTime dateTime14 = dateTime4.withWeekyear(19);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("+09:50:05.195");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(17);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds((int) (byte) 100);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(49);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localTime9.isSupported(durationFieldType12);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573293634,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=634,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 634 + "'", int4 == 634);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = dateTimeFormatter2.parseLocalTime("java.util.GregorianCalendar[time=1657878584960,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=44,MILLISECOND=960,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        long long5 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone6 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.lang.String str13 = yearMonthDay8.toString("\u4e8c\u6708", locale10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone6, locale10);
        boolean boolean15 = locale10.hasExtensions();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878893667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=667,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Jul 15 09:54:53 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1657878893667L + "'", long5 == 1657878893667L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "German" + "'", str11, "German");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e8c\u6708" + "'", str13, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644573293667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=667,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(959, 633);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 959 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale6);
        calendar11.setMinimalDaysInFirstWeek(12);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        calendar11.setTimeInMillis((-968631455035L));
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        calendar11.set(51090165, 29, 125, 1404000000, 203);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=12,ERA=1,YEAR=51090165,MONTH=29,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=125,DAY_OF_YEAR=112,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=1404000000,MINUTE=203,SECOND=24,MILLISECOND=965,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.Chronology chronology9 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.era();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (-798222), chronology5);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            int int3 = calendar1.getGreatestMinimum(409);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 409");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime localTime5 = property3.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(22);
        int int9 = localTime8.getHourOfDay();
        org.joda.time.LocalTime localTime11 = localTime8.minusSeconds(32769);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.year();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = locale19.getDisplayCountry();
        int int22 = dateTimeField18.getMaximumTextLength(locale19);
        java.lang.String str23 = locale19.getDisplayScript();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale19);
        int int25 = property12.getMaximumShortTextLength(locale19);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573293726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=726,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644573293726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=726,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.minus(readablePeriod3);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        java.lang.Integer int8 = dateTimeFormatter7.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withPivotYear(44);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter7.withLocale(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay33 = org.joda.time.YearMonthDay.fromCalendarFields(calendar29);
        calendar29.setFirstDayOfWeek(2022);
        int int37 = calendar29.getMinimum(2);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale45.getDisplayCountry();
        int int48 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str49 = locale45.getDisplayScript();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale45);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone38, locale45);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long54 = dateTimeZone52.previousTransition((long) 8);
        long long56 = dateTimeZone28.getMillisKeepLocal(dateTimeZone52, (long) (byte) 0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 35277, dateTimeZone52);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter15.withZone(dateTimeZone52);
        org.joda.time.format.DateTimePrinter dateTimePrinter60 = dateTimeFormatter15.getPrinter();
        java.lang.Integer int61 = dateTimeFormatter15.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 857);
        org.joda.time.format.DateTimePrinter dateTimePrinter64 = dateTimeFormatter63.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = timeOfDay4.toString(dateTimeFormatter63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "German" + "'", str13, "German");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1657878893742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573293742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644573293742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 8L + "'", long54 == 8L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(dateTimePrinter60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNull(dateTimePrinter64);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        int int4 = property3.get();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addNoWrapToCopy((int) 'x');
        org.joda.time.TimeOfDay timeOfDay8 = property3.addNoWrapToCopy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withHourOfDay(40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYear((int) (short) -1);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.minuteOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) '4', chronology5);
        org.joda.time.LocalDate localDate12 = localDate10.minusDays((int) (byte) 10);
        int int13 = localDate10.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.minus(readablePeriod3);
        int int5 = timeOfDay4.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusMinutes(17);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay4.withMillisOfSecond(708);
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = timeOfDay4.toString("09:51:50.451", locale11);
        org.joda.time.LocalTime localTime14 = timeOfDay4.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 829 + "'", int5 == 829);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "French" + "'", str12, "French");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "09:51:50.451" + "'", str13, "09:51:50.451");
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now();
        long long5 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plusWeeks(86399);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfWeek();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime18.toDateTime(chronology26);
        boolean boolean28 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime34.toDateTime(chronology42);
        boolean boolean44 = durationFieldType29.isSupported(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime27.toDateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.era();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight7.withChronology(chronology42);
        org.joda.time.DurationField durationField50 = chronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType0.getField(chronology42);
        java.lang.String str53 = dateTimeField51.getAsText((long) 210);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.DateTimeField dateTimeField14 = property5.getField();
        org.joda.time.DateTimeField dateTimeField15 = property5.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) property5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(93);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        int int15 = localDateTime14.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withWeekOfWeekyear(37359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37359 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        int int1 = dateMidnight0.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfCentury((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withPeriodAdded(readablePeriod4, 22);
        int int7 = dateMidnight6.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        boolean boolean22 = dateMidnight20.isBefore((-60753485279942L));
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfSecond((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        int int5 = localDateTime3.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withYear(22);
        int int6 = yearMonthDay1.size();
        int int7 = yearMonthDay1.size();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        boolean boolean13 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        int int20 = dateTimeZone18.getStandardOffset((long) 13);
        long long24 = dateTimeZone18.convertLocalToUTC(229L, false, (long) 49);
        int int26 = dateTimeZone18.getOffset(0L);
        boolean boolean28 = dateTimeZone18.isStandardOffset((long) 35275);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay1.toDateMidnight(dateTimeZone18);
        int int32 = dateMidnight31.getMinuteOfHour();
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = dateMidnight31.isBefore(readableInstant33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.minus((long) 919);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 229L + "'", long24 == 229L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateMidnight36);
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder33.setWeekDate(871, 37, 444);
        java.util.Locale locale39 = new java.util.Locale("Fri Feb 11 09:47:52 UTC 2022");
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = locale39.getDisplayScript(locale40);
        java.util.Calendar.Builder builder42 = builder37.setLocale(locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) builder42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Calendar$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878893975,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=975,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573293975,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=975,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573293975,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=53,MILLISECOND=975,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals(locale39.toString(), "fri feb 11 09:47:52 utc 2022");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.plusHours(538);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime10.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar14.roll(292278994, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "292278993-02-08T09:54:53.992Z" + "'", str11, "292278993-02-08T09:54:53.992Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 16, chronology13);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.Interval interval27 = interval19.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str31 = interval30.toString();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval42 = interval34.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        boolean boolean48 = dateTime47.isBeforeNow();
        org.joda.time.DateTime dateTime50 = dateTime47.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime52 = dateTime50.withMinuteOfHour((int) (short) 0);
        boolean boolean53 = interval42.contains((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean54 = interval30.contains((org.joda.time.ReadableInterval) interval42);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Interval interval56 = interval30.withPeriodBeforeEnd(readablePeriod55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval30.toPeriod(periodType57);
        org.joda.time.Interval interval59 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        long long62 = chronology13.add((org.joda.time.ReadablePeriod) period58, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod63 = period58.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) mutablePeriod63);
        int int65 = yearMonthDay1.getMonthOfYear();
        org.joda.time.Chronology chronology66 = yearMonthDay1.getChronology();
        java.lang.String str67 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology68 = yearMonthDay1.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str31, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1163943L + "'", long62 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-11" + "'", str67, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology68);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime4 = dateTime2.minusMinutes(32772);
        org.joda.time.DateTime.Property property5 = dateTime4.centuryOfEra();
        int int6 = property5.getMinimumValue();
        org.joda.time.DateTime dateTime7 = property5.withMaximumValue();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573294064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=64,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalDate localDate10 = localDate6.withFieldAdded(durationFieldType8, 47);
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfYear();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded((long) 292278993, (int) '#');
        long long20 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.years();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-292278993L) + "'", long20 == (-292278993L));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = localTime1.plusHours((int) (short) -1);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.DateTime dateTime13 = localTime11.toDateTimeToday();
        org.joda.time.LocalTime localTime15 = localTime11.plusSeconds(73);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        java.lang.String str17 = durationFieldType16.toString();
        java.lang.String str18 = durationFieldType16.toString();
        java.lang.String str19 = durationFieldType16.getName();
        boolean boolean20 = localTime15.isSupported(durationFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = localTime15.toString("292278993-02-08T09:54:05.659Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573294130,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=130,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:54:54.130" + "'", str4, "09:54:54.130");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573294130,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=130,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millis" + "'", str17, "millis");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millis" + "'", str18, "millis");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millis" + "'", str19, "millis");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        int int4 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withYearOfCentury(79);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withYearOfCentury(75);
        boolean boolean10 = dateMidnight6.isBefore((long) 134);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) 18008);
        int int13 = dateMidnight12.getSecondOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusDays((int) '#');
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusYears(211);
        boolean boolean18 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(2049, 35513, 411, 100, 426);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 15);
        int int2 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay1.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay4 = property3.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.withMinimumValue();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.LocalTime localTime4 = localTime1.withMillisOfDay(0);
        org.joda.time.LocalTime localTime6 = localTime4.plusHours((int) (byte) 1);
        org.joda.time.LocalTime.Property property7 = localTime4.secondOfMinute();
        java.lang.String str8 = property7.getName();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573294168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=168,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondOfMinute" + "'", str8, "secondOfMinute");
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(556, 439, 134, 46, 473, 35599, 746015, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.plusWeeks(35297);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusWeeks(716);
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withYear(15);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(35408, (int) (byte) 1, 35414727);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35408 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime5.getFieldTypes();
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        java.util.Date date5 = new java.util.Date(2000, 0, 3, 0, 366);
        int int6 = date5.getYear();
        int int7 = date5.getSeconds();
        date5.setHours(32826116);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Oct 15 20:06:00 UTC 7644");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode5 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet16, filteringMode17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = java.util.Locale.UK;
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getDisplayCountry();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale36.getDisplayCountry();
        java.util.Locale locale40 = new java.util.Locale("");
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.UK;
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale31, locale33, locale36, locale40, locale41, locale42, locale43, locale44, locale46 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList48, filteringMode50);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList51, filteringMode52);
        java.util.Locale locale54 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.UK;
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.lang.String str70 = locale68.getDisplayCountry();
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.lang.String str73 = locale71.getDisplayCountry();
        java.util.Locale locale75 = new java.util.Locale("");
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        java.util.Locale locale77 = java.util.Locale.UK;
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleKeys();
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray82 = new java.util.Locale[] { locale60, locale61, locale62, locale63, locale64, locale66, locale68, locale71, locale75, locale76, locale77, locale78, locale79, locale81 };
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList83, filteringMode85);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet55, filteringMode85);
        java.lang.String str88 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList87);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap89 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList90 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap89);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + filteringMode5 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode5.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode17.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "German" + "'", str32, "German");
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode50.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode52.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "German" + "'", str67, "German");
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode85.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(languageRangeList90);
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.plusHours(538);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime10.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar14);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = gregorianCalendar14.getActualMaximum(376);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 376");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "292278993-02-08T09:54:54.329Z" + "'", str11, "292278993-02-08T09:54:54.329Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        boolean boolean28 = dateTimeFormatter27.isOffsetParsed();
        java.util.Locale locale29 = dateTimeFormatter27.getLocale();
        boolean boolean30 = dateTimeFormatter27.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = dateTimeFormatter27.parseLocalDate("09:52:03.291");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = property9.withMaximumValue();
        int int11 = property9.getMinimumValue();
        int int12 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573294352,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=352,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2922789 + "'", int12 == 2922789);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields(calendar11);
        calendar11.setFirstDayOfWeek(2022);
        int int19 = calendar11.getMinimum(2);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = locale27.getDisplayCountry();
        int int30 = dateTimeField26.getMaximumTextLength(locale27);
        java.lang.String str31 = locale27.getDisplayScript();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale27);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone20, locale27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        long long36 = dateTimeZone34.previousTransition((long) 8);
        long long38 = dateTimeZone10.getMillisKeepLocal(dateTimeZone34, (long) (byte) 0);
        int int40 = dateTimeZone34.getOffsetFromLocal(8L);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str42 = dateTimeZone34.toString();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1657878894364,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=364,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644573294364,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=364,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573294364,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=364,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 8L + "'", long36 == 8L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay.Property property4 = timeOfDay2.millisOfSecond();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay2.minuteOfHour();
        java.lang.String str6 = property5.getAsString();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addNoWrapToCopy(660);
        org.joda.time.TimeOfDay timeOfDay9 = property5.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = property5.addNoWrapToCopy(36384202);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "55" + "'", str6, "55");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
        org.joda.time.LocalDate localDate4 = yearMonthDay1.toLocalDate();
        int int5 = localDate4.getWeekyear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withPeriodAdded(readablePeriod9, 0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.DateTime dateTime17 = localDate2.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone15);
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths(35584);
        org.joda.time.LocalDate localDate22 = localDate20.minusDays(2);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtCurrentTime();
        int int24 = dateTime23.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 162 + "'", int24 == 162);
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        boolean boolean10 = localTime8.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight6.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight15 = property14.getDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean17 = dateMidnight15.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = dateMidnight15.getChronology();
        int int19 = property4.getDifference((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTimeField dateTimeField20 = property4.getField();
        int int21 = property4.getMinimumValueOverall();
        org.joda.time.Interval interval22 = property4.toInterval();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573294420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644573294420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-456566) + "'", int19 == (-456566));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay.Property property4 = timeOfDay2.millisOfSecond();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay2.minuteOfHour();
        java.lang.String str6 = property5.getAsString();
        int int7 = property5.get();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "55" + "'", str6, "55");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 55 + "'", int7 == 55);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        boolean boolean10 = dateTimeField8.isLeap((long) 2010);
        long long12 = dateTimeField8.roundCeiling(1644573044906L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField8.getType();
        long long15 = dateTimeField8.roundHalfEven((long) 17);
        int int17 = dateTimeField8.getMinimumValue((long) 801109);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1646092800000L + "'", long12 == 1646092800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay7.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = yearMonthDay7.isSupported(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        boolean boolean24 = dateTime23.isBeforeNow();
        org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime26.getZone();
        int int31 = dateTimeZone29.getStandardOffset((long) 13);
        long long35 = dateTimeZone29.convertLocalToUTC(229L, false, (long) 49);
        long long37 = dateTimeZone29.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime38 = yearMonthDay7.toDateTimeAtCurrentTime(dateTimeZone29);
        int int39 = yearMonthDay7.getYear();
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay7.monthOfYear();
        org.joda.time.DurationField durationField41 = property40.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 229L + "'", long35 == 229L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 49L + "'", long37 == 49L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay7.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        int int26 = dateTimeZone24.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime27 = yearMonthDay7.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTime(timeOfDay33, dateTimeZone34);
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay46 = org.joda.time.YearMonthDay.fromCalendarFields(calendar42);
        calendar42.setFirstDayOfWeek(2022);
        int int50 = calendar42.getMinimum(2);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.year();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale58.getDisplayCountry();
        int int61 = dateTimeField57.getMaximumTextLength(locale58);
        java.lang.String str62 = locale58.getDisplayScript();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(locale58);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone51, locale58);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        long long67 = dateTimeZone65.previousTransition((long) 8);
        long long69 = dateTimeZone41.getMillisKeepLocal(dateTimeZone65, (long) (byte) 0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 35277, dateTimeZone65);
        long long72 = dateTimeZone65.convertUTCToLocal((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter28.withZone(dateTimeZone65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter73.withDefaultYear(342);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter75.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser77 = dateTimeFormatter75.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.parse("09:49:57.476", dateTimeFormatter75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1657878894492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573294492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1644573294492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 8L + "'", long67 == 8L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 97L + "'", long72 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNull(dateTimeParser77);
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime8 = property5.addCopy((long) (short) 10);
        org.joda.time.LocalTime localTime9 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime10 = property5.getLocalTime();
        org.joda.time.LocalTime localTime11 = property5.roundCeilingCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573294516,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=516,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 516 + "'", int4 == 516);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology5);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        int int11 = property9.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = property9.setCopy("09:54:46.409");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"09:54:46.409\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        int int2 = dateMidnight1.getSecondOfDay();
        int int3 = dateMidnight1.getHourOfDay();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfCentury(10);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate.Property property10 = localDate8.centuryOfEra();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields(calendar11);
        calendar11.setFirstDayOfWeek(2022);
        int int19 = calendar11.getMinimum(2);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = locale27.getDisplayCountry();
        int int30 = dateTimeField26.getMaximumTextLength(locale27);
        java.lang.String str31 = locale27.getDisplayScript();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale27);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone20, locale27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        long long36 = dateTimeZone34.previousTransition((long) 8);
        org.joda.time.Interval interval37 = localDate8.toInterval(dateTimeZone34);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.Interval interval48 = interval40.overlap((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration49 = interval48.toDuration();
        long long50 = duration49.getMillis();
        boolean boolean52 = duration49.equals((java.lang.Object) 1644572896626L);
        org.joda.time.Interval interval53 = interval37.withDurationAfterStart((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight1.plus((org.joda.time.ReadableDuration) duration49);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1657878894540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644573294540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644573294540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 8L + "'", long36 == 8L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 33L + "'", long50 == 33L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateMidnight54);
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime6.property(dateTimeFieldType15);
        int int19 = property18.getMinimumValueOverall();
        org.joda.time.DateTime dateTime20 = property18.withMaximumValue();
        org.joda.time.DateTime.Property property21 = dateTime20.year();
        org.joda.time.DateTime dateTime22 = property21.roundCeilingCopy();
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime.Property property24 = dateTime22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTime(timeOfDay28, dateTimeZone29);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay33.monthOfYear();
        org.joda.time.DateTime dateTime38 = yearMonthDay33.toDateTimeAtCurrentTime();
        int int39 = property31.compareTo((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.Chronology chronology40 = yearMonthDay33.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.minutes();
        org.joda.time.DurationField durationField49 = chronology47.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) 271, chronology47);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.yearOfEra();
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Calendar calendar54 = dateMidnight51.toCalendar(locale53);
        java.lang.String str55 = locale53.getDisplayName();
        int int56 = dateTimeField41.getMaximumShortTextLength(locale53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = property24.setCopy("-0057-12-23T23:59:59.800", locale53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-0057-12-23T23:59:59.800\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "French (France)" + "'", str55, "French (France)");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        int int20 = dateTime16.getYear();
        org.joda.time.DateTime.Property property21 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        org.joda.time.DateTime dateTime23 = property21.roundHalfCeilingCopy();
        int int24 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.withYearOfEra(660);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfCentury(10);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate33 = localDate29.minusYears(51);
        int int34 = localDate29.getDayOfWeek();
        org.joda.time.DateTime dateTime35 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears(32772);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy(86340985);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.dayOfWeek();
        org.joda.time.DateMidnight.Property property17 = dateMidnight14.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        boolean boolean27 = interval2.containsNow();
        org.joda.time.Chronology chronology28 = interval2.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.year();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 32770);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfYear();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale42.getDisplayCountry();
        int int45 = dateTimeField41.getMaximumTextLength(locale42);
        java.lang.String str46 = locale42.getDisplayName();
        java.lang.String str47 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDate34, 35437666, locale42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = locale42.getISO3Language();
// flaky:             org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 31 dec 1969 23:59:59 gmt");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "31 dec 1969 23:59:59 gmt" + "'", str46, "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "35437666" + "'", str47, "35437666");
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury((int) (byte) 1);
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDayOfMonth(9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withTime(757, 400, 72120003, 27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 757 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        java.util.Date date9 = new java.util.Date(5, 1970, 20);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay18.monthOfYear();
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        int int24 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.Chronology chronology25 = yearMonthDay18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay18.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean29 = yearMonthDay18.isSupported(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        boolean boolean35 = dateTime34.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        int int42 = dateTimeZone40.getStandardOffset((long) 13);
        long long46 = dateTimeZone40.convertLocalToUTC(229L, false, (long) 49);
        long long48 = dateTimeZone40.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime49 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone40);
        java.lang.String str50 = dateTimeZone40.toString();
        long long54 = dateTimeZone40.convertLocalToUTC((long) 35354, true, (long) 31);
        org.joda.time.DateTime dateTime55 = yearMonthDay10.toDateTimeAtMidnight(dateTimeZone40);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance();
        calendar56.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay60 = org.joda.time.YearMonthDay.fromCalendarFields(calendar56);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay60.monthOfYear();
        int int65 = yearMonthDay60.getValue((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        boolean boolean69 = dateTimeZone67.isStandardOffset(743L);
        org.joda.time.Interval interval70 = yearMonthDay60.toInterval(dateTimeZone67);
        boolean boolean71 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime72 = yearMonthDay10.toDateTimeAtMidnight(dateTimeZone67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(35655582, 996, 389, 569, 894, 35403706, dateTimeZone67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 569 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date9.toString(), "Wed Mar 20 00:00:00 UTC 2069");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 229L + "'", long46 == 229L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 49L + "'", long48 == 49L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 35354L + "'", long54 == 35354L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1657878894739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.minusMinutes((int) (byte) 100);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        calendar0.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date6 = calendar0.getTime();
        calendar0.setFirstDayOfWeek(35271);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar9);
        calendar9.setFirstDayOfWeek(2022);
        int int17 = calendar9.getMinimum(2);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale25.getDisplayCountry();
        int int28 = dateTimeField24.getMaximumTextLength(locale25);
        java.lang.String str29 = locale25.getDisplayScript();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale25);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone18, locale25);
        calendar0.setTimeZone(timeZone18);
        calendar0.set(47, 19, 0, 75, (-292275054));
        long long39 = calendar0.getTimeInMillis();
        calendar0.setLenient(true);
        calendar0.set(35291, 597, 35334, (int) (byte) 1, 992);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDate48.getFieldTypes();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1171212330425236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=35271,minimalDaysInFirstWeek=1,ERA=0,YEAR=35145,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=178,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=54,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Jul 15 09:54:54 UTC 2022");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1657878894764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644573294764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644573294764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=54,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-78170543585236L) + "'", long39 == (-78170543585236L));
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.lang.String str6 = yearMonthDay1.toString();
        org.joda.time.DateTime dateTime7 = yearMonthDay1.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11" + "'", str6, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(35368617);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.lang.String str6 = property5.toString();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.YearMonthDay yearMonthDay9 = property5.addWrapFieldToCopy(768);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.minutes();
        org.joda.time.DurationField durationField16 = chronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        java.lang.String str20 = localDate19.toString();
        java.lang.String str21 = localDate19.toString();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime31.toDateTime(chronology39);
        boolean boolean41 = interval24.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        boolean boolean48 = dateTime47.isBeforeNow();
        org.joda.time.DateTime dateTime50 = dateTime47.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime47.toDateTime(chronology55);
        boolean boolean57 = durationFieldType42.isSupported(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime40.toDateTime(chronology55);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str62 = interval61.toString();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime66 = interval65.getEnd();
        org.joda.time.Chronology chronology67 = interval65.getChronology();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime71 = interval70.getEnd();
        org.joda.time.Chronology chronology72 = interval70.getChronology();
        org.joda.time.Interval interval73 = interval65.overlap((org.joda.time.ReadableInterval) interval70);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay(dateTimeZone74);
        org.joda.time.TimeOfDay timeOfDay76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = yearMonthDay75.toDateTime(timeOfDay76, dateTimeZone77);
        boolean boolean79 = dateTime78.isBeforeNow();
        org.joda.time.DateTime dateTime81 = dateTime78.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime83 = dateTime81.withMinuteOfHour((int) (short) 0);
        boolean boolean84 = interval73.contains((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean85 = interval61.contains((org.joda.time.ReadableInterval) interval73);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Interval interval87 = interval61.withPeriodBeforeEnd(readablePeriod86);
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.Period period89 = interval61.toPeriod(periodType88);
        org.joda.time.DateTime dateTime90 = dateTime40.minus((org.joda.time.ReadablePeriod) period89);
        org.joda.time.LocalDate localDate91 = localDate19.minus((org.joda.time.ReadablePeriod) period89);
        int[] intArray93 = chronology14.get((org.joda.time.ReadablePeriod) period89, 1657878508587L);
        org.joda.time.DateTimeField dateTimeField94 = chronology14.minuteOfHour();
        org.joda.time.DurationField durationField95 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay9.withChronologyRetainFields(chronology14);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11" + "'", str20, "2022-02-11");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11" + "'", str21, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str62, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 0, 2741, 1, 9, 48, 28, 587]");
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(yearMonthDay96);
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(93);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusHours(35280);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(203);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.year();
        org.joda.time.DurationField durationField18 = property17.getLeapDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int8 = calendar0.getMinimum(2);
        calendar0.clear();
        java.time.Instant instant10 = calendar0.toInstant();
        java.util.Date date11 = calendar0.getTime();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay7.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = yearMonthDay7.isSupported(dateTimeFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType17.getDurationType();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DurationField durationField27 = chronology25.weekyears();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-62100742311688L), chronology25);
        org.joda.time.DateTimeField dateTimeField33 = chronology25.monthOfYear();
        org.joda.time.DurationField durationField34 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType17.getField(chronology25);
        int int36 = dateTimeField35.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime6.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded((long) 896, (int) ' ');
        boolean boolean24 = dateTime19.isEqual(97L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval(0L, 1L);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 16, chronology33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval47 = interval39.overlap((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str51 = interval50.toString();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        org.joda.time.Chronology chronology56 = interval54.getChronology();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime60 = interval59.getEnd();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.Interval interval62 = interval54.overlap((org.joda.time.ReadableInterval) interval59);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(dateTimeZone63);
        org.joda.time.TimeOfDay timeOfDay65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = yearMonthDay64.toDateTime(timeOfDay65, dateTimeZone66);
        boolean boolean68 = dateTime67.isBeforeNow();
        org.joda.time.DateTime dateTime70 = dateTime67.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime72 = dateTime70.withMinuteOfHour((int) (short) 0);
        boolean boolean73 = interval62.contains((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean74 = interval50.contains((org.joda.time.ReadableInterval) interval62);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Interval interval76 = interval50.withPeriodBeforeEnd(readablePeriod75);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = interval50.toPeriod(periodType77);
        org.joda.time.Interval interval79 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        long long82 = chronology33.add((org.joda.time.ReadablePeriod) period78, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod83 = period78.toMutablePeriod();
        org.joda.time.Interval interval84 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        boolean boolean85 = interval27.containsNow();
        org.joda.time.Period period86 = interval27.toPeriod();
        org.joda.time.DateMidnight dateMidnight87 = org.joda.time.DateMidnight.now();
        int int88 = dateMidnight87.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight87.withYearOfCentury((int) (short) 1);
        long long91 = dateMidnight87.getMillis();
        java.lang.String str92 = dateMidnight87.toString();
        org.joda.time.Interval interval93 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period86, (org.joda.time.ReadableInstant) dateMidnight87);
        org.joda.time.DateTime dateTime94 = dateTime19.minus((org.joda.time.ReadablePeriod) period86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType96 = period86.getFieldType(35475000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str51, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1163943L + "'", long82 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 11 + "'", int88 == 11);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1644537600000L + "'", long91 == 1644537600000L);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022-02-11T00:00:00.000Z" + "'", str92, "2022-02-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(2);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withYear(35655582);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.centuries();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DurationField durationField9 = chronology4.months();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        int int7 = localDateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusYears(2022);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        int int13 = localDateTime11.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDayOfMonth(18057);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18057 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        long long8 = dateTimeField6.roundHalfEven((long) 5);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.lang.String str10 = locale9.getLanguage();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale9);
        int int12 = dateTimeField6.getMaximumTextLength(locale9);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-259200000L) + "'", long8 == (-259200000L));
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "31 dec 1969 23:59:59 gmt");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "31 dec 1969 23:59:59 gmt" + "'", str10, "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644573295107,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=107,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        int int10 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusYears(35467);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(98);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property2 = localDate0.era();
        int int3 = localDate0.size();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        int int14 = localDate0.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate localDate16 = localDate0.withDayOfYear((int) '#');
        org.joda.time.LocalDate localDate18 = localDate0.withDayOfYear((int) (short) 10);
        int int19 = localDate18.getDayOfYear();
        org.joda.time.LocalDate localDate21 = localDate18.minusYears(12);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Chronology chronology39 = interval37.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime31.toDateTime(chronology39);
        boolean boolean41 = interval24.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime40.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withPeriodAdded(readablePeriod44, 0);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        org.joda.time.DateTime dateTime51 = dateTime40.withZoneRetainFields(dateTimeZone50);
        org.joda.time.Interval interval52 = localDate21.toInterval(dateTimeZone50);
        org.joda.time.DurationFieldType durationFieldType53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = localDate21.withFieldAdded(durationFieldType53, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 169 + "'", int42 == 169);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        boolean boolean10 = localTime8.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight6.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight15 = property14.getDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean17 = dateMidnight15.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = dateMidnight15.getChronology();
        int int19 = property4.getDifference((org.joda.time.ReadableInstant) dateMidnight15);
        int int20 = dateMidnight15.getDayOfWeek();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.withFields((org.joda.time.ReadablePartial) timeOfDay21);
        int int23 = dateMidnight22.getCenturyOfEra();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573295184,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=184,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644573295184,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=184,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-456566) + "'", int19 == (-456566));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfCentury(10);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay18.monthOfYear();
        org.joda.time.DateTime dateTime23 = yearMonthDay18.toDateTimeAtCurrentTime();
        int int24 = property16.compareTo((org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.Chronology chronology25 = yearMonthDay18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay18.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean29 = yearMonthDay18.isSupported(dateTimeFieldType28);
        boolean boolean30 = localDate10.isSupported(dateTimeFieldType28);
        org.joda.time.DateTime dateTime32 = dateTime4.withField(dateTimeFieldType28, 17);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumShortTextLength(locale5);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.TimeOfDay timeOfDay12 = property10.withMaximumValue();
        java.lang.String str13 = property10.getAsShortText();
        boolean boolean14 = property3.equals((java.lang.Object) property10);
        org.joda.time.TimeOfDay timeOfDay15 = property10.getTimeOfDay();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "6" + "'", str13, "6");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfMonth();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Interval interval15 = interval7.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Duration duration16 = interval15.toDuration();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours((int) (byte) 100);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime26);
        long long30 = duration16.getMillis();
        org.joda.time.Period period31 = duration16.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTime(timeOfDay39, dateTimeZone40);
        boolean boolean42 = dateTime41.isBeforeNow();
        org.joda.time.DateTime dateTime44 = dateTime41.withMonthOfYear((int) (byte) 1);
        int int45 = dateTime41.getYear();
        org.joda.time.DateMidnight dateMidnight46 = dateTime41.toDateMidnight();
        org.joda.time.DateTime dateTime47 = yearMonthDay33.toDateTime((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime50 = dateTime47.withFieldAdded(durationFieldType48, 6);
        int int51 = period31.get(durationFieldType48);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight3.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.TimeOfDay timeOfDay60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay59.toDateTime(timeOfDay60, dateTimeZone61);
        boolean boolean63 = dateTime62.isBeforeNow();
        org.joda.time.DateTime dateTime65 = dateTime62.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime69 = interval68.getEnd();
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        org.joda.time.DateTime dateTime71 = dateTime62.toDateTime(chronology70);
        boolean boolean72 = interval55.isAfter((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay(dateTimeZone74);
        org.joda.time.TimeOfDay timeOfDay76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = yearMonthDay75.toDateTime(timeOfDay76, dateTimeZone77);
        boolean boolean79 = dateTime78.isBeforeNow();
        org.joda.time.DateTime dateTime81 = dateTime78.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime85 = interval84.getEnd();
        org.joda.time.Chronology chronology86 = interval84.getChronology();
        org.joda.time.DateTime dateTime87 = dateTime78.toDateTime(chronology86);
        boolean boolean88 = durationFieldType73.isSupported(chronology86);
        org.joda.time.DateTime dateTime89 = dateTime71.toDateTime(chronology86);
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.DateTime dateTime91 = dateTime89.minus(readableDuration90);
        org.joda.time.DateTime dateTime94 = dateTime89.withDurationAdded(35309838L, 35414727);
        org.joda.time.DateTime.Property property95 = dateTime94.millisOfSecond();
        int int96 = dateTime94.getSecondOfDay();
        org.joda.time.DateTime.Property property97 = dateTime94.millisOfSecond();
        boolean boolean98 = dateMidnight52.isEqual((org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 33L + "'", long30 == 33L);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(dateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 27279 + "'", int96 == 27279);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        int int8 = localDate6.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight.Property property13 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundFloorCopy();
        boolean boolean15 = localDate6.equals((java.lang.Object) dateMidnight14);
        java.util.Date date16 = localDate6.toDate();
        date16.setYear(211);
        date16.setDate(0);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Jan 31 00:00:00 UTC 2111");
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay38 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        calendar34.setFirstDayOfWeek(2022);
        int int42 = calendar34.getMinimum(2);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        java.util.Calendar.Builder builder44 = builder4.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder48 = builder4.setDate(668, 522, 488);
        java.util.Calendar.Builder builder52 = builder4.setDate(985, 716, 182);
        java.util.Calendar.Builder builder55 = builder4.set(0, 100);
        java.util.Calendar.Builder builder60 = builder4.setTimeOfDay(611, 587, (int) (byte) 100, 32);
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder62 = builder60.setLocale(locale61);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar63 = builder62.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid era");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878895651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573295651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573295651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1657878895651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withDayOfYear((int) '#');
        java.lang.String str4 = dateMidnight3.toString();
        org.joda.time.LocalDate localDate5 = dateMidnight3.toLocalDate();
        org.joda.time.LocalDate localDate6 = dateMidnight3.toLocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-04T00:00:00.000Z" + "'", str4, "2022-02-04T00:00:00.000Z");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.LocalDate localDate39 = dateTime38.toLocalDate();
        java.util.GregorianCalendar gregorianCalendar40 = dateTime38.toGregorianCalendar();
        java.lang.String str41 = gregorianCalendar40.getCalendarType();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.add(3, 22);
        calendar42.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date48 = calendar42.getTime();
        int int49 = date48.getMinutes();
        date48.setYear(33);
        int int52 = date48.getHours();
        gregorianCalendar40.setTime(date48);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(gregorianCalendar40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gregory" + "'", str41, "gregory");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1657878895691,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=691,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Sat Jul 15 09:54:55 UTC 1933");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 54 + "'", int49 == 54);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) 292278993, (int) '#');
        boolean boolean17 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime8.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime8.plusYears(134);
        org.joda.time.DateTime dateTime21 = dateTime8.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour(257);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 257 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35695723 + "'", int18 == 35695723);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        calendar0.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date11 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long12 = date11.getTime();
        int int13 = date11.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromDateFields(date11);
        long long15 = date11.getTime();
        date11.setDate(35273);
        java.time.Instant instant18 = date11.toInstant();
        java.util.Date date19 = java.util.Date.from(instant18);
        java.util.Date date20 = java.util.Date.from(instant18);
        java.time.Instant instant21 = date20.toInstant();
        calendar0.setTime(date20);
        date20.setYear(475);
        int int25 = date20.getDate();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=2521440600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2049,MONTH=10,WEEK_OF_YEAR=47,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=329,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date11.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-525628200000L) + "'", long12 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-525628200000L) + "'", long15 == (-525628200000L));
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Nov 25 08:10:00 UTC 2375");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 25 + "'", int25 == 25);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        calendar0.setFirstDayOfWeek((int) (short) -1);
        java.util.Date date6 = calendar0.getTime();
        calendar0.setFirstDayOfWeek(35271);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar9);
        calendar9.setFirstDayOfWeek(2022);
        int int17 = calendar9.getMinimum(2);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale25.getDisplayCountry();
        int int28 = dateTimeField24.getMaximumTextLength(locale25);
        java.lang.String str29 = locale25.getDisplayScript();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale25);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone18, locale25);
        calendar0.setTimeZone(timeZone18);
        calendar0.set(47, 19, 0, 75, (-292275054));
        long long39 = calendar0.getTimeInMillis();
        org.joda.time.YearMonthDay yearMonthDay40 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.lang.String str46 = locale44.getExtension('a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap47 = calendar0.getDisplayNames(847, 0, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-78170543584258,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=35271,minimalDaysInFirstWeek=1,ERA=0,YEAR=509,MONTH=10,WEEK_OF_YEAR=47,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=326,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=6,SECOND=55,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Jul 15 09:54:55 UTC 2022");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1657878895742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644573295742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644573295742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-78170543584258L) + "'", long39 == (-78170543584258L));
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        long long16 = dateTimeZone10.getMillisKeepLocal(dateTimeZone14, 2118095273L);
        long long18 = dateTimeZone10.nextTransition((long) 35275);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2118095273L + "'", long16 == 2118095273L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35275L + "'", long18 == 35275L);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        int int5 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (byte) 0);
        int int8 = dateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTime(timeOfDay11, dateTimeZone12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay10.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType18.getField(chronology21);
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology21);
        java.util.Locale locale26 = null;
        java.lang.String str27 = localDate24.toString("09:49:55.379", locale26);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "09:49:55.379" + "'", str27, "09:49:55.379");
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(0, 851, 495);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 851 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        java.lang.String str14 = property12.getName();
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.LocalTime localTime16 = property12.getLocalTime();
        org.joda.time.LocalTime localTime18 = property12.addCopy(35522250);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573295844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:54:55.844" + "'", str4, "09:54:55.844");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573295844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(2);
        int int9 = localDateTime2.getYearOfCentury();
        int int10 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusMinutes(42);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean14 = localDateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusSeconds(22);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime2.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds(287);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusWeeks(67);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 18057);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval26 = interval18.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str30 = interval29.toString();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval41 = interval33.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTime(timeOfDay44, dateTimeZone45);
        boolean boolean47 = dateTime46.isBeforeNow();
        org.joda.time.DateTime dateTime49 = dateTime46.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour((int) (short) 0);
        boolean boolean52 = interval41.contains((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean53 = interval29.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval29.withPeriodBeforeEnd(readablePeriod54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval29.toPeriod(periodType56);
        org.joda.time.Interval interval58 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        long long61 = chronology14.add((org.joda.time.ReadablePeriod) period57, (long) 'a', 4);
        org.joda.time.DurationField durationField62 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField64 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate66 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate68 = localDate66.withYearOfCentury(10);
        org.joda.time.LocalDate localDate70 = localDate68.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate72 = localDate68.minusYears(51);
        java.lang.String str73 = localDate72.toString();
        org.joda.time.LocalDate localDate75 = localDate72.plusDays(19);
        boolean boolean77 = localDate75.equals((java.lang.Object) "German");
        org.joda.time.LocalDate.Property property78 = localDate75.dayOfWeek();
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.lang.String str80 = locale79.getLanguage();
        int int81 = property78.getMaximumTextLength(locale79);
        java.lang.String str82 = locale79.getISO3Country();
        java.lang.String str83 = dateTimeField64.getAsText((-62100742226850L), locale79);
        java.util.Locale locale86 = java.util.Locale.forLanguageTag("\u5fb7\u6587");
        java.lang.String str87 = dateTimeField64.getAsText(35624063, locale86);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str30, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 229L + "'", long61 == 229L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1959-02-11" + "'", str73, "1959-02-11");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "31 dec 1969 23:59:59 gmt");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "31 dec 1969 23:59:59 gmt" + "'", str80, "31 dec 1969 23:59:59 gmt");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "33" + "'", str83, "33");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "35624063" + "'", str87, "35624063");
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.LocalDate localDate6 = localDate4.plusDays(1970);
        org.joda.time.LocalDate localDate8 = localDate6.withYear(35334);
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateMidnight9.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.plusWeeks((-292275054));
        int int16 = dateMidnight9.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.minusWeeks(182);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight9.withYear(316);
        org.joda.time.LocalDate localDate21 = dateMidnight9.toLocalDate();
        int int22 = localDate8.compareTo((org.joda.time.ReadablePartial) localDate21);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 42 + "'", int13 == 42);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int8 = calendar0.getMinimum(2);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.monthOfYear();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        int int17 = property15.getMaximumTextLength(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone9, locale16);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.setDefault(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone9, locale19);
        int int22 = calendar21.getWeeksInWeekYear();
        java.util.TimeZone timeZone23 = calendar21.getTimeZone();
        calendar21.clear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay26.monthOfYear();
        org.joda.time.DateTime dateTime31 = yearMonthDay26.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTime(timeOfDay34, dateTimeZone35);
        boolean boolean37 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean41 = dateTime39.isSupported(dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DateTime.Property property43 = dateTime31.property(dateTimeFieldType40);
        org.joda.time.DateTime dateTime44 = property43.getDateTime();
        boolean boolean46 = dateTime44.isAfter((long) 6);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay48.toDateTime(timeOfDay49, dateTimeZone50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay48.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay54.toDateTime(timeOfDay55, dateTimeZone56);
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay54.monthOfYear();
        org.joda.time.DateTime dateTime59 = yearMonthDay54.toDateTimeAtCurrentTime();
        int int60 = property52.compareTo((org.joda.time.ReadablePartial) yearMonthDay54);
        org.joda.time.Chronology chronology61 = yearMonthDay54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay54.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean65 = yearMonthDay54.isSupported(dateTimeFieldType64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay(dateTimeZone66);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay67.toDateTime(timeOfDay68, dateTimeZone69);
        boolean boolean71 = dateTime70.isBeforeNow();
        org.joda.time.DateTime dateTime73 = dateTime70.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime75 = dateTime73.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime73.getZone();
        int int78 = dateTimeZone76.getStandardOffset((long) 13);
        long long82 = dateTimeZone76.convertLocalToUTC(229L, false, (long) 49);
        long long84 = dateTimeZone76.convertUTCToLocal((long) 49);
        org.joda.time.DateTime dateTime85 = yearMonthDay54.toDateTimeAtCurrentTime(dateTimeZone76);
        java.lang.String str86 = dateTimeZone76.toString();
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, dateTimeZone76);
        java.util.TimeZone timeZone88 = dateTimeZone76.toTimeZone();
        calendar21.setTimeZone(timeZone88);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878895960,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=960,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644573295960,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=55,MILLISECOND=960,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 229L + "'", long82 == 229L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 49L + "'", long84 == 49L);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Etc/UTC" + "'", str86, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone88);
        org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        java.util.Date date5 = new java.util.Date(883, 194, 2018, 86399470, 68);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 01 23:08:00 UTC 12661");
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay((-52), 75, 0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        calendar5.setFirstDayOfWeek(2022);
        int int13 = calendar5.getMinimum(2);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale21.getDisplayCountry();
        int int24 = dateTimeField20.getMaximumTextLength(locale21);
        java.lang.String str25 = locale21.getDisplayScript();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14, locale21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long30 = dateTimeZone28.previousTransition((long) 8);
        java.lang.String str31 = dateTimeZone28.toString();
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Calendar.Builder builder33 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder33.setWeekDate(871, 37, 444);
        java.util.Calendar.Builder builder42 = builder33.setTimeOfDay(43, 371, 30, 39);
        java.util.Calendar.Builder builder46 = builder33.setTimeOfDay(186, 35354, 109);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1657878896032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u7063" + "'", str23, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573296032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573296032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime11 = property9.setCopy("434");
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar12);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay16.monthOfYear();
        int int21 = yearMonthDay16.getValue((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(488);
        boolean boolean25 = dateTimeZone23.isStandardOffset(743L);
        org.joda.time.Interval interval26 = yearMonthDay16.toInterval(dateTimeZone23);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.DateTime dateTime28 = dateTime11.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfCentury(10);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property34 = localDate33.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        int int36 = dateTime11.get(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1657878896048,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=48,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 434 + "'", int36 == 434);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekyear();
        org.joda.time.LocalDate localDate7 = localDate4.minusDays(7);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property11 = localDate8.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        int int17 = dateTime16.getCenturyOfEra();
        org.joda.time.DateTime dateTime19 = dateTime16.plusMillis((int) (byte) 0);
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay22.property(dateTimeFieldType27);
        org.joda.time.DateTime.Property property29 = dateTime19.property(dateTimeFieldType27);
        boolean boolean30 = localDate8.isSupported(dateTimeFieldType27);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getVariant();
        java.lang.String str40 = dateTimeField36.getAsShortText(3, locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField36.getType();
        org.joda.time.LocalDate localDate43 = localDate8.withField(dateTimeFieldType41, 434);
        org.joda.time.LocalDate localDate45 = localDate8.withYearOfEra(34);
        int int46 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate45);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "3" + "'", str40, "3");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        int int6 = dateTime5.getYearOfCentury();
        org.joda.time.DateTime dateTime8 = dateTime5.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTime(timeOfDay13, dateTimeZone14);
        boolean boolean16 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromCalendarFields(calendar22);
        calendar22.setFirstDayOfWeek(2022);
        int int30 = calendar22.getMinimum(2);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale38.getDisplayCountry();
        int int41 = dateTimeField37.getMaximumTextLength(locale38);
        java.lang.String str42 = locale38.getDisplayScript();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale38);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone31, locale38);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long47 = dateTimeZone45.previousTransition((long) 8);
        long long49 = dateTimeZone21.getMillisKeepLocal(dateTimeZone45, (long) (byte) 0);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 368, dateTimeZone21);
        long long54 = dateTimeZone21.adjustOffset((long) 93, false);
        org.joda.time.DateTime dateTime55 = dateTime5.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 35302729, dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.lang.String str58 = dateTimeZone21.getID();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight60 = org.joda.time.DateMidnight.now(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay61 = dateMidnight60.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.minusYears(281);
        org.joda.time.YearMonthDay.Property property64 = yearMonthDay61.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1657878896089,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=89,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u53f0\u7063" + "'", str40, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573296089,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=89,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644573296089,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=89,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 8L + "'", long47 == 8L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 93L + "'", long54 == 93L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours((int) ' ');
        int int11 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime.Property property12 = dateTime8.weekyear();
        int int13 = dateTime8.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekyear(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(35309838);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusMillis(186);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusSeconds(86399912);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withSecondOfMinute(35686204);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35686204 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        boolean boolean3 = localTime1.equals((java.lang.Object) 16);
        java.lang.String str4 = localTime1.toString();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property8 = localTime6.property(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime1.property(dateTimeFieldType7);
        org.joda.time.LocalTime localTime11 = property9.setCopy((int) (byte) 0);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property12.addWrapFieldToCopy(86399);
        org.joda.time.LocalTime localTime16 = property12.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.property(dateTimeFieldType18);
        int int20 = localTime16.get(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573296155,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=155,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:54:56.155" + "'", str4, "09:54:56.155");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573296155,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=155,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 60 + "'", int20 == 60);
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35607, 35516);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35607 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = dateTimeField5.getMaximumTextLength(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.lang.String str11 = locale6.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale6.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale12);
        java.lang.String str17 = locale12.getISO3Country();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u53f0\u7063" + "'", str8, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str11, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u5fb7\u6587" + "'", str13, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinesisch" + "'", str14, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644573296181,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=181,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        long long11 = dateTimeField5.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        int int16 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean20 = localDateTime18.isSupported(dateTimeFieldType19);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.Interval interval31 = interval23.overlap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration32 = interval31.toDuration();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plus((org.joda.time.ReadableDuration) duration32);
        java.lang.String str34 = duration32.toString();
        org.joda.time.Period period35 = duration32.toPeriod();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.Interval interval46 = interval38.overlap((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration47 = interval46.toDuration();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.year();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getVariant();
        java.lang.String str57 = dateTimeField53.getAsShortText(3, locale55);
        long long59 = dateTimeField53.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.monthOfYear();
        int int64 = dateTimeField53.getMaximumValue((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.minusMinutes(35270);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean68 = localDateTime66.isSupported(dateTimeFieldType67);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime77 = interval76.getEnd();
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        org.joda.time.Interval interval79 = interval71.overlap((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Duration duration80 = interval79.toDuration();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime66.plus((org.joda.time.ReadableDuration) duration80);
        boolean boolean82 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration80);
        int int83 = duration32.compareTo((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Period period84 = duration80.toPeriod();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.033S" + "'", str34, "PT0.033S");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "3" + "'", str57, "3");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278993 + "'", int64 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(period84);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(290, 35427, 967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 290 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours((int) (byte) 100);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.monthOfYear();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now();
        long long29 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone30);
        boolean boolean32 = dateMidnight28.isAfter((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight28.minusWeeks(4);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now();
        long long39 = property37.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.plusWeeks(86399);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withDayOfYear((int) '#');
        int int46 = dateMidnight43.getWeekOfWeekyear();
        boolean boolean47 = dateMidnight38.isEqual((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withDayOfYear((int) '#');
        int int52 = dateMidnight49.getWeekOfWeekyear();
        int int53 = dateMidnight49.getWeekyear();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.Interval interval64 = interval56.overlap((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Duration duration65 = interval64.toDuration();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay(dateTimeZone66);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay67.toDateTime(timeOfDay68, dateTimeZone69);
        boolean boolean71 = dateTime70.isBeforeNow();
        org.joda.time.DateTime dateTime73 = dateTime70.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime75 = dateTime73.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime77 = dateTime75.minusHours((int) (byte) 100);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight43.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight34.minus((org.joda.time.ReadableDuration) duration65);
        boolean boolean82 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration65);
        java.lang.Object obj83 = null;
        boolean boolean84 = duration11.equals(obj83);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 15);
        int int2 = timeOfDay1.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = timeOfDay1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.era();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        int int4 = dateMidnight1.getYear();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withDayOfYear((int) 'u');
        org.joda.time.Chronology chronology7 = dateMidnight1.getChronology();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTime(timeOfDay18, dateTimeZone19);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        org.joda.time.DateTime dateTime22 = yearMonthDay17.toDateTimeAtCurrentTime();
        int int23 = property15.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.Chronology chronology24 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekOfWeekyear();
        boolean boolean26 = dateTimeFieldType9.isSupported(chronology24);
        java.lang.String str27 = dateTimeFieldType9.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property28 = localTime8.property(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "yearOfEra" + "'", str27, "yearOfEra");
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology4.seconds();
        org.joda.time.DurationField durationField10 = chronology4.months();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(389);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTime(timeOfDay16, dateTimeZone17);
        boolean boolean19 = dateTime18.isBeforeNow();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        int int26 = dateTimeZone24.getStandardOffset((long) 13);
        long long30 = dateTimeZone24.convertLocalToUTC(229L, false, (long) 49);
        int int32 = dateTimeZone24.getOffset(0L);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone24);
        int int34 = localDate33.getWeekyear();
        org.joda.time.LocalDate.Property property35 = localDate33.year();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withPeriodAdded(readablePeriod37, 0);
        int int40 = dateMidnight36.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight36.plusWeeks((-292275054));
        int int43 = dateMidnight36.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight36.minusWeeks(182);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight36.withYear(316);
        org.joda.time.LocalDate localDate48 = dateMidnight36.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        boolean boolean54 = dateTime53.isBeforeNow();
        org.joda.time.DateTime dateTime56 = dateTime53.withMonthOfYear((int) (byte) 1);
        int int57 = dateTime53.getYear();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime53.withDurationAdded(readableDuration58, (int) (short) 100);
        org.joda.time.DateTime dateTime62 = dateTime53.plusSeconds((int) (short) 10);
        org.joda.time.DateTime dateTime64 = dateTime53.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(dateTimeZone65);
        org.joda.time.TimeOfDay timeOfDay67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay66.toDateTime(timeOfDay67, dateTimeZone68);
        int int70 = dateTime69.getYearOfCentury();
        org.joda.time.DateTime dateTime72 = dateTime69.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime73 = dateTime69.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime75 = dateTime73.minusHours((int) ' ');
        boolean boolean76 = dateTime64.isEqual((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.withDayOfYear((int) '#');
        java.lang.String str81 = dateMidnight80.toString();
        org.joda.time.LocalDate localDate82 = dateMidnight80.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.era();
        int int84 = localDate82.indexOf(dateTimeFieldType83);
        org.joda.time.DateTime.Property property85 = dateTime64.property(dateTimeFieldType83);
        boolean boolean86 = localDate48.isSupported(dateTimeFieldType83);
        int int87 = localDate33.get(dateTimeFieldType83);
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType83.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime90 = localDateTime11.withField(dateTimeFieldType83, 461);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 461 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 229L + "'", long30 == 229L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 42 + "'", int40 == 42);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 22 + "'", int70 == 22);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-04T00:00:00.000Z" + "'", str81, "2022-02-04T00:00:00.000Z");
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNull(durationFieldType88);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekyear(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(35309838);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths(35463);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime dateTime16 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTime(timeOfDay19, dateTimeZone20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay18.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay24.monthOfYear();
        org.joda.time.DateTime dateTime29 = yearMonthDay24.toDateTimeAtCurrentTime();
        int int30 = property22.compareTo((org.joda.time.ReadablePartial) yearMonthDay24);
        org.joda.time.Chronology chronology31 = yearMonthDay24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay24.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean35 = yearMonthDay24.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getDurationType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType34.getDurationType();
        org.joda.time.DateTime dateTime39 = dateTime16.withField(dateTimeFieldType34, 5);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
        java.lang.String str4 = property3.toString();
        java.util.Locale locale6 = new java.util.Locale("");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = property3.getAsShortText(locale6);
        org.joda.time.YearMonthDay yearMonthDay9 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        boolean boolean15 = dateTime14.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime14.withMonthOfYear((int) (byte) 1);
        int int18 = dateTime14.getYear();
        org.joda.time.DateTime.Property property19 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        int int29 = dateTime25.getYear();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime32 = dateTime25.withDurationAdded(readableDuration30, (int) (short) 100);
        int int33 = dateTime25.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTime(timeOfDay36, dateTimeZone37);
        boolean boolean39 = dateTime38.isBeforeNow();
        org.joda.time.DateTime dateTime41 = dateTime38.withMonthOfYear((int) (byte) 1);
        int int42 = dateTime38.getYear();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime38.withDurationAdded(readableDuration43, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, readablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.TimeOfDay timeOfDay50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay49.toDateTime(timeOfDay50, dateTimeZone51);
        boolean boolean53 = dateTime52.isBeforeNow();
        org.joda.time.DateTime dateTime55 = dateTime52.withMonthOfYear((int) (byte) 1);
        int int56 = dateTime52.getYear();
        org.joda.time.DateTime.Property property57 = dateTime52.weekyear();
        boolean boolean58 = interval47.equals((java.lang.Object) dateTime52);
        int int59 = dateTime52.getMinuteOfDay();
        boolean boolean60 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean61 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime25);
        int int62 = property3.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property63 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime65 = property63.addToCopy((long) (-703165));
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[dayOfMonth]" + "'", str4, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "11" + "'", str8, "11");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 594 + "'", int59 == 594);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 35271, chronology6);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        boolean boolean10 = localDateTime8.isSupported(durationFieldType9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withYear(871);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) 455, chronology16);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        java.util.Date date5 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long6 = date5.getTime();
        int int7 = date5.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        long long9 = date5.getTime();
        date5.setDate(35273);
        long long12 = date5.getTime();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-525628200000L) + "'", long6 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-525628200000L) + "'", long9 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2521440600000L + "'", long12 == 2521440600000L);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property3 = localDate0.weekyear();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        java.lang.String str17 = chronology14.toString();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology14);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.year();
        boolean boolean20 = dateMidnight18.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays(35335);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.dayOfMonth();
        org.joda.time.Interval interval12 = property11.toInterval();
        java.lang.String str13 = property11.getAsText();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        int int7 = calendar0.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(595);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878896492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        boolean boolean5 = localTime3.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime3.plus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime8.plusMinutes(0);
        org.joda.time.LocalTime localTime12 = localTime8.plusMillis(20);
        int int13 = localTime12.getMillisOfSecond();
        org.joda.time.LocalTime.Property property14 = localTime12.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localTime12.getValue(159);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 159");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573296539,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=539,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 559 + "'", int13 == 559);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        java.util.Date date5 = new java.util.Date(330, 35475000, 2021, 27176, 86399999);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 27 07:59:00 UTC 2958652");
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 16, chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology5.seconds();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology5);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDateTime12.getValue(704);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 704");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay21 = org.joda.time.YearMonthDay.fromCalendarFields(calendar17);
        calendar17.setFirstDayOfWeek(2022);
        int int25 = calendar17.getMinimum(2);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getDisplayCountry();
        int int36 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str37 = locale33.getDisplayScript();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale33);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone26, locale33);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long42 = dateTimeZone40.previousTransition((long) 8);
        long long44 = dateTimeZone16.getMillisKeepLocal(dateTimeZone40, (long) (byte) 0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 35277, dateTimeZone40);
        java.util.TimeZone timeZone46 = dateTimeZone40.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(104, 2103, 35463, 35395200, 343, dateTimeZone40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35395200 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1657878896577,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=577,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u53f0\u7063" + "'", str35, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644573296577,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=577,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573296577,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=577,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 8L + "'", long42 == 8L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        boolean boolean10 = localTime8.equals((java.lang.Object) 16);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight6.withDayOfMonth(1);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight15 = property14.getDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean17 = dateMidnight15.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = dateMidnight15.getChronology();
        int int19 = property4.getDifference((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTimeField dateTimeField20 = property4.getField();
        org.joda.time.Interval interval21 = property4.toInterval();
        org.joda.time.LocalTime localTime22 = property4.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573296591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644573296591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-456566) + "'", int19 == (-456566));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTime(timeOfDay14, dateTimeZone15);
        boolean boolean17 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime19 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime(chronology24);
        boolean boolean26 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.minusHours(35271);
        int int29 = dateTime28.getWeekyear();
        int int30 = dateTime28.getYearOfCentury();
        org.joda.time.DateTime dateTime31 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = dateTime32.plusWeeks(80);
        org.joda.time.DateTime dateTime36 = dateTime32.minusMinutes(416);
        org.joda.time.DateMidnight dateMidnight37 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withPeriodAdded(readablePeriod38, 0);
        boolean boolean41 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateMidnight37);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2018 + "'", int29 == 2018);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 18 + "'", int30 == 18);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        int int12 = dateTime4.getYear();
        org.joda.time.DateTime dateTime14 = dateTime4.withSecondOfMinute(8);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(32);
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours(3);
        boolean boolean20 = dateTime18.isAfter((long) 0);
        org.joda.time.DateTime.Property property21 = dateTime18.yearOfEra();
        org.joda.time.DateTime dateTime23 = property21.addToCopy(35426);
        int int24 = property21.get();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinese (taiwan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 55);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str5 = localDate2.toString("1");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        boolean boolean11 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay21 = org.joda.time.YearMonthDay.fromCalendarFields(calendar17);
        calendar17.setFirstDayOfWeek(2022);
        int int25 = calendar17.getMinimum(2);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getDisplayCountry();
        int int36 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str37 = locale33.getDisplayScript();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale33);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone26, locale33);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long42 = dateTimeZone40.previousTransition((long) 8);
        long long44 = dateTimeZone16.getMillisKeepLocal(dateTimeZone40, (long) (byte) 0);
        org.joda.time.DateTime dateTime45 = localDate2.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(52L, dateTimeZone16);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str50 = interval49.toString();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Chronology chronology55 = interval53.getChronology();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.Interval interval61 = interval53.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTime(timeOfDay64, dateTimeZone65);
        boolean boolean67 = dateTime66.isBeforeNow();
        org.joda.time.DateTime dateTime69 = dateTime66.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = dateTime69.withMinuteOfHour((int) (short) 0);
        boolean boolean72 = interval61.contains((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = interval49.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Interval interval75 = interval49.withPeriodBeforeEnd(readablePeriod74);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = interval49.toPeriod(periodType76);
        org.joda.time.LocalDate localDate79 = localDate46.withPeriodAdded((org.joda.time.ReadablePeriod) period77, 538);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate81 = localDate46.withDayOfYear(35463);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35463 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1657878896646,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=646,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u53f0\u7063" + "'", str35, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644573296646,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=646,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573296646,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=646,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 8L + "'", long42 == 8L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str50, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(localDate79);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(588);
        java.lang.String str8 = dateTimeZone7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(35297719, 35373914, 743, 35467, 565, 139, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35467 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+588:00" + "'", str8, "+588:00");
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 182);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay6.minusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        int int25 = dateTimeZone23.getStandardOffset((long) 13);
        org.joda.time.DateTime dateTime26 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology28 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology29 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfWeek();
        org.joda.time.DateMidnight.Property property34 = dateMidnight32.dayOfWeek();
        int int35 = dateMidnight32.getYear();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight32.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime36, "2022-02-11T09:51:57.194Z", 36494076);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(chronology28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNull(dateTimePrinter30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime36);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval2.withPeriodBeforeEnd(readablePeriod27);
        long long29 = interval28.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now();
        long long34 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = property32.roundHalfEvenCopy();
        boolean boolean36 = interval28.isAfter((org.joda.time.ReadableInstant) dateMidnight35);
        boolean boolean37 = interval28.isAfterNow();
        org.joda.time.Interval interval39 = interval28.withEndMillis(134273L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        int int10 = dateTimeField5.getMaximumValue();
        long long13 = dateTimeField5.addWrapField((long) (-1), (int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = dateTimeField5.getAsShortText(readablePartial14, 9, locale16);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.toLanguageTag();
        java.lang.String str22 = dateTimeField5.getAsText((-1), locale20);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.lang.String str31 = locale29.getDisplayCountry();
        int int32 = dateTimeField28.getMaximumTextLength(locale29);
        java.lang.String str33 = locale20.getDisplayName(locale29);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = locale34.getVariant();
        java.lang.String str36 = locale20.getDisplayVariant(locale34);
        java.lang.String str37 = locale20.getDisplayCountry();
        java.lang.String str38 = locale20.getISO3Country();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale20.getDisplayName(locale39);
        java.lang.String str41 = locale39.getDisplayScript();
        java.lang.String str42 = locale39.getLanguage();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1" + "'", str22, "-1");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u53f0\u7063" + "'", str31, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ja" + "'", str42, "ja");
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        int int7 = dateMidnight6.getDayOfYear();
        org.joda.time.Interval interval8 = dateMidnight6.toInterval();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight6.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTime(timeOfDay12, dateTimeZone13);
        int int15 = dateTime14.getCenturyOfEra();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis((int) (byte) 0);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay20.property(dateTimeFieldType25);
        org.joda.time.DateTime.Property property27 = dateTime17.property(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType28.getField(chronology31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(chronology31);
        java.util.Locale locale37 = new java.util.Locale("-0001-02-11", "Deutsch", "2022-02-11T09:47:55.854Z");
        boolean boolean38 = localDate33.equals((java.lang.Object) "Deutsch");
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTime(timeOfDay41, dateTimeZone42);
        boolean boolean44 = dateTime43.isBeforeNow();
        org.joda.time.DateTime dateTime46 = dateTime43.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime46.getZone();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        calendar50.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay54 = org.joda.time.YearMonthDay.fromCalendarFields(calendar50);
        calendar50.setFirstDayOfWeek(2022);
        int int58 = calendar50.getMinimum(2);
        java.util.TimeZone timeZone59 = calendar50.getTimeZone();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.year();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.lang.String str68 = locale66.getDisplayCountry();
        int int69 = dateTimeField65.getMaximumTextLength(locale66);
        java.lang.String str70 = locale66.getDisplayScript();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale66);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone59, locale66);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        long long75 = dateTimeZone73.previousTransition((long) 8);
        long long77 = dateTimeZone49.getMillisKeepLocal(dateTimeZone73, (long) (byte) 0);
        int int79 = dateTimeZone73.getOffsetFromLocal(8L);
        org.joda.time.DateMidnight dateMidnight80 = localDate33.toDateMidnight(dateTimeZone73);
        java.lang.String str81 = dateTimeZone73.getID();
        org.joda.time.DateMidnight dateMidnight82 = yearMonthDay9.toDateMidnight(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Interval interval84 = yearMonthDay9.toInterval(dateTimeZone83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay85 = new org.joda.time.YearMonthDay((java.lang.Object) interval84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals(locale37.toString(), "-0001-02-11_DEUTSCH_2022-02-11T09:47:55.854Z");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1657878896762,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=762,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u53f0\u7063" + "'", str68, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1644573296763,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=763,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1644573296763,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=763,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 8L + "'", long75 == 8L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Etc/UTC" + "'", str81, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(interval84);
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        java.lang.String str4 = dateMidnight0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withDayOfYear((int) '#');
        int int9 = dateMidnight6.getWeekOfWeekyear();
        int int10 = dateMidnight6.getWeekyear();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.Interval interval21 = interval13.overlap((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Duration duration22 = interval21.toDuration();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        boolean boolean28 = dateTime27.isBeforeNow();
        org.joda.time.DateTime dateTime30 = dateTime27.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusHours((int) (byte) 100);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval47 = interval39.overlap((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration48 = interval47.toDuration();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        boolean boolean54 = dateTime53.isBeforeNow();
        org.joda.time.DateTime dateTime56 = dateTime53.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime58 = dateTime56.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime60 = dateTime58.minusHours((int) (byte) 100);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration62 = duration48.toDuration();
        int int63 = duration22.compareTo((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration64 = duration22.toDuration();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight0.minus((org.joda.time.ReadableDuration) duration64);
        java.lang.String str66 = duration64.toString();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11T00:00:00.000Z" + "'", str4, "2022-02-11T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0.033S" + "'", str66, "PT0.033S");
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.minusYears(35334);
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = calendar0.getMinimum((-798222));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -798222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878896824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(444, 35403537, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 444 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        calendar0.setFirstDayOfWeek(0);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = calendar0.getLeastMaximum(1967);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1967");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573296838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=56,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTime(timeOfDay6, dateTimeZone7);
        boolean boolean9 = dateTime8.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear((int) (byte) 1);
        int int12 = dateTime8.getYear();
        org.joda.time.DateTime.Property property13 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(2);
        boolean boolean17 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTime(timeOfDay21, dateTimeZone22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfCentury(10);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTime(timeOfDay32, dateTimeZone33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTime(timeOfDay38, dateTimeZone39);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay37.monthOfYear();
        org.joda.time.DateTime dateTime42 = yearMonthDay37.toDateTimeAtCurrentTime();
        int int43 = property35.compareTo((org.joda.time.ReadablePartial) yearMonthDay37);
        org.joda.time.Chronology chronology44 = yearMonthDay37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay37.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean48 = yearMonthDay37.isSupported(dateTimeFieldType47);
        boolean boolean49 = localDate29.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime51 = dateTime23.withField(dateTimeFieldType47, 17);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfDay();
        int int53 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime51);
        int int54 = dateTime51.getWeekyear();
        org.joda.time.DateTime.Property property55 = dateTime51.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone56);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay57.toDateTime(timeOfDay58, dateTimeZone59);
        int int61 = dateTime60.getCenturyOfEra();
        org.joda.time.DateTime dateTime63 = dateTime60.plusMillis((int) (byte) 0);
        int int64 = dateTime63.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(dateTimeZone65);
        org.joda.time.TimeOfDay timeOfDay67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay66.toDateTime(timeOfDay67, dateTimeZone68);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay66.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property72 = yearMonthDay66.property(dateTimeFieldType71);
        org.joda.time.DateTime.Property property73 = dateTime63.property(dateTimeFieldType71);
        org.joda.time.DateTime dateTime74 = property73.roundCeilingCopy();
        org.joda.time.DateTime dateTime75 = property73.roundCeilingCopy();
        int int76 = property73.getMaximumValueOverall();
        org.joda.time.DateTime dateTime78 = property73.addWrapFieldToCopy(371);
        boolean boolean79 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20 + "'", int61 == 20);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 11 + "'", int64 == 11);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 12 + "'", int76 == 12);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        boolean boolean12 = dateTime11.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime6.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime19 = property18.getDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(306);
        int int22 = dateTime21.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTime(timeOfDay25, dateTimeZone26);
        boolean boolean28 = dateTime27.isBeforeNow();
        org.joda.time.DateTime dateTime30 = dateTime27.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime30.getZone();
        int int35 = dateTimeZone33.getStandardOffset((long) 13);
        long long39 = dateTimeZone33.convertLocalToUTC(229L, false, (long) 49);
        int int41 = dateTimeZone33.getOffset(0L);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        org.joda.time.YearMonthDay.Property property48 = yearMonthDay44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTime(timeOfDay51, dateTimeZone52);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay50.monthOfYear();
        org.joda.time.DateTime dateTime55 = yearMonthDay50.toDateTimeAtCurrentTime();
        int int56 = property48.compareTo((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.LocalDate localDate57 = localDate42.withFields((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.DateTime dateTime58 = dateTime21.withFields((org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.minusDays(0);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay60.withYear(22);
        int int65 = yearMonthDay60.size();
        int int66 = yearMonthDay60.size();
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay60.year();
        org.joda.time.YearMonthDay yearMonthDay69 = property67.addWrapFieldToCopy(35279414);
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate72 = localDate70.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property73 = localDate70.weekyear();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay(dateTimeZone74);
        org.joda.time.TimeOfDay timeOfDay76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = yearMonthDay75.toDateTime(timeOfDay76, dateTimeZone77);
        int int79 = dateTime78.getCenturyOfEra();
        org.joda.time.DateTime dateTime81 = dateTime78.plusMillis((int) (byte) 0);
        int int82 = dateTime81.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay(dateTimeZone83);
        org.joda.time.TimeOfDay timeOfDay85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = yearMonthDay84.toDateTime(timeOfDay85, dateTimeZone86);
        org.joda.time.YearMonthDay.Property property88 = yearMonthDay84.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.YearMonthDay.Property property90 = yearMonthDay84.property(dateTimeFieldType89);
        org.joda.time.DateTime.Property property91 = dateTime81.property(dateTimeFieldType89);
        boolean boolean92 = localDate70.isSupported(dateTimeFieldType89);
        org.joda.time.LocalDate.Property property93 = localDate70.dayOfYear();
        int int94 = property67.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property67.getFieldType();
        boolean boolean96 = localDate57.isSupported(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 229L + "'", long39 == 229L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 20 + "'", int79 == 20);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 11 + "'", int82 == 11);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        long long6 = dateMidnight5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 16, chronology20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval34 = interval26.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str38 = interval37.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval49 = interval41.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay51.toDateTime(timeOfDay52, dateTimeZone53);
        boolean boolean55 = dateTime54.isBeforeNow();
        org.joda.time.DateTime dateTime57 = dateTime54.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour((int) (short) 0);
        boolean boolean60 = interval49.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = interval37.contains((org.joda.time.ReadableInterval) interval49);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Interval interval63 = interval37.withPeriodBeforeEnd(readablePeriod62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval37.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        long long69 = chronology20.add((org.joda.time.ReadablePeriod) period65, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod70 = period65.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight5.withFields((org.joda.time.ReadablePartial) yearMonthDay8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType74 = yearMonthDay8.getFieldType(990);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 990");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1265846400000L + "'", long6 == 1265846400000L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str38, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1163943L + "'", long69 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateMidnight72);
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withSecondOfMinute(12);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusDays(1969);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 35271, chronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear((int) (byte) 0);
        int int18 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withWeekOfWeekyear(109);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 109 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) '4', dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths(270);
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfEra();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        java.util.Date date4 = calendar0.getTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateTime.Property property14 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundHalfCeilingCopy();
        java.util.Date date17 = dateTime16.toDate();
        int int18 = date17.getDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date17);
        boolean boolean20 = date4.before(date17);
        date4.setTime((long) 35273);
        date4.setSeconds(134);
        java.util.Date date26 = new java.util.Date(1163943L);
        boolean boolean27 = date4.after(date26);
        int int28 = date26.getMonth();
        date26.setDate(778);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878897020,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=20,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:02:14 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Jan 03 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Feb 17 00:19:23 UTC 1972");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfHour();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar9);
        calendar9.setFirstDayOfWeek(2022);
        int int17 = calendar9.getMinimum(2);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.getID();
        long long22 = dateTimeZone19.previousTransition((long) '4');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.Chronology chronology24 = chronology4.withZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay26.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay26.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 16, chronology38);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Chronology chronology51 = interval49.getChronology();
        org.joda.time.Interval interval52 = interval44.overlap((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str56 = interval55.toString();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime60 = interval59.getEnd();
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Chronology chronology66 = interval64.getChronology();
        org.joda.time.Interval interval67 = interval59.overlap((org.joda.time.ReadableInterval) interval64);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(dateTimeZone68);
        org.joda.time.TimeOfDay timeOfDay70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = yearMonthDay69.toDateTime(timeOfDay70, dateTimeZone71);
        boolean boolean73 = dateTime72.isBeforeNow();
        org.joda.time.DateTime dateTime75 = dateTime72.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime77 = dateTime75.withMinuteOfHour((int) (short) 0);
        boolean boolean78 = interval67.contains((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean79 = interval55.contains((org.joda.time.ReadableInterval) interval67);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Interval interval81 = interval55.withPeriodBeforeEnd(readablePeriod80);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = interval55.toPeriod(periodType82);
        org.joda.time.Interval interval84 = interval52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period83);
        long long87 = chronology38.add((org.joda.time.ReadablePeriod) period83, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod88 = period83.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay26.minus((org.joda.time.ReadablePeriod) mutablePeriod88);
        int int90 = mutablePeriod88.size();
        java.lang.String str91 = mutablePeriod88.toString();
        long long94 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod88, (long) 835, 194);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1657878897037,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=37,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str56, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1163943L + "'", long87 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod88);
        org.junit.Assert.assertNotNull(yearMonthDay89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PT0.033S" + "'", str91, "PT0.033S");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 7237L + "'", long94 == 7237L);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusYears((int) '4');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.year();
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        int int10 = property9.getLeapAmount();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1657878897114,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=114,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(35289);
        boolean boolean6 = dateTime4.isAfter(46363295207094L);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573297135,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=135,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, (int) (short) 100);
        int int12 = dateTime4.getYear();
        org.joda.time.DateTime dateTime14 = dateTime4.withSecondOfMinute(8);
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours(32);
        int int17 = dateTime14.getHourOfDay();
        org.joda.time.DateTime.Property property18 = dateTime14.secondOfDay();
        int int19 = dateTime14.getMillisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime14.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 143 + "'", int19 == 143);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate20 = dateTime18.toLocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.withYear((int) (short) -1);
        java.lang.String str23 = localDate22.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 16, chronology29);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.Interval interval43 = interval35.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str47 = interval46.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        org.joda.time.Interval interval58 = interval50.overlap((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = dateTime66.withMinuteOfHour((int) (short) 0);
        boolean boolean69 = interval58.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = interval46.contains((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval46.withPeriodBeforeEnd(readablePeriod71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval46.toPeriod(periodType73);
        org.joda.time.Interval interval75 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        long long78 = chronology29.add((org.joda.time.ReadablePeriod) period74, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod79 = period74.toMutablePeriod();
        org.joda.time.LocalDate localDate80 = localDate22.minus((org.joda.time.ReadablePeriod) period74);
        int int81 = localDate22.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-0001-02-11" + "'", str23, "-0001-02-11");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str47, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1163943L + "'", long78 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        int int7 = property5.getMaximumTextLength(locale6);
        org.joda.time.YearMonthDay yearMonthDay8 = property5.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusDays(68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.withDayOfMonth(257);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 257 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str3 = interval2.toString();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.Interval interval14 = interval6.overlap((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTime(timeOfDay17, dateTimeZone18);
        boolean boolean20 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) (short) 0);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = interval2.contains((org.joda.time.ReadableInterval) interval14);
        boolean boolean27 = interval2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.monthOfYear();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now();
        long long32 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone33);
        boolean boolean35 = dateMidnight31.isAfter((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight31.minusWeeks(4);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.withDayOfWeek(3);
        org.joda.time.Interval interval40 = dateMidnight37.toInterval();
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        boolean boolean42 = interval2.contains((org.joda.time.ReadableInterval) interval40);
        java.lang.String str43 = interval40.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str3, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-01-14T00:00:00.000Z/2022-01-15T00:00:00.000Z" + "'", str43, "2022-01-14T00:00:00.000Z/2022-01-15T00:00:00.000Z");
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime8 = property5.addCopy((long) (short) 10);
        org.joda.time.LocalTime localTime9 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property5.addWrapFieldToCopy(35279);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573297284,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=284,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 284 + "'", int4 == 284);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime8 = dateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime5.toDateTime(chronology13);
        boolean boolean15 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.millis();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 35271, chronology22);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.centuryOfEra();
        int int26 = localDateTime24.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusMillis((int) 'x');
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.dayOfWeek();
        int int31 = localDateTime24.getValue(0);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.DurationField durationField40 = chronology38.weekyears();
        org.joda.time.DurationField durationField41 = chronology38.millis();
        org.joda.time.DurationField durationField42 = chronology38.months();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 70, chronology38);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0L, chronology38);
        int int45 = timeOfDay44.getMinuteOfHour();
        int[] intArray46 = timeOfDay44.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology13.validate((org.joda.time.ReadablePartial) localDateTime24, intArray46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 271 + "'", int26 == 271);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0]");
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property2.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth(19);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 16, chronology20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.Interval interval34 = interval26.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str38 = interval37.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.Interval interval49 = interval41.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay51.toDateTime(timeOfDay52, dateTimeZone53);
        boolean boolean55 = dateTime54.isBeforeNow();
        org.joda.time.DateTime dateTime57 = dateTime54.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour((int) (short) 0);
        boolean boolean60 = interval49.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = interval37.contains((org.joda.time.ReadableInterval) interval49);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Interval interval63 = interval37.withPeriodBeforeEnd(readablePeriod62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval37.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        long long69 = chronology20.add((org.joda.time.ReadablePeriod) period65, 0L, 35271);
        org.joda.time.MutablePeriod mutablePeriod70 = period65.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight4.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone73 = dateMidnight72.getZone();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight72.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime dateTime76 = dateMidnight75.toDateTimeISO();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.yearOfEra();
        org.joda.time.DateMidnight dateMidnight78 = property77.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.withDayOfWeek(1404000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1404000000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str38, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1163943L + "'", long69 == 1163943L);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateMidnight78);
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now();
        long long4 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfYear(49);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfWeek();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.withWeekyear(443);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        int int4 = dateMidnight1.getYear();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight1.toMutableDateTime();
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight.Property property7 = dateMidnight1.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTime(timeOfDay10, dateTimeZone11);
        int int13 = dateTime12.getYearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTime(timeOfDay20, dateTimeZone21);
        boolean boolean23 = dateTime22.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay33 = org.joda.time.YearMonthDay.fromCalendarFields(calendar29);
        calendar29.setFirstDayOfWeek(2022);
        int int37 = calendar29.getMinimum(2);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale45.getDisplayCountry();
        int int48 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str49 = locale45.getDisplayScript();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale45);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone38, locale45);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long54 = dateTimeZone52.previousTransition((long) 8);
        long long56 = dateTimeZone28.getMillisKeepLocal(dateTimeZone52, (long) (byte) 0);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 368, dateTimeZone28);
        long long61 = dateTimeZone28.adjustOffset((long) 93, false);
        org.joda.time.DateTime dateTime62 = dateTime12.withZone(dateTimeZone28);
        java.lang.String str64 = dateTimeZone28.getNameKey(93L);
        org.joda.time.DateTime dateTime65 = dateMidnight1.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime67 = dateTime65.plusMillis(0);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime70 = dateTime65.withDurationAdded(readableDuration68, 522);
        boolean boolean71 = dateTime70.isEqualNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1657878897377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u53f0\u7063" + "'", str47, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573297377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644573297377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 8L + "'", long54 == 8L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 93L + "'", long61 == 93L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(35402140);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(chronology25);
        boolean boolean27 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTime(timeOfDay31, dateTimeZone32);
        boolean boolean34 = dateTime33.isBeforeNow();
        org.joda.time.DateTime dateTime36 = dateTime33.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime33.toDateTime(chronology41);
        boolean boolean43 = durationFieldType28.isSupported(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime26.toDateTime(chronology41);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime26.toMutableDateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Chronology chronology50 = interval48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTime(timeOfDay53, dateTimeZone54);
        boolean boolean56 = dateTime55.isBeforeNow();
        org.joda.time.DateTime dateTime58 = dateTime55.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        org.joda.time.DateTime dateTime64 = dateTime55.toDateTime(chronology63);
        boolean boolean65 = interval48.isAfter((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay(dateTimeZone67);
        org.joda.time.TimeOfDay timeOfDay69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = yearMonthDay68.toDateTime(timeOfDay69, dateTimeZone70);
        boolean boolean72 = dateTime71.isBeforeNow();
        org.joda.time.DateTime dateTime74 = dateTime71.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime78 = interval77.getEnd();
        org.joda.time.Chronology chronology79 = interval77.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime71.toDateTime(chronology79);
        boolean boolean81 = durationFieldType66.isSupported(chronology79);
        org.joda.time.DateTime dateTime82 = dateTime64.toDateTime(chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology79.era();
        org.joda.time.Chronology chronology85 = chronology79.withUTC();
        org.joda.time.DateTime dateTime86 = dateTime26.withChronology(chronology79);
        org.joda.time.DateTimeField dateTimeField87 = chronology79.weekyear();
        org.joda.time.DateTime dateTime88 = org.joda.time.DateTime.now(chronology79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter2.withChronology(chronology79);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(124205, 35402, 918, 35356782);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 124205 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        java.util.Date date5 = new java.util.Date(406, 404, 708, 210, 35326);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 10 06:46:00 UTC 2341");
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.TimeOfDay timeOfDay9 = property6.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusMillis(27279);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withPeriodAdded(readablePeriod1, 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getVariant();
        java.lang.String str18 = dateTimeField14.getAsShortText(3, locale16);
        long long20 = dateTimeField14.roundHalfCeiling((long) 8);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.monthOfYear();
        int int25 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusMinutes(35270);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        int int32 = localDateTime30.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusYears(2022);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        int int38 = localDateTime36.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withMillisOfDay((int) (byte) 100);
        boolean boolean41 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        boolean boolean42 = dateTimeZone7.isLocalDateTimeGap(localDateTime40);
        long long44 = dateTimeZone7.convertUTCToLocal((long) 35331);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withPeriodAdded(readablePeriod46, 0);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.withDurationAdded((long) (short) 100, 22);
        org.joda.time.DateTimeZone dateTimeZone52 = dateMidnight51.getZone();
        boolean boolean53 = dateTimeZone52.isFixed();
        long long55 = dateTimeZone7.getMillisKeepLocal(dateTimeZone52, (-62100742287078L));
        org.joda.time.DateMidnight dateMidnight56 = org.joda.time.DateMidnight.now(dateTimeZone52);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight58 = property57.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight60 = property57.addToCopy(40);
        org.joda.time.DateMidnight dateMidnight61 = property57.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight62 = property57.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "3" + "'", str18, "3");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 35331L + "'", long44 == 35331L);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-62100742287078L) + "'", long55 == (-62100742287078L));
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight62);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.LocalDate localDate39 = dateTime38.toLocalDate();
        org.joda.time.DateTime dateTime40 = localDate39.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property41 = localDate39.dayOfWeek();
        org.joda.time.LocalDate localDate43 = localDate39.withYear(35424157);
        int int44 = localDate39.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.util.Locale locale7 = new java.util.Locale("yearOfEra", "ko");
        java.lang.String str8 = property3.getAsText(locale7);
        java.lang.String str9 = property3.getAsText();
        org.joda.time.DateTimeField dateTimeField10 = property3.getField();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale7.toString(), "yearofera_KO");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "8" + "'", str8, "8");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "8" + "'", str9, "8");
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        int int8 = property6.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay10 = property6.addWrapFieldToCopy(35308956);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusMillis(35385937);
        int int13 = timeOfDay12.size();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(35424157, 35489, 10800043, 35686);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35424157 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        int int8 = dateTime4.getYear();
        org.joda.time.DateTime.Property property9 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(2);
        long long13 = dateTime12.getMillis();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime12.toGregorianCalendar();
        java.util.Date date20 = new java.util.Date(33, 706, 2000, 99, 35298);
        gregorianCalendar14.setTime(date20);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 182);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter28.withZoneUTC();
        boolean boolean30 = gregorianCalendar14.after((java.lang.Object) dateTimeFormatter29);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((java.lang.Object) gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-62100741902425L) + "'", long13 == (-62100741902425L));
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertEquals(date20.toString(), "Tue May 20 15:18:00 UTC 1997");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTime(timeOfDay3, dateTimeZone4);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTime(timeOfDay9, dateTimeZone10);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTime dateTime13 = yearMonthDay8.toDateTimeAtCurrentTime();
        int int14 = property6.compareTo((org.joda.time.ReadablePartial) yearMonthDay8);
        org.joda.time.Chronology chronology15 = yearMonthDay8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.Interval interval27 = interval19.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str31 = interval30.toString();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.Interval interval42 = interval34.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTime(timeOfDay45, dateTimeZone46);
        boolean boolean48 = dateTime47.isBeforeNow();
        org.joda.time.DateTime dateTime50 = dateTime47.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime52 = dateTime50.withMinuteOfHour((int) (short) 0);
        boolean boolean53 = interval42.contains((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean54 = interval30.contains((org.joda.time.ReadableInterval) interval42);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Interval interval56 = interval30.withPeriodBeforeEnd(readablePeriod55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval30.toPeriod(periodType57);
        org.joda.time.Interval interval59 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        long long62 = chronology15.add((org.joda.time.ReadablePeriod) period58, (long) 'a', 4);
        org.joda.time.DurationField durationField63 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField64 = chronology15.centuryOfEra();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(1265932800000L, chronology15);
        org.joda.time.DateTimeField dateTimeField66 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology15.hourOfDay();
        long long69 = dateTimeField67.roundHalfFloor((-62100741600000L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str31, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 229L + "'", long62 == 229L);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-62100741600000L) + "'", long69 == (-62100741600000L));
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay5 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = property6.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar9);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.LocalTime localTime13 = localTime10.withMillisOfDay(0);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours((int) (byte) 1);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) localTime15);
        int int17 = property6.get();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573297617,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=617,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Interval interval10 = interval2.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.Period period12 = interval10.toPeriod();
        org.joda.time.PeriodType periodType13 = period12.getPeriodType();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        int int17 = localTime15.getValue((int) (byte) 0);
        int int18 = localTime15.getMillisOfSecond();
        org.joda.time.LocalTime.Property property19 = localTime15.millisOfDay();
        org.joda.time.DurationField durationField20 = property19.getLeapDurationField();
        org.joda.time.LocalTime localTime22 = property19.addCopy((long) (short) 10);
        org.joda.time.LocalTime localTime23 = property19.withMinimumValue();
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.LocalTime localTime25 = property24.getLocalTime();
        int int26 = localTime25.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        boolean boolean29 = localTime25.isSupported(durationFieldType28);
        int int30 = period12.get(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644573297632,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=632,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 632 + "'", int18 == 632);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.LocalDate localDate3 = yearMonthDay1.toLocalDate();
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate6 = localDate3.withCenturyOfEra(475);
        org.joda.time.ReadablePartial readablePartial7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = localDate3.compareTo(readablePartial7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(3, 22);
        int int4 = calendar0.getMinimalDaysInFirstWeek();
        int int5 = calendar0.getFirstDayOfWeek();
        calendar0.clear();
        calendar0.set(588, 44, 32772);
        java.lang.String str11 = calendar0.getCalendarType();
        calendar0.set(274, 401, 27093, 0, 35577);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        java.util.Date date19 = calendar18.getTime();
        calendar18.setFirstDayOfWeek(32770);
        int int22 = calendar18.getFirstDayOfWeek();
        java.util.TimeZone timeZone23 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        calendar0.setTimeZone(timeZone23);
        java.util.Date date26 = calendar0.getTime();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-50123257380000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=381,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=27,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=16,MINUTE=57,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644573297759,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=32770,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=759,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Fri Feb 11 09:54:57 UTC 2022");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32770 + "'", int22 == 32770);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Aug 27 16:57:00 UTC 381");
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = localTime1.getValue((int) (byte) 0);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime8 = property5.addCopy((long) (short) 10);
        org.joda.time.LocalTime localTime9 = property5.withMinimumValue();
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.getLocalTime();
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573297772,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=772,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 772 + "'", int4 == 772);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withWeekyear(35277);
        int int4 = localDateTime3.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int13 = dateTime9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, 6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(35437666);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35437666 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        java.time.Instant instant2 = date1.toInstant();
        java.util.Date date3 = java.util.Date.from(instant2);
        java.util.Date date4 = java.util.Date.from(instant2);
        date4.setMonth(13);
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date4);
        java.time.Instant instant8 = date4.toInstant();
        java.lang.String str9 = date4.toLocaleString();
        date4.setHours(901);
        long long12 = date4.getTime();
        java.util.Date date18 = new java.util.Date((int) '4', 15, (int) '#', (int) ' ', (int) (byte) 10);
        long long19 = date18.getTime();
        int int20 = date18.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromDateFields(date18);
        long long22 = date18.getTime();
        date18.setDate(35273);
        java.time.Instant instant25 = date18.toInstant();
        int int26 = date18.getMinutes();
        int int27 = date18.getTimezoneOffset();
        int int28 = date18.getDay();
        int int29 = date4.compareTo(date18);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573297804,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=804,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:54:57 UTC 2022");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 09:54:57 UTC 2022");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Mar 20 13:54:57 UTC 2023");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(instant8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e0a\u5348 09:54:57" + "'", str9, "\u4e0a\u5348 09:54:57");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1679320497804L + "'", long12 == 1679320497804L);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Nov 25 08:10:00 UTC 2049");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-525628200000L) + "'", long19 == (-525628200000L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-525628200000L) + "'", long22 == (-525628200000L));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = property3.setCopy(15);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay5.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = chronology10.days();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekyear();
        org.joda.time.LocalDate.Property property6 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        java.util.Locale locale9 = new java.util.Locale("2022-01-11T09:00:50.157Z");
        java.lang.String str10 = property6.getAsShortText(locale9);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals(locale9.toString(), "2022-01-11t09:00:50.157z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "20" + "'", str10, "20");
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = dateTimeField5.getAsShortText(3, locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField5.getType();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        int int15 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFieldAdded(durationFieldType18, (int) (short) 1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.secondOfMinute();
        int int23 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfYear();
        int int25 = localDateTime20.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTime(timeOfDay7, dateTimeZone8);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime12 = dateTime9.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(chronology17);
        boolean boolean19 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone24);
        boolean boolean26 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime28 = dateTime25.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Chronology chronology33 = interval31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(chronology33);
        boolean boolean35 = durationFieldType20.isSupported(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.LocalDate localDate39 = dateTime38.toLocalDate();
        org.joda.time.DateTime dateTime40 = localDate39.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property41 = localDate39.dayOfWeek();
        org.joda.time.LocalDate.Property property42 = localDate39.centuryOfEra();
        org.joda.time.LocalDate localDate43 = property42.roundHalfEvenCopy();
        int int44 = localDate43.getEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusYears(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFieldAdded(durationFieldType7, (int) (short) 1);
        int int10 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.addWrapFieldToCopy(35442692);
        org.joda.time.LocalDateTime localDateTime15 = property11.withMaximumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(44);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTime(timeOfDay15, dateTimeZone16);
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromCalendarFields(calendar24);
        calendar24.setFirstDayOfWeek(2022);
        int int32 = calendar24.getMinimum(2);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Chronology chronology38 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale40.getDisplayCountry();
        int int43 = dateTimeField39.getMaximumTextLength(locale40);
        java.lang.String str44 = locale40.getDisplayScript();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale40);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone33, locale40);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long49 = dateTimeZone47.previousTransition((long) 8);
        long long51 = dateTimeZone23.getMillisKeepLocal(dateTimeZone47, (long) (byte) 0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 35277, dateTimeZone47);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter10.withZone(dateTimeZone47);
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = dateTimeFormatter10.getPrinter();
        java.lang.Integer int56 = dateTimeFormatter10.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 857);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter58.withPivotYear((java.lang.Integer) 715);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = dateTimeFormatter60.parseDateTime("292278993-02-08T09:49:01.733Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u5fb7\u6587" + "'", str8, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1657878897947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u53f0\u7063" + "'", str42, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644573297947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573297947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=57,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 8L + "'", long49 == 8L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(dateTimePrinter55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfCentury(10);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(51);
        java.lang.String str7 = localDate6.toString();
        int int8 = localDate6.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property9 = localDate6.monthOfYear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str13 = interval12.toString();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.Interval interval24 = interval16.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTime(timeOfDay27, dateTimeZone28);
        boolean boolean30 = dateTime29.isBeforeNow();
        org.joda.time.DateTime dateTime32 = dateTime29.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour((int) (short) 0);
        boolean boolean35 = interval24.contains((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean36 = interval12.contains((org.joda.time.ReadableInterval) interval24);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Interval interval38 = interval12.withPeriodBeforeEnd(readablePeriod37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval12.toPeriod(periodType39);
        java.lang.String str41 = period40.toString();
        org.joda.time.LocalDate localDate43 = localDate6.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 0);
        org.joda.time.MutablePeriod mutablePeriod44 = period40.toMutablePeriod();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1959-02-11" + "'", str7, "1959-02-11");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str13, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0.033S" + "'", str41, "PT0.033S");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode5 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4, filteringMode5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet11, filteringMode12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet20, filteringMode21);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet29, filteringMode30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strMap32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Locale locale41 = java.util.Locale.UK;
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        java.lang.String str48 = locale46.getDisplayCountry();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.util.Locale locale53 = new java.util.Locale("");
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Locale locale55 = java.util.Locale.UK;
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale38, locale39, locale40, locale41, locale42, locale44, locale46, locale49, locale53, locale54, locale55, locale56, locale57, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter(languageRangeList33, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList65);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + filteringMode5 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode5.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode12.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode21.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode30.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u5fb7\u6587" + "'", str45, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u53f0\u7063" + "'", str48, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u53f0\u7063" + "'", str51, "\u53f0\u7063");
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode63.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(localeList66);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        int int3 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(2);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusDays(15);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        boolean boolean12 = dateTime10.isEqual((long) 59);
        org.joda.time.DateTime dateTime14 = dateTime10.withCenturyOfEra(35339);
        int int15 = dateTime14.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3533970 + "'", int15 == 3533970);
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration26 = interval25.toDuration();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours((int) (byte) 100);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime36);
        int int40 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology41 = dateTime36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime36.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime36.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTime dateTime6 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime7 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime8 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property9 = dateTime8.monthOfYear();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfCentury(10);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate16 = localDate12.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property17 = localDate16.weekyear();
        org.joda.time.LocalDate localDate19 = property17.setCopy(587);
        int int20 = localDate19.size();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.Interval interval31 = interval23.overlap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) 2, (long) '#');
        java.lang.String str35 = interval34.toString();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.Interval interval46 = interval38.overlap((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay48.toDateTime(timeOfDay49, dateTimeZone50);
        boolean boolean52 = dateTime51.isBeforeNow();
        org.joda.time.DateTime dateTime54 = dateTime51.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime56 = dateTime54.withMinuteOfHour((int) (short) 0);
        boolean boolean57 = interval46.contains((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean58 = interval34.contains((org.joda.time.ReadableInterval) interval46);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Interval interval60 = interval34.withPeriodBeforeEnd(readablePeriod59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval34.toPeriod(periodType61);
        org.joda.time.Interval interval63 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period62);
        org.joda.time.MutablePeriod mutablePeriod64 = period62.toMutablePeriod();
        org.joda.time.LocalDate localDate66 = localDate19.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod64, 2103);
        org.joda.time.DateTime dateTime68 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod64, 327);
        int int69 = dateTime8.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z" + "'", str35, "1970-01-01T00:00:00.002Z/1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYear(871);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(51);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        java.util.Date date16 = calendar15.getTime();
        java.time.Instant instant17 = date16.toInstant();
        java.util.Date date18 = java.util.Date.from(instant17);
        java.util.Date date19 = java.util.Date.from(instant17);
        date19.setMonth(13);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date19);
        org.joda.time.LocalDate localDate24 = localDate22.withCenturyOfEra(574);
        int int25 = localDate22.getYear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = localDateTime12.isEqual((org.joda.time.ReadablePartial) localDate22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573298129,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=58,MILLISECOND=129,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 09:54:58 UTC 2022");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 09:54:58 UTC 2022");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Sat Feb 11 09:54:58 UTC 2023");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2023 + "'", int25 == 2023);
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay14 = property5.withMinimumValue();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = interval17.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.Interval interval25 = interval17.overlap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration26 = interval25.toDuration();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours((int) (byte) 100);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime36);
        int int40 = property5.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay42.toDateTime(timeOfDay43, dateTimeZone44);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = yearMonthDay48.toDateTime(timeOfDay49, dateTimeZone50);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay48.monthOfYear();
        org.joda.time.DateTime dateTime53 = yearMonthDay48.toDateTimeAtCurrentTime();
        int int54 = property46.compareTo((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.Chronology chronology55 = yearMonthDay48.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfHalfday();
        org.joda.time.DurationField durationField57 = chronology55.days();
        org.joda.time.DateTime dateTime58 = dateTime36.toDateTime(chronology55);
        boolean boolean59 = dateTime58.isBeforeNow();
        org.joda.time.DateTime dateTime61 = dateTime58.minusYears(134);
        org.joda.time.DateTime.Property property62 = dateTime58.weekOfWeekyear();
        org.joda.time.DateTime dateTime64 = dateTime58.minusMinutes(35639);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTime(timeOfDay8, dateTimeZone9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay7.monthOfYear();
        org.joda.time.DateTime dateTime12 = yearMonthDay7.toDateTimeAtCurrentTime();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.Chronology chronology14 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        int int18 = dateTimeField15.getMaximumTextLength(locale16);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.year();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.lang.String str28 = locale26.getDisplayCountry();
        int int29 = dateTimeField25.getMaximumTextLength(locale26);
        java.lang.String str30 = locale26.getDisplayScript();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale26);
        java.lang.String str32 = locale26.getScript();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology37 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.lang.String str41 = locale39.getDisplayCountry();
        int int42 = dateTimeField38.getMaximumTextLength(locale39);
        java.lang.String str43 = locale39.getDisplayScript();
        java.lang.String str44 = locale39.getDisplayName();
        java.lang.String str45 = locale26.getDisplayVariant(locale39);
        java.lang.String str46 = dateTimeField15.getAsShortText(5, locale26);
        java.util.Set<java.lang.String> strSet47 = locale26.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u53f0\u7063" + "'", str28, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644573298196,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=58,MILLISECOND=196,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u53f0\u7063" + "'", str41, "\u53f0\u7063");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str44, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "5" + "'", str46, "5");
        org.junit.Assert.assertNotNull(strSet47);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setDate(174, 1918, 0);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 18008);
        java.util.GregorianCalendar gregorianCalendar2 = dateMidnight1.toGregorianCalendar();
        gregorianCalendar2.setFirstDayOfWeek(3533970);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = interval2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.hourOfHalfday();
        long long10 = dateTimeField8.remainder((long) 859);
        org.joda.time.DurationField durationField11 = dateTimeField8.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 859L + "'", long10 == 859L);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(11);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumShortTextLength(locale5);
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay8 = property3.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusHours(35373);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(473);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 35271, chronology5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readableDuration10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDateTime15.getFieldType(315);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 315");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTime(timeOfDay2, dateTimeZone3);
        boolean boolean5 = dateTime4.isBeforeNow();
        org.joda.time.DateTime dateTime7 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime7.getZone();
        int int12 = dateTimeZone10.getStandardOffset((long) 13);
        long long16 = dateTimeZone10.convertLocalToUTC(229L, false, (long) 49);
        int int18 = dateTimeZone10.getOffset(0L);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.Interval interval20 = dateMidnight19.toInterval();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.add(3, 22);
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.DateTime dateTime26 = yearMonthDay25.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTime(timeOfDay29, dateTimeZone30);
        boolean boolean32 = dateTime31.isBeforeNow();
        org.joda.time.DateTime dateTime34 = dateTime31.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTime(timeOfDay40, dateTimeZone41);
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear((int) (byte) 1);
        int int46 = dateTime42.getYear();
        org.joda.time.DateTime.Property property47 = dateTime42.weekyear();
        org.joda.time.DateTime dateTime48 = property47.withMaximumValue();
        org.joda.time.DateTime dateTime50 = dateTime48.withYear(2);
        org.joda.time.LocalDate localDate51 = dateTime50.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int53 = dateTime50.get(dateTimeFieldType52);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTime(timeOfDay61, dateTimeZone62);
        boolean boolean64 = dateTime63.isBeforeNow();
        org.joda.time.DateTime dateTime66 = dateTime63.withMonthOfYear((int) (byte) 1);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 2, (long) '#');
        org.joda.time.DateTime dateTime70 = interval69.getEnd();
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        org.joda.time.DateTime dateTime72 = dateTime63.toDateTime(chronology71);
        boolean boolean73 = interval56.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.LocalDate localDate74 = dateTime72.toLocalDate();
        int int75 = localDate74.getEra();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(dateTimeZone76);
        org.joda.time.TimeOfDay timeOfDay78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = yearMonthDay77.toDateTime(timeOfDay78, dateTimeZone79);
        boolean boolean81 = dateTime80.isBeforeNow();
        org.joda.time.DateTime dateTime83 = dateTime80.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime85 = dateTime83.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime83.getZone();
        org.joda.time.DateTime dateTime87 = localDate74.toDateTimeAtMidnight(dateTimeZone86);
        org.joda.time.DateTime dateTime88 = dateTime50.withZone(dateTimeZone86);
        org.joda.time.DateTime dateTime89 = dateTime36.withZoneRetainFields(dateTimeZone86);
        long long93 = dateTimeZone86.convertLocalToUTC((-62100742323530L), true, (long) 962);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone86);
        org.joda.time.DateTime dateTime95 = dateTime26.withZone(dateTimeZone86);
        boolean boolean96 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime98 = dateTime26.minusDays(35532133);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 229L + "'", long16 == 229L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1657878898307,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=58,MILLISECOND=307,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-62100742323530L) + "'", long93 == (-62100742323530L));
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(dateTime98);
    }
}
